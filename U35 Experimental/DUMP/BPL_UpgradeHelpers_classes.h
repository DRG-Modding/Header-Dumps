// BlueprintGeneratedClass BPL_UpgradeHelpers.BPL_UpgradeHelpers_C
// Size: 0x28 (Inherited: 0x28)
struct UBPL_UpgradeHelpers_C : UBlueprintFunctionLibrary {

	void UPGDESC_ProjectileLauncher(AItem* Item, AFSDPlayerState* Player, enum class EProjectileLauncherBaseUpgradeType upgradeType, UObject* __WorldContext, FGearStatEntry GearStatEntry, bool HasUpgradedValue);
	void UPGDESC_LockOnRifle(AItem* Item, AFSDPlayerState* Player, enum class ELockOnWeaponUpgrades upgradeType, UObject* __WorldContext, FGearStatEntry GearStatEntry, bool HasAnyUpgrades);
	void UPGDESC_GooCannon_Projectile(AItem* Item, AActor* upgradedItem, AFSDPlayerState* Player, enum class EGooGunProjectileUpgrades upgradeType, UObject* __WorldContext, FGearStatEntry GearStatEntry);
	void UPGDESC_DynamicSTE(AActor* Item, AActor* upgradedItem, AFSDPlayerState* Player, enum class EModifyStatusEffectDamageUpgrade upgradeType, UObject* __WorldContext, FGearStatEntry GearStatEntry, bool HasAnyUpgrades);
	void UPGDESC_GooCannon(AItem* Item, AFSDPlayerState* Player, enum class EGooGunUpgrades upgradeType, UObject* __WorldContext, FGearStatEntry GearStatEntry, bool HasAnyUpgrades);
	void FormatStatic(FText Text, float Value, enum class FormatWeaponStatType Format, UObject* __WorldContext, FGearStatEntry GearStatEntry);
	void UPGDESC_DPS(AActor* Item, AActor* upgradedItem, AFSDPlayerState* Player, FText StatName, float Interval, UObject* __WorldContext, FGearStatEntry GearStatEntry, bool HasUpgradedValue);
	void FormatUpgradeToEntry(FText Text, FUpgradeValues UpgradeValues, enum class FormatWeaponStatType StatFormat, enum class FormatPreviewStatusType PreviewFormat, UObject* __WorldContext, FGearStatEntry GearStatEntry, bool HasAnyUpgrades);
	void FormatUpgrade(FUpgradeValues UpgradeValues, enum class FormatWeaponStatType StatFormat, enum class FormatPreviewStatusType PreviewFormat, UObject* __WorldContext, FText BaseText, FText UpgradeText, FText Value, enum class EItemPreviewStatus Format, bool HasAnyUpgrades);
	void UPGDESC_Generic(AFSDPlayerState* Player, AItem* Item, UItemUpgrade* upgradeType, bool UseCustomText, FText Text, UObject* __WorldContext, FGearStatEntry GearStatEntry, bool HasUpgradedValue);
	void UPGDESC_CryoSprayProjectile(AItem* Item, AFSDPlayerState* Player, AProjectile* projectileClass, FText UpgradeText, UObject* __WorldContext, FGearStatEntry GearStatEntry, bool HasUpgradedValue);
	void UPGDESC_DamageBonus_Random(AItem* Item, AFSDPlayerState* Player, UObject* __WorldContext, FGearStatEntry GearStatEntry, bool HasUpgradedValue);
	void UPGDESC_HitCounter(AItem* Item, AFSDPlayerState* Player, UWeaponHitCounterComponent* HitCounterClass, FText Upgrade Text, UObject* __WorldContext, FGearStatEntry GearStatEntry, bool HasUpgradedValue);
	void FormatToPercentageNormalized(float Base Value, float Upgrade Value, float Old Upgrade Value, float Final Value, enum class FormatWeaponStatType FormatType, UObject* __WorldContext, FText Base Text, FText Upgrade Text, FText Value);
	void UPGDESC_AmmoDrivenEx(AItem* Item, AFSDPlayerState* Player, TArray<enum class EAmmoDrivenWeapnUpgradeType> UpgradeTypes, TArray<FGearStatEntry> GearStats, UObject* __WorldContext);
	enum class EItemPreviewStatus FormatPreviewStatus(bool FormatValue, FUpgradeValues UpgradeValues, enum class FormatPreviewStatusType FormatType, UObject* __WorldContext);
	void UPGDESC_DualMPs(AItem* Item, AFSDPlayerState* Player, enum class EDualMachinePistolsUpgrades upgradeType, UObject* __WorldContext, FGearStatEntry GearStatEntry, bool HasUpgradedValue);
	void UPGDESC_SentryGun(AItem* Item, AFSDPlayerState* Player, enum class ESentryGunUpgradeType Upgrade Type, UObject* __WorldContext, FGearStatEntry GearStatEntry, bool Has Upgraded Value);
	void UPGDESC_Detpack(AItem* Item, AFSDPlayerState* PlayerState, enum class EDetPackUpgrades upgradeType, UObject* __WorldContext, FGearStatEntry GearStatEntry, bool HasUpgradedValue);
	void UPGDESC_Flaregun(AItem* Item, AFSDPlayerState* PlayerState, enum class EFlaregunUpgrades upgradeType, UObject* __WorldContext, FGearStatEntry GearStatEntry, bool HasUpgradedValue);
	void UPGDESC_ArmorStat(AFSDPlayerState* Player, AArmorPiece* armorClass, UPawnStat* Stat, FText Text, enum class FormatWeaponStatType Format, UObject* __WorldContext, FGearStatEntry GearStatEntry, bool Changed);
	void UPGDESC_TriggeredStat(AFSDPlayerState* Player, AActor* Item, UStatusEffect* Status Effect, FText Text, enum class ETriggeredStatusEffectType Type, enum class FormatWeaponStatType Format, UObject* __WorldContext, FGearStatEntry gear stat entry, bool is upgraded);
	void UPGDESC_PlatformGun(AItem* Item, AFSDPlayerState* Player, enum class EPlatformGunUpgrades upgradeType, UObject* __WorldContext, FGearStatEntry GearStatEntry, bool Should show text);
	void UPGDESC_Bosco(AActor* upgradedItem, AFSDPlayerState* Player, enum class EBoscoUpgrades upgradeType, UObject* __WorldContext, FGearStatEntry GearStatEntry, bool HasChanged);
	void UPGDESC_CoooldownAggregator(AItem* Item, AFSDPlayerState* Player, UObject* __WorldContext, FGearStatEntry GearStatEntry, bool HasUpgradedValue);
	void UPGDESC_GrapplingHook(AItem* Item, AFSDPlayerState* Player, enum class EGrapplingHookUpgrade upgradeType, UObject* __WorldContext, FGearStatEntry GearStatEntry, bool HasUpgradedValue);
	void UPGDESC_FlaregunProjectile(AItem* Item, AFSDPlayerState* Player, enum class EFlaregunProjectileUpgrades upgradeType, AActor* upgradedActor, UObject* __WorldContext, FGearStatEntry GearStatEntry, bool HasUpgradedValue);
	void UPGDESC_ZiplineGun(AItem* Item, AFSDPlayerState* Player, enum class EZiplineGunUpgrades upgradeType, UObject* __WorldContext, FGearStatEntry GearStatEntry, bool HasUpgradedValue);
	void UPGDESC_Grenades(AGrenade* Item, AFSDPlayerState* Player, enum class EGrenadeUpgradeType upgradeType, UObject* __WorldContext, FGearStatEntry GearStatEntry);
	void UPGDESC_Pickaxe(AItem* Item, AFSDPlayerState* Player, enum class EPickaxeUpgradeType upgradeType, UObject* __WorldContext, FGearStatEntry GearStatEntry, bool HasUpgradedValue);
	void UPGDESC_LineCutterProjectile(AItem* Item, AFSDPlayerState* Player, enum class ELineCutterProjectileUpgradeType upgradeType, UObject* __WorldContext, FGearStatEntry GearStatEntry, bool HasUpgradedValue);
	void UPGDESC_CombatShotgun(AItem* Item, AFSDPlayerState* Player, enum class EAutoShotgunUpgrades upgradeType, UObject* __WorldContext, FGearStatEntry GearStatEntry, bool HasUpgradedValue);
	void UPGDESC_ChargedProjectile(AItem* Item, AFSDPlayerState* Player, enum class EChargedProjectileUpgrades upgradeType, AActor* upgradedActor, UObject* __WorldContext, FGearStatEntry GearStatEntry, bool HasUpgradedValue);
	void UPGDESC_StickyFlame(AItem* Item, AFSDPlayerState* Player, UStatusEffect* StatusEffect, FText Text, UObject* __WorldContext, FGearStatEntry GearStatEntry, bool HasUpgradedValue);
	void UPGDESC_SawedOff(AItem* Item, AFSDPlayerState* Player, enum class ESawedOffShotgunUpgrades upgradeType, UObject* __WorldContext, FGearStatEntry GearStatEntry, bool HasUpgradedValue);
	void UPGDESC_Armor(AFSDPlayerState* Player, AArmorPiece* armorClass, enum class EArmorUpgradeType Armor Upgrade Type, FText Text, enum class FormatWeaponStatType Format, enum class FormatPreviewStatusType PreviewFormat, UObject* __WorldContext, FGearStatEntry GearStatEntry);
	void UPGDESC_BurstWeapon(AItem* Item, AFSDPlayerState* Player, enum class EBurstWeaponUpgrades upgradeType, UObject* __WorldContext, FGearStatEntry GearStatEntry, bool HasUpgradedValue);
	void UPGDESC_DamageBonus_AoEFear(AItem* Item, AFSDPlayerState* Player, FText StatName, UObject* __WorldContext, FGearStatEntry GearStatEntry, bool HasUpgradedValue);
	void UPGDESC_DamageBonus_HotBullets(AItem* Item, AFSDPlayerState* Player, UDamageClass* DamageClass, FText StatName, UObject* __WorldContext, FGearStatEntry GearStatEntry, bool HasUpgradedValue);
	void UPGDESC_BeltDriven(AItem* Item, AFSDPlayerState* Player, enum class EBeltDrivenWeaponUpgrade upgradeType, UObject* __WorldContext, FGearStatEntry GearStatEntry, bool HasUpgradedValue);
	void UPGDESC_AutoCannon(AItem* Item, AFSDPlayerState* Player, enum class EAutoCannonUpgrades upgradeType, UObject* __WorldContext, FGearStatEntry GearStatEntry, bool HasUpgradedValue);
	void FormatValues(FUpgradeValues UpgradeValues, enum class FormatWeaponStatType Format, UObject* __WorldContext, FText BaseText, FText UpgradeText, FText Value);
	void UPGDESC_AssaultRifle(AItem* Item, AFSDPlayerState* Player, enum class EAssaultRifleUpgrade upgradeType, UObject* __WorldContext, FGearStatEntry GearStatEntry, bool HasUpgradedValue);
	void UPGDESC_GatlingGun(AItem* Item, AFSDPlayerState* Player, enum class EGatlingGunUpgrade upgradeType, UObject* __WorldContext, FGearStatEntry GearStatEntry, bool HasUpgradedValue);
	void UPGDESC_ShieldRegenerator(AItem* Item, AFSDPlayerState* Player, enum class EShieldGeneratorUpgrades upgradeType, UObject* __WorldContext, FGearStatEntry GearStatEntry, bool HasUpgradedValue);
	void FormatCmtoM(float Base Value, float Upgrade Value, float Old Upgrade Value, float Final Value, UObject* __WorldContext, FText Base Text, FText Upgrade Text, FText Value);
	void FormatPercentage(float Base Value, float Upgraded Value, float Old Upgraded Value, float Final Value, enum class FormatWeaponStatType Format, UObject* __WorldContext, FText Base Text, FText Upgrade Text, FText Value);
	void UPGDESC_Cryospray(AItem* Item, AFSDPlayerState* Player, enum class ECryoSprayUpgrades upgradeType, UObject* __WorldContext, FGearStatEntry GearStatEntry, bool HasUpgradedValue);
	void UPGDESC_FlameThrower(AItem* Item, AFSDPlayerState* Player, enum class EFlameThrowerUpgradeType upgradeType, UObject* __WorldContext, FGearStatEntry GearStatEntry, bool HasUpgradedValue);
	void UPGDESC_ChargedWeapon(AItem* Item, AFSDPlayerState* Player, enum class EChargedWeaponUpgrades upgradeType, UObject* __WorldContext, FGearStatEntry GearStatEntry, bool HasUpgradedValue);
	void UPGDESC_Projectile(AActor* Item, AActor* upgradedItem, AFSDPlayerState* Player, enum class EProjectileUpgrade upgradeType, UObject* __WorldContext, FGearStatEntry GearStatEntry, bool HasUpgradedValue);
	void UPGDESC_BoltAction(AItem* Item, AFSDPlayerState* Player, enum class EBoltActionRifleUpgrades upgradeType, UObject* __WorldContext, FGearStatEntry GearStatEntry, bool HasUpgradedValue);
	void UPGDESC_DamageBonus_TargetStateBonus(AItem* Item, AFSDPlayerState* Player, FText StatName, enum class ETargetStateDamageBonusType TargetState, UObject* __WorldContext, FGearStatEntry GearStatEntry, bool HasUpgradedValue);
	void UPGDESC_DamageBonus_TargetTypeBonus(AItem* Item, AFSDPlayerState* Player, FText StatName, FName Key, UObject* __WorldContext, FGearStatEntry GearStatEntry, bool HasUpgradedValue);
	void UPGDESC_DamageBonus_StatusBonus(AItem* Item, AFSDPlayerState* Player, UStatusEffect* SstatusEffectIn, FText StatName, UObject* __WorldContext, FGearStatEntry GearStatEntry, bool HasUpgradedValue);
	void UPGDESC_ElectricalSMG(AItem* Item, AFSDPlayerState* Player, enum class EElectricalSMGUpgrades upgradeType, UObject* __WorldContext, FGearStatEntry GearStatEntry, bool HasUpgradedValue);
	void UPGDESC_DamageBonus_Flat(AItem* Item, AFSDPlayerState* Player, UDamageClass* DamageClass, FText StatName, enum class FormatPreviewStatusType FormatType, UObject* __WorldContext, FGearStatEntry GearStatEntry, bool HasUpgradedValue);
	void UPGDESC_DamageBonus_DamageConversion(AItem* Item, AActor* upgradedItem, AFSDPlayerState* Player, UDamageClass* DamageClass, FText StatName, bool OverrideStatType, enum class FormatWeaponStatType StatTypeOverride, UObject* __WorldContext, FGearStatEntry GearStatEntry, bool HasUpgradedValue);
	void UPGDESC_DamageBonus_PushStatus(AActor* Item, AFSDPlayerState* Player, UStatusEffect* StatusEffect, FText StatName, UObject* __WorldContext, FGearStatEntry GearStatEntry, bool HasUpgradedValue);
	void UPGDESC_AmmoDriven(AItem* Item, AFSDPlayerState* Player, enum class EAmmoDrivenWeapnUpgradeType upgradeType, bool OverrideStatType, enum class FormatWeaponStatType StatTypeOverride, UObject* __WorldContext, FGearStatEntry GearStatEntry, bool HasAnyUpgrades);
	void UPGDESC_Damage(AActor* Item, AActor* upgradedItem, AFSDPlayerState* Player, enum class EDamageUpgrade upgradeType, FText Prefix, enum class EDamageComponentType DamageComponentType, UObject* __WorldContext, FGearStatEntry GearStatEntry, bool HasUpgradedValue);
	void UPGDESC_HitScan(AItem* Item, AFSDPlayerState* Player, enum class EHitScanBaseUpgradeType upgradeType, UObject* __WorldContext, FGearStatEntry GearStatEntry, bool HasAnyUpgrades);
	void UPGDESC_SingleUsable_UseDuration(AItem* Item, AActor* subItem, AFSDPlayerState* Player, UObject* __WorldContext, FGearStatEntry GearStatEntry);
	void UPGDESC_Item(AFSDPlayerState* Player, AItem* Item, enum class EInventoryItemUpgradeType upgradeType, UObject* __WorldContext, FGearStatEntry GearStatEntry, bool HasUpgradedValue);
	void UPGDESC_Flare_Base(AFlare* flareClass, AFSDPlayerState* Player, enum class EFlareUpgradeType upgradeType, UObject* __WorldContext, FGearStatEntry GearStatEntry);
	void UPGDESC_Drills(AItem* Item, AFSDPlayerState* Player, enum class EDoubleDrillUpgradeType upgradeType, UObject* __WorldContext, FGearStatEntry GearStatEntry, bool Has Upgraded Value);
	void UPGDESC_Capacity(AActor* upgradedItem, AFSDPlayerState* Player, int32_t componentIndex, UObject* __WorldContext, FGearStatEntry GearStatEntry);
	void UPGDESC_HitScan_Bullets(AItem* Item, AFSDPlayerState* Player, UObject* __WorldContext, FGearStatEntry GearStatEntry, bool HasUpgradedValue);
};

