// BlueprintGeneratedClass ENE_Spider_ExploderTank.ENE_Spider_ExploderTank_C
// Size: 0x570 (Inherited: 0x4b4)
struct AENE_Spider_ExploderTank_C : AENE_SpiderBase_Large_C {
	UPROPERTY(BlueprintReadWrite) FPointerToUberGraphFrame UberGraphFrame; 
	UPROPERTY(BlueprintReadWrite) UWeakpointGlowComponent* WeakpointGlow; 
	UPROPERTY(BlueprintReadWrite) UMeleeAttackComponent* CarveAttack; 
	UPROPERTY(BlueprintReadWrite) UAlignEnemyComponent* AlignEnemy; 
	UPROPERTY(BlueprintReadWrite) UCapsuleComponent* Capsule; 
	UPROPERTY(BlueprintReadWrite) UParticleSystemComponent* P_ExploderTank_CollectingEmbers; 
	UPROPERTY(BlueprintReadWrite) UDamageComponent* DamageDeathExplosion; 
	UPROPERTY(BlueprintReadWrite) UArmorHealthDamageComponent* ArmorHealthDamage; 
	UPROPERTY(BlueprintReadWrite) UBillboardComponent* ExplosionOrigin; 
	UPROPERTY(BlueprintReadWrite) UBillboardComponent* ClusterOrigin; 
	UPROPERTY(BlueprintReadWrite) UDamageComponent* Damage; 
	UPROPERTY(BlueprintReadWrite) USphereComponent* Sphere; 
	UPROPERTY(BlueprintReadWrite) UPointLightComponent* Light_BackBody; 
	UPROPERTY(BlueprintReadWrite) UParticleSystem* ExplosionParticles; 
	UPROPERTY(BlueprintReadWrite) float WeakspotDamageMult; 
	UPROPERTY(BlueprintReadWrite) int32_t NumClusterBombs; 
	UPROPERTY(BlueprintReadWrite) int32_t NumWeakspotsDestroyed; 
	UPROPERTY(BlueprintReadWrite) UParticleSystem* AoeAttackParticles; 
	UPROPERTY(BlueprintReadWrite) bool IsSucking; 
	UPROPERTY(BlueprintReadWrite) UFSDAchievement* CyaDetonatorAchievement; 
	UPROPERTY(BlueprintReadWrite) float PushForce; 
	UPROPERTY(BlueprintReadWrite) AProjectileBase* ClusterProjectileType; 
	UPROPERTY(BlueprintReadWrite) UTerrainMaterial* OvverideBurnedMaterial; 
	UPROPERTY(BlueprintReadWrite) float BurnThickness; 
	UPROPERTY(BlueprintReadWrite) float CarveDiameter; 

	UFUNCTION(BlueprintCallable) void SetupWeakpointGlow();
	UFUNCTION(BlueprintCallable) void MakeCrater();
	UFUNCTION(BlueprintCallable) void Apply Force to Players in Range(TArray<APlayerCharacter*> Array of Players, float Directional Force to Apply);
	UFUNCTION(BlueprintCallable) bool GetIsTargetable();
	UFUNCTION(BlueprintCallable) void GetEnemySpawnedCount(int32_t SpawnCount);
	UFUNCTION(BlueprintCallable) bool ShouldExplode();
	UFUNCTION(BlueprintCallable) void SetAchievementFromServerToAll(UFSDAchievement* AchievementToSet, float Progress);
	UFUNCTION(BlueprintCallable) void OnRep_IsSucking();
	UFUNCTION(BlueprintCallable) float GetDistanceToLocalPlayer();
	UFUNCTION(BlueprintCallable) void DamageAndCarve();
	UFUNCTION(BlueprintCallable) void PlayRumbeAndShake();
	UFUNCTION(BlueprintCallable) void OnRep_Exploded();
	UFUNCTION(BlueprintCallable) void OnMessageAI(FName TriggerName);
	UFUNCTION(BlueprintCallable) void SetRagdollImpulse(UDamageClass* DamageClass, UFSDPhysicalMaterial* PhysMat);
	UFUNCTION(BlueprintCallable) void OnFrozen(AActor* Source);
	UFUNCTION(BlueprintCallable) void OnUnFrozen();
	UFUNCTION(BlueprintCallable) void Play Frozen Death();
	UFUNCTION(BlueprintCallable) void ShootClusterBombs();
	UFUNCTION(BlueprintCallable) void Play Body Death Effects();
	UFUNCTION(BlueprintCallable) void Play Burn Death();
	UFUNCTION(BlueprintCallable) void Spawn Headshot Gibs(enum class Spider_DeathType DeathType);
	UFUNCTION(BlueprintCallable) void Attack(FName nameValue);
	UFUNCTION(BlueprintCallable) void BndEvt__ArmorHealthDamage_K2Node_ComponentBoundEvent_0_AmorPartDestroyedDelegate__DelegateSignature(FName Name);
	UFUNCTION(BlueprintCallable) void ReceiveBeginPlay();
	UFUNCTION(BlueprintCallable) void BndEvt__HealthComponent_K2Node_ComponentBoundEvent_2_BodypartHitSig__DelegateSignature(float amount, float BaseAmount, UPrimitiveComponent* Component, UFSDPhysicalMaterial* PhysMat, FName BoneName);
	UFUNCTION(BlueprintCallable) void BndEvt__HealthComponent_K2Node_ComponentBoundEvent_1_DeathSig__DelegateSignature(UHealthComponentBase* HealthComponent);
	UFUNCTION(BlueprintCallable) void Frozen Explosion();
	UFUNCTION(BlueprintCallable) void MakeElite();
	UFUNCTION(BlueprintCallable) void ExecuteUbergraph_ENE_Spider_ExploderTank(int32_t EntryPoint);
};

