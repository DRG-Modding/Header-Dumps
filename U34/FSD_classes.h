// Class FSD.AcceptInviteBlueprintCallProxy
// Size: 0x88 (Inherited: 0x30)
struct UAcceptInviteBlueprintCallProxy : UOnlineBlueprintCallProxyBase {
	struct FMulticastInlineDelegate OnSuccess; // 0x30(0x10)
	struct FMulticastInlineDelegate OnFailure; // 0x40(0x10)
	struct UObject* WorldContextObject; // 0x50(0x08)
	char UnknownData_58[0x30]; // 0x58(0x30)

	struct UAcceptInviteBlueprintCallProxy* AcceptInvite(struct UObject* WorldContextObject, struct FString ListName, struct FString userId); // Function FSD.AcceptInviteBlueprintCallProxy.AcceptInvite
};

// Class FSD.Objective
// Size: 0x150 (Inherited: 0xb0)
struct UObjective : UActorComponent {
	struct FMulticastInlineDelegate OnObjectiveUpdated; // 0xb0(0x10)
	char UnknownData_C0[0x8]; // 0xc0(0x08)
	struct UObjectiveWidget* ObjectiveWidgetClass; // 0xc8(0x08)
	struct FMissionShouts MissionShouts; // 0xd0(0x38)
	struct FText MissionDescription; // 0x108(0x18)
	int32_t CompletionRewardInCredits; // 0x120(0x04)
	int32_t CompletionRewardInXP; // 0x124(0x04)
	bool ScaleObjectiveToMission; // 0x128(0x01)
	bool RequiredReturnObjectiveCompleted; // 0x129(0x01)
	char UnknownData_12A[0x6]; // 0x12a(0x06)
	struct UMissionStat* ObjectiveCompletedStat; // 0x130(0x08)
	int32_t IsPrimaryObjective; // 0x138(0x04)
	float MissionScale; // 0x13c(0x04)
	struct TArray<struct UBiome*> BannedInBiomes; // 0x140(0x10)

	void SignalObjectiveUpdated(); // Function FSD.Objective.SignalObjectiveUpdated
	void Receive_StartTracking(); // Function FSD.Objective.Receive_StartTracking
	void OnRep_IsPrimaryObjective(); // Function FSD.Objective.OnRep_IsPrimaryObjective
	bool IsTutorialObjective(); // Function FSD.Objective.IsTutorialObjective
	bool IsPrimary(); // Function FSD.Objective.IsPrimary
	bool IsObjectiveResource(struct UResourceData* InResource); // Function FSD.Objective.IsObjectiveResource
	bool IsFinalBattle(); // Function FSD.Objective.IsFinalBattle
	bool IsCompleted(); // Function FSD.Objective.IsCompleted
	bool HasReplicated(); // Function FSD.Objective.HasReplicated
	struct UObjectiveWidget* GetWidgetClassOrDefault(struct UObjectiveWidget* DefaultWidgetClass); // Function FSD.Objective.GetWidgetClassOrDefault
	int32_t GetRewardXP(); // Function FSD.Objective.GetRewardXP
	struct FCreditsReward GetRewardCredits(); // Function FSD.Objective.GetRewardCredits
	struct UOptionalObjectiveWidget* GetOptionalMissionWidget(); // Function FSD.Objective.GetOptionalMissionWidget
	struct FText GetObjectiveText(); // Function FSD.Objective.GetObjectiveText
	struct FObjectiveMissionIcon GetObjectiveMissionIconFromClass(struct UObjective* objectiveClass); // Function FSD.Objective.GetObjectiveMissionIconFromClass
	struct UTexture2D* GetObjectiveIconFromClass(struct UObjective* objectiveClass); // Function FSD.Objective.GetObjectiveIconFromClass
	struct UTexture2D* GetObjectiveIcon(); // Function FSD.Objective.GetObjectiveIcon
	struct FText GetObjectiveDescriptionFromClass(struct UObjective* objectiveClass, float missionLength); // Function FSD.Objective.GetObjectiveDescriptionFromClass
	struct FText GetObjectiveDescription(float missionLength); // Function FSD.Objective.GetObjectiveDescription
	int32_t GetObjectiveAmountFromClass(struct UObjective* objectiveClass, float missionLength); // Function FSD.Objective.GetObjectiveAmountFromClass
	int32_t GetObjectiveAmount(float missionLength); // Function FSD.Objective.GetObjectiveAmount
	struct FObjectiveMissionIcon GetMissionIcon(); // Function FSD.Objective.GetMissionIcon
	struct FText GetInMissionText(); // Function FSD.Objective.GetInMissionText
	struct FText GetInMissionCounterText(); // Function FSD.Objective.GetInMissionCounterText
	struct UTexture2D* GetInMissionCounterIcon(); // Function FSD.Objective.GetInMissionCounterIcon
};

// Class FSD.ActivationOjective
// Size: 0x158 (Inherited: 0x150)
struct UActivationOjective : UObjective {
	int32_t ObjectivesFound; // 0x150(0x04)
	int32_t ObjectivesToFind; // 0x154(0x04)

	void OnRep_ObjectivesToFind(int32_t prevAmount); // Function FSD.ActivationOjective.OnRep_ObjectivesToFind
	void OnRep_ObjectivesFound(int32_t prevAmount); // Function FSD.ActivationOjective.OnRep_ObjectivesFound
};

// Class FSD.ActivationObject
// Size: 0x230 (Inherited: 0x220)
struct AActivationObject : AActor {
	struct USingleUsableComponent* Usable; // 0x220(0x08)
	bool HasBeenUsed; // 0x228(0x01)
	char UnknownData_229[0x7]; // 0x229(0x07)

	void OnUsedBy(struct APlayerCharacter* User); // Function FSD.ActivationObject.OnUsedBy
};

// Class FSD.ActorFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct UActorFunctionLibrary : UBlueprintFunctionLibrary {

	void UnlockSpecificCharacters(struct UObject* WorldContextObject, struct TArray<struct APlayerCharacter*> Characters, enum class ECharacterState UnlockIf, enum class ECharacterState UnlockTo); // Function FSD.ActorFunctionLibrary.UnlockSpecificCharacters
	void UnlockCharacters(struct UObject* WorldContextObject); // Function FSD.ActorFunctionLibrary.UnlockCharacters
	float TimeSince(struct UObject* WorldContextObject, float Time); // Function FSD.ActorFunctionLibrary.TimeSince
	void SetScalarParameters(struct FName ParameterName, float Value, struct TArray<struct UMaterialInstanceDynamic*> Materials); // Function FSD.ActorFunctionLibrary.SetScalarParameters
	void PlayCueOnClient(struct APlayerController* Target, struct USoundCue* cue); // Function FSD.ActorFunctionLibrary.PlayCueOnClient
	void PlayCueOnAll(struct UObject* WorldContextObject, struct USoundCue* cue); // Function FSD.ActorFunctionLibrary.PlayCueOnAll
	float PingPong(float Time, float Length, bool normalize); // Function FSD.ActorFunctionLibrary.PingPong
	float MoveTowards(float current, float End, float step); // Function FSD.ActorFunctionLibrary.MoveTowards
	void LockSpecificCharactersIfState(struct UObject* WorldContextObject, struct TArray<struct APlayerCharacter*> Characters, enum class ECharacterState stateToLock); // Function FSD.ActorFunctionLibrary.LockSpecificCharactersIfState
	void LockSpecificCharacters(struct UObject* WorldContextObject, struct TArray<struct APlayerCharacter*> Characters); // Function FSD.ActorFunctionLibrary.LockSpecificCharacters
	bool LockSpecificCharacterIfState(struct UObject* WorldContextObject, struct APlayerCharacter* Character, enum class ECharacterState LockIf, enum class ECharacterState LockTo); // Function FSD.ActorFunctionLibrary.LockSpecificCharacterIfState
	void LockCharacters(struct UObject* WorldContextObject); // Function FSD.ActorFunctionLibrary.LockCharacters
	struct UWindowWidget* LoadWindowWidgetClass(SoftClassProperty WidgetClass); // Function FSD.ActorFunctionLibrary.LoadWindowWidgetClass
	struct UUserWidget* LoadWidgetClass(SoftClassProperty WidgetClass); // Function FSD.ActorFunctionLibrary.LoadWidgetClass
	struct UObject* LoadClass(SoftClassProperty softReference); // Function FSD.ActorFunctionLibrary.LoadClass
	void KillActorWithEffects(struct AActor* Actor, struct USceneComponent* visualsToHide, struct USoundCue* deathSound, struct UFXSystemAsset* deathParticles, float particleScale, struct UPathfinderCollisionComponent* pathColliderToDisable); // Function FSD.ActorFunctionLibrary.KillActorWithEffects
	bool IsWeakPoint(struct UFSDPhysicalMaterial* Material); // Function FSD.ActorFunctionLibrary.IsWeakPoint
	bool IsSingleplayer(struct UObject* WorldContextObject); // Function FSD.ActorFunctionLibrary.IsSingleplayer
	bool IsInRangeOfLocalPlayer(struct AActor* toActor, float MinDistance, float MaxDistance); // Function FSD.ActorFunctionLibrary.IsInRangeOfLocalPlayer
	bool IsCloseToLocalPlayer(struct AActor* toActor, float Distance); // Function FSD.ActorFunctionLibrary.IsCloseToLocalPlayer
	int32_t GetTotalHeroLevels(struct UObject* WorldContextObject, struct UPlayerCharacterID* characterID); // Function FSD.ActorFunctionLibrary.GetTotalHeroLevels
	struct FGuid GetSaveGameIDFromCharacterID(struct UPlayerCharacterID* characterID); // Function FSD.ActorFunctionLibrary.GetSaveGameIDFromCharacterID
	struct FGuid GetSavegameID(struct UObject* objectClass); // Function FSD.ActorFunctionLibrary.GetSavegameID
	struct TArray<struct APlayerCharacter*> GetPlayersInRange(struct UObject* WorldContextObject, struct FVector Origin, float Radius, bool MustBeAlive); // Function FSD.ActorFunctionLibrary.GetPlayersInRange
	int32_t GetPlayerCount(struct UObject* WorldContextObject); // Function FSD.ActorFunctionLibrary.GetPlayerCount
	struct UItemID* GetItemID(struct AActor* itemClass); // Function FSD.ActorFunctionLibrary.GetItemID
	float GetHeroXP(struct UObject* WorldContextObject, struct UPlayerCharacterID* characterID); // Function FSD.ActorFunctionLibrary.GetHeroXP
	struct FText GetHeroSwitchToMessage(struct APlayerCharacter* playerClass); // Function FSD.ActorFunctionLibrary.GetHeroSwitchToMessage
	struct FString GetHeroSourceName(struct APlayerCharacter* playerClass); // Function FSD.ActorFunctionLibrary.GetHeroSourceName
	float GetHeroProgress(struct UObject* WorldContextObject, struct UPlayerCharacterID* characterID); // Function FSD.ActorFunctionLibrary.GetHeroProgress
	struct FText GetHeroName(struct APlayerCharacter* playerClass); // Function FSD.ActorFunctionLibrary.GetHeroName
	int32_t GetHeroLevel(struct UObject* WorldContextObject, struct UPlayerCharacterID* characterID); // Function FSD.ActorFunctionLibrary.GetHeroLevel
	struct UInventoryList* GetHeroInventoryList(struct UPlayerCharacterID* characterID); // Function FSD.ActorFunctionLibrary.GetHeroInventoryList
	struct FHeroInfo GetHeroInfo(struct APlayerCharacter* playerClass); // Function FSD.ActorFunctionLibrary.GetHeroInfo
	struct UTexture2D* GetHeroImageSmall(struct APlayerCharacter* playerClass); // Function FSD.ActorFunctionLibrary.GetHeroImageSmall
	struct UTexture2D* GetHeroImageFullSize(struct APlayerCharacter* playerClass); // Function FSD.ActorFunctionLibrary.GetHeroImageFullSize
	struct UTexture2D* GetHeroImage(struct APlayerCharacter* playerClass); // Function FSD.ActorFunctionLibrary.GetHeroImage
	struct FLinearColor GetHeroColor(struct APlayerCharacter* playerClass); // Function FSD.ActorFunctionLibrary.GetHeroColor
	struct UActorComponent* GetComponentFromClass(struct AActor* Actor, struct UActorComponent* ComponentClass); // Function FSD.ActorFunctionLibrary.GetComponentFromClass
	struct UActorComponent* GetComponentByClass(struct AActor* Actor, struct UActorComponent* ComponentClass); // Function FSD.ActorFunctionLibrary.GetComponentByClass
	struct UPlayerCharacterID* GetCharacterIDFromCharacter(struct APlayerCharacter* Character); // Function FSD.ActorFunctionLibrary.GetCharacterIDFromCharacter
	struct UPlayerCharacterID* GetCharacterID(struct APlayerCharacter* playerClass); // Function FSD.ActorFunctionLibrary.GetCharacterID
	struct TArray<struct APlayerCharacter*> GetAllPlayerCharacters(struct UObject* WorldContext); // Function FSD.ActorFunctionLibrary.GetAllPlayerCharacters
	struct FVector GetActorTargetCenter(struct AActor* TargetActor); // Function FSD.ActorFunctionLibrary.GetActorTargetCenter
	void FSDRemoveBlendable(struct UPostProcessComponent* PostProcessComponent, struct TScriptInterface<None> InBlendableObject); // Function FSD.ActorFunctionLibrary.FSDRemoveBlendable
	void FSDRemoveAllWidgets(struct UObject* WorldContextObject); // Function FSD.ActorFunctionLibrary.FSDRemoveAllWidgets
	void FSDDumpCallStack(struct FString Msg); // Function FSD.ActorFunctionLibrary.FSDDumpCallStack
	struct APlayerCharacter* FindNearestPlayerCharacter(struct UObject* WorldContextObject, struct FVector fromLocation, float MaxRadius, bool MustBeAlive, bool MustBeUnparalyzed, bool MustHaveLineOfSight); // Function FSD.ActorFunctionLibrary.FindNearestPlayerCharacter
	struct FVector FindLatejoinDroppodLocation(struct AFSDGameMode* GameMode); // Function FSD.ActorFunctionLibrary.FindLatejoinDroppodLocation
	struct AActor* FindClosestEnemyFromLocation(struct FVector fromLocation, float Range, bool LineOfSightCheck, struct UObject* WorldContextObject, struct FVector Offset); // Function FSD.ActorFunctionLibrary.FindClosestEnemyFromLocation
	struct AActor* FindClosestEnemyFromActor(struct AActor* FromActor, float Range, bool LineOfSightCheck, struct FGameplayTagQuery tagQuery, struct FVector Offset); // Function FSD.ActorFunctionLibrary.FindClosestEnemyFromActor
	void FadeMaterials(struct UObject* WorldContextObject, struct UMeshComponent* Mesh, float Duration); // Function FSD.ActorFunctionLibrary.FadeMaterials
	float EvaluateRuntimeCurve(struct UObject* WorldContextObject, struct FRuntimeFloatCurve Curve, float Time); // Function FSD.ActorFunctionLibrary.EvaluateRuntimeCurve
	void DamagePlayersInArea(struct FVector Origin, struct AActor* Instigator, float Damage, float Radius, struct UDamageClass* DamageClass); // Function FSD.ActorFunctionLibrary.DamagePlayersInArea
	struct UHealthComponentBase* DamageIfInRange(float MaxDistance, float Damage, struct AActor* Target, struct AActor* Attacker, struct UDamageClass* DamageClass); // Function FSD.ActorFunctionLibrary.DamageIfInRange
	void DamageAllInAreaExcept(struct FVector Origin, struct AActor* Instigator, float Damage, float BlastRadius, float MaxDamageRadius, float minDamagePercent, struct TArray<struct AActor*> IgnoreActors, float friendlyFireModifier, struct UDamageClass* DamageClass); // Function FSD.ActorFunctionLibrary.DamageAllInAreaExcept
	void DamageAllInArea(struct FVector Origin, struct AActor* Instigator, float Damage, float BlastRadius, float MaxDamageRadius, float minDamagePercent, float friendlyFireModifier, struct UDamageClass* DamageClass); // Function FSD.ActorFunctionLibrary.DamageAllInArea
	struct TArray<struct UMaterialInstanceDynamic*> CreateDynamicMaterialInstances(struct UMeshComponent* Mesh); // Function FSD.ActorFunctionLibrary.CreateDynamicMaterialInstances
	float AddHeroXP(struct UObject* WorldContextObject, struct UPlayerCharacterID* characterID, float amount); // Function FSD.ActorFunctionLibrary.AddHeroXP
	void AddEnemyKill(struct APlayerCharacter* Instigator, struct UEnemyComponent* EnemyComponent, struct AFSDGameState* GameState); // Function FSD.ActorFunctionLibrary.AddEnemyKill
	bool ActorMatchesTagQuery(struct FGameplayTagQuery Query, struct AActor* InActor); // Function FSD.ActorFunctionLibrary.ActorMatchesTagQuery
};

// Class FSD.StatusEffectsFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct UStatusEffectsFunctionLibrary : UBlueprintFunctionLibrary {

	float GetMaxResistance(struct UStatusEffect* StatusEffect); // Function FSD.StatusEffectsFunctionLibrary.GetMaxResistance
	struct UDamageClass* GetDamageClass(struct UStatusEffect* StatusEffect); // Function FSD.StatusEffectsFunctionLibrary.GetDamageClass
	bool CanTrigger(struct UStatusEffect* StatusEffect, struct AActor* OtherActor); // Function FSD.StatusEffectsFunctionLibrary.CanTrigger
};

// Class FSD.FrontendBlueprintLibrary
// Size: 0x28 (Inherited: 0x28)
struct UFrontendBlueprintLibrary : UBlueprintFunctionLibrary {

	void OpenURLInExternalBrowser(struct FString URL); // Function FSD.FrontendBlueprintLibrary.OpenURLInExternalBrowser
	bool IsShippingBuild(); // Function FSD.FrontendBlueprintLibrary.IsShippingBuild
	enum class EFSDTargetPlatform FSDTargetPlatform(); // Function FSD.FrontendBlueprintLibrary.FSDTargetPlatform
};

// Class FSD.GameModeFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct UGameModeFunctionLibrary : UBlueprintFunctionLibrary {

	struct FTransform FindRandomEscapePodLocation(struct UObject* WorldContextObject); // Function FSD.GameModeFunctionLibrary.FindRandomEscapePodLocation
	struct FTransform FindEscapePodLocationAtDistance(struct UObject* WorldContextObject, float Distance, float aboveDistanceBias, struct AActor* optionalFrom); // Function FSD.GameModeFunctionLibrary.FindEscapePodLocationAtDistance
};

// Class FSD.FSDConversionLibrary
// Size: 0x28 (Inherited: 0x28)
struct UFSDConversionLibrary : UBlueprintFunctionLibrary {

	struct FVector_NetQuantizeNormal VectorToNetQuantizeNormal(struct FVector Vec); // Function FSD.FSDConversionLibrary.VectorToNetQuantizeNormal
	struct FVector_NetQuantize VectorToNetQuantize(struct FVector Vec); // Function FSD.FSDConversionLibrary.VectorToNetQuantize
	struct FVector QuatToVector(struct FQuat Quat); // Function FSD.FSDConversionLibrary.QuatToVector
	struct FRotator QuatToRotator(struct FQuat Quat); // Function FSD.FSDConversionLibrary.QuatToRotator
	struct FVector_NetQuantizeNormal QuadToNetQuantizeNormal(struct FQuat Quat); // Function FSD.FSDConversionLibrary.QuadToNetQuantizeNormal
	struct FVector ComponentToWorldLocation(struct USceneComponent* Component); // Function FSD.FSDConversionLibrary.ComponentToWorldLocation
	struct FVector ActorToWorldLocation(struct AActor* Actor); // Function FSD.FSDConversionLibrary.ActorToWorldLocation
};

// Class FSD.ActorStateComponent
// Size: 0x100 (Inherited: 0xb0)
struct UActorStateComponent : UActorComponent {
	struct FMulticastInlineDelegate OnBeginState; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnTickState; // 0xc0(0x10)
	struct FMulticastInlineDelegate OnEndState; // 0xd0(0x10)
	struct UActorStateComponent* CurrentState; // 0xe0(0x08)
	struct UActorStateComponent* NextState; // 0xe8(0x08)
	struct UActorStateComponent* MasterState; // 0xf0(0x08)
	float StateActiveTime; // 0xf8(0x04)
	char UnknownData_FC[0x4]; // 0xfc(0x04)

	void OnRep_CurrentState(struct UActorStateComponent* PreviousState); // Function FSD.ActorStateComponent.OnRep_CurrentState
	bool IsStateActive(); // Function FSD.ActorStateComponent.IsStateActive
	void GotoState(); // Function FSD.ActorStateComponent.GotoState
};

// Class FSD.FSDUserWidget
// Size: 0x250 (Inherited: 0x230)
struct UFSDUserWidget : UUserWidget {
	struct FMulticastInlineDelegate OnVisibilityChanged; // 0x230(0x10)
	char UnknownData_240[0x8]; // 0x240(0x08)
	struct APlayerCharacter* Character; // 0x248(0x08)

	void SetOpacity(float alpha); // Function FSD.FSDUserWidget.SetOpacity
	void ScaleByBaseResolution(); // Function FSD.FSDUserWidget.ScaleByBaseResolution
	void Refresh(); // Function FSD.FSDUserWidget.Refresh
	void ReceiveNewVisibility(enum class ESlateVisibility NewVisibility); // Function FSD.FSDUserWidget.ReceiveNewVisibility
	void OnCloseMenuReleased(bool Handled); // Function FSD.FSDUserWidget.OnCloseMenuReleased
	void OnCloseMenuPressed(bool Handled); // Function FSD.FSDUserWidget.OnCloseMenuPressed
	bool HasCharacter(); // Function FSD.FSDUserWidget.HasCharacter
	float GetOpacity(); // Function FSD.FSDUserWidget.GetOpacity
	struct AFSDPlayerState* GetFSDPlayerState(); // Function FSD.FSDUserWidget.GetFSDPlayerState
	struct AItem* GetEquippedItem(); // Function FSD.FSDUserWidget.GetEquippedItem
	float GetBaseResolutionScale(); // Function FSD.FSDUserWidget.GetBaseResolutionScale
	void BP_OnRefresh(); // Function FSD.FSDUserWidget.BP_OnRefresh
};

// Class FSD.ActorTrackingWidget
// Size: 0x278 (Inherited: 0x250)
struct UActorTrackingWidget : UFSDUserWidget {
	struct FWeakObjectPtr<struct USceneComponent> TargetComponent; // 0x250(0x08)
	float WorldHeightOffset; // 0x258(0x04)
	float ScaleBy; // 0x25c(0x04)
	struct FMargin ScreenMargin; // 0x260(0x10)
	int32_t WidgetZOrder; // 0x270(0x04)
	bool bTrackCenterOfMass; // 0x274(0x01)
	char UnknownData_275[0x3]; // 0x275(0x03)

	void SetTargetComponent(struct USceneComponent* Component); // Function FSD.ActorTrackingWidget.SetTargetComponent
	void SetTarget(struct AActor* Actor); // Function FSD.ActorTrackingWidget.SetTarget
	void OnTargetSet(struct AActor* NewTarget); // Function FSD.ActorTrackingWidget.OnTargetSet
	void OnTargetDistanceChanged(float Distance); // Function FSD.ActorTrackingWidget.OnTargetDistanceChanged
	void OnShow(); // Function FSD.ActorTrackingWidget.OnShow
	void OnInViewChanged(bool inView, float Angle); // Function FSD.ActorTrackingWidget.OnInViewChanged
	struct AActor* GetTarget(); // Function FSD.ActorTrackingWidget.GetTarget
	struct FVector2D GetRenderTranslation(); // Function FSD.ActorTrackingWidget.GetRenderTranslation
	bool FindScreenPosition(struct APlayerController* PlayerController, struct FVector WorldLocation, struct FMargin Margin, struct FVector ScreenCord, float Angle); // Function FSD.ActorTrackingWidget.FindScreenPosition
	struct UActorTrackingWidget* CreateTrackingWidget(struct APlayerController* PlayerController, struct UActorTrackingWidget* WidgetType, struct USceneComponent* TargetComponent); // Function FSD.ActorTrackingWidget.CreateTrackingWidget
};

// Class FSD.ActorTrackingComponent
// Size: 0x210 (Inherited: 0x1f0)
struct UActorTrackingComponent : USceneComponent {
	struct UActorTrackingWidget* WidgetType; // 0x1f0(0x08)
	bool VisibleOnHoldTAB; // 0x1f8(0x01)
	bool VisibleFromStart; // 0x1f9(0x01)
	bool bIconHidden; // 0x1fa(0x01)
	char UnknownData_1FB[0x1]; // 0x1fb(0x01)
	struct FWeakObjectPtr<struct UActorTrackingWidget> Widget; // 0x1fc(0x08)
	char UnknownData_204[0xc]; // 0x204(0x0c)

	void ToggleIcon(bool Visible); // Function FSD.ActorTrackingComponent.ToggleIcon
	void OnHoldTAB(bool IsDown); // Function FSD.ActorTrackingComponent.OnHoldTAB
	bool IsIconVisible(); // Function FSD.ActorTrackingComponent.IsIconVisible
};

// Class FSD.AdicPuddle
// Size: 0x248 (Inherited: 0x220)
struct AAdicPuddle : AActor {
	struct USphereComponent* SphereTrigger; // 0x220(0x08)
	struct USoundBase* SpawnSound; // 0x228(0x08)
	struct UStatusEffect* InflictedStatusEffect; // 0x230(0x08)
	char UnknownData_238[0x8]; // 0x238(0x08)
	float LifeTime; // 0x240(0x04)
	char UnknownData_244[0x4]; // 0x244(0x04)

	void OnPuddleEndOverLap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function FSD.AdicPuddle.OnPuddleEndOverLap
	void OnPuddleBeginOverLap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult SweepResult); // Function FSD.AdicPuddle.OnPuddleBeginOverLap
};

// Class FSD.AdventureObjective
// Size: 0x150 (Inherited: 0x150)
struct UAdventureObjective : UObjective {
};

// Class FSD.AfflictionEffect
// Size: 0x28 (Inherited: 0x28)
struct UAfflictionEffect : UObject {

	bool ShouldInstantiate(); // Function FSD.AfflictionEffect.ShouldInstantiate
	void ReceiveEndEffect(struct UPawnAfflictionComponent* Target); // Function FSD.AfflictionEffect.ReceiveEndEffect
	void ReceiveBeginEffect(struct UPawnAfflictionComponent* Target); // Function FSD.AfflictionEffect.ReceiveBeginEffect
};

// Class FSD.PawnFrozenUniqueAfflictionEffect
// Size: 0x28 (Inherited: 0x28)
struct UPawnFrozenUniqueAfflictionEffect : UAfflictionEffect {
};

// Class FSD.PawnBurningUniqueAfflictionEffect
// Size: 0x28 (Inherited: 0x28)
struct UPawnBurningUniqueAfflictionEffect : UAfflictionEffect {
};

// Class FSD.SpawnAtLocationParticleAfflictionEffect
// Size: 0x38 (Inherited: 0x28)
struct USpawnAtLocationParticleAfflictionEffect : UAfflictionEffect {
	struct FScaledEffect ScaledParticleEffect; // 0x28(0x10)
};

// Class FSD.AttachedParticlesAfflictionEffect
// Size: 0x48 (Inherited: 0x28)
struct UAttachedParticlesAfflictionEffect : UAfflictionEffect {
	struct UFXSystemAsset* ParticleEffect; // 0x28(0x08)
	struct TArray<struct UFXSystemAsset*> ParticleEffects; // 0x30(0x10)
	enum class EAfflictionSocket Socket; // 0x40(0x01)
	bool ScaleToActor; // 0x41(0x01)
	bool UseVisibilityHack; // 0x42(0x01)
	char UnknownData_43[0x5]; // 0x43(0x05)
};

// Class FSD.CharacterShoutAfflictionEffect
// Size: 0x30 (Inherited: 0x28)
struct UCharacterShoutAfflictionEffect : UAfflictionEffect {
	struct UDialogDataAsset* Shout; // 0x28(0x08)
};

// Class FSD.CameraParticleAfflictionEffect
// Size: 0x30 (Inherited: 0x28)
struct UCameraParticleAfflictionEffect : UAfflictionEffect {
	struct UParticleSystem* ParticleEffect; // 0x28(0x08)
};

// Class FSD.ShieldLinkedAfflictionEffect
// Size: 0x28 (Inherited: 0x28)
struct UShieldLinkedAfflictionEffect : UAfflictionEffect {
};

// Class FSD.SoundAfflictionEffect
// Size: 0x48 (Inherited: 0x28)
struct USoundAfflictionEffect : UAfflictionEffect {
	struct USoundCue* BeginSound; // 0x28(0x08)
	struct USoundCue* EndSound; // 0x30(0x08)
	bool Attach; // 0x38(0x01)
	char UnknownData_39[0x3]; // 0x39(0x03)
	struct FName AttachBone; // 0x3c(0x08)
	float FadeOnLoopEndDuration; // 0x44(0x04)
};

// Class FSD.AttachMeshesAfflictionEffect
// Size: 0x40 (Inherited: 0x28)
struct UAttachMeshesAfflictionEffect : UAfflictionEffect {
	struct TArray<struct FAttachMeshesAfflictionItem> AttachItems; // 0x28(0x10)
	struct UParticleSystem* OnRemoveEffect; // 0x38(0x08)
};

// Class FSD.FrozenAfflictionEffect
// Size: 0x58 (Inherited: 0x28)
struct UFrozenAfflictionEffect : UAfflictionEffect {
	struct TArray<struct FFrozenAfflictionItem> IceParts; // 0x28(0x10)
	struct UMaterialInterface* MaterialOverride; // 0x38(0x08)
	struct FName ParticleBone; // 0x40(0x08)
	struct TArray<struct UMaterialInterface*> IceMaterials; // 0x48(0x10)
};

// Class FSD.BurningAfflictionEffect
// Size: 0x30 (Inherited: 0x28)
struct UBurningAfflictionEffect : UAfflictionEffect {
	enum class EFrozenBitsSize FireParticleSize; // 0x28(0x01)
	char UnknownData_29[0x7]; // 0x29(0x07)
};

// Class FSD.StaggeredAfflictionEffect
// Size: 0x30 (Inherited: 0x28)
struct UStaggeredAfflictionEffect : UAfflictionEffect {
	float StaggerStrength; // 0x28(0x04)
	char UnknownData_2C[0x4]; // 0x2c(0x04)
};

// Class FSD.BoneParticlesAfflictionEffect
// Size: 0x40 (Inherited: 0x28)
struct UBoneParticlesAfflictionEffect : UAfflictionEffect {
	struct TArray<struct UParticleSystem*> Particles; // 0x28(0x10)
	struct USoundCue* Sound; // 0x38(0x08)
};

// Class FSD.AnimatedItemParticleAfflictionEffect
// Size: 0x40 (Inherited: 0x28)
struct UAnimatedItemParticleAfflictionEffect : UAfflictionEffect {
	enum class EItemCategory ItemCategory; // 0x28(0x01)
	char UnknownData_29[0x7]; // 0x29(0x07)
	struct UParticleSystem* ParticleEffect; // 0x30(0x08)
	struct FName Socket; // 0x38(0x08)
};

// Class FSD.PlayerCharacterMontageAfflictionEffect
// Size: 0x50 (Inherited: 0x28)
struct UPlayerCharacterMontageAfflictionEffect : UAfflictionEffect {
	struct UAnimMontage* FP_Montage; // 0x28(0x08)
	struct UAnimMontage* TP_Montage; // 0x30(0x08)
	float BlendOut; // 0x38(0x04)
	char UnknownData_3C[0x4]; // 0x3c(0x04)
	struct TArray<struct FName> RandomStarts; // 0x40(0x10)
};

// Class FSD.EnemySkinAfflictionEffect
// Size: 0x38 (Inherited: 0x28)
struct UEnemySkinAfflictionEffect : UAfflictionEffect {
	struct TArray<struct UMaterialInterface*> NewMaterials; // 0x28(0x10)
};

// Class FSD.EnemyScaleAfflictionEffect
// Size: 0x30 (Inherited: 0x28)
struct UEnemyScaleAfflictionEffect : UAfflictionEffect {
	float Scale; // 0x28(0x04)
	bool RevertOnEndEffect; // 0x2c(0x01)
	char UnknownData_2D[0x3]; // 0x2d(0x03)
};

// Class FSD.HeroEnemyAfflictionEffect
// Size: 0x30 (Inherited: 0x28)
struct UHeroEnemyAfflictionEffect : UAfflictionEffect {
	struct FGameplayTag TagToAdd; // 0x28(0x08)
};

// Class FSD.FSDPawn
// Size: 0x2e8 (Inherited: 0x280)
struct AFSDPawn : APawn {
	char UnknownData_280[0x10]; // 0x280(0x10)
	struct FMulticastInlineDelegate OnFrozenEvent; // 0x290(0x10)
	struct UStatusEffectsComponent* StatusEffects; // 0x2a0(0x08)
	struct UEnemyTemperatureComponent* Temperature; // 0x2a8(0x08)
	struct FGameplayTagContainer GameplayTags; // 0x2b0(0x20)
	struct UEnemyDescriptor* SpawnedFromDescriptor; // 0x2d0(0x08)
	bool IsFrozen; // 0x2d8(0x01)
	bool CanFlee; // 0x2d9(0x01)
	bool FleeInsteadOfBackingOff; // 0x2da(0x01)
	bool IsFleeing; // 0x2db(0x01)
	char UnknownData_2DC[0x4]; // 0x2dc(0x04)
	struct UPawnStatsComponent* PawnStatsInstance; // 0x2e0(0x08)

	void UnFreeze(); // Function FSD.FSDPawn.UnFreeze
	void StopFleeing(); // Function FSD.FSDPawn.StopFleeing
	void StartFleeing(struct FVector fromLocation); // Function FSD.FSDPawn.StartFleeing
	void SetAlerted(bool isAlerted); // Function FSD.FSDPawn.SetAlerted
	void Receive_Alerted(); // Function FSD.FSDPawn.Receive_Alerted
	void OnUnFrozen(); // Function FSD.FSDPawn.OnUnFrozen
	void OnStoppedFleeing(); // Function FSD.FSDPawn.OnStoppedFleeing
	void OnStartedFleeing(); // Function FSD.FSDPawn.OnStartedFleeing
	void OnRep_IsFrozen(); // Function FSD.FSDPawn.OnRep_IsFrozen
	void OnFrozen(struct AActor* Source); // Function FSD.FSDPawn.OnFrozen
	void OnFirstHostileDamageTaken(); // Function FSD.FSDPawn.OnFirstHostileDamageTaken
	void OnEnemyScaled(float NewScale); // Function FSD.FSDPawn.OnEnemyScaled
	void OnArmorPartsDestroyedFromRadialDamage(struct TArray<char> destroyedParts); // Function FSD.FSDPawn.OnArmorPartsDestroyedFromRadialDamage
	void OnAlerted(); // Function FSD.FSDPawn.OnAlerted
	void MakeRagdollMesh(struct USkeletalMeshComponent* Mesh); // Function FSD.FSDPawn.MakeRagdollMesh
	void MakeElite(); // Function FSD.FSDPawn.MakeElite
	bool GetIsAlerted(); // Function FSD.FSDPawn.GetIsAlerted
	struct UHealthComponentBase* GetHealthComponent(); // Function FSD.FSDPawn.GetHealthComponent
	struct AFSDAIController* GetFSDAIController(); // Function FSD.FSDPawn.GetFSDAIController
	enum class EPawnAttitude GetAttitude(); // Function FSD.FSDPawn.GetAttitude
	void Freeze(struct AActor* Source); // Function FSD.FSDPawn.Freeze
	void BackOffFromLocation(struct FVector fromLocation); // Function FSD.FSDPawn.BackOffFromLocation
	void All_ArmorPartsDestroyed(struct TArray<char> parts); // Function FSD.FSDPawn.All_ArmorPartsDestroyed
};

// Class FSD.DeepPathfinderCharacter
// Size: 0x378 (Inherited: 0x2e8)
struct ADeepPathfinderCharacter : AFSDPawn {
	char UnknownData_2E8[0x10]; // 0x2e8(0x10)
	struct UDeepPathfinderMovement* PathfinderMovement; // 0x2f8(0x08)
	struct USkeletalMeshComponent* Mesh; // 0x300(0x08)
	struct FName CenterMassSocketName; // 0x308(0x08)
	struct UDeepPatherFinderCharacterAfflictionComponent* affliction; // 0x310(0x08)
	float AnimationOffset; // 0x318(0x04)
	bool CanPlayerStandOn; // 0x31c(0x01)
	bool UseDormancy; // 0x31d(0x01)
	char UnknownData_31E[0x2]; // 0x31e(0x02)
	float StaggerDurationMultiplier; // 0x320(0x04)
	float StaggerImunityWindow; // 0x324(0x04)
	bool StaggerPauseLogic; // 0x328(0x01)
	bool IsHidden; // 0x329(0x01)
	bool IsStaggered; // 0x32a(0x01)
	bool FrozenPauseLogic; // 0x32b(0x01)
	char UnknownData_32C[0x1c]; // 0x32c(0x1c)
	float AttackerRadius; // 0x348(0x04)
	char UnknownData_34C[0x4]; // 0x34c(0x04)
	struct TArray<struct UMaterialInterface*> CachedMaterials; // 0x350(0x10)
	float AllowedInFormationChance; // 0x360(0x04)
	char UnknownData_364[0x14]; // 0x364(0x14)

	bool TryJoinFormation(); // Function FSD.DeepPathfinderCharacter.TryJoinFormation
	void SetHidden(bool shouldHide); // Function FSD.DeepPathfinderCharacter.SetHidden
	void OnPausedMovementElapsed(); // Function FSD.DeepPathfinderCharacter.OnPausedMovementElapsed
	void OnControlledByPlayer(bool IsControlled, bool IsLocallyControlled); // Function FSD.DeepPathfinderCharacter.OnControlledByPlayer
	void LeaveFormation(); // Function FSD.DeepPathfinderCharacter.LeaveFormation
};

// Class FSD.FlyingDeepPathfinderCharacter
// Size: 0x3a8 (Inherited: 0x378)
struct AFlyingDeepPathfinderCharacter : ADeepPathfinderCharacter {
	char UnknownData_378[0x10]; // 0x378(0x10)
	struct UPhysicalMaterial* FrozenMaterial; // 0x388(0x08)
	struct UPhysicsAsset* FrozenAsset; // 0x390(0x08)
	struct USoundCue* FrozenDeathSound; // 0x398(0x08)
	struct UParticleSystem* FrozenDeathparticles; // 0x3a0(0x08)

	void TriggerFrozenRagdoll(); // Function FSD.FlyingDeepPathfinderCharacter.TriggerFrozenRagdoll
	void OnFreezeImpact(struct UPrimitiveComponent* HitComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, struct FVector NormalImpulse, struct FHitResult Hit); // Function FSD.FlyingDeepPathfinderCharacter.OnFreezeImpact
	void BP_FreezeImpact(); // Function FSD.FlyingDeepPathfinderCharacter.BP_FreezeImpact
};

// Class FSD.FlyingEnemyDeepPathfinderCharacter
// Size: 0x3c8 (Inherited: 0x3a8)
struct AFlyingEnemyDeepPathfinderCharacter : AFlyingDeepPathfinderCharacter {
	char UnknownData_3A8[0x8]; // 0x3a8(0x08)
	struct UEnemyHealthComponent* HealthComponent; // 0x3b0(0x08)
	struct FQueuedMontage QueuedMontage; // 0x3b8(0x10)

	void OnRep_QueuedMontage(); // Function FSD.FlyingEnemyDeepPathfinderCharacter.OnRep_QueuedMontage
};

// Class FSD.AFlyingBug
// Size: 0x478 (Inherited: 0x3c8)
struct AAFlyingBug : AFlyingEnemyDeepPathfinderCharacter {
	struct UEnemyComponent* EnemyComponent; // 0x3c8(0x08)
	struct UPawnStatsComponent* PawnStats; // 0x3d0(0x08)
	struct UOutlineComponent* outline; // 0x3d8(0x08)
	struct UPawnSensingComponent* Senses; // 0x3e0(0x08)
	struct UPawnAlertComponent* Alert; // 0x3e8(0x08)
	struct USphereComponent* ExplosionSphere; // 0x3f0(0x08)
	struct UAudioComponent* WingSoundComponent; // 0x3f8(0x08)
	struct FMulticastInlineDelegate OnStartFizzle; // 0x400(0x10)
	struct TArray<struct UAnimSequenceBase*> HitReactions; // 0x410(0x10)
	struct FVector_NetQuantize RagdollImpact; // 0x420(0x0c)
	char UnknownData_42C[0x14]; // 0x42c(0x14)
	struct AActor* RotateTarget; // 0x440(0x08)
	struct UPhysicsAsset* PhysicalAssetAfterDeath; // 0x448(0x08)
	struct USoundBase* ChatterSound; // 0x450(0x08)
	float FirstHitReactBlendIn; // 0x458(0x04)
	float OverrideHitReactBlendIn; // 0x45c(0x04)
	float DistanceForAttackMode; // 0x460(0x04)
	float MinChatterDelay; // 0x464(0x04)
	float MaxChatterDelay; // 0x468(0x04)
	float AttackModeRotationSpeed; // 0x46c(0x04)
	bool UsesAttackStance; // 0x470(0x01)
	bool SetLifeTime; // 0x471(0x01)
	bool AttackStance; // 0x472(0x01)
	bool LookStraight; // 0x473(0x01)
	bool UseDefaultRagdoll; // 0x474(0x01)
	char UnknownData_475[0x3]; // 0x475(0x03)

	void StartFizzle(); // Function FSD.AFlyingBug.StartFizzle
	void SetRotateTarget(struct AActor* aTarget); // Function FSD.AFlyingBug.SetRotateTarget
	void SetExternallyControlled(bool isExternallyControlled); // Function FSD.AFlyingBug.SetExternallyControlled
	void SetAttackStance(bool isAttackStance); // Function FSD.AFlyingBug.SetAttackStance
	void Ragdoll(bool applyForce, struct FVector force); // Function FSD.AFlyingBug.Ragdoll
	void PlayVoice(); // Function FSD.AFlyingBug.PlayVoice
	void OnRep_RagdollImpact(); // Function FSD.AFlyingBug.OnRep_RagdollImpact
	void OnRep_AttackStance(); // Function FSD.AFlyingBug.OnRep_AttackStance
	void OnRagdoll(); // Function FSD.AFlyingBug.OnRagdoll
	void OnDamaged(float amount); // Function FSD.AFlyingBug.OnDamaged
	void OnBugDeath(struct UHealthComponentBase* Health); // Function FSD.AFlyingBug.OnBugDeath
	float GetMidZpointFromCielingAndFloor(float distanceFromCieling, float distanceFromFloor); // Function FSD.AFlyingBug.GetMidZpointFromCielingAndFloor
	bool GetIsInAttackStance(); // Function FSD.AFlyingBug.GetIsInAttackStance
	void AlertNearbyEnemies(); // Function FSD.AFlyingBug.AlertNearbyEnemies
};

// Class FSD.EnemyAnimInstance
// Size: 0x2c0 (Inherited: 0x270)
struct UEnemyAnimInstance : UAnimInstance {
	struct FMulticastInlineDelegate OnRangedAttackNotify; // 0x268(0x10)
	struct FMulticastInlineDelegate OnMeleeAttackNotify; // 0x278(0x10)
	struct FMulticastInlineDelegate OnStopLeadingNotify; // 0x288(0x10)
	struct FMulticastInlineDelegate OnIsAttackingChanged; // 0x298(0x10)
	bool IsAttacking; // 0x2a8(0x01)
	bool IsAlive; // 0x2a9(0x01)
	float RandomStartPosition; // 0x2ac(0x04)
	struct UHealthComponentBase* HealthComponent; // 0x2b0(0x08)
	char UnknownData_2BE[0x2]; // 0x2be(0x02)

	bool IsSlotPlayingAnyAnimation(struct FName SlotNodeName); // Function FSD.EnemyAnimInstance.IsSlotPlayingAnyAnimation
	struct USkeletalMeshComponent* GetSkeletalMesh(); // Function FSD.EnemyAnimInstance.GetSkeletalMesh
};

// Class FSD.SimpleMovingEnemyAnimInstance
// Size: 0x2f0 (Inherited: 0x2c0)
struct USimpleMovingEnemyAnimInstance : UEnemyAnimInstance {
	float Speed; // 0x2b8(0x04)
	struct FVector Velocity; // 0x2bc(0x0c)
	float WalkCycleSpeed; // 0x2c8(0x04)
	float StartMovingSpeed; // 0x2cc(0x04)
	float StopMovingSpeed; // 0x2d0(0x04)
	float WalkCycleMinRate; // 0x2d4(0x04)
	float WalkCyclePlayRate; // 0x2d8(0x04)
	float MeshScale; // 0x2dc(0x04)
	bool IsMoving; // 0x2e0(0x01)
	char UnknownData_2E9[0x7]; // 0x2e9(0x07)

	void SetMeshScale(float NewScale); // Function FSD.SimpleMovingEnemyAnimInstance.SetMeshScale
};

// Class FSD.FlyingBugAnimInstance
// Size: 0x2f0 (Inherited: 0x2f0)
struct UFlyingBugAnimInstance : USimpleMovingEnemyAnimInstance {
	bool IsInAttackMode; // 0x2e8(0x01)
	bool IsStaggered; // 0x2e9(0x01)
};

// Class FSD.AIFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct UAIFunctionLibrary : UBlueprintFunctionLibrary {

	void SetAICanSense(bool canSense); // Function FSD.AIFunctionLibrary.SetAICanSense
	int32_t MakeEnemiesFleeFromArea(struct UObject* WorldContextObject, struct FVector Center, float Radius, int32_t maxEnemiesAffected); // Function FSD.AIFunctionLibrary.MakeEnemiesFleeFromArea
	void MakeEnemiesBackOutOfArea(struct UObject* WorldContextObject, struct FVector Center, float Radius); // Function FSD.AIFunctionLibrary.MakeEnemiesBackOutOfArea
	bool IsEnemyAlertet(struct APawn* enemy); // Function FSD.AIFunctionLibrary.IsEnemyAlertet
	struct APlayerCharacter* GetPlayerTarget(struct AActor* From, float MaxDistance, bool MustBeAlive, bool MustBeUnparalyzed, bool accountForAttackers, struct AActor* ignoreTarget, bool IsFlying); // Function FSD.AIFunctionLibrary.GetPlayerTarget
	struct UAttackerPositioningComponent* GetAttackableTarget(struct AActor* From, float MaxDistance, bool MustBeAlive, bool MustBeUnparalyzed, bool accountForAttackers, struct AActor* ignoreTarget, bool IsFlying); // Function FSD.AIFunctionLibrary.GetAttackableTarget
	struct APlayerCharacter* ConsiderChangingTarget(struct APlayerCharacter* CurrentTarget, struct AActor* From, float MaxDistance, bool MustBeAlive, bool MustBeUnparalyzed, bool CurrentTargetMustBeAlive, bool IsFlying); // Function FSD.AIFunctionLibrary.ConsiderChangingTarget
	void AlertEnemy(struct APawn* enemy); // Function FSD.AIFunctionLibrary.AlertEnemy
	void AlertEnemiesInRange(struct UObject* WorldContextObject, struct FVector Origin, float Range, struct APawn* alerter); // Function FSD.AIFunctionLibrary.AlertEnemiesInRange
};

// Class FSD.AIPlayerControlComponent
// Size: 0x160 (Inherited: 0xb0)
struct UAIPlayerControlComponent : UActorComponent {
	struct FRotator AngularAcceleration; // 0xb0(0x0c)
	struct FRotator AngularDampening; // 0xbc(0x0c)
	struct FRotator MaxAngularVelocity; // 0xc8(0x0c)
	struct FRotator MaxRotation; // 0xd4(0x0c)
	float SpeedTarget; // 0xe0(0x04)
	float SpeedMin; // 0xe4(0x04)
	float SpeedMax; // 0xe8(0x04)
	float AccelerationBase; // 0xec(0x04)
	float AccelerationMultiplier; // 0xf0(0x04)
	float DecelerationMultiplier; // 0xf4(0x04)
	float AccelerationOnSlopeMultiplier; // 0xf8(0x04)
	float DecelerationOnSlopeMultiplier; // 0xfc(0x04)
	float InitialConnectionBlendTime; // 0x100(0x04)
	char UnknownData_104[0x4]; // 0x104(0x04)
	struct UAnimMontage* GetOnMontageAI; // 0x108(0x08)
	struct UAnimMontage* GetOnMontagePlayer; // 0x110(0x08)
	struct UAnimMontage* LetGoMontageAI; // 0x118(0x08)
	struct UAnimMontage* LetGoMontagePlayer; // 0x120(0x08)
	struct UDialogDataAsset* GetOnShout; // 0x128(0x08)
	struct UDialogDataAsset* LetGoShout; // 0x130(0x08)
	struct UControlEnemyUsable* Usable; // 0x138(0x08)
	char UnknownData_140[0x20]; // 0x140(0x20)
};

// Class FSD.EnemyGroupDescriptor
// Size: 0x50 (Inherited: 0x30)
struct UEnemyGroupDescriptor : UDataAsset {
	struct TArray<struct FEnemyGroupDescriptorItem> Enemies; // 0x30(0x10)
	struct FRandInterval Diversity; // 0x40(0x10)
};

// Class FSD.AmberEventEnemyPool
// Size: 0x68 (Inherited: 0x50)
struct UAmberEventEnemyPool : UEnemyGroupDescriptor {
	float MaxTimeBetweenSpawn; // 0x50(0x04)
	float MinTimeBetweenSpawn; // 0x54(0x04)
	int32_t MaxEnemyCap; // 0x58(0x04)
	int32_t AmbersNeededdToComplete; // 0x5c(0x04)
	int32_t AmbersNeededOnePlayer; // 0x60(0x04)
	char UnknownData_64[0x4]; // 0x64(0x04)
};

// Class FSD.GameEvent
// Size: 0x358 (Inherited: 0x220)
struct AGameEvent : AActor {
	char UnknownData_220[0x8]; // 0x220(0x08)
	struct FMulticastInlineDelegate EventTriggeredDelegate; // 0x228(0x10)
	struct FMulticastInlineDelegate EventFinishedDelegate; // 0x238(0x10)
	struct FMulticastInlineDelegate StageCompleteDelegate; // 0x248(0x10)
	struct FMulticastInlineDelegate ProgressChangedDelegate; // 0x258(0x10)
	struct FMulticastInlineDelegate TimeProgressChanged; // 0x268(0x10)
	struct FMulticastInlineDelegate ObjectivesPerStageChanged; // 0x278(0x10)
	struct TArray<struct AEventStarterButton*> StarterObjects; // 0x288(0x10)
	bool bGameEventSetup; // 0x298(0x01)
	char UnknownData_299[0x7]; // 0x299(0x07)
	struct FText EventName; // 0x2a0(0x18)
	struct FText ObjectiveText; // 0x2b8(0x18)
	struct FName AnalyticsName; // 0x2d0(0x08)
	struct FGameplayTagContainer GameplayTags; // 0x2d8(0x20)
	struct UChildActorComponent* StartEventObject; // 0x2f8(0x08)
	struct UDialogDataAsset* EventTriggeredShout; // 0x300(0x08)
	struct UDialogDataAsset* EventFinishedShout; // 0x308(0x08)
	struct UDialogDataAsset* EventFailedShout; // 0x310(0x08)
	float EventTriggeredShoutDelay; // 0x318(0x04)
	float EventFinishedShoutDelay; // 0x31c(0x04)
	float StageProgress; // 0x320(0x04)
	float TimeLimit; // 0x324(0x04)
	float DelayUITime; // 0x328(0x04)
	char UnknownData_32C[0x4]; // 0x32c(0x04)
	int32_t objectivesPerStage; // 0x330(0x04)
	char UnknownData_334[0x4]; // 0x334(0x04)
	bool EventStartersActive; // 0x338(0x01)
	bool StopScriptedWavesWhileActive; // 0x339(0x01)
	bool StopNormalWavesWhileActive; // 0x33a(0x01)
	bool EventStarted; // 0x33b(0x01)
	bool FailedEvent; // 0x33c(0x01)
	bool ShowRemainingTimeOnHUD; // 0x33d(0x01)
	bool ShowScoreStatusOnHUD; // 0x33e(0x01)
	char UnknownData_33F[0x1]; // 0x33f(0x01)
	bool SkipEventStarters; // 0x340(0x01)
	char UnknownData_341[0x7]; // 0x341(0x07)
	struct TArray<struct AActor*> EventParticipants; // 0x348(0x10)

	void TrySetupGameEvent(); // Function FSD.GameEvent.TrySetupGameEvent
	void TriggerEvent(); // Function FSD.GameEvent.TriggerEvent
	void StartShout(); // Function FSD.GameEvent.StartShout
	void StageObjectiveCompleted(); // Function FSD.GameEvent.StageObjectiveCompleted
	struct ARessuplyPod* SpawnEventPod(struct ARessuplyPod* podClass, struct FVector aSpawnLocation, int32_t Delay); // Function FSD.GameEvent.SpawnEventPod
	struct AActor* SpawnEventActor(struct AActor* eventActorClass, struct FTransform aSpawnLocation); // Function FSD.GameEvent.SpawnEventActor
	void SetStageProgress(float Progress); // Function FSD.GameEvent.SetStageProgress
	void SetObjectivesPerStage(int32_t objectivesPerStage); // Function FSD.GameEvent.SetObjectivesPerStage
	void RemoveParticipant(struct AActor* participant); // Function FSD.GameEvent.RemoveParticipant
	void OnStarterObjectUsed(struct AEventStarterButton* eventStarter); // Function FSD.GameEvent.OnStarterObjectUsed
	void OnStageProgress(float Progress); // Function FSD.GameEvent.OnStageProgress
	void OnStageComplete(int32_t Stage); // Function FSD.GameEvent.OnStageComplete
	void OnRep_StageProgress(); // Function FSD.GameEvent.OnRep_StageProgress
	void OnRep_ObjectivesPerStage(); // Function FSD.GameEvent.OnRep_ObjectivesPerStage
	void OnRep_IsEventStartersActive(); // Function FSD.GameEvent.OnRep_IsEventStartersActive
	void OnRep_FailedEvent(); // Function FSD.GameEvent.OnRep_FailedEvent
	void OnRep_EventStarted(); // Function FSD.GameEvent.OnRep_EventStarted
	void OnRep_EventParticipants(); // Function FSD.GameEvent.OnRep_EventParticipants
	void OnEventTriggered(); // Function FSD.GameEvent.OnEventTriggered
	void OnEventFinished(bool eventSuccess); // Function FSD.GameEvent.OnEventFinished
	void OnEventBooted(); // Function FSD.GameEvent.OnEventBooted
	bool IsEventActive(); // Function FSD.GameEvent.IsEventActive
	float GetStageProgress(); // Function FSD.GameEvent.GetStageProgress
	bool GetShowTimeOnHUD(); // Function FSD.GameEvent.GetShowTimeOnHUD
	bool GetShowScoreOnHUD(); // Function FSD.GameEvent.GetShowScoreOnHUD
	struct FText GetObjectiveText(); // Function FSD.GameEvent.GetObjectiveText
	int32_t GetObjectivesPerStage(); // Function FSD.GameEvent.GetObjectivesPerStage
	struct FText GetEventName(); // Function FSD.GameEvent.GetEventName
	bool GetEventFailed(); // Function FSD.GameEvent.GetEventFailed
	float GetDelayUITime(); // Function FSD.GameEvent.GetDelayUITime
	void EndShout(); // Function FSD.GameEvent.EndShout
	struct FTransform DebreePositionPoint(struct AProceduralSetup* setup, struct FVector fromLocation, float Radius, struct UDebrisPositioning* DebrisPositioning, struct AActor* terrainPlacement, struct TArray<struct FVector> locationsToAvoid, struct UCurveFloat* avoidCostCurve, float maxPathLength); // Function FSD.GameEvent.DebreePositionPoint
	void BootUpEvent(); // Function FSD.GameEvent.BootUpEvent
	void AddStageProgress(float progressToAdd); // Function FSD.GameEvent.AddStageProgress
};

// Class FSD.AmberEvent
// Size: 0x3a8 (Inherited: 0x358)
struct AAmberEvent : AGameEvent {
	struct UDamageComponent* EndExplosionDamage; // 0x358(0x08)
	struct TArray<struct UAmberEventEnemyPool*> EnemyPools; // 0x360(0x10)
	struct TArray<struct AFSDPawn*> spawnedEnemies; // 0x370(0x10)
	char UnknownData_380[0x8]; // 0x380(0x08)
	struct FWeakObjectPtr<struct UAmberEventEnemyPool> CurrentPool; // 0x388(0x08)
	float InitialDelayBeforeSpawn; // 0x390(0x04)
	float MaxSpawnRange; // 0x394(0x04)
	char UnknownData_398[0x10]; // 0x398(0x10)

	void OnSpawnedDeath(struct UHealthComponentBase* spawnedHealthComponent); // Function FSD.AmberEvent.OnSpawnedDeath
	void OnEnemySpawned(struct APawn* Pawn); // Function FSD.AmberEvent.OnEnemySpawned
};

// Class FSD.AmmoCountWidget
// Size: 0x250 (Inherited: 0x230)
struct UAmmoCountWidget : UUserWidget {
	struct APlayerCharacter* Character; // 0x230(0x08)
	struct AItem* Item; // 0x238(0x08)
	struct UItemAggregator* Aggregator; // 0x240(0x08)
	char UnknownData_248[0x8]; // 0x248(0x08)

	void OnVisibleChanged(bool Visible, bool showClipCount); // Function FSD.AmmoCountWidget.OnVisibleChanged
	void OnTotalVisibleChanged(bool Visible); // Function FSD.AmmoCountWidget.OnTotalVisibleChanged
	void OnTotalChanged(int32_t Total); // Function FSD.AmmoCountWidget.OnTotalChanged
	void OnItemTotalChanged(int32_t Value); // Function FSD.AmmoCountWidget.OnItemTotalChanged
	void OnItemEquipped(struct AItem* NewItem); // Function FSD.AmmoCountWidget.OnItemEquipped
	void OnItemAmountChanged(int32_t Value); // Function FSD.AmmoCountWidget.OnItemAmountChanged
	void OnAmountChanged(int32_t count); // Function FSD.AmmoCountWidget.OnAmountChanged
	void DoItemEquipped(); // Function FSD.AmmoCountWidget.DoItemEquipped
};

// Class FSD.Item
// Size: 0x318 (Inherited: 0x220)
struct AItem : AActor {
	char UnknownData_220[0x38]; // 0x220(0x38)
	struct FVector FPCameraOffset; // 0x258(0x0c)
	bool EnableDangerousSaveGameIDEditing; // 0x264(0x01)
	char UnknownData_265[0x3]; // 0x265(0x03)
	struct FGuid SavegameID; // 0x268(0x10)
	struct UItemID* ItemID; // 0x278(0x08)
	struct APlayerCharacter* Character; // 0x280(0x08)
	struct UUpgradableItemComponent* UpgradableItem; // 0x288(0x08)
	struct UCameraShake* CameraShake; // 0x290(0x08)
	bool CameraShakeOnStartUsing; // 0x298(0x01)
	bool CameraShakeOnEquip; // 0x299(0x01)
	char UnknownData_29A[0xe]; // 0x29a(0x0e)
	struct UCurveFloat* HeatCurve; // 0x2a8(0x08)
	float ManualHeatPerUse; // 0x2b0(0x04)
	float CooldownRate; // 0x2b4(0x04)
	float ManualCooldownDelay; // 0x2b8(0x04)
	float UnjamDuration; // 0x2bc(0x04)
	char UnknownData_2C0[0x4]; // 0x2c0(0x04)
	float CurrentTemperature; // 0x2c4(0x04)
	struct USoundBase* AudioTemperature; // 0x2c8(0x08)
	float AudioTemperatureFadeout; // 0x2d0(0x04)
	struct FName TemperatureFloatParam; // 0x2d4(0x08)
	char UnknownData_2DC[0x4]; // 0x2dc(0x04)
	struct UAudioComponent* TemperatureAudioComponent; // 0x2e0(0x08)
	bool Overheated; // 0x2e8(0x01)
	char UnknownData_2E9[0x7]; // 0x2e9(0x07)
	struct UDialogDataAsset* ShoutOverheated; // 0x2f0(0x08)
	bool bAimAssistEnabled; // 0x2f8(0x01)
	char UnknownData_2F9[0x3]; // 0x2f9(0x03)
	float MovementRateWhileUsing; // 0x2fc(0x04)
	bool CanPlayLedgeClimbWhileUsing; // 0x300(0x01)
	bool CanInspectItem; // 0x301(0x01)
	bool CanSprintWithItem; // 0x302(0x01)
	char UnknownData_303[0x5]; // 0x303(0x05)
	struct UItemsBarIcon* CustomIconWidget; // 0x308(0x08)
	bool IsEquipped; // 0x310(0x01)
	bool IsUsing; // 0x311(0x01)
	char UnknownData_312[0x6]; // 0x312(0x06)

	void UpdateSkin(); // Function FSD.Item.UpdateSkin
	void Server_StartUsing(bool IsUsing); // Function FSD.Item.Server_StartUsing
	void Resupply(float percentage); // Function FSD.Item.Resupply
	void RemovedFromInventory(struct ACharacter* oldCharacter); // Function FSD.Item.RemovedFromInventory
	void RecieveUnequipped(); // Function FSD.Item.RecieveUnequipped
	void RecieveStopUsing(); // Function FSD.Item.RecieveStopUsing
	void RecieveStartUsing(); // Function FSD.Item.RecieveStartUsing
	void RecieveEquipped(); // Function FSD.Item.RecieveEquipped
	void RecieveCycledItem(); // Function FSD.Item.RecieveCycledItem
	void Recieve_UpdateMeshses(bool IsFirstPerson); // Function FSD.Item.Recieve_UpdateMeshses
	void ReceiveResupply(float percentage); // Function FSD.Item.ReceiveResupply
	void Receive_Overheated(); // Function FSD.Item.Receive_Overheated
	struct UStaticMeshComponent* Receive_GetTPAnimationEventMesh(); // Function FSD.Item.Receive_GetTPAnimationEventMesh
	struct UFirstPersonStaticMeshComponent* Receive_GetFPAnimationEventMesh(); // Function FSD.Item.Receive_GetFPAnimationEventMesh
	void OnTemperatureChanged(float Temperature, bool Overheated); // Function FSD.Item.OnTemperatureChanged
	void OnSkinChanged(struct USkinEffect* Skin); // Function FSD.Item.OnSkinChanged
	void OnRep_IsUsing(bool OldValue); // Function FSD.Item.OnRep_IsUsing
	void OnOwnerDestroyed(struct AActor* owningActor); // Function FSD.Item.OnOwnerDestroyed
	bool IsLocallyControlled(); // Function FSD.Item.IsLocallyControlled
	bool IsFirstPerson(); // Function FSD.Item.IsFirstPerson
	struct AActor* GetWeaponViewClass(); // Function FSD.Item.GetWeaponViewClass
	struct FItemLoadoutAnimations GetLoadoutAnimations(); // Function FSD.Item.GetLoadoutAnimations
	struct FText GetItemName(); // Function FSD.Item.GetItemName
	struct UTexture2D* GetItemIconLine(); // Function FSD.Item.GetItemIconLine
	struct UTexture2D* GetItemIconBG(); // Function FSD.Item.GetItemIconBG
	struct AItem* GetItemDefaultObject(struct AItem* itemClass); // Function FSD.Item.GetItemDefaultObject
	struct FText GetItemCategory(); // Function FSD.Item.GetItemCategory
	struct USceneComponent* GetHeatingAudioSceneComponent(); // Function FSD.Item.GetHeatingAudioSceneComponent
	struct UItemCharacterAnimationSet* GetCharacterAnimationSet(); // Function FSD.Item.GetCharacterAnimationSet
	struct FString GetAnalyticsItemName(); // Function FSD.Item.GetAnalyticsItemName
	struct FString GetAnalyticsItemCategory(); // Function FSD.Item.GetAnalyticsItemCategory
	void AddedToInventory(struct APlayerCharacter* ItemOwner); // Function FSD.Item.AddedToInventory
};

// Class FSD.AnimatedItem
// Size: 0x368 (Inherited: 0x318)
struct AAnimatedItem : AItem {
	struct USkinnableComponent* Skinnable; // 0x318(0x08)
	struct UPlayerAnimInstance* FPAnimInstance; // 0x320(0x08)
	struct UPlayerAnimInstance* TPAnimInstance; // 0x328(0x08)
	struct USkeletalMeshComponent* FPMesh; // 0x330(0x08)
	struct USkeletalMeshComponent* TPMesh; // 0x338(0x08)
	struct UAnimMontage* FP_EquipAnimation; // 0x340(0x08)
	struct UAnimMontage* TP_EquipAnimation; // 0x348(0x08)
	float EquipDuration; // 0x350(0x04)
	char UnknownData_354[0x4]; // 0x354(0x04)
	struct UItemCharacterAnimationSet* CharacterAnimationSet; // 0x358(0x08)
	char UnknownData_360[0x8]; // 0x360(0x08)

	void OnReceiveEquippedFinished(); // Function FSD.AnimatedItem.OnReceiveEquippedFinished
	struct FTransform GetMuzzle(); // Function FSD.AnimatedItem.GetMuzzle
	struct USkeletalMeshComponent* GetItemMesh(); // Function FSD.AnimatedItem.GetItemMesh
};

// Class FSD.AmmoDrivenWeapon
// Size: 0x690 (Inherited: 0x368)
struct AAmmoDrivenWeapon : AAnimatedItem {
	char UnknownData_368[0x20]; // 0x368(0x20)
	struct FMulticastInlineDelegate OnClipCountChanged; // 0x388(0x10)
	struct FMulticastInlineDelegate OnTryReloadEvent; // 0x398(0x10)
	struct FMulticastInlineDelegate OnReloadingEvent; // 0x3a8(0x10)
	struct FMulticastInlineDelegate OnStoppedUsingEvent; // 0x3b8(0x10)
	struct UWeaponFireComponent* WeaponFire; // 0x3c8(0x08)
	struct UAmmoDriveWeaponAggregator* Aggregator; // 0x3d0(0x08)
	bool LoopFireAnimation; // 0x3d8(0x01)
	char UnknownData_3D9[0x3]; // 0x3d9(0x03)
	float LoopFireAnimationBlendoutTime; // 0x3dc(0x04)
	struct UAnimMontage* FP_FireAnimation; // 0x3e0(0x08)
	struct UAnimMontage* TP_FireAnimation; // 0x3e8(0x08)
	struct UAnimMontage* FP_ReloadAnimation; // 0x3f0(0x08)
	struct FItemAnimationItem OverheatAnimation; // 0x3f8(0x18)
	struct TArray<struct FItemAnimationItem> GunslingAnimations; // 0x410(0x10)
	struct UAnimMontage* TP_ReloadAnimation; // 0x420(0x08)
	struct UAnimMontage* WPN_Fire; // 0x428(0x08)
	struct UAnimMontage* WPN_FireLastBullet; // 0x430(0x08)
	struct UAnimMontage* WPN_Reload; // 0x438(0x08)
	struct UAnimMontage* WPN_Reload_TP; // 0x440(0x08)
	struct UFXSystemAsset* MuzzleParticles; // 0x448(0x08)
	struct UFXSystemAsset* TPMuzzleParticles; // 0x450(0x08)
	bool UseTriggeredMuzzleParticles; // 0x458(0x01)
	char UnknownData_459[0xf]; // 0x459(0x0f)
	struct FTracerData Tracer; // 0x468(0x30)
	struct UParticleSystem* TracerParticles; // 0x498(0x08)
	struct UParticleSystem* TrailParticles; // 0x4a0(0x08)
	float MinTracerDistance; // 0x4a8(0x04)
	float TracerSpeed; // 0x4ac(0x04)
	float TracerOffset; // 0x4b0(0x04)
	char UnknownData_4B4[0x4]; // 0x4b4(0x04)
	struct UFXSystemAsset* CasingParticles; // 0x4b8(0x08)
	bool UseTriggeredCasingParticleSystem; // 0x4c0(0x01)
	char UnknownData_4C1[0xf]; // 0x4c1(0x0f)
	struct ULightComponent* MuzzleFlashLight; // 0x4d0(0x08)
	struct FRuntimeFloatCurve MuzzleFlashLightCurve; // 0x4d8(0x88)
	char UnknownData_560[0x8]; // 0x560(0x08)
	struct USoundCue* FireSound; // 0x568(0x08)
	struct USoundCue* RicochetSound; // 0x570(0x08)
	struct UFXSystemAsset* RicochetParticle; // 0x578(0x08)
	float FireSoundDelayToTail; // 0x580(0x04)
	char UnknownData_584[0xc]; // 0x584(0x0c)
	struct USoundCue* FireSoundTail; // 0x590(0x08)
	bool IsFireSoundTail2D; // 0x598(0x01)
	char UnknownData_599[0x7]; // 0x599(0x07)
	struct UForceFeedbackEffect* FireForceFeedbackEffect; // 0x5a0(0x08)
	struct UAudioComponent* FireSoundInstance; // 0x5a8(0x08)
	float FireSoundFadeDuration; // 0x5b0(0x04)
	char UnknownData_5B4[0x4]; // 0x5b4(0x04)
	struct USoundCue* ReloadSound; // 0x5b8(0x08)
	int32_t BulletsRemainingForNearEmptySound; // 0x5c0(0x04)
	char UnknownData_5C4[0x4]; // 0x5c4(0x04)
	struct USoundCue* NearEmptySound; // 0x5c8(0x08)
	struct USoundCue* WeaponEmptySound; // 0x5d0(0x08)
	struct UDialogDataAsset* ShoutShotFired; // 0x5d8(0x08)
	struct UDialogDataAsset* ShoutOutOfAmmo; // 0x5e0(0x08)
	struct UDialogDataAsset* ShoutReloading; // 0x5e8(0x08)
	int32_t MaxAmmo; // 0x5f0(0x04)
	int32_t ClipSize; // 0x5f4(0x04)
	int32_t ShotCost; // 0x5f8(0x04)
	float RateOfFire; // 0x5fc(0x04)
	int32_t BurstCount; // 0x600(0x04)
	float BurstCycleTime; // 0x604(0x04)
	float ReloadDuration; // 0x608(0x04)
	int32_t AmmoCount; // 0x60c(0x04)
	int32_t ClipCount; // 0x610(0x04)
	float AutoReloadDuration; // 0x614(0x04)
	struct USoundCue* AutoReloadCompleteCue; // 0x618(0x08)
	struct FMulticastInlineDelegate OnItemAutoReloaded; // 0x620(0x10)
	char UnknownData_630[0x4]; // 0x630(0x04)
	float SupplyStatusWeight; // 0x634(0x04)
	float CycleTimeLeft; // 0x638(0x04)
	char UnknownData_63C[0x4]; // 0x63c(0x04)
	float ReloadTimeLeft; // 0x640(0x04)
	bool AutomaticReload; // 0x644(0x01)
	bool CanReload; // 0x645(0x01)
	char UnknownData_646[0x2]; // 0x646(0x02)
	struct FRecoilSettings RecoilSettings; // 0x648(0x28)
	bool HasAutomaticFire; // 0x670(0x01)
	bool IsFiring; // 0x671(0x01)
	char UnknownData_672[0x18]; // 0x672(0x18)
	enum class EAmmoWeaponState WeaponState; // 0x68a(0x01)
	char UnknownData_68B[0x5]; // 0x68b(0x05)

	void Upgraded_Blueprint_Implementation(struct TArray<struct UItemUpgrade*> Upgrades); // Function FSD.AmmoDrivenWeapon.Upgraded_Blueprint_Implementation
	void Server_StopReload(); // Function FSD.AmmoDrivenWeapon.Server_StopReload
	void Server_ReloadWeapon(); // Function FSD.AmmoDrivenWeapon.Server_ReloadWeapon
	void Server_PlayBurstFire(char shotCount); // Function FSD.AmmoDrivenWeapon.Server_PlayBurstFire
	void Server_Gunsling(char Index); // Function FSD.AmmoDrivenWeapon.Server_Gunsling
	void RecieveFiredWeapon(); // Function FSD.AmmoDrivenWeapon.RecieveFiredWeapon
	void Receive_ReloadEnd(); // Function FSD.AmmoDrivenWeapon.Receive_ReloadEnd
	void Receive_ReloadBegin(); // Function FSD.AmmoDrivenWeapon.Receive_ReloadBegin
	void Receive_IsFiringChanged(bool NewValue); // Function FSD.AmmoDrivenWeapon.Receive_IsFiringChanged
	void OnWeaponFireEnded(); // Function FSD.AmmoDrivenWeapon.OnWeaponFireEnded
	void OnWeaponFired(struct FVector Location); // Function FSD.AmmoDrivenWeapon.OnWeaponFired
	void OnRicochet(struct FVector Origin, struct FVector Location, struct FVector Normal); // Function FSD.AmmoDrivenWeapon.OnRicochet
	void OnRep_IsFiring(); // Function FSD.AmmoDrivenWeapon.OnRep_IsFiring
	bool IsClipFull(); // Function FSD.AmmoDrivenWeapon.IsClipFull
	void InstantlyReload(); // Function FSD.AmmoDrivenWeapon.InstantlyReload
	void CustomEvent1(); // Function FSD.AmmoDrivenWeapon.CustomEvent1
	void Client_RefillAmmo(float percentage); // Function FSD.AmmoDrivenWeapon.Client_RefillAmmo
	void All_StopReload(); // Function FSD.AmmoDrivenWeapon.All_StopReload
	void All_StartReload(); // Function FSD.AmmoDrivenWeapon.All_StartReload
	void All_PlayBurstFire(char shotCount); // Function FSD.AmmoDrivenWeapon.All_PlayBurstFire
	void All_Gunsling(char Index); // Function FSD.AmmoDrivenWeapon.All_Gunsling
};

// Class FSD.ItemAggregator
// Size: 0xc8 (Inherited: 0xb0)
struct UItemAggregator : UActorComponent {
	struct FText CounterText; // 0xb0(0x18)

	void UnbindAllEvents(); // Function FSD.ItemAggregator.UnbindAllEvents
};

// Class FSD.ClipBasedItemAggregator
// Size: 0x140 (Inherited: 0xc8)
struct UClipBasedItemAggregator : UItemAggregator {
	struct FMulticastInlineDelegate OnClipAmountChanged; // 0xc8(0x10)
	struct FMulticastInlineDelegate OnTotalAmountChanged; // 0xd8(0x10)
	struct FMulticastInlineDelegate OnClipAndTotalChanged; // 0xe8(0x10)
	struct FMulticastInlineDelegate OnReloadTimeChanged; // 0xf8(0x10)
	struct FMulticastInlineDelegate OnReloadComplete; // 0x108(0x10)
	struct FMulticastInlineDelegate OnReloadStarted; // 0x118(0x10)
	struct FMulticastInlineDelegate OnMaxAmmoCapacityChanged; // 0x128(0x10)
	bool ShowTotalAmount; // 0x138(0x01)
	char UnknownData_139[0x7]; // 0x139(0x07)

	void ReloadStarted(); // Function FSD.ClipBasedItemAggregator.ReloadStarted
	void ReloadComplete(); // Function FSD.ClipBasedItemAggregator.ReloadComplete
	int32_t GetTotalAmount(); // Function FSD.ClipBasedItemAggregator.GetTotalAmount
	int32_t GetClipAmount(); // Function FSD.ClipBasedItemAggregator.GetClipAmount
};

// Class FSD.AmmoDriveWeaponAggregator
// Size: 0x148 (Inherited: 0x140)
struct UAmmoDriveWeaponAggregator : UClipBasedItemAggregator {
	struct AAmmoDrivenWeapon* Weapon; // 0x140(0x08)
};

// Class FSD.AmmoDrivenWeaponAnimInstance
// Size: 0x280 (Inherited: 0x270)
struct UAmmoDrivenWeaponAnimInstance : UAnimInstance {
	struct AAmmoDrivenWeapon* Weapon; // 0x268(0x08)
	bool IsFiring; // 0x270(0x01)
	float ClipFullPercentage; // 0x274(0x04)
	char UnknownData_27D[0x3]; // 0x27d(0x03)

	bool IsFull(); // Function FSD.AmmoDrivenWeaponAnimInstance.IsFull
	bool IsEmpty(); // Function FSD.AmmoDrivenWeaponAnimInstance.IsEmpty
};

// Class FSD.PlatformGunAnimInstance
// Size: 0x290 (Inherited: 0x280)
struct UPlatformGunAnimInstance : UAmmoDrivenWeaponAnimInstance {
	float SpinRate; // 0x278(0x04)
	float NormalSpinRate; // 0x27c(0x04)
	float LerpSpeed; // 0x280(0x04)
	float FiredSpinRate; // 0x284(0x04)

	void WeaponFired(); // Function FSD.PlatformGunAnimInstance.WeaponFired
};

// Class FSD.AnchorTurner
// Size: 0x2c0 (Inherited: 0x220)
struct AAnchorTurner : AActor {
	struct USceneComponent* Root; // 0x220(0x08)
	struct USkeletalMeshComponent* Mesh; // 0x228(0x08)
	struct USphereComponent* PushCollider1; // 0x230(0x08)
	struct USphereComponent* PushCollider2; // 0x238(0x08)
	struct USphereComponent* PushCollider3; // 0x240(0x08)
	struct USphereComponent* PushCollider4; // 0x248(0x08)
	struct FMulticastInlineDelegate OnSpunUp; // 0x250(0x10)
	char UnknownData_260[0x20]; // 0x260(0x20)
	struct FVector AttatchmentOffset; // 0x280(0x0c)
	char UnknownData_28C[0x4]; // 0x28c(0x04)
	struct TArray<struct FName> AttachmentPoints; // 0x290(0x10)
	float PerPlayerMultiplier; // 0x2a0(0x04)
	float TurnSpeed; // 0x2a4(0x04)
	float Progress; // 0x2a8(0x04)
	float MaxProgress; // 0x2ac(0x04)
	char UnknownData_2B0[0x4]; // 0x2b0(0x04)
	bool Finished; // 0x2b4(0x01)
	char UnknownData_2B5[0x3]; // 0x2b5(0x03)
	float DecaySpeed; // 0x2b8(0x04)
	char UnknownData_2BC[0x4]; // 0x2bc(0x04)

	void OnRep_Finished(); // Function FSD.AnchorTurner.OnRep_Finished
	void OnLeftPushpoint(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function FSD.AnchorTurner.OnLeftPushpoint
	void OnEnteredPushpoint(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult SweepResult); // Function FSD.AnchorTurner.OnEnteredPushpoint
	void GeneratorSpunUp(); // Function FSD.AnchorTurner.GeneratorSpunUp
};

// Class FSD.AnchorTurnerAnimInstance
// Size: 0x280 (Inherited: 0x270)
struct UAnchorTurnerAnimInstance : UAnimInstance {
	float ModuleRotation; // 0x268(0x04)
	float Percent; // 0x26c(0x04)
	float TurnSpeed; // 0x270(0x04)
	bool IsFinished; // 0x274(0x01)
	char UnknownData_27D[0x3]; // 0x27d(0x03)
};

// Class FSD.BaseArmorDamageComponent
// Size: 0xe0 (Inherited: 0xb0)
struct UBaseArmorDamageComponent : UActorComponent {
	bool ArmorDamageEnabled; // 0xb0(0x01)
	char UnknownData_B1[0x7]; // 0xb1(0x07)
	struct TArray<struct UParticleSystem*> ArmorBreakParticles; // 0xb8(0x10)
	struct TArray<struct UFSDPhysicalMaterial*> ArmorPhysMats; // 0xc8(0x10)
	struct USkeletalMeshComponent* Mesh; // 0xd8(0x08)
};

// Class FSD.SimpleArmorDamageComponent
// Size: 0x148 (Inherited: 0xe0)
struct USimpleArmorDamageComponent : UBaseArmorDamageComponent {
	struct FMulticastInlineDelegate OnRadialArmorPartsDestroyedEvent; // 0xe0(0x10)
	float ArmorStrength; // 0xf0(0x04)
	char UnknownData_F4[0x4]; // 0xf4(0x04)
	struct TMap<struct FName, struct FDestructableBodypartItem> PhysBoneToArmor; // 0xf8(0x50)

	void DamageArmor_All(struct TArray<char> parts); // Function FSD.SimpleArmorDamageComponent.DamageArmor_All
};

// Class FSD.ArmorHealthDamageComponent
// Size: 0x148 (Inherited: 0xe0)
struct UArmorHealthDamageComponent : UBaseArmorDamageComponent {
	struct FMulticastInlineDelegate OnArmorPartDestroyedEvent; // 0xe0(0x10)
	struct TMap<struct FName, struct FArmorHealthItem> PhysBoneToArmor; // 0xf0(0x50)
	uint32_t ArmorDamageIndex; // 0x140(0x04)
	bool AffectedByAmorBreak; // 0x144(0x01)
	char UnknownData_145[0x3]; // 0x145(0x03)

	bool SetHealthOnBodypartItem(struct FName BoneName, float newHealth); // Function FSD.ArmorHealthDamageComponent.SetHealthOnBodypartItem
	void SetHealthOnAllItems(float newHealth); // Function FSD.ArmorHealthDamageComponent.SetHealthOnAllItems
	void RegrowAllArmor(float baseHealth); // Function FSD.ArmorHealthDamageComponent.RegrowAllArmor
	void OnRep_ArmorDamageIndex(uint32_t OldValue); // Function FSD.ArmorHealthDamageComponent.OnRep_ArmorDamageIndex
};

// Class FSD.CompositeArmorComponent
// Size: 0xf0 (Inherited: 0xe0)
struct UCompositeArmorComponent : UBaseArmorDamageComponent {
	struct TArray<struct FCompositeArmorItem> ArmorItems; // 0xe0(0x10)

	void AddArmorPart(struct UPrimitiveComponent* Primitive, float Health); // Function FSD.CompositeArmorComponent.AddArmorPart
};

// Class FSD.ArmorPiece
// Size: 0x2a8 (Inherited: 0x220)
struct AArmorPiece : AActor {
	char UnknownData_220[0x18]; // 0x220(0x18)
	struct UUpgradableGearComponent* Upgradable; // 0x238(0x08)
	struct TMap<struct UPawnStat*, float> StatModifiers; // 0x240(0x50)
	struct ALoadoutItemProxy* LoadoutProxy; // 0x290(0x08)
	struct UItemID* ItemID; // 0x298(0x08)
	struct AActor* WeaponPreviewClass; // 0x2a0(0x08)

	struct AActor* GetWeaponViewClass(); // Function FSD.ArmorPiece.GetWeaponViewClass
	struct AArmorPiece* GetArmorPieceDefaultObject(struct AArmorPiece* armorPieceClass); // Function FSD.ArmorPiece.GetArmorPieceDefaultObject
};

// Class FSD.ThrowableItem
// Size: 0x3e0 (Inherited: 0x368)
struct AThrowableItem : AAnimatedItem {
	char UnknownData_368[0x8]; // 0x368(0x08)
	struct AThrowableActor* ThrowableClass; // 0x370(0x08)
	struct UAnimMontage* FPThrowMontage; // 0x378(0x08)
	struct UAnimMontage* TPThrowMontage; // 0x380(0x08)
	float ThrowVelocity; // 0x388(0x04)
	float InheritOwnerVelocityScale; // 0x38c(0x04)
	float ThrowAngle; // 0x390(0x04)
	float CooldownAfterThrow; // 0x394(0x04)
	float CooldownAfterDetonation; // 0x398(0x04)
	bool CanThrowBeforeEquipAnimFinish; // 0x39c(0x01)
	char UnknownData_39D[0x3]; // 0x39d(0x03)
	float ThrowDelay; // 0x3a0(0x04)
	float ThrowZOffset; // 0x3a4(0x04)
	float CooldownLeft; // 0x3a8(0x04)
	char UnknownData_3AC[0x4]; // 0x3ac(0x04)
	struct TArray<struct UItemUpgrade*> Upgrades; // 0x3b0(0x10)
	struct AItem* LoadoutItem; // 0x3c0(0x08)
	struct TArray<struct FWeakObjectPtr<struct AThrowableActor>> ThrownActors; // 0x3c8(0x10)
	char UnknownData_3D8[0x8]; // 0x3d8(0x08)

	void Simulate_Throw(struct AThrowableActor* ActorClass); // Function FSD.ThrowableItem.Simulate_Throw
	void Server_Throw(struct AThrowableActor* ActorClass); // Function FSD.ThrowableItem.Server_Throw
	void ReceiveItemThrown(struct AThrowableActor* thrownActor); // Function FSD.ThrowableItem.ReceiveItemThrown
	void ReceiveItemSpawned(struct AThrowableActor* thrownActor); // Function FSD.ThrowableItem.ReceiveItemSpawned
	void OnThrownActorDestroyed(struct AActor* Actor); // Function FSD.ThrowableItem.OnThrownActorDestroyed
	struct FVector GetThrowLocation(); // Function FSD.ThrowableItem.GetThrowLocation
};

// Class FSD.ArmorRegeneratorItem
// Size: 0x458 (Inherited: 0x3e0)
struct AArmorRegeneratorItem : AThrowableItem {
	char UnknownData_3E0[0x10]; // 0x3e0(0x10)
	struct UCapacityHoldingItemAggregator* ChargeCapacity; // 0x3f0(0x08)
	struct UCapacityHoldingItemAggregator* CarryCapacity; // 0x3f8(0x08)
	float RechargeDuration; // 0x400(0x04)
	int32_t UnchargedCount; // 0x404(0x04)
	float RechargeProgress; // 0x408(0x04)
	float SupplyStatusWeight; // 0x40c(0x04)
	struct UDialogDataAsset* ShoutRecarged; // 0x410(0x08)
	struct FCoolDownProgressStyle RechargeProgressUI; // 0x418(0x40)

	void ReceiveGeneratorReturned(); // Function FSD.ArmorRegeneratorItem.ReceiveGeneratorReturned
	void ReceiveGeneratorRechargeProgress(float Progress); // Function FSD.ArmorRegeneratorItem.ReceiveGeneratorRechargeProgress
	void ReceiveGeneratorRecharged(); // Function FSD.ArmorRegeneratorItem.ReceiveGeneratorRecharged
	void OnRep_UnchargedCount(int32_t OldCount); // Function FSD.ArmorRegeneratorItem.OnRep_UnchargedCount
	bool GetIsRecharging(); // Function FSD.ArmorRegeneratorItem.GetIsRecharging
	void GeneratorReturned(); // Function FSD.ArmorRegeneratorItem.GeneratorReturned
};

// Class FSD.ThrowableActor
// Size: 0x230 (Inherited: 0x220)
struct AThrowableActor : AActor {
	struct UProjectileMovementComponent* Movement; // 0x220(0x08)
	bool IsMoving; // 0x228(0x01)
	bool IgnoreFellOutOfWorld; // 0x229(0x01)
	bool IgnoreOwnersCollision; // 0x22a(0x01)
	char UnknownData_22B[0x5]; // 0x22b(0x05)

	void ReceiveIgnoreCharacter(struct APlayerCharacter* Character); // Function FSD.ThrowableActor.ReceiveIgnoreCharacter
	void ReceiveHitObject(); // Function FSD.ThrowableActor.ReceiveHitObject
	void OnRep_IsMoving(); // Function FSD.ThrowableActor.OnRep_IsMoving
};

// Class FSD.ArmorRegeneratorActor
// Size: 0x240 (Inherited: 0x230)
struct AArmorRegeneratorActor : AThrowableActor {
	float GeneratorRadius; // 0x230(0x04)
	float DeployDelay; // 0x234(0x04)
	bool bPushStatusEffectOnExit; // 0x238(0x01)
	char UnknownData_239[0x3]; // 0x239(0x03)
	float GeneratorLifetime; // 0x23c(0x04)
};

// Class FSD.AsyncLevelPersistanceActor
// Size: 0x240 (Inherited: 0x220)
struct AAsyncLevelPersistanceActor : AActor {
	struct TArray<struct UObject*> References; // 0x220(0x10)
	char UnknownData_230[0x10]; // 0x230(0x10)
};

// Class FSD.AsyncManager
// Size: 0x58 (Inherited: 0x30)
struct UAsyncManager : UGameInstanceSubsystem {
	struct TArray<struct UObject*> PermanentReferences; // 0x30(0x10)
	char UnknownData_40[0x18]; // 0x40(0x18)

	void AsyncLoadSoftObjects(struct TArray<struct TSoftObjectPtr<struct UObject>> Items, enum class EAsyncPersistence persistence, struct FDelegate OnLoadComplete, enum class EAsyncLoadPriority Priority); // Function FSD.AsyncManager.AsyncLoadSoftObjects
	void AsyncLoadSoftObject(struct TSoftObjectPtr<struct UObject> Item, enum class EAsyncPersistence persistence, struct FDelegate OnLoadComplete, enum class EAsyncLoadPriority Priority); // Function FSD.AsyncManager.AsyncLoadSoftObject
	void AsyncLoadSoftClass(SoftClassProperty Item, enum class EAsyncPersistence persistence, struct FDelegate OnLoadComplete, enum class EAsyncLoadPriority Priority); // Function FSD.AsyncManager.AsyncLoadSoftClass
	void AsyncLoadAssets(struct TArray<struct FSoftObjectPath> Items, enum class EAsyncPersistence persistence, struct FDelegate OnLoadComplete, enum class EAsyncLoadPriority Priority); // Function FSD.AsyncManager.AsyncLoadAssets
	void AsyncLoadAsset(struct FSoftObjectPath Item, enum class EAsyncPersistence persistence, struct FDelegate OnLoadComplete, enum class EAsyncLoadPriority Priority); // Function FSD.AsyncManager.AsyncLoadAsset
};

// Class FSD.AttackBaseComponent
// Size: 0xf0 (Inherited: 0xb0)
struct UAttackBaseComponent : UActorComponent {
	char UnknownData_B0[0x10]; // 0xb0(0x10)
	struct FName AttackName; // 0xc0(0x08)
	float MaxSurfaceAngle; // 0xc8(0x04)
	struct FFloatInterval Range; // 0xcc(0x08)
	float MinRange; // 0xd4(0x04)
	float MaxRange; // 0xd8(0x04)
	char UnknownData_DC[0x14]; // 0xdc(0x14)

	struct UAttackBaseComponent* ReplaceAttackComponent(struct UAttackBaseComponent* componentToReplace, struct UAttackBaseComponent* newComponentClass); // Function FSD.AttackBaseComponent.ReplaceAttackComponent
	void ReceiveAttackTarget(struct AActor* Target); // Function FSD.AttackBaseComponent.ReceiveAttackTarget
	void ReceiveAbortAttack(); // Function FSD.AttackBaseComponent.ReceiveAbortAttack
	void CompleteAttack(bool success); // Function FSD.AttackBaseComponent.CompleteAttack
};

// Class FSD.AttackEffect
// Size: 0x28 (Inherited: 0x28)
struct UAttackEffect : UObject {
};

// Class FSD.AttackCooldownComponent
// Size: 0xc0 (Inherited: 0xb0)
struct UAttackCooldownComponent : UActorComponent {
	struct TArray<struct FAttackCooldown> AttackCooldowns; // 0xb0(0x10)

	void SetCooldown(struct FName AttackName, float cooldownSeconds); // Function FSD.AttackCooldownComponent.SetCooldown
	bool IsAttackOffCooldown(struct FName AttackName); // Function FSD.AttackCooldownComponent.IsAttackOffCooldown
	bool IsAnyAttackOffCooldown(); // Function FSD.AttackCooldownComponent.IsAnyAttackOffCooldown
	void AttackUsed(struct FName Name); // Function FSD.AttackCooldownComponent.AttackUsed
};

// Class FSD.AttackerManagerComponent
// Size: 0xc0 (Inherited: 0xb0)
struct UAttackerManagerComponent : UActorComponent {
	struct TArray<struct UAttackerPositioningComponent*> Components; // 0xb0(0x10)
};

// Class FSD.AttackerPositioningComponent
// Size: 0x108 (Inherited: 0xb0)
struct UAttackerPositioningComponent : UActorComponent {
	bool DebugPositions; // 0xb0(0x01)
	char UnknownData_B1[0x3]; // 0xb1(0x03)
	int32_t MaxAttackers; // 0xb4(0x04)
	struct TArray<struct FAttackerInfo> Attackers; // 0xb8(0x10)
	struct TArray<int32_t> FreePositions; // 0xc8(0x10)
	struct TArray<struct FAttackerInfo> FlyingAttackers; // 0xd8(0x10)
	struct TArray<int32_t> FlyingFreePositions; // 0xe8(0x10)
	float CharacterPersonalSphere; // 0xf8(0x04)
	float CharacterHalfHeight; // 0xfc(0x04)
	float CostModifier; // 0x100(0x04)
	char UnknownData_104[0x4]; // 0x104(0x04)

	void UnregisterAttacker(struct AActor* Attacker, bool IsFlying); // Function FSD.AttackerPositioningComponent.UnregisterAttacker
	void RegisterAttacker(struct AActor* Attacker, bool IsFlying); // Function FSD.AttackerPositioningComponent.RegisterAttacker
	void OnFlyingAttackerDeath(struct UHealthComponentBase* HealthComponent); // Function FSD.AttackerPositioningComponent.OnFlyingAttackerDeath
	void OnAttackerDeath(struct UHealthComponentBase* HealthComponent); // Function FSD.AttackerPositioningComponent.OnAttackerDeath
	struct FVector GetFlyingAttackerPosition(struct AActor* Attacker, float AttackerRadius); // Function FSD.AttackerPositioningComponent.GetFlyingAttackerPosition
	struct FVector GetAttackerPosition(struct AActor* Attacker, float AttackerRadius); // Function FSD.AttackerPositioningComponent.GetAttackerPosition
};

// Class FSD.PlayerAttackPositionComponent
// Size: 0x110 (Inherited: 0x108)
struct UPlayerAttackPositionComponent : UAttackerPositioningComponent {
	float OnZiplineFlyingModifier; // 0x108(0x04)
	float OnZiplineWalkingModifier; // 0x10c(0x04)
};

// Class FSD.ObjectAttackerPositioning
// Size: 0x110 (Inherited: 0x108)
struct UObjectAttackerPositioning : UAttackerPositioningComponent {
	struct UHealthComponentBase* Health; // 0x108(0x08)
};

// Class FSD.CustomObjectAttackerPositioning
// Size: 0x120 (Inherited: 0x108)
struct UCustomObjectAttackerPositioning : UAttackerPositioningComponent {
	struct UHealthComponentBase* Health; // 0x108(0x08)
	struct TArray<struct FVector> AttackerPositions; // 0x110(0x10)
};

// Class FSD.EnemyAttackerPositioningComponent
// Size: 0x108 (Inherited: 0x108)
struct UEnemyAttackerPositioningComponent : UAttackerPositioningComponent {
};

// Class FSD.EscortMuleAttackerPositioning
// Size: 0x120 (Inherited: 0x108)
struct UEscortMuleAttackerPositioning : UAttackerPositioningComponent {
	struct UHealthComponentBase* Health; // 0x108(0x08)
	struct TArray<struct FVector> AttackerPositions; // 0x110(0x10)

	void SetNewMaxAttackers(int32_t newMaxAttackers); // Function FSD.EscortMuleAttackerPositioning.SetNewMaxAttackers
	void SetCostModifier(float newModifier); // Function FSD.EscortMuleAttackerPositioning.SetCostModifier
};

// Class FSD.AttackingPointInterface
// Size: 0x28 (Inherited: 0x28)
struct UAttackingPointInterface : UInterface {
};

// Class FSD.AudioFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct UAudioFunctionLibrary : UBlueprintFunctionLibrary {

	float SetSoundClassVolume(struct USoundClass* SoundClass, float Volume); // Function FSD.AudioFunctionLibrary.SetSoundClassVolume
	void PushTimedSoundMix(struct UObject* contextObject, struct USoundMix* mix, float Duration); // Function FSD.AudioFunctionLibrary.PushTimedSoundMix
	float GetSoundClassVolume(struct USoundClass* SoundClass); // Function FSD.AudioFunctionLibrary.GetSoundClassVolume
};

// Class FSD.SoundClassWidget
// Size: 0x230 (Inherited: 0x230)
struct USoundClassWidget : UUserWidget {
};

// Class FSD.AutoCannon
// Size: 0x758 (Inherited: 0x690)
struct AAutoCannon : AAmmoDrivenWeapon {
	float StartingFireRate; // 0x690(0x04)
	float MaxFireRate; // 0x694(0x04)
	struct FRuntimeFloatCurve FireRateCurve; // 0x698(0x88)
	float FireTimeReductionScale; // 0x720(0x04)
	float FireTimeIncreaseScale; // 0x724(0x04)
	float MaxFireTimeCap; // 0x728(0x04)
	float DamageBonusAtFullROF; // 0x72c(0x04)
	bool StatusEffectAtFullROF; // 0x730(0x01)
	char UnknownData_731[0x3]; // 0x731(0x03)
	float FireTimeOffsetForMaxRateOfFireBonus; // 0x734(0x04)
	float StartLoopingSoundAt; // 0x738(0x04)
	char UnknownData_73C[0x4]; // 0x73c(0x04)
	struct UStatusEffect* StatusAtFullROF; // 0x740(0x08)
	struct UAnimMontage* WPN_Fire_3; // 0x748(0x08)
	float CurrentFireTime; // 0x750(0x04)
	char UnknownData_754[0x4]; // 0x754(0x04)

	void Server_SetStatusActive(bool IsActive); // Function FSD.AutoCannon.Server_SetStatusActive
};

// Class FSD.AutoCannonAnimInstance
// Size: 0x270 (Inherited: 0x270)
struct UAutoCannonAnimInstance : UAnimInstance {
};

// Class FSD.AutoCarverComponent
// Size: 0x4c0 (Inherited: 0x480)
struct UAutoCarverComponent : UStaticMeshComponent {
	struct UTerrainMaterialBase* TerrainMaterial; // 0x480(0x08)
	float Frequency; // 0x488(0x04)
	float ExpensiveNoise; // 0x48c(0x04)
	float MinDistanceMoved; // 0x490(0x04)
	enum class ECarveFilterType Filter; // 0x494(0x01)
	char UnknownData_495[0x3]; // 0x495(0x03)
	struct FMulticastInlineDelegate OnCarveDoneEvent; // 0x498(0x10)
	char UnknownData_4A8[0x18]; // 0x4a8(0x18)

	void ForceCarve(); // Function FSD.AutoCarverComponent.ForceCarve
};

// Class FSD.STLMeshCarverComponent
// Size: 0x410 (Inherited: 0x3f0)
struct USTLMeshCarverComponent : UPrimitiveComponent {
	struct UTerrainMaterialBase* TerrainMaterial; // 0x3f0(0x08)
	struct USTLMeshCarver* MeshCarver; // 0x3f8(0x08)
	enum class ECarveFilterType Filter; // 0x400(0x01)
	bool PreviewEnabled; // 0x401(0x01)
	char UnknownData_402[0xe]; // 0x402(0x0e)
};

// Class FSD.MeshCarverComponent
// Size: 0x4a0 (Inherited: 0x480)
struct UMeshCarverComponent : UStaticMeshComponent {
	struct UTerrainMaterialBase* TerrainMaterial; // 0x480(0x08)
	enum class ECarveFilterType Filter; // 0x488(0x01)
	char UnknownData_489[0x3]; // 0x489(0x03)
	float ExpensiveNoise; // 0x48c(0x04)
	enum class CarveOptionsCellSize CarverSize; // 0x490(0x01)
	char UnknownData_491[0xf]; // 0x491(0x0f)

	void Carve(); // Function FSD.MeshCarverComponent.Carve
};

// Class FSD.LevelGenerationCarverComponent
// Size: 0x420 (Inherited: 0x3f0)
struct ULevelGenerationCarverComponent : UPrimitiveComponent {
	struct USTLMeshCarver* MeshCarver; // 0x3f0(0x08)
	struct UStaticMesh* ConvexCarver; // 0x3f8(0x08)
	struct UStaticMeshCarver* StaticMeshCarver; // 0x400(0x08)
	struct UTerrainMaterialBase* TerrainMaterial; // 0x408(0x08)
	enum class ECarveFilterType Filter; // 0x410(0x01)
	char UnknownData_411[0x3]; // 0x411(0x03)
	float ConvexExpensiveNoise; // 0x414(0x04)
	enum class CarveOptionsCellSize CarveCellSize; // 0x418(0x01)
	bool PreviewEnabled; // 0x419(0x01)
	bool CarvingDisabled; // 0x41a(0x01)
	bool SelfActivate; // 0x41b(0x01)
	char UnknownData_41C[0x4]; // 0x41c(0x04)
};

// Class FSD.RandomizedInstantMeshCarver
// Size: 0x268 (Inherited: 0x220)
struct ARandomizedInstantMeshCarver : AActor {
	struct TArray<struct UStaticMesh*> CarvingMeshes; // 0x220(0x10)
	struct TArray<struct USTLMeshCarver*> STLCarvingMeshes; // 0x230(0x10)
	struct TArray<struct UStaticMeshCarver*> StaticMeshCarvers; // 0x240(0x10)
	struct FRandRange RandomScale; // 0x250(0x08)
	struct UTerrainMaterialBase* TerrainMaterial; // 0x258(0x08)
	enum class ECarveFilterType Filter; // 0x260(0x01)
	char UnknownData_261[0x7]; // 0x261(0x07)
};

// Class FSD.LevelGenerationCarverComponent2
// Size: 0x550 (Inherited: 0x3f0)
struct ULevelGenerationCarverComponent2 : UPrimitiveComponent {
	struct ACSGBuilder* Carver; // 0x3f0(0x08)
	bool CarvingDisabled; // 0x3f8(0x01)
	char UnknownData_3F9[0x3]; // 0x3f9(0x03)
	int32_t PreviewSeed; // 0x3fc(0x04)
	struct FBakeSettings CarverSettings; // 0x400(0x140)
	bool SelfActivate; // 0x540(0x01)
	char UnknownData_541[0x7]; // 0x541(0x07)
	struct UCSGPreviewComponent* PreviewComponent; // 0x548(0x08)
};

// Class FSD.Ball
// Size: 0xb0 (Inherited: 0xb0)
struct UBall : UActorComponent {
};

// Class FSD.WindowWidget
// Size: 0x270 (Inherited: 0x230)
struct UWindowWidget : UUserWidget {
	struct FMulticastInlineDelegate OnWindowClosed; // 0x230(0x10)
	char UnknownData_240[0x28]; // 0x240(0x28)
	bool bHandleCloseCommand; // 0x268(0x01)
	bool bResolutionDownscaleWhenOpen; // 0x269(0x01)
	char UnknownData_26A[0x6]; // 0x26a(0x06)

	void WindowDelegate__DelegateSignature(struct UWindowWidget* Window); // DelegateFunction FSD.WindowWidget.WindowDelegate__DelegateSignature
	void ReceiveSelectPreviousCommand(); // Function FSD.WindowWidget.ReceiveSelectPreviousCommand
	void ReceiveSelectNextCommand(); // Function FSD.WindowWidget.ReceiveSelectNextCommand
	void ReceiveSelectCharacterCommand(); // Function FSD.WindowWidget.ReceiveSelectCharacterCommand
	void ReceiveOkCommand(); // Function FSD.WindowWidget.ReceiveOkCommand
	void ReceiveCloseCommand(); // Function FSD.WindowWidget.ReceiveCloseCommand
	void OnShown(); // Function FSD.WindowWidget.OnShown
	void OnNewTopWindow(); // Function FSD.WindowWidget.OnNewTopWindow
	void OnClosed(); // Function FSD.WindowWidget.OnClosed
	void ConsumeCommand(); // Function FSD.WindowWidget.ConsumeCommand
	void CloseThisWindow(); // Function FSD.WindowWidget.CloseThisWindow
};

// Class FSD.BarMenuWidget
// Size: 0x278 (Inherited: 0x270)
struct UBarMenuWidget : UWindowWidget {
	struct FWeakObjectPtr<struct ASpaceRigBar> SpaceRigBar; // 0x270(0x08)
};

// Class FSD.WeaponFireComponent
// Size: 0x110 (Inherited: 0xb0)
struct UWeaponFireComponent : UActorComponent {
	char UnknownData_B0[0x8]; // 0xb0(0x08)
	struct FMulticastInlineDelegate OnWeaponFired; // 0xb8(0x10)
	struct FMulticastInlineDelegate OnWeaponFireEnded; // 0xc8(0x10)
	struct FMulticastInlineDelegate OnRicochetEvent; // 0xd8(0x10)
	char UnknownData_E8[0x10]; // 0xe8(0x10)
	struct TScriptInterface<None> Weapon; // 0xf8(0x10)
	char UnknownData_108[0x8]; // 0x108(0x08)

	void StopFire(); // Function FSD.WeaponFireComponent.StopFire
	void Server_SetShotPower(float shotPower); // Function FSD.WeaponFireComponent.Server_SetShotPower
	void Fire(struct FVector Origin, struct FVector_NetQuantizeNormal Direction); // Function FSD.WeaponFireComponent.Fire
};

// Class FSD.BasicWeaponFireComponent
// Size: 0x110 (Inherited: 0x110)
struct UBasicWeaponFireComponent : UWeaponFireComponent {

	void Server_FireWeapon(); // Function FSD.BasicWeaponFireComponent.Server_FireWeapon
	void Server_EndFire(); // Function FSD.BasicWeaponFireComponent.Server_EndFire
	void All_WeaponFired(); // Function FSD.BasicWeaponFireComponent.All_WeaponFired
};

// Class FSD.BeltDrivenWeapon
// Size: 0x6c0 (Inherited: 0x690)
struct ABeltDrivenWeapon : AAmmoDrivenWeapon {
	struct UAudioComponent* BarrelAudio; // 0x690(0x08)
	struct USoundCue* BarrelSound; // 0x698(0x08)
	float BarrelFadeIn; // 0x6a0(0x04)
	float BarrelFadeOut; // 0x6a4(0x04)
	struct UCurveFloat* BarrelPitchCurve; // 0x6a8(0x08)
	float BarrelSpinUpTime; // 0x6b0(0x04)
	float BarrelSpinDownTime; // 0x6b4(0x04)
	float CurrentSpinRate; // 0x6b8(0x04)
	bool Simulate_SpinBarrel; // 0x6bc(0x01)
	char UnknownData_6BD[0x3]; // 0x6bd(0x03)

	void Server_StopBarrel(); // Function FSD.BeltDrivenWeapon.Server_StopBarrel
	void Server_StartBarrel(); // Function FSD.BeltDrivenWeapon.Server_StartBarrel
};

// Class FSD.GatlingGun
// Size: 0x720 (Inherited: 0x6c0)
struct AGatlingGun : ABeltDrivenWeapon {
	bool BarrelProximityDamageEnabled; // 0x6c0(0x01)
	char UnknownData_6C1[0x3]; // 0x6c1(0x03)
	float BarrelProximityDamageDistance; // 0x6c4(0x04)
	float BarrelProximityDamageRadius; // 0x6c8(0x04)
	float BarrelProximityDamageLength; // 0x6cc(0x04)
	float TimeBetweenProximityDamageTicks; // 0x6d0(0x04)
	char UnknownData_6D4[0x14]; // 0x6d4(0x14)
	float DamageMultiplierAtMaxStabilization; // 0x6e8(0x04)
	char UnknownData_6EC[0x4]; // 0x6ec(0x04)
	struct UFXSystemAsset* HotShellsTracerParticles; // 0x6f0(0x08)
	char UnknownData_6F8[0x8]; // 0x6f8(0x08)
	float HeatRemovedOnKill; // 0x700(0x04)
	bool CriticalOverheatEnabled; // 0x704(0x01)
	bool HotShellsOn; // 0x705(0x01)
	char UnknownData_706[0x2]; // 0x706(0x02)
	float HotShellsTemperatureRequired; // 0x708(0x04)
	char UnknownData_70C[0x4]; // 0x70c(0x04)
	struct UDamageComponent* DamageComponent; // 0x710(0x08)
	struct UDamageComponent* BarrelProximityDamageComponent; // 0x718(0x08)

	void Server_SetHotShellsOn(bool hotShellsIsOn); // Function FSD.GatlingGun.Server_SetHotShellsOn
	void OnRep_HotShellsTracerOn(); // Function FSD.GatlingGun.OnRep_HotShellsTracerOn
	void OnGatlingTemperatureChanged(float Temperature, bool isOverheated); // Function FSD.GatlingGun.OnGatlingTemperatureChanged
	void OnEnemyKilled(struct AActor* Target, struct UFSDPhysicalMaterial* PhysMat); // Function FSD.GatlingGun.OnEnemyKilled
	void Client_RemoveHeat(); // Function FSD.GatlingGun.Client_RemoveHeat
};

// Class FSD.BeltDrivenAnimInstance
// Size: 0x2a0 (Inherited: 0x270)
struct UBeltDrivenAnimInstance : UAnimInstance {
	float BarrelSpinRate; // 0x268(0x04)
	float CurrentBarrelSpinRate; // 0x26c(0x04)
	bool IsFiring; // 0x270(0x01)
	bool Overheated; // 0x271(0x01)
	struct FVector ExternalForce; // 0x274(0x0c)
	float ExternalForceScale; // 0x280(0x04)
	struct FName ExternalForceBoneName; // 0x284(0x08)
	char UnknownData_292[0xe]; // 0x292(0x0e)
};

// Class FSD.Biome
// Size: 0x428 (Inherited: 0x30)
struct UBiome : UDataAsset {
	struct FText BiomeName; // 0x30(0x18)
	struct FText BiomeShortName; // 0x48(0x18)
	struct FText BiomeDescription; // 0x60(0x18)
	struct FColor BiomeColor; // 0x78(0x04)
	int32_t BiomeIndex; // 0x7c(0x04)
	struct FString BiomeAnalyticsIndex; // 0x80(0x10)
	struct TSoftObjectPtr<struct UFileMediaSource> BiomeMovie; // 0x90(0x28)
	struct TSoftObjectPtr<struct UTexture2D> BiomePicture; // 0xb8(0x28)
	struct TSoftObjectPtr<struct UTexture2D> BiomeIcon; // 0xe0(0x28)
	struct TSoftObjectPtr<struct UTexture2D> BiomeLargeImage; // 0x108(0x28)
	struct TSoftObjectPtr<struct UTexture2D> BiomeWorldMap; // 0x130(0x28)
	struct TSoftObjectPtr<struct UTexture2D> BiomeMissionBar; // 0x158(0x28)
	SoftClassProperty BiomeMapWidget; // 0x180(0x28)
	struct FHeatSource BiomeHeatSource; // 0x1a8(0x08)
	struct FRandRange DepthRange; // 0x1b0(0x08)
	struct TSoftObjectPtr<struct UParticleSystem> AtmosphericParticles; // 0x1b8(0x28)
	struct TArray<SoftClassProperty> CaveScriptComponents; // 0x1e0(0x10)
	float ExtraCaveSize; // 0x1f0(0x04)
	char UnknownData_1F4[0x4]; // 0x1f4(0x04)
	struct TArray<struct UDebrisSet*> Debris; // 0x1f8(0x10)
	SoftClassProperty DebrisActor; // 0x208(0x28)
	struct TArray<struct FBiomeDebrisInfluencerVariant> DebrisInfluencerVariants; // 0x230(0x10)
	SoftClassProperty PostProcessActorClass; // 0x240(0x28)
	struct UTerrainMaterial* RockMaterial; // 0x268(0x08)
	struct UTerrainMaterial* DirtMaterial; // 0x270(0x08)
	struct UTerrainMaterial* BurnedMaterialOverride; // 0x278(0x08)
	struct TArray<struct FBiomeNoiseItem> RoomNoises; // 0x280(0x10)
	struct UMissionStat* MissionCompleted; // 0x290(0x08)
	struct UFloodFillSettings* CeilingNoise; // 0x298(0x08)
	struct UDetailNoise* CeilingDetailNoise; // 0x2a0(0x08)
	struct UFloodFillSettings* WallNoise; // 0x2a8(0x08)
	struct UDetailNoise* WallDetailNoise; // 0x2b0(0x08)
	struct UFloodFillSettings* FloorNoise; // 0x2b8(0x08)
	struct UDetailNoise* FloorDetailNoise; // 0x2c0(0x08)
	struct UFloodFillSettings* PillarNoise; // 0x2c8(0x08)
	struct UDetailNoise* PillarDetailNoise; // 0x2d0(0x08)
	struct UPillarSettings* PillarSettings; // 0x2d8(0x08)
	struct TArray<struct UTunnelSetting*> TunnelSettings; // 0x2e0(0x10)
	struct UFloodFillSettings* TunnelCeilingNoise; // 0x2f0(0x08)
	struct UFloodFillSettings* TunnelWallNoise; // 0x2f8(0x08)
	struct UFloodFillSettings* TunnelFloorNoise; // 0x300(0x08)
	struct TArray<struct FResourceSpawner> Resources; // 0x308(0x10)
	struct TArray<struct FBiomeEnemyEntry> Enemies; // 0x318(0x10)
	struct TArray<struct UEnemyDescriptor*> BannedEnemies; // 0x328(0x10)
	struct TArray<struct UEnemyDescriptor*> StationaryEnemies; // 0x338(0x10)
	struct TArray<struct UCritterDescriptor*> Critters; // 0x348(0x10)
	struct TSoftObjectPtr<struct USoundCue> AmbientSounds; // 0x358(0x28)
	bool Use3DAmbient; // 0x380(0x01)
	char UnknownData_381[0x7]; // 0x381(0x07)
	struct FReverbSettings ReverbSettings; // 0x388(0x20)
	float SmallCaveReverbVolume; // 0x3a8(0x04)
	char UnknownData_3AC[0x4]; // 0x3ac(0x04)
	struct UReverbEffect* SmallCaveReverb; // 0x3b0(0x08)
	float MediumCaveReverbVolume; // 0x3b8(0x04)
	char UnknownData_3BC[0x4]; // 0x3bc(0x04)
	struct UReverbEffect* MediumCaveReverb; // 0x3c0(0x08)
	float LargeCaveReverbVolume; // 0x3c8(0x04)
	char UnknownData_3CC[0x4]; // 0x3cc(0x04)
	struct UReverbEffect* LargeCaveReverb; // 0x3d0(0x08)
	struct TSoftObjectPtr<struct ULevelSequence> BiomeLoaderLevelSequence; // 0x3d8(0x28)
	struct FString BiomeLoaderLevelName; // 0x400(0x10)
	struct TArray<struct FText> Quotes; // 0x410(0x10)
	float PlanetZoneSelectionWeight; // 0x420(0x04)
	char UnknownData_424[0x4]; // 0x424(0x04)

	struct UTerrainMaterial* GetRockMaterial(); // Function FSD.Biome.GetRockMaterial
	SoftClassProperty GetPostProcessActorClass_Soft(); // Function FSD.Biome.GetPostProcessActorClass_Soft
	struct UTerrainMaterial* GetDirtMaterial(); // Function FSD.Biome.GetDirtMaterial
	SoftClassProperty GetDebrisActorSoftClass(); // Function FSD.Biome.GetDebrisActorSoftClass
	struct UTexture2D* GetBiomeWorldMap(); // Function FSD.Biome.GetBiomeWorldMap
	struct UTexture2D* GetBiomePicture(); // Function FSD.Biome.GetBiomePicture
	struct FText GetBiomeName(); // Function FSD.Biome.GetBiomeName
	struct UTexture2D* GetBiomeMissionBar(); // Function FSD.Biome.GetBiomeMissionBar
	struct UUserWidget* GetBiomeMapWidget(); // Function FSD.Biome.GetBiomeMapWidget
	struct TArray<struct FSoftObjectPath> GetBiomeMapAssetList(); // Function FSD.Biome.GetBiomeMapAssetList
	struct UTexture2D* GetBiomeLargeImage(); // Function FSD.Biome.GetBiomeLargeImage
	int32_t GetBiomeIndex(); // Function FSD.Biome.GetBiomeIndex
	struct UTexture2D* GetBiomeIcon(); // Function FSD.Biome.GetBiomeIcon
	struct FString GetBiomeAnalyticsIndex(); // Function FSD.Biome.GetBiomeAnalyticsIndex
	struct UParticleSystem* GetAtmosphericParticles(); // Function FSD.Biome.GetAtmosphericParticles
	struct USoundCue* GetAmbientSounds(); // Function FSD.Biome.GetAmbientSounds
};

// Class FSD.BobbingComponent
// Size: 0x220 (Inherited: 0x1f0)
struct UBobbingComponent : USceneComponent {
	struct FMulticastInlineDelegate OnMovedIntoSomethingEvent; // 0x1f0(0x10)
	struct AActor* OwnerActor; // 0x200(0x08)
	bool DoOrientationChecks; // 0x208(0x01)
	char UnknownData_209[0x3]; // 0x209(0x03)
	float BobSpeed; // 0x20c(0x04)
	float BobSize; // 0x210(0x04)
	float OrentationChecksPerSecond; // 0x214(0x04)
	char UnknownData_218[0x8]; // 0x218(0x08)

	void SetOwner(struct AActor* AActor); // Function FSD.BobbingComponent.SetOwner
};

// Class FSD.BoltActionWeapon
// Size: 0x7a8 (Inherited: 0x690)
struct ABoltActionWeapon : AAmmoDrivenWeapon {
	struct FMulticastInlineDelegate FullyFocusedEvent; // 0x690(0x10)
	struct UDamageComponent* DamageComponent; // 0x6a0(0x08)
	struct UHitscanBaseComponent* HitscanComponent; // 0x6a8(0x08)
	struct UStatusEffect* FocusedHitSTE; // 0x6b0(0x08)
	bool RequireWeakspotForFocusedHitSTE; // 0x6b8(0x01)
	bool IsNoGravityOnFocusEnabled; // 0x6b9(0x01)
	char UnknownData_6BA[0x2]; // 0x6ba(0x02)
	float NoGravityOnFocusDuration; // 0x6bc(0x04)
	float NoGravityFocusFallFriction; // 0x6c0(0x04)
	float NoGravityFocusGravityScale; // 0x6c4(0x04)
	char UnknownData_6C8[0x4]; // 0x6c8(0x04)
	float ZoomSpreadAmount; // 0x6cc(0x04)
	float ZoomMinSpreadWhileMoving; // 0x6d0(0x04)
	char UnknownData_6D4[0x4]; // 0x6d4(0x04)
	float ChargeSpeed; // 0x6d8(0x04)
	float ChargeAmmoCost; // 0x6dc(0x04)
	float ChargeRecoilMult; // 0x6e0(0x04)
	char UnknownData_6E4[0x14]; // 0x6e4(0x14)
	struct USoundCue* ZoomedInAudio; // 0x6f8(0x08)
	struct UParticleSystem* ChargedShotTrailParticles; // 0x700(0x08)
	struct FTracerData ChargedShotTracer; // 0x708(0x30)
	struct USoundCue* ChargedShotFireSound; // 0x738(0x08)
	float ChargedFoVChange; // 0x740(0x04)
	float ChargedFoVFadeSpeed; // 0x744(0x04)
	float MinCharge; // 0x748(0x04)
	float SlowMovementAtCharge; // 0x74c(0x04)
	float FullChargeDamageBonus; // 0x750(0x04)
	float AimedShotStaggerChance; // 0x754(0x04)
	float AimedWeakspotKilLRange; // 0x758(0x04)
	char UnknownData_75C[0x4]; // 0x75c(0x04)
	float TargetKilledReloadTimeBoost; // 0x760(0x04)
	float TargetKilledReloadTimeBoostDuration; // 0x764(0x04)
	char UnknownData_768[0x12]; // 0x768(0x12)
	bool LastShotWasAimed; // 0x77a(0x01)
	char UnknownData_77B[0xd]; // 0x77b(0x0d)
	bool IsMovementSlowed; // 0x788(0x01)
	char UnknownData_789[0x17]; // 0x789(0x17)
	bool ChargeAffectsDamage; // 0x7a0(0x01)
	bool Charging; // 0x7a1(0x01)
	char UnknownData_7A2[0x2]; // 0x7a2(0x02)
	float ChargeProgress; // 0x7a4(0x04)

	void SetOverheated(bool isOverheated); // Function FSD.BoltActionWeapon.SetOverheated
	void Server_SetIsMovementSlowed(bool bisMovementSlowed); // Function FSD.BoltActionWeapon.Server_SetIsMovementSlowed
	void Server_SetIsLatestShotFocused(bool bisShotFocused); // Function FSD.BoltActionWeapon.Server_SetIsLatestShotFocused
	void Server_SetIsChargingShot(bool bisCharging); // Function FSD.BoltActionWeapon.Server_SetIsChargingShot
	void OnTimerElapsed(); // Function FSD.BoltActionWeapon.OnTimerElapsed
	void OnTargetKilled(struct AActor* Target, struct UFSDPhysicalMaterial* PhysicalMaterial); // Function FSD.BoltActionWeapon.OnTargetKilled
	void OnTargetDamaged(struct UHealthComponentBase* Health, float amount, struct UFSDPhysicalMaterial* PhysicalMaterial); // Function FSD.BoltActionWeapon.OnTargetDamaged
	void OnShotPowerSet(); // Function FSD.BoltActionWeapon.OnShotPowerSet
	void OnMovementSlowed(bool isSlowed); // Function FSD.BoltActionWeapon.OnMovementSlowed
	void Client_OnTargetKilled(bool BoostReloadTime); // Function FSD.BoltActionWeapon.Client_OnTargetKilled
};

// Class FSD.BoltActionWeaponAnimInstance
// Size: 0x270 (Inherited: 0x270)
struct UBoltActionWeaponAnimInstance : UAnimInstance {
};

// Class FSD.Bomber
// Size: 0x540 (Inherited: 0x478)
struct ABomber : AAFlyingBug {
	struct UAudioComponent* GooSoundComponent; // 0x478(0x08)
	struct UParticleSystemComponent* AcidEmitterLeft; // 0x480(0x08)
	struct UParticleSystemComponent* AcidEmitterRight; // 0x488(0x08)
	char UnknownData_490[0x28]; // 0x490(0x28)
	struct AProjectile* AcidProjectile; // 0x4b8(0x08)
	struct UParticleSystem* deathParticles; // 0x4c0(0x08)
	struct USoundBase* deathSound; // 0x4c8(0x08)
	struct USoundBase* DeathPanicSound; // 0x4d0(0x08)
	struct UParticleSystem* BleedParticles; // 0x4d8(0x08)
	struct USoundBase* BladderDestroyedNoise; // 0x4e0(0x08)
	struct FWeakObjectPtr<struct UParticleSystemComponent> BleedParticlesComponent; // 0x4e8(0x08)
	struct FWeakObjectPtr<struct UAudioComponent> PanicAudioComponent; // 0x4f0(0x08)
	float RagdollForceModifier; // 0x4f8(0x04)
	float DeathYRotationSpeed; // 0x4fc(0x04)
	float DeathXRotationSpeed; // 0x500(0x04)
	float SearchRange; // 0x504(0x04)
	float NewPointMax; // 0x508(0x04)
	float NewPointMin; // 0x50c(0x04)
	float DeathSpeed; // 0x510(0x04)
	float DeathAcceleration; // 0x514(0x04)
	float AcidRate; // 0x518(0x04)
	float PostDeathAcidTime; // 0x51c(0x04)
	char UnknownData_520[0x18]; // 0x520(0x18)
	bool HasDied; // 0x538(0x01)
	bool IsRightDestroyed; // 0x539(0x01)
	bool IsLeftDestroyed; // 0x53a(0x01)
	bool dropAcid; // 0x53b(0x01)
	char UnknownData_53C[0x4]; // 0x53c(0x04)

	void StopSpinAndDie(); // Function FSD.Bomber.StopSpinAndDie
	void SetDropAcid(bool dropAcid); // Function FSD.Bomber.SetDropAcid
	void OnStartDeathPanic(); // Function FSD.Bomber.OnStartDeathPanic
	void OnRep_DropAcid(); // Function FSD.Bomber.OnRep_DropAcid
	void OnRep_Death(); // Function FSD.Bomber.OnRep_Death
	void OnRagdollHitGround(struct UPrimitiveComponent* HitComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, struct FVector NormalImpulse, struct FHitResult Hit); // Function FSD.Bomber.OnRagdollHitGround
	void OnBladderDamage(float amount); // Function FSD.Bomber.OnBladderDamage
	void OnArmorDestroyed(struct FName Name); // Function FSD.Bomber.OnArmorDestroyed
	void HideMesh(); // Function FSD.Bomber.HideMesh
	bool GetDropAcid(); // Function FSD.Bomber.GetDropAcid
	bool AreBladdersDestroyed(); // Function FSD.Bomber.AreBladdersDestroyed
};

// Class FSD.BomberAnimInstance
// Size: 0x300 (Inherited: 0x2f0)
struct UBomberAnimInstance : UFlyingBugAnimInstance {
	bool IsBombing; // 0x2f0(0x01)
	bool IsSpiraling; // 0x2f1(0x01)
	char UnknownData_2F2[0xe]; // 0x2f2(0x0e)
};

// Class FSD.BoscoAbillity
// Size: 0x68 (Inherited: 0x30)
struct UBoscoAbillity : UDataAsset {
	struct FName AbillityName; // 0x30(0x08)
	struct UAnimSequenceBase* AbillityAnimation; // 0x38(0x08)
	struct USoundBase* VoiceOnUse; // 0x40(0x08)
	enum class EBoscoAbillityTargetPreference TargetType; // 0x48(0x01)
	char UnknownData_49[0x3]; // 0x49(0x03)
	float Cooldown; // 0x4c(0x04)
	float WindUp; // 0x50(0x04)
	float Duration; // 0x54(0x04)
	float Range; // 0x58(0x04)
	float RechargeTime; // 0x5c(0x04)
	int32_t MaxCharges; // 0x60(0x04)
	bool TargetActorIfValid; // 0x64(0x01)
	bool RotateTowardsTarget; // 0x65(0x01)
	char UnknownData_66[0x2]; // 0x66(0x02)
};

// Class FSD.BoscoSpawnActorAbillity
// Size: 0x70 (Inherited: 0x68)
struct UBoscoSpawnActorAbillity : UBoscoAbillity {
	struct AActor* SpawnedActorClass; // 0x68(0x08)
};

// Class FSD.BoscoProjectileAbillity
// Size: 0x70 (Inherited: 0x68)
struct UBoscoProjectileAbillity : UBoscoAbillity {
	struct AProjectile* projectileClass; // 0x68(0x08)
};

// Class FSD.Bosco
// Size: 0x6c8 (Inherited: 0x378)
struct ABosco : ADeepPathfinderCharacter {
	char UnknownData_378[0x38]; // 0x378(0x38)
	struct UHealthComponent* HealthComponent; // 0x3b0(0x08)
	struct UBoscoAbillityComponent* AbillityComponent; // 0x3b8(0x08)
	struct UDamageComponent* Damage; // 0x3c0(0x08)
	struct UPawnSensingComponent* Senses; // 0x3c8(0x08)
	struct UDroneMiningToolBase* MiningTool; // 0x3d0(0x08)
	struct UBobbingComponent* BobbingComponent; // 0x3d8(0x08)
	struct USkeletalMeshComponent* BoscoMesh; // 0x3e0(0x08)
	struct UHitscanComponent* DroneHitScan; // 0x3e8(0x08)
	struct USpotLightComponent* SpotLightComponent; // 0x3f0(0x08)
	struct UPointLightComponent* PointLightComponent; // 0x3f8(0x08)
	struct UParticleSystemComponent* LTrail; // 0x400(0x08)
	struct UParticleSystemComponent* RTrail; // 0x408(0x08)
	struct UAudioComponent* MomentumSound; // 0x410(0x08)
	struct UDialogDataAsset* DefendDrilldozerShout; // 0x418(0x08)
	struct UDialogDataAsset* MineOrderShout; // 0x420(0x08)
	struct UDialogDataAsset* KillOrderShout; // 0x428(0x08)
	struct UDialogDataAsset* GoToOrderShout; // 0x430(0x08)
	struct UDialogDataAsset* ReviveOrderShout; // 0x438(0x08)
	struct UDialogDataAsset* PickupGemShout; // 0x440(0x08)
	struct UDialogDataAsset* ReviveThankShout; // 0x448(0x08)
	struct UDialogDataAsset* GeneralCallShout; // 0x450(0x08)
	struct UDialogDataAsset* RocketAbillityShout; // 0x458(0x08)
	struct UDialogDataAsset* CryoGrenadeAbillityShout; // 0x460(0x08)
	struct USoundBase* MineResponse; // 0x468(0x08)
	struct USoundBase* CombatResponse; // 0x470(0x08)
	struct USoundBase* LightResponse; // 0x478(0x08)
	struct USoundBase* ReviveResponse; // 0x480(0x08)
	struct USoundBase* AbillityResponse; // 0x488(0x08)
	struct USoundBase* CurrentResponse; // 0x490(0x08)
	float ResponseTime; // 0x498(0x04)
	char UnknownData_49C[0x4]; // 0x49c(0x04)
	struct FMulticastInlineDelegate OnReviveused; // 0x4a0(0x10)
	struct FMulticastInlineDelegate OnStateChanged; // 0x4b0(0x10)
	char UnknownData_4C0[0x10]; // 0x4c0(0x10)
	float CarryingSpeed; // 0x4d0(0x04)
	float CarryingAcceleration; // 0x4d4(0x04)
	float CarryingDampOmega; // 0x4d8(0x04)
	char UnknownData_4DC[0x14]; // 0x4dc(0x14)
	struct FGameplayTagContainer LosMatchTags; // 0x4f0(0x20)
	float SeeTargetTime; // 0x510(0x04)
	char UnknownData_514[0x4]; // 0x514(0x04)
	struct USoundBase* AbillityErrorSound; // 0x518(0x08)
	float INcreasedMiningArea; // 0x520(0x04)
	float TimeToResetMiningBoost; // 0x524(0x04)
	float MiningBoosMultiplier; // 0x528(0x04)
	char UnknownData_52C[0x4]; // 0x52c(0x04)
	struct TArray<struct UItemUpgrade*> Upgrades; // 0x530(0x10)
	struct UBoscoProjectileAbillity* RocketAbillity; // 0x540(0x08)
	struct UBoscoProjectileAbillity* CryoGrenadeAbillity; // 0x548(0x08)
	struct FGuid SavegameID; // 0x550(0x10)
	struct UItemID* ItemID; // 0x560(0x08)
	struct UUpgradableBoscoComponent* Upgradable; // 0x568(0x08)
	struct UAnimSequenceBase* SaluteAnimation; // 0x570(0x08)
	struct UAnimSequenceBase* PickupGemAnimation; // 0x578(0x08)
	struct UAnimSequenceBase* DropGemAnimation; // 0x580(0x08)
	struct TArray<struct UAnimSequenceBase*> HitReaction; // 0x588(0x10)
	float SaluteDuration; // 0x598(0x04)
	char UnknownData_59C[0x4]; // 0x59c(0x04)
	struct UDroneSkinnableComponent* Skinnable; // 0x5a0(0x08)
	struct TArray<struct FBoscoLightSetting> LightSettings; // 0x5a8(0x10)
	int32_t TargetLightSetting; // 0x5b8(0x04)
	char UnknownData_5BC[0x4]; // 0x5bc(0x04)
	struct TArray<struct UBoscoAbillity*> CombatAbillities; // 0x5c0(0x10)
	struct AActor* RotateTarget; // 0x5d0(0x08)
	struct FVector LookAtLocation; // 0x5d8(0x0c)
	char UnknownData_5E4[0x4]; // 0x5e4(0x04)
	struct USoundCue* ShootSound; // 0x5e8(0x08)
	float ShootSoundFadeout; // 0x5f0(0x04)
	char UnknownData_5F4[0x4]; // 0x5f4(0x04)
	struct USoundCue* ShootSoundTail; // 0x5f8(0x08)
	struct UAudioComponent* ShootSoundInstance; // 0x600(0x08)
	struct UParticleSystem* MuzzleEffect; // 0x608(0x08)
	struct UParticleSystem* TracerEffect; // 0x610(0x08)
	float FireRate; // 0x618(0x04)
	int32_t MinShotsInBurst; // 0x61c(0x04)
	int32_t MaxShotsInBurst; // 0x620(0x04)
	float MaxRandomBurstCooldown; // 0x624(0x04)
	float MinRandomBurstCooldown; // 0x628(0x04)
	float MaxFiringAngle; // 0x62c(0x04)
	float MaxEngagementRange; // 0x630(0x04)
	float MinTracerDistance; // 0x634(0x04)
	float TracerSpeed; // 0x638(0x04)
	char UnknownData_63C[0x4]; // 0x63c(0x04)
	struct USoundBase* ReviveSirens; // 0x640(0x08)
	struct FWeakObjectPtr<struct UAudioComponent> ReviveSirensComponent; // 0x648(0x08)
	float DistanceToFacePlayer; // 0x650(0x04)
	float RotationSpeed; // 0x654(0x04)
	float PrepareToMineRange; // 0x658(0x04)
	float MiningRange; // 0x65c(0x04)
	char UnknownData_660[0x34]; // 0x660(0x34)
	int32_t MaxRevives; // 0x694(0x04)
	char UnknownData_698[0x10]; // 0x698(0x10)
	bool IsFiring; // 0x6a8(0x01)
	bool IsInRangeToMine; // 0x6a9(0x01)
	bool IsPreparedToMine; // 0x6aa(0x01)
	bool IsMining; // 0x6ab(0x01)
	bool IsReviving; // 0x6ac(0x01)
	bool IsRotateMode; // 0x6ad(0x01)
	char UnknownData_6AE[0xa]; // 0x6ae(0x0a)
	struct ABoscoController* DroneController; // 0x6b8(0x08)
	enum class EDroneAIState CurrentState; // 0x6c0(0x01)
	char UnknownData_6C1[0x7]; // 0x6c1(0x07)

	void UseABillity(); // Function FSD.Bosco.UseABillity
	void StopShootingSound(); // Function FSD.Bosco.StopShootingSound
	void StateChanged(enum class EDroneAIState aCurrentState); // Function FSD.Bosco.StateChanged
	void StartSelfDestruct(); // Function FSD.Bosco.StartSelfDestruct
	void SetIsReviving(bool aIsReviving); // Function FSD.Bosco.SetIsReviving
	void SetIsRepairing(bool isRepairing); // Function FSD.Bosco.SetIsRepairing
	void SelfDestruct(); // Function FSD.Bosco.SelfDestruct
	void ReviveCounterChanged(int32_t remainingCharges); // Function FSD.Bosco.ReviveCounterChanged
	void Respond(); // Function FSD.Bosco.Respond
	void PlaySalute(); // Function FSD.Bosco.PlaySalute
	void OnWeaponFired(struct FVector Location); // Function FSD.Bosco.OnWeaponFired
	void OnRep_State(enum class EDroneAIState prevState); // Function FSD.Bosco.OnRep_State
	void OnReadyToShoot(); // Function FSD.Bosco.OnReadyToShoot
	void OnNotReadyToShoot(); // Function FSD.Bosco.OnNotReadyToShoot
	void OnHit(float amount, float BaseAmount, struct UPrimitiveComponent* Component, struct UFSDPhysicalMaterial* PhysMat, struct FName BoneName); // Function FSD.Bosco.OnHit
	void OnGrabbedGem(); // Function FSD.Bosco.OnGrabbedGem
	void MineEffects(struct UTerrainMaterial* aTerrainMaterial, struct FVector_NetQuantize aLocation, struct FRotator aRotation); // Function FSD.Bosco.MineEffects
	struct UUpgradableBoscoComponent* GetUpgradeComponent(); // Function FSD.Bosco.GetUpgradeComponent
	int32_t GetReviveCharges(); // Function FSD.Bosco.GetReviveCharges
	struct UBoscoAbillityComponent* GetPlayerAbillity(); // Function FSD.Bosco.GetPlayerAbillity
	enum class EDroneAIState GetCurrentState(); // Function FSD.Bosco.GetCurrentState
	bool GetCarryInterrupted(); // Function FSD.Bosco.GetCarryInterrupted
	bool DoPickupGemAnimation(); // Function FSD.Bosco.DoPickupGemAnimation
	void All_OnSelfDestruct(); // Function FSD.Bosco.All_OnSelfDestruct
};

// Class FSD.BoscoAnimInstance
// Size: 0x2a0 (Inherited: 0x270)
struct UBoscoAnimInstance : UAnimInstance {
	struct FMulticastInlineDelegate OnWeaponsReady; // 0x268(0x10)
	struct FMulticastInlineDelegate OnWeaponsNotReady; // 0x278(0x10)
	float DigAnimPlayRate; // 0x288(0x04)
	enum class EDroneAIState CurrentState; // 0x28c(0x01)
	bool IsReadyToMine; // 0x28d(0x01)
	bool IsMining; // 0x28e(0x01)
	bool IsFiring; // 0x28f(0x01)
	bool IsReviving; // 0x290(0x01)
	bool IsCarryingGem; // 0x291(0x01)
	char UnknownData_29A[0x6]; // 0x29a(0x06)
};

// Class FSD.BoscoWeaponsFoldedOutNotify
// Size: 0x38 (Inherited: 0x38)
struct UBoscoWeaponsFoldedOutNotify : UAnimNotify {
};

// Class FSD.BoscoWeaponsFoldedInNotify
// Size: 0x38 (Inherited: 0x38)
struct UBoscoWeaponsFoldedInNotify : UAnimNotify {
};

// Class FSD.BoscoAbillityComponent
// Size: 0x150 (Inherited: 0xb0)
struct UBoscoAbillityComponent : UActorComponent {
	struct FMulticastInlineDelegate OnAbillityChargeProgress; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnAbillityChargeUsed; // 0xc0(0x10)
	struct TArray<struct UItemUpgrade*> Upgrades; // 0xd0(0x10)
	char UnknownData_E0[0x10]; // 0xe0(0x10)
	struct AProjectileBase* projectileClass; // 0xf0(0x08)
	struct UAnimSequenceBase* Animation; // 0xf8(0x08)
	struct USoundBase* VoiceOnUse; // 0x100(0x08)
	struct FWeakObjectPtr<struct AActor> Target; // 0x108(0x08)
	struct FWeakObjectPtr<struct ABosco> AbillityOwner; // 0x110(0x08)
	char UnknownData_118[0x38]; // 0x118(0x38)

	int32_t GetMaxCharges(); // Function FSD.BoscoAbillityComponent.GetMaxCharges
	int32_t GetCharges(); // Function FSD.BoscoAbillityComponent.GetCharges
};

// Class FSD.FSDAIController
// Size: 0x358 (Inherited: 0x328)
struct AFSDAIController : AAIController {
	struct FMulticastInlineDelegate OnMessageBehaviorTreeEvent; // 0x328(0x10)
	struct FMulticastInlineDelegate OnAlertedEvent; // 0x338(0x10)
	char LOSTraceChannel; // 0x348(0x01)
	char UnknownData_349[0x3]; // 0x349(0x03)
	struct FWeakObjectPtr<struct APlayerCharacter> TargetedPlayer; // 0x34c(0x08)
	char UnknownData_354[0x4]; // 0x354(0x04)

	void SetAlerted(bool isAlerted); // Function FSD.FSDAIController.SetAlerted
	void ResumeLogic(); // Function FSD.FSDAIController.ResumeLogic
	void RegisterBlackboardChanges(struct FName Key); // Function FSD.FSDAIController.RegisterBlackboardChanges
	void Recieve_BlackboardValueChanged(struct FName KeyName); // Function FSD.FSDAIController.Recieve_BlackboardValueChanged
	void PauseLogic(); // Function FSD.FSDAIController.PauseLogic
	void OnAttackingChanged(bool attacking); // Function FSD.FSDAIController.OnAttackingChanged
	bool GetIsAlerted(); // Function FSD.FSDAIController.GetIsAlerted
};

// Class FSD.BoscoController
// Size: 0x5c0 (Inherited: 0x358)
struct ABoscoController : AFSDAIController {
	struct UBehaviorTree* BehaviourTree; // 0x358(0x08)
	float CheckOutOfTheWayInterval; // 0x360(0x04)
	char UnknownData_364[0x8]; // 0x364(0x08)
	float DistCountAsSameHit; // 0x36c(0x04)
	struct FMulticastInlineDelegate OnFollowTargetChangedDelegate; // 0x370(0x10)
	char UnknownData_380[0xb8]; // 0x380(0xb8)
	struct UTerrainMaterial* HearthstoneCrystalMaterial; // 0x438(0x08)
	float SearchForEnemiesInterval; // 0x440(0x04)
	char UnknownData_444[0x4]; // 0x444(0x04)
	float SaluteDelay; // 0x448(0x04)
	char UnknownData_44C[0x4]; // 0x44c(0x04)
	float SaluteCooldown; // 0x450(0x04)
	char UnknownData_454[0x4]; // 0x454(0x04)
	float CheckGraberInterval; // 0x458(0x04)
	char UnknownData_45C[0x4]; // 0x45c(0x04)
	float MaxThrowStrength; // 0x460(0x04)
	float MaxThrowRange; // 0x464(0x04)
	float RepairRange; // 0x468(0x04)
	float DistanceCountedAsClose; // 0x46c(0x04)
	struct FGameplayTagQuery TargetQuery; // 0x470(0x48)
	struct FGameplayTagQuery LaserPointerTargetQuery; // 0x4b8(0x48)
	struct FGameplayTagQuery FollowTargetTagQuery; // 0x500(0x48)
	float ReviveHealthPercentage; // 0x548(0x04)
	char UnknownData_54C[0x4]; // 0x54c(0x04)
	struct UDroneUseComponent* CurrentUse; // 0x550(0x08)
	struct AGem* TryingToPickGem; // 0x558(0x08)
	char UnknownData_560[0x60]; // 0x560(0x60)

	void ReviveTarget(); // Function FSD.BoscoController.ReviveTarget
	void ResetToFollowState(); // Function FSD.BoscoController.ResetToFollowState
	void RegisterPlayer(struct APlayerCharacter* APlayerCharacter); // Function FSD.BoscoController.RegisterPlayer
	void PickupGem(); // Function FSD.BoscoController.PickupGem
	void OnUseDone(int32_t TimesUsed); // Function FSD.BoscoController.OnUseDone
	void OnSecondaryLaserPointer(struct AActor* aTarget, struct FVector aLocation); // Function FSD.BoscoController.OnSecondaryLaserPointer
	void OnPlayerShout(struct APlayerCharacter* APlayerCharacter); // Function FSD.BoscoController.OnPlayerShout
	void OnPlayerSalute(struct APlayerCharacter* aCharacater); // Function FSD.BoscoController.OnPlayerSalute
	void OnPlayerLeave(struct AFSDPlayerState* APlayerState); // Function FSD.BoscoController.OnPlayerLeave
	void OnLaserPointer(struct FLaserPointerTarget HitInfo); // Function FSD.BoscoController.OnLaserPointer
	void OnJobFinished(); // Function FSD.BoscoController.OnJobFinished
	void OnEscortTargetDied(struct UHealthComponentBase* Health); // Function FSD.BoscoController.OnEscortTargetDied
	struct FVector GetPointNearPlayers(); // Function FSD.BoscoController.GetPointNearPlayers
	struct AActor* GetFollowTarget(); // Function FSD.BoscoController.GetFollowTarget
	void GenerateRelativeLocation(struct AActor* aTarget, float aRange, float aHeightRestriction, float aMinRange, bool aTryToStayOutOfTheWay, bool aStayBehind); // Function FSD.BoscoController.GenerateRelativeLocation
	void GemUsed(struct APlayerCharacter* usedBy); // Function FSD.BoscoController.GemUsed
	void ConfirmPickup(); // Function FSD.BoscoController.ConfirmPickup
};

// Class FSD.SimpleBossFight
// Size: 0x48 (Inherited: 0x28)
struct USimpleBossFight : UObject {
	char UnknownData_28[0x8]; // 0x28(0x08)
	struct FBossFight BossFight; // 0x30(0x18)
};

// Class FSD.BossFightInterface
// Size: 0x28 (Inherited: 0x28)
struct UBossFightInterface : UInterface {

	bool IsStillValid(); // Function FSD.BossFightInterface.IsStillValid
	struct UBossFightWidget* GetWidgetClass(); // Function FSD.BossFightInterface.GetWidgetClass
	struct AActor* GetBossActor(); // Function FSD.BossFightInterface.GetBossActor
};

// Class FSD.BossFightWidget
// Size: 0x240 (Inherited: 0x230)
struct UBossFightWidget : UUserWidget {
	struct TScriptInterface<None> BossFight; // 0x230(0x10)
};

// Class FSD.BoxFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct UBoxFunctionLibrary : UBlueprintFunctionLibrary {

	struct FBox CreateBoxAt(struct FVector Location, struct FVector Size); // Function FSD.BoxFunctionLibrary.CreateBoxAt
	struct FVector ClosestPointToBox(struct FVector Pos, struct FBox Box); // Function FSD.BoxFunctionLibrary.ClosestPointToBox
	float BoxSize(struct FBox Box); // Function FSD.BoxFunctionLibrary.BoxSize
	struct FVector BoxExtends(struct FBox Box); // Function FSD.BoxFunctionLibrary.BoxExtends
	struct FVector BoxCenter(struct FBox Box); // Function FSD.BoxFunctionLibrary.BoxCenter
};

// Class FSD.GenerationComponent
// Size: 0x3f0 (Inherited: 0x3f0)
struct UGenerationComponent : UPrimitiveComponent {
};

// Class FSD.BoxGenerationComponent
// Size: 0x410 (Inherited: 0x3f0)
struct UBoxGenerationComponent : UGenerationComponent {
	struct FVector Extends; // 0x3f0(0x0c)
	bool IsCarver; // 0x3fc(0x01)
	char UnknownData_3FD[0x3]; // 0x3fd(0x03)
	float NoiseRange; // 0x400(0x04)
	bool Visible; // 0x404(0x01)
	char UnknownData_405[0x3]; // 0x405(0x03)
	struct UFloodFillSettings* Noise; // 0x408(0x08)
};

// Class FSD.GenerationItem
// Size: 0x228 (Inherited: 0x220)
struct AGenerationItem : AActor {
	bool Visible; // 0x220(0x01)
	bool AddToLevel; // 0x221(0x01)
	char UnknownData_222[0x6]; // 0x222(0x06)
};

// Class FSD.BoxGenerationItem
// Size: 0x230 (Inherited: 0x228)
struct ABoxGenerationItem : AGenerationItem {
	struct UBoxGenerationComponent* BoxComponent; // 0x228(0x08)
};

// Class FSD.BTDecorator_AttackInRange
// Size: 0x98 (Inherited: 0x90)
struct UBTDecorator_AttackInRange : UBTDecorator_BlackboardBase {
	struct FName AttackName; // 0x90(0x08)
};

// Class FSD.BTDecorator_CanSeeTarget
// Size: 0xa8 (Inherited: 0x68)
struct UBTDecorator_CanSeeTarget : UBTDecorator {
	bool UseAsync; // 0x68(0x01)
	char UnknownData_69[0x3]; // 0x69(0x03)
	float MaxRange; // 0x6c(0x04)
	struct FVector EyeLocationOffset; // 0x70(0x0c)
	char UnknownData_7C[0x4]; // 0x7c(0x04)
	struct FBlackboardKeySelector TargetKey; // 0x80(0x28)
};

// Class FSD.BTDecorator_CheckObstruction
// Size: 0xb0 (Inherited: 0x68)
struct UBTDecorator_CheckObstruction : UBTDecorator {
	float Range; // 0x68(0x04)
	bool UseOwnerCenterMass; // 0x6c(0x01)
	char UnknownData_6D[0x3]; // 0x6d(0x03)
	struct FVector EyeLocationOffset; // 0x70(0x0c)
	struct FName RangedSocket; // 0x7c(0x08)
	char UnknownData_84[0x4]; // 0x84(0x04)
	struct FBlackboardKeySelector TargetKey; // 0x88(0x28)
};

// Class FSD.BTDecorator_CheckPlayerCount
// Size: 0x70 (Inherited: 0x68)
struct UBTDecorator_CheckPlayerCount : UBTDecorator {
	int32_t playerCount; // 0x68(0x04)
	bool AllowLessThanCount; // 0x6c(0x01)
	char UnknownData_6D[0x3]; // 0x6d(0x03)
};

// Class FSD.BTDecorator_ConditionalGuard
// Size: 0x90 (Inherited: 0x68)
struct UBTDecorator_ConditionalGuard : UBTDecorator {
	struct FBlackboardKeySelector GuardKey; // 0x68(0x28)
};

// Class FSD.BTDecorator_FormationGuard
// Size: 0x68 (Inherited: 0x68)
struct UBTDecorator_FormationGuard : UBTDecorator {
};

// Class FSD.BTDecorator_InRange
// Size: 0xa0 (Inherited: 0x90)
struct UBTDecorator_InRange : UBTDecorator_BlackboardBase {
	float MinRange; // 0x90(0x04)
	float MaxRange; // 0x94(0x04)
	enum class FAIDistanceType GeometricDistanceType; // 0x98(0x01)
	char UnknownData_99[0x7]; // 0x99(0x07)
};

// Class FSD.BTDecorator_InRangeBB
// Size: 0xe8 (Inherited: 0x90)
struct UBTDecorator_InRangeBB : UBTDecorator_BlackboardBase {
	struct FBlackboardKeySelector MinRangeKey; // 0x90(0x28)
	struct FBlackboardKeySelector MaxRangeKey; // 0xb8(0x28)
	enum class FAIDistanceType GeometricDistanceType; // 0xe0(0x01)
	char UnknownData_E1[0x7]; // 0xe1(0x07)
};

// Class FSD.BTDecorator_InRangeEx
// Size: 0xa0 (Inherited: 0x90)
struct UBTDecorator_InRangeEx : UBTDecorator_BlackboardBase {
	float MinRange; // 0x90(0x04)
	float MaxRange; // 0x94(0x04)
	enum class FAIDistanceType GeometricDistanceType; // 0x98(0x01)
	char UnknownData_99[0x7]; // 0x99(0x07)
};

// Class FSD.BTDecorator_InRangeOfTarget
// Size: 0x98 (Inherited: 0x90)
struct UBTDecorator_InRangeOfTarget : UBTDecorator_BlackboardBase {
	float MinRange; // 0x90(0x04)
	float MaxRange; // 0x94(0x04)
};

// Class FSD.BTDecorator_IsFacing
// Size: 0x98 (Inherited: 0x90)
struct UBTDecorator_IsFacing : UBTDecorator_BlackboardBase {
	float MaxAngle; // 0x90(0x04)
	char UnknownData_94[0x4]; // 0x94(0x04)
};

// Class FSD.BTDecorator_LockRotation
// Size: 0x70 (Inherited: 0x68)
struct UBTDecorator_LockRotation : UBTDecorator {
	char UnknownData_68[0x8]; // 0x68(0x08)
};

// Class FSD.BTDecorator_MessageAI
// Size: 0x78 (Inherited: 0x68)
struct UBTDecorator_MessageAI : UBTDecorator {
	struct FName ActivationMessage; // 0x68(0x08)
	struct FName DeactivationMessage; // 0x70(0x08)
};

// Class FSD.BTDecorator_ModifySpeed
// Size: 0x70 (Inherited: 0x68)
struct UBTDecorator_ModifySpeed : UBTDecorator {
	float SpeedModifier; // 0x68(0x04)
	char UnknownData_6C[0x4]; // 0x6c(0x04)
};

// Class FSD.BTDecorator_RandomChance
// Size: 0x70 (Inherited: 0x68)
struct UBTDecorator_RandomChance : UBTDecorator {
	float Chance; // 0x68(0x04)
	char UnknownData_6C[0x4]; // 0x6c(0x04)
};

// Class FSD.BTDecorator_RandomCooldown
// Size: 0x70 (Inherited: 0x68)
struct UBTDecorator_RandomCooldown : UBTDecorator {
	struct FRandRange CoolDownTime; // 0x68(0x08)
};

// Class FSD.BTDecorator_SetTagRandomCooldown
// Size: 0x80 (Inherited: 0x68)
struct UBTDecorator_SetTagRandomCooldown : UBTDecorator {
	struct FGameplayTag CooldownTag; // 0x68(0x08)
	struct FRandRange CooldownDuration; // 0x70(0x08)
	bool bAddToExistingDuration; // 0x78(0x01)
	bool TriggerOnActivation; // 0x79(0x01)
	char UnknownData_7A[0x6]; // 0x7a(0x06)
};

// Class FSD.BTDecorator_TagRandomCooldown
// Size: 0x80 (Inherited: 0x68)
struct UBTDecorator_TagRandomCooldown : UBTDecorator {
	struct FGameplayTag CooldownTag; // 0x68(0x08)
	struct FRandRange CooldownDuration; // 0x70(0x08)
	bool bAddToExistingDuration; // 0x78(0x01)
	bool bActivatesCooldown; // 0x79(0x01)
	char UnknownData_7A[0x6]; // 0x7a(0x06)
};

// Class FSD.BTDecorator_RandomLoop
// Size: 0x70 (Inherited: 0x68)
struct UBTDecorator_RandomLoop : UBTDecorator {
	float Chance; // 0x68(0x04)
	char UnknownData_6C[0x4]; // 0x6c(0x04)
};

// Class FSD.BTDecorator_VariableLoop
// Size: 0x70 (Inherited: 0x68)
struct UBTDecorator_VariableLoop : UBTDecorator {
	struct FIRandRange NumLoops; // 0x68(0x08)
};

// Class FSD.BTDecorator_SharedCooldown
// Size: 0x98 (Inherited: 0x68)
struct UBTDecorator_SharedCooldown : UBTDecorator {
	struct FRandRange CoolDownTime; // 0x68(0x08)
	struct FBlackboardKeySelector CooldownKey; // 0x70(0x28)
};

// Class FSD.BTDecorator_SharedAttackCooldown
// Size: 0x98 (Inherited: 0x68)
struct UBTDecorator_SharedAttackCooldown : UBTDecorator {
	struct FRandRange CoolDownTime; // 0x68(0x08)
	struct FBlackboardKeySelector CooldownKey; // 0x70(0x28)
};

// Class FSD.BTServer_ChaseTarget
// Size: 0x100 (Inherited: 0x70)
struct UBTServer_ChaseTarget : UBTService {
	struct FBlackboardKeySelector TargetKey; // 0x70(0x28)
	bool MustBeAlive; // 0x98(0x01)
	char UnknownData_99[0x3]; // 0x99(0x03)
	struct FGameplayTag SwitchTargetCooldownTag; // 0x9c(0x08)
	char UnknownData_A4[0x4]; // 0xa4(0x04)
	struct FGameplayTagQuery TargetingQuery; // 0xa8(0x48)
	bool IsFlying; // 0xf0(0x01)
	bool CanShoot; // 0xf1(0x01)
	char UnknownData_F2[0x2]; // 0xf2(0x02)
	float TargetingRange; // 0xf4(0x04)
	float SwitchTargetTime; // 0xf8(0x04)
	float SwitchTargetDeviation; // 0xfc(0x04)
};

// Class FSD.BTService_FindPlayer
// Size: 0xa8 (Inherited: 0x70)
struct UBTService_FindPlayer : UBTService {
	struct FBlackboardKeySelector TargetKey; // 0x70(0x28)
	bool MustBeAlive; // 0x98(0x01)
	bool SwithToBetterTargets; // 0x99(0x01)
	bool RegisterForPositioning; // 0x9a(0x01)
	bool IsFlying; // 0x9b(0x01)
	bool CanShoot; // 0x9c(0x01)
	char UnknownData_9D[0x3]; // 0x9d(0x03)
	float TargetingRange; // 0xa0(0x04)
	char UnknownData_A4[0x4]; // 0xa4(0x04)
};

// Class FSD.BTService_FindAttackable
// Size: 0xf0 (Inherited: 0x70)
struct UBTService_FindAttackable : UBTService {
	struct FBlackboardKeySelector TargetKey; // 0x70(0x28)
	bool MustBeAlive; // 0x98(0x01)
	bool SwithToBetterTargets; // 0x99(0x01)
	bool RegisterForPositioning; // 0x9a(0x01)
	bool IsFlying; // 0x9b(0x01)
	bool CanShoot; // 0x9c(0x01)
	char UnknownData_9D[0x3]; // 0x9d(0x03)
	float TargetingRange; // 0xa0(0x04)
	char UnknownData_A4[0x4]; // 0xa4(0x04)
	struct FGameplayTagQuery TargetQuery; // 0xa8(0x48)
};

// Class FSD.BTService_SetStance
// Size: 0xa0 (Inherited: 0x70)
struct UBTService_SetStance : UBTService {
	struct FBlackboardKeySelector TargetLocationKey; // 0x70(0x28)
	float Distance; // 0x98(0x04)
	char UnknownData_9C[0x4]; // 0x9c(0x04)
};

// Class FSD.BTService_CheckPathToTarget
// Size: 0xc0 (Inherited: 0x70)
struct UBTService_CheckPathToTarget : UBTService {
	struct FBlackboardKeySelector TargetKey; // 0x70(0x28)
	struct FBlackboardKeySelector ResultKey; // 0x98(0x28)
};

// Class FSD.BTService_UpdateMoveToTarget
// Size: 0xc8 (Inherited: 0x70)
struct UBTService_UpdateMoveToTarget : UBTService {
	struct FBlackboardKeySelector TargetKey; // 0x70(0x28)
	struct FBlackboardKeySelector TargetLocationKey; // 0x98(0x28)
	float LookAheadTime; // 0xc0(0x04)
	float VerticalOffset; // 0xc4(0x04)
};

// Class FSD.BTService_UpdateFlyingMoveToTarget
// Size: 0xc8 (Inherited: 0x70)
struct UBTService_UpdateFlyingMoveToTarget : UBTService {
	struct FBlackboardKeySelector TargetKey; // 0x70(0x28)
	struct FBlackboardKeySelector TargetLocationKey; // 0x98(0x28)
	float LookAheadTime; // 0xc0(0x04)
	char UnknownData_C4[0x4]; // 0xc4(0x04)
};

// Class FSD.BTService_UpdateMoveInFormation
// Size: 0xa8 (Inherited: 0x70)
struct UBTService_UpdateMoveInFormation : UBTService {
	float LookAheadTime; // 0x70(0x04)
	char UnknownData_74[0x4]; // 0x74(0x04)
	struct FBlackboardKeySelector TargetLocationKey; // 0x78(0x28)
	float AttackerRadius; // 0xa0(0x04)
	char UnknownData_A4[0x4]; // 0xa4(0x04)
};

// Class FSD.BTTask_Attack
// Size: 0xa0 (Inherited: 0x70)
struct UBTTask_Attack : UBTTaskNode {
	struct FBlackboardKeySelector TargetKey; // 0x70(0x28)
	struct FName AttackName; // 0x98(0x08)

	void OnAttackCompleted(struct UBehaviorTreeComponent* btComponent); // Function FSD.BTTask_Attack.OnAttackCompleted
};

// Class FSD.BTTask_FakePhysicsMove
// Size: 0xc8 (Inherited: 0x98)
struct UBTTask_FakePhysicsMove : UBTTask_BlackboardBase {
	float MinTime; // 0x98(0x04)
	float EndMaxSpeed; // 0x9c(0x04)
	struct FVector InitialLocalVelocity; // 0xa0(0x0c)
	struct FVector InitialGlobalVelocity; // 0xac(0x0c)
	bool EndRequireSolidGround; // 0xb8(0x01)
	char UnknownData_B9[0x7]; // 0xb9(0x07)
	struct UFakeMoverSettings* MoveSettings; // 0xc0(0x08)
};

// Class FSD.BTTask_FindPointNearCeiling
// Size: 0xa8 (Inherited: 0x98)
struct UBTTask_FindPointNearCeiling : UBTTask_BlackboardBase {
	float CloseToCeilingBias; // 0x98(0x04)
	float LookForCeilingLength; // 0x9c(0x04)
	float SearchRadius; // 0xa0(0x04)
	char UnknownData_A4[0x4]; // 0xa4(0x04)
};

// Class FSD.BTTask_MoveToTarget
// Size: 0xa0 (Inherited: 0x98)
struct UBTTask_MoveToTarget : UBTTask_BlackboardBase {
	float AcceptableRadius; // 0x98(0x04)
	bool EnterAttackStanceOnMoveFinished; // 0x9c(0x01)
	char UnknownData_9D[0x3]; // 0x9d(0x03)
};

// Class FSD.BTTask_MoveToSlot
// Size: 0xa8 (Inherited: 0x98)
struct UBTTask_MoveToSlot : UBTTask_BlackboardBase {
	float AcceptableRadius; // 0x98(0x04)
	float LookAheadTime; // 0x9c(0x04)
	float VerticalOffset; // 0xa0(0x04)
	float UpdateRate; // 0xa4(0x04)
};

// Class FSD.BTTask_SetAttacking
// Size: 0x98 (Inherited: 0x70)
struct UBTTask_SetAttacking : UBTTaskNode {
	struct FBlackboardKeySelector TargetKey; // 0x70(0x28)
};

// Class FSD.BTTask_TriggerAI
// Size: 0x78 (Inherited: 0x70)
struct UBTTask_TriggerAI : UBTTaskNode {
	struct FName TriggerName; // 0x70(0x08)
};

// Class FSD.BTTask_MessageAI
// Size: 0x78 (Inherited: 0x70)
struct UBTTask_MessageAI : UBTTaskNode {
	struct FName MessageName; // 0x70(0x08)
};

// Class FSD.BTTask_SetCondition
// Size: 0xa0 (Inherited: 0x70)
struct UBTTask_SetCondition : UBTTaskNode {
	struct FBlackboardKeySelector ConditionalKey; // 0x70(0x28)
	bool Value; // 0x98(0x01)
	char UnknownData_99[0x7]; // 0x99(0x07)
};

// Class FSD.BuildRestriction
// Size: 0x38 (Inherited: 0x30)
struct UBuildRestriction : UDataAsset {
	int32_t BuildType; // 0x30(0x04)
	int32_t Platform; // 0x34(0x04)
};

// Class FSD.BurrowComponent
// Size: 0xb0 (Inherited: 0xb0)
struct UBurrowComponent : UActorComponent {

	void Unburrow(struct UAnimMontage* customMontage); // Function FSD.BurrowComponent.Unburrow
	void Burrow(struct UAnimMontage* customMontage); // Function FSD.BurrowComponent.Burrow
};

// Class FSD.CalldownItem
// Size: 0x3c8 (Inherited: 0x368)
struct ACalldownItem : AAnimatedItem {
	struct UItemPlacerAggregator* ItemPlacerClass; // 0x368(0x08)
	struct ARessuplyPod* SupplyPodClass; // 0x370(0x08)
	struct UResourceData* ResouceRequired; // 0x378(0x08)
	struct FText OrderDescription; // 0x380(0x18)
	struct FText LogText; // 0x398(0x18)
	struct AActor* ResupplyBeacon; // 0x3b0(0x08)
	struct UItemPlacerAggregator* ItemPlacerInstance; // 0x3b8(0x08)
	float Cooldown; // 0x3c0(0x04)
	float CooldownRemaining; // 0x3c4(0x04)

	void Server_Call_Resupply(struct FVector Location); // Function FSD.CalldownItem.Server_Call_Resupply
};

// Class FSD.CampaignManager
// Size: 0xb8 (Inherited: 0x28)
struct UCampaignManager : UObject {
	struct FMulticastInlineDelegate OnCampaignCompleted; // 0x28(0x10)
	struct FMulticastInlineDelegate OnCampaignChanged; // 0x38(0x10)
	struct UCampaign* MainCampaign; // 0x48(0x08)
	struct TArray<struct UCampaign*> WeeklyCampaigns; // 0x50(0x10)
	struct TArray<struct UCampaign*> MatrixCoreHuntCampaigns; // 0x60(0x10)
	struct TArray<struct UCampaign*> SideCampaigns; // 0x70(0x10)
	struct TArray<struct UCampaign*> EventCampaigns; // 0x80(0x10)
	struct UCampaign* ActiveCampaign; // 0x90(0x08)
	int32_t NumFailedRequests; // 0x98(0x04)
	bool WeeklyBackendDataValid; // 0x9c(0x01)
	char UnknownData_9D[0x3]; // 0x9d(0x03)
	int32_t WeeklyBackendSeed; // 0xa0(0x04)
	char UnknownData_A4[0x4]; // 0xa4(0x04)
	struct FDateTime WeeklyBackendExpirationTime; // 0xa8(0x08)
	struct FDateTime LastRequestTime; // 0xb0(0x08)

	void StartNewCampaign(struct UCampaign* campaignClass, struct UFSDSaveGame* SaveGame); // Function FSD.CampaignManager.StartNewCampaign
	void SkipMainCampaign(struct AFSDPlayerController* Player); // Function FSD.CampaignManager.SkipMainCampaign
	void OnEventsRefreshed(); // Function FSD.CampaignManager.OnEventsRefreshed
	bool IsWeeklyCampaignCompleted(struct UObject* WorldContext, enum class ECampaignType campaigntype); // Function FSD.CampaignManager.IsWeeklyCampaignCompleted
	bool IsInCampaignMission(struct AFSDPlayerController* Player); // Function FSD.CampaignManager.IsInCampaignMission
	bool IsCampaignRestrictionsMet(struct UObject* WorldContextObject, struct UGeneratedMission* mission, struct UDifficultySetting* optionalDifficulty); // Function FSD.CampaignManager.IsCampaignRestrictionsMet
	bool IsCampaignMission(struct UObject* WorldContextObject, struct UGeneratedMission* mission); // Function FSD.CampaignManager.IsCampaignMission
	bool IsActiveCampaign(struct UCampaign* Campaign); // Function FSD.CampaignManager.IsActiveCampaign
	struct TArray<struct UCampaign*> GetUncompletedCampaigns(struct AFSDPlayerController* Player); // Function FSD.CampaignManager.GetUncompletedCampaigns
	struct UGeneratedMission* GetCampaingMissionFromSeeds(struct UObject* WorldContextObject, int32_t GlobalSeed, int32_t MissionSeed); // Function FSD.CampaignManager.GetCampaingMissionFromSeeds
	struct UGeneratedMission* GetCampaingMission(struct TArray<struct UGeneratedMission*> missions, int32_t MissionSeed); // Function FSD.CampaignManager.GetCampaingMission
	void CampaignCompletedDelegate__DelegateSignature(); // DelegateFunction FSD.CampaignManager.CampaignCompletedDelegate__DelegateSignature
	void AbortActiveCampaign(struct UFSDSaveGame* SaveGame); // Function FSD.CampaignManager.AbortActiveCampaign
};

// Class FSD.Campaign
// Size: 0x160 (Inherited: 0x28)
struct UCampaign : UObject {
	struct TArray<struct UCampaignMission*> missions; // 0x28(0x10)
	struct TArray<struct UCampaignRequirement*> Requirements; // 0x38(0x10)
	struct TArray<struct UCampaignRequirement*> VisibilityRequirements; // 0x48(0x10)
	struct UPlayerCharacterID* RequiredCharacterID; // 0x58(0x08)
	struct TArray<struct UDifficultySetting*> RestrictedToDifficulties; // 0x60(0x10)
	int32_t Progress; // 0x70(0x04)
	struct FGuid SavegameID; // 0x74(0x10)
	bool CanAbort; // 0x84(0x01)
	bool CanSkip; // 0x85(0x01)
	char UnknownData_86[0x2]; // 0x86(0x02)
	enum class ECampaignMutators Mutators; // 0x88(0x04)
	char UnknownData_8C[0x4]; // 0x8c(0x04)
	struct FText TitlePrefix; // 0x90(0x18)
	struct FText Title; // 0xa8(0x18)
	struct FText DescriptionHeader; // 0xc0(0x18)
	struct FText Description; // 0xd8(0x18)
	struct FText RewardText; // 0xf0(0x18)
	struct FText RewardFlavorText; // 0x108(0x18)
	struct UTexture2D* Icon; // 0x120(0x08)
	struct TSoftObjectPtr<struct UTexture2D> Picture; // 0x128(0x28)
	enum class ECampaignType campaigntype; // 0x150(0x01)
	char UnknownData_151[0x7]; // 0x151(0x07)
	struct UMissionStat* CampaignCompletedMissionStat; // 0x158(0x08)

	bool IsComplete(); // Function FSD.Campaign.IsComplete
	bool IsCampaignComplete(struct UObject* WorldContext, struct UCampaign* Campaign); // Function FSD.Campaign.IsCampaignComplete
	struct UCampaign* GetReference(struct UCampaign* Campaign); // Function FSD.Campaign.GetReference
	struct UCampaignMission* GetPreviousMission(); // Function FSD.Campaign.GetPreviousMission
	struct UTexture2D* GetPicture(); // Function FSD.Campaign.GetPicture
	struct FText GetCampaignTitle(struct UCampaign* Campaign); // Function FSD.Campaign.GetCampaignTitle
	struct UCampaignMission* GetActiveMission(); // Function FSD.Campaign.GetActiveMission
	bool CanStartCampaign(struct AFSDPlayerController* Player); // Function FSD.Campaign.CanStartCampaign
	bool CanSeeCampaign(struct APlayerController* PlayerController); // Function FSD.Campaign.CanSeeCampaign
	bool AreRestrictionsMet(struct AFSDPlayerController* Player, struct UDifficultySetting* optionalDifficulty); // Function FSD.Campaign.AreRestrictionsMet
};

// Class FSD.CampaignMission
// Size: 0x68 (Inherited: 0x30)
struct UCampaignMission : UDataAsset {
	struct UPlanetZone* PlanetZone; // 0x30(0x08)
	struct FRequiredMissionItem mission; // 0x38(0x18)
	struct TArray<struct UReward*> Rewards; // 0x50(0x10)
	struct UDialogDataAsset* MissionCompleteShout; // 0x60(0x08)

	struct UMissionTemplate* GetMissionTemplate(); // Function FSD.CampaignMission.GetMissionTemplate
};

// Class FSD.CampaignRequirement
// Size: 0x28 (Inherited: 0x28)
struct UCampaignRequirement : UObject {

	bool IsRequirementMet(struct AFSDPlayerController* Player, struct UCampaign* Campaign); // Function FSD.CampaignRequirement.IsRequirementMet
};

// Class FSD.ValidWeeklySeedCampaignRequirement
// Size: 0x28 (Inherited: 0x28)
struct UValidWeeklySeedCampaignRequirement : UCampaignRequirement {
};

// Class FSD.CaracterLevelCampaignRequirement
// Size: 0x38 (Inherited: 0x28)
struct UCaracterLevelCampaignRequirement : UCampaignRequirement {
	struct UPlayerCharacterID* characterID; // 0x28(0x08)
	int32_t LevelRequirement; // 0x30(0x04)
	char UnknownData_34[0x4]; // 0x34(0x04)
};

// Class FSD.PlayerRankCampaignRequirement
// Size: 0x30 (Inherited: 0x28)
struct UPlayerRankCampaignRequirement : UCampaignRequirement {
	int32_t RankRequirement; // 0x28(0x04)
	char UnknownData_2C[0x4]; // 0x2c(0x04)
};

// Class FSD.RetirementCampaignRequirement
// Size: 0x38 (Inherited: 0x28)
struct URetirementCampaignRequirement : UCampaignRequirement {
	struct UPlayerCharacterID* characterID; // 0x28(0x08)
	int32_t LevelRequirement; // 0x30(0x04)
	char UnknownData_34[0x4]; // 0x34(0x04)
};

// Class FSD.WeeklyTimerCampaignRequirement
// Size: 0x28 (Inherited: 0x28)
struct UWeeklyTimerCampaignRequirement : UCampaignRequirement {

	struct FTimespan GetWeeklyTimeLeft(struct AFSDPlayerController* Player); // Function FSD.WeeklyTimerCampaignRequirement.GetWeeklyTimeLeft
	struct FTimespan GetTimeUntillNewCampaign(struct AFSDPlayerController* Player); // Function FSD.WeeklyTimerCampaignRequirement.GetTimeUntillNewCampaign
	bool GetHasCompleted(struct UCampaign* Campaign, struct AFSDPlayerController* Player); // Function FSD.WeeklyTimerCampaignRequirement.GetHasCompleted
};

// Class FSD.AnyRetiredCampaignRequirement
// Size: 0x28 (Inherited: 0x28)
struct UAnyRetiredCampaignRequirement : UCampaignRequirement {
};

// Class FSD.CamapaignCompletedRequirement
// Size: 0x30 (Inherited: 0x28)
struct UCamapaignCompletedRequirement : UCampaignRequirement {
	struct UCampaign* Campaign; // 0x28(0x08)
};

// Class FSD.CapacityBasedItemAggregator
// Size: 0x140 (Inherited: 0xc8)
struct UCapacityBasedItemAggregator : UItemAggregator {
	struct FMulticastInlineDelegate OnCurrentAmountChanged; // 0xc8(0x10)
	struct FMulticastInlineDelegate OnMaxAmountChanged; // 0xd8(0x10)
	struct FMulticastInlineDelegate OnClipAndTotalChanged; // 0xe8(0x10)
	struct FMulticastInlineDelegate OnReloadTimeChanged; // 0xf8(0x10)
	struct FMulticastInlineDelegate OnReloadComplete; // 0x108(0x10)
	struct FMulticastInlineDelegate OnReloadStarted; // 0x118(0x10)
	struct FMulticastInlineDelegate OnMaxAmmoCapacityChanged; // 0x128(0x10)
	bool showClipCount; // 0x138(0x01)
	char UnknownData_139[0x7]; // 0x139(0x07)

	void ReloadStarted(); // Function FSD.CapacityBasedItemAggregator.ReloadStarted
	void ReloadComplete(); // Function FSD.CapacityBasedItemAggregator.ReloadComplete
	int32_t GetMaxAmount(); // Function FSD.CapacityBasedItemAggregator.GetMaxAmount
	int32_t GetCurrentAmount(); // Function FSD.CapacityBasedItemAggregator.GetCurrentAmount
};

// Class FSD.CapacityHoldingItemAggregator
// Size: 0x160 (Inherited: 0x140)
struct UCapacityHoldingItemAggregator : UCapacityBasedItemAggregator {
	char UnknownData_140[0x10]; // 0x140(0x10)
	int32_t MaxAmmo; // 0x150(0x04)
	int32_t AmmoCount; // 0x154(0x04)
	bool UseRejoin; // 0x158(0x01)
	char UnknownData_159[0x7]; // 0x159(0x07)

	void UseAmmo(int32_t count); // Function FSD.CapacityHoldingItemAggregator.UseAmmo
	void SetMaxAmmo(int32_t InMaxAmmo, bool InChangeCurrentAmount); // Function FSD.CapacityHoldingItemAggregator.SetMaxAmmo
	void Resupply(float percentage); // Function FSD.CapacityHoldingItemAggregator.Resupply
	void OnRep_MaxAmmo(); // Function FSD.CapacityHoldingItemAggregator.OnRep_MaxAmmo
	void OnRep_AmmoCount(); // Function FSD.CapacityHoldingItemAggregator.OnRep_AmmoCount
	void AddAmmo(int32_t amount); // Function FSD.CapacityHoldingItemAggregator.AddAmmo
};

// Class FSD.CappedResource
// Size: 0x78 (Inherited: 0x28)
struct UCappedResource : UObject {
	struct FMulticastInlineDelegate OnChanged; // 0x28(0x10)
	struct FMulticastInlineDelegate OnIncreased; // 0x38(0x10)
	struct FMulticastInlineDelegate OnFull; // 0x48(0x10)
	struct UResourceData* Data; // 0x58(0x08)
	float currentAmount; // 0x60(0x04)
	float MaxAmount; // 0x64(0x04)
	float TotalCollected; // 0x68(0x04)
	int32_t FullFlag; // 0x6c(0x04)
	char UnknownData_70[0x8]; // 0x70(0x08)

	float TransferAll(struct UCappedResource* Receiver); // Function FSD.CappedResource.TransferAll
	float Transfer(float amount, struct UCappedResource* Receiver); // Function FSD.CappedResource.Transfer
	void OnRep_FullFlag(int32_t OldValue); // Function FSD.CappedResource.OnRep_FullFlag
	void OnRep_CurrentAmount(float OldAmount); // Function FSD.CappedResource.OnRep_CurrentAmount
	bool IsObjectiveResource(struct UObject* WorldContext, bool IsCompleted); // Function FSD.CappedResource.IsObjectiveResource
	bool IsFull(); // Function FSD.CappedResource.IsFull
	bool IsEmpty(); // Function FSD.CappedResource.IsEmpty
	bool IsCraftingResource(); // Function FSD.CappedResource.IsCraftingResource
	struct FText GetTitle(); // Function FSD.CappedResource.GetTitle
	struct FColor GetColor(); // Function FSD.CappedResource.GetColor
	float GetCapacityPct(); // Function FSD.CappedResource.GetCapacityPct
	float Deduct(float amount); // Function FSD.CappedResource.Deduct
	float Add(float amount); // Function FSD.CappedResource.Add
};

// Class FSD.UsableComponentBase
// Size: 0xd8 (Inherited: 0xb0)
struct UUsableComponentBase : UActorComponent {
	float UseCooldown; // 0xb0(0x04)
	bool MustBeGroundedToUse; // 0xb4(0x01)
	bool CanUseStrict; // 0xb5(0x01)
	char UnknownData_B6[0x2]; // 0xb6(0x02)
	struct UUseAnimationSetting* AnimationSettings; // 0xb8(0x08)
	int32_t Priority; // 0xc0(0x04)
	bool UseableByOwnerOnly; // 0xc4(0x01)
	char UnknownData_C5[0x3]; // 0xc5(0x03)
	struct USceneComponent* RestrictToCollider; // 0xc8(0x08)
	enum class EUseRestriction UseRestrictionAllowance; // 0xd0(0x01)
	bool IsRayTraceTriggered; // 0xd1(0x01)
	bool ResetUsingOnCompletion; // 0xd2(0x01)
	char UnknownData_D3[0x5]; // 0xd3(0x05)

	void SetRayTraceTriggered(bool rayTraceTriggered); // Function FSD.UsableComponentBase.SetRayTraceTriggered
	struct FText GetUseText(struct APlayerCharacter* User); // Function FSD.UsableComponentBase.GetUseText
	float GetUseProgressInPercent(struct APlayerCharacter* User); // Function FSD.UsableComponentBase.GetUseProgressInPercent
	struct UTexture2D* GetUsableIcon(); // Function FSD.UsableComponentBase.GetUsableIcon
	bool GetShowUsingUI(); // Function FSD.UsableComponentBase.GetShowUsingUI
	bool GetIsRayTraceTriggerd(); // Function FSD.UsableComponentBase.GetIsRayTraceTriggerd
	bool GetHideProgressBar(struct APlayerCharacter* User); // Function FSD.UsableComponentBase.GetHideProgressBar
	bool GetHideActionText(struct APlayerCharacter* User); // Function FSD.UsableComponentBase.GetHideActionText
	void EndUse(struct APlayerCharacter* User); // Function FSD.UsableComponentBase.EndUse
	void BeginUse(struct APlayerCharacter* User); // Function FSD.UsableComponentBase.BeginUse
};

// Class FSD.UsableComponent
// Size: 0x100 (Inherited: 0xd8)
struct UUsableComponent : UUsableComponentBase {
	struct UDialogDataAsset* ShoutBegin; // 0xd8(0x08)
	struct FText UseText; // 0xe0(0x18)
	bool ResetOnFail; // 0xf8(0x01)
	bool SwitchToUsingState; // 0xf9(0x01)
	char UnknownData_FA[0x6]; // 0xfa(0x06)

	void SetUseText(struct FText NewText); // Function FSD.UsableComponent.SetUseText
	bool HasDuration(); // Function FSD.UsableComponent.HasDuration
};

// Class FSD.InstantUsable
// Size: 0x138 (Inherited: 0x100)
struct UInstantUsable : UUsableComponent {
	struct FMulticastInlineDelegate OnUsedBy; // 0x100(0x10)
	struct FMulticastInlineDelegate OnUsableChanged; // 0x110(0x10)
	bool bShowUsingUI; // 0x120(0x01)
	char UnknownData_121[0x7]; // 0x121(0x07)
	struct USoundCue* AudioCompletedUse; // 0x128(0x08)
	bool Usable; // 0x130(0x01)
	bool TurnOffAfterUse; // 0x131(0x01)
	char UnknownData_132[0x6]; // 0x132(0x06)

	void SetCanUse(bool canUse); // Function FSD.InstantUsable.SetCanUse
	void OnRep_Usable(); // Function FSD.InstantUsable.OnRep_Usable
};

// Class FSD.CarriableInstantUsable
// Size: 0x138 (Inherited: 0x138)
struct UCarriableInstantUsable : UInstantUsable {
};

// Class FSD.CarriableComponent
// Size: 0x118 (Inherited: 0xb0)
struct UCarriableComponent : UActorComponent {
	char UnknownData_B0[0x8]; // 0xb0(0x08)
	struct FMulticastInlineDelegate OnPickedUp; // 0xb8(0x10)
	struct FMulticastInlineDelegate OnDropped; // 0xc8(0x10)
	struct APlayerCharacter* CarriedBy; // 0xd8(0x08)
	enum class EUseRestriction UseRestriction; // 0xe0(0x01)
	char UnknownData_E1[0x3]; // 0xe1(0x03)
	struct FVector Offset; // 0xe4(0x0c)
	char UnknownData_F0[0x28]; // 0xf0(0x28)

	bool PickupItem(struct APlayerCharacter* byCharacter); // Function FSD.CarriableComponent.PickupItem
	void OnRep_CarriedBy(); // Function FSD.CarriableComponent.OnRep_CarriedBy
	void DropItem(); // Function FSD.CarriableComponent.DropItem
	void AttachChanged(bool Attached, struct FVector PrevScale); // Function FSD.CarriableComponent.AttachChanged
};

// Class FSD.ResourceData
// Size: 0xf0 (Inherited: 0x30)
struct UResourceData : UDataAsset {
	char UnknownData_30[0x8]; // 0x30(0x08)
	struct FText Title; // 0x38(0x18)
	struct FText TitlePlural; // 0x50(0x18)
	struct FText Description; // 0x68(0x18)
	struct FColor Color; // 0x80(0x04)
	char UnknownData_84[0x4]; // 0x84(0x04)
	struct UTexture2D* Icon; // 0x88(0x08)
	int32_t BuyingPrice; // 0x90(0x04)
	int32_t SellingPrice; // 0x94(0x04)
	struct UMissionStat* MinedMissionStat; // 0x98(0x08)
	bool IsCraftingMaterial; // 0xa0(0x01)
	bool AffectedByMutators; // 0xa1(0x01)
	bool ScaleToMissionLength; // 0xa2(0x01)
	bool ScaleToHazardLevel; // 0xa3(0x01)
	bool ShowSeparatelyInEndScreen; // 0xa4(0x01)
	char UnknownData_A5[0x3]; // 0xa5(0x03)
	SoftClassProperty Spawnable; // 0xa8(0x28)
	bool IsWholeNumberResource; // 0xd0(0x01)
	char UnknownData_D1[0x3]; // 0xd1(0x03)
	int32_t CreditValue; // 0xd4(0x04)
	int32_t XPValue; // 0xd8(0x04)
	struct FGuid SavegameID; // 0xdc(0x10)
	char UnknownData_EC[0x4]; // 0xec(0x04)

	float GetOwnedAmount(struct UObject* WorldContextObject); // Function FSD.ResourceData.GetOwnedAmount
};

// Class FSD.CarvedResourceData
// Size: 0x120 (Inherited: 0xf0)
struct UCarvedResourceData : UResourceData {
	struct TSoftObjectPtr<struct UCarvedResourceCreator> CarvedResourceCreator; // 0xf0(0x28)
	float UnitsPerCarver; // 0x118(0x04)
	char UnknownData_11C[0x4]; // 0x11c(0x04)

	struct UCarvedResourceCreator* LoadResourceCreator(); // Function FSD.CarvedResourceData.LoadResourceCreator
};

// Class FSD.CaveEntranceComponent
// Size: 0x400 (Inherited: 0x3f0)
struct UCaveEntranceComponent : UPrimitiveComponent {
	enum class ECaveEntranceType Direction; // 0x3f0(0x01)
	char UnknownData_3F1[0xf]; // 0x3f1(0x0f)
};

// Class FSD.CaveEntrance
// Size: 0x238 (Inherited: 0x228)
struct ACaveEntrance : AGenerationItem {
	struct UCaveEntranceComponent* CaveEntranceComponent; // 0x228(0x08)
	enum class ECaveEntranceType EntranceType; // 0x230(0x01)
	bool HasBeenConverted; // 0x231(0x01)
	char UnknownData_232[0x6]; // 0x232(0x06)
};

// Class FSD.SpawnResourceGenerationItem
// Size: 0x240 (Inherited: 0x228)
struct ASpawnResourceGenerationItem : AGenerationItem {
	struct UResourceData* Resource; // 0x228(0x08)
	float BaseAmount; // 0x230(0x04)
	char UnknownData_234[0x4]; // 0x234(0x04)
	struct USphereComponent* Sphere; // 0x238(0x08)
};

// Class FSD.SpawnActorGenerationItem
// Size: 0x238 (Inherited: 0x228)
struct ASpawnActorGenerationItem : AGenerationItem {
	struct AActor* ActorToSpawn; // 0x228(0x08)
	struct UBoxComponent* Box; // 0x230(0x08)
};

// Class FSD.SpawnTriggerItem
// Size: 0x238 (Inherited: 0x228)
struct ASpawnTriggerItem : AGenerationItem {
	struct AActor* Trigger; // 0x228(0x08)
	struct FName Message; // 0x230(0x08)
};

// Class FSD.SubRoomItem
// Size: 0x238 (Inherited: 0x228)
struct ASubRoomItem : AGenerationItem {
	struct URoomGenerator* RoomGenerator; // 0x228(0x08)
	int32_t Layer; // 0x230(0x04)
	char UnknownData_234[0x4]; // 0x234(0x04)
};

// Class FSD.RandomSubRoomItem
// Size: 0x280 (Inherited: 0x228)
struct ARandomSubRoomItem : AGenerationItem {
	struct URoomGeneratorGroup* RoomGroup; // 0x228(0x08)
	struct FGameplayTagQuery tagQuery; // 0x230(0x48)
	int32_t Layer; // 0x278(0x04)
	char UnknownData_27C[0x4]; // 0x27c(0x04)
};

// Class FSD.DropPodCalldownLocationItem
// Size: 0x230 (Inherited: 0x228)
struct ADropPodCalldownLocationItem : AGenerationItem {
	struct AActor* CalldownClass; // 0x228(0x08)
};

// Class FSD.ProceduralSetup
// Size: 0x528 (Inherited: 0x220)
struct AProceduralSetup : AActor {
	bool ShowRoomEntrances; // 0x220(0x01)
	bool ShowPathObstacles; // 0x221(0x01)
	bool ShowItemNoisePattern; // 0x222(0x01)
	char UnknownData_223[0x1]; // 0x223(0x01)
	int32_t Seed; // 0x224(0x04)
	bool UseRandomSeed; // 0x228(0x01)
	char UnknownData_229[0x7]; // 0x229(0x07)
	struct FRandomStream RandomStream; // 0x230(0x08)
	struct FRandomStream RandomStreamServer; // 0x238(0x08)
	struct FRandomStream RandomStreamAsync; // 0x240(0x08)
	struct FRandomStream RandomStreamAsyncServer; // 0x248(0x08)
	struct FMulticastInlineDelegate OnEncounterSpawnedEvent; // 0x250(0x10)
	char UnknownData_260[0x68]; // 0x260(0x68)
	struct USpecialEvent* ForcedSpecialEvent; // 0x2c8(0x08)
	struct USpecialEvent* ForcedTreasure; // 0x2d0(0x08)
	char UnknownData_2D8[0x28]; // 0x2d8(0x28)
	bool UseMusicManager; // 0x300(0x01)
	char UnknownData_301[0x7]; // 0x301(0x07)
	struct ADeepCSGWorld* CSGWorld; // 0x308(0x08)
	struct UFloodFillSettings* PathfinderNoise; // 0x310(0x08)
	struct TArray<struct FVeinResource> VeinResources; // 0x318(0x10)
	struct TArray<struct FCarvedResource> CarvedResources; // 0x328(0x10)
	struct UMissionDNA* MissionDNA; // 0x338(0x08)
	struct TArray<struct FGemResourceAmount> GemResourcesToGenerate; // 0x340(0x10)
	char UnknownData_350[0x8]; // 0x350(0x08)
	struct TArray<struct FCollectableSpawnableItem> CollectablesToGenerate; // 0x358(0x10)
	enum class ESpawnSettings SpawnSettings; // 0x368(0x01)
	bool CanSpawnSpecialEvents; // 0x369(0x01)
	bool ShouldCarveTunnels; // 0x36a(0x01)
	bool CreateDirt; // 0x36b(0x01)
	char UnknownData_36C[0x4]; // 0x36c(0x04)
	struct UCaveInfluencer* DirtInfluencer; // 0x370(0x08)
	float DirtInfluencerRange; // 0x378(0x04)
	char UnknownData_37C[0xc]; // 0x37c(0x0c)
	struct UTunnelParameters* TunnelParameters; // 0x388(0x08)
	float PathZPenalty; // 0x390(0x04)
	float PathDirectionPenalty; // 0x394(0x04)
	float PathEntranceAnglePenalty; // 0x398(0x04)
	char UnknownData_39C[0xc]; // 0x39c(0x0c)
	struct TArray<struct FRoomNode> Rooms; // 0x3a8(0x10)
	struct TArray<struct FRoomNode> RoomsInitialState; // 0x3b8(0x10)
	struct TArray<struct FTunnelNode> Tunnels; // 0x3c8(0x10)
	struct FGeneratedInfluenceSets GeneratedInfluenceSets; // 0x3d8(0x18)
	char UnknownData_3F0[0x8]; // 0x3f0(0x08)
	struct FGeneratedInstantCarvers GeneratedInstantCarvers; // 0x3f8(0x10)
	struct FGeneratedDebris GeneratedDebris; // 0x408(0x58)
	struct UBiome* Biome; // 0x460(0x08)
	float missionLength; // 0x468(0x04)
	char UnknownData_46C[0x4]; // 0x46c(0x04)
	struct URoomDecorationObject* MiningpodCalldownLocationDecoration; // 0x470(0x08)
	struct TArray<struct FPathObstacle> PathObstacles; // 0x478(0x10)
	struct FInfluenceMap InfluenceMap; // 0x488(0x50)
	struct TArray<struct UResourceData*> SpawnedResources; // 0x4d8(0x10)
	float CaveDepth; // 0x4e8(0x04)
	char UnknownData_4EC[0x4]; // 0x4ec(0x04)
	struct AActor* PostProcessActor; // 0x4f0(0x08)
	struct USpecialEvent* SpecialEvent; // 0x4f8(0x08)
	bool IsInitialized; // 0x500(0x01)
	char UnknownData_501[0x3]; // 0x501(0x03)
	int32_t CurrentRoomPass; // 0x504(0x04)
	bool Pass1Completed; // 0x508(0x01)
	bool UsePerLevelCritterSpawning; // 0x509(0x01)
	char UnknownData_50A[0x1e]; // 0x50a(0x1e)

	void StartGenerationOnClient(struct AFSDPlayerController* client); // Function FSD.ProceduralSetup.StartGenerationOnClient
	void SpawnSpecialEvents(); // Function FSD.ProceduralSetup.SpawnSpecialEvents
	void SpawnObjectiveEncounter(); // Function FSD.ProceduralSetup.SpawnObjectiveEncounter
	void SpawnObjectiveCriticalItems(); // Function FSD.ProceduralSetup.SpawnObjectiveCriticalItems
	void SpawnItems_Async(struct AProceduralSetup* setup, struct FLatentActionInfo LatentInfo); // Function FSD.ProceduralSetup.SpawnItems_Async
	void SpawnItems(); // Function FSD.ProceduralSetup.SpawnItems
	void SpawnEncounters(); // Function FSD.ProceduralSetup.SpawnEncounters
	void SpawnDebrisItems_Async(struct AProceduralSetup* setup, struct FLatentActionInfo LatentInfo, enum class EDebrisItemPass pass, int32_t Depth); // Function FSD.ProceduralSetup.SpawnDebrisItems_Async
	void SpawnDebrisItems(enum class EDebrisItemPass pass); // Function FSD.ProceduralSetup.SpawnDebrisItems
	void SetSeed(int32_t Seed); // Function FSD.ProceduralSetup.SetSeed
	void SetObjectivesCompleted(); // Function FSD.ProceduralSetup.SetObjectivesCompleted
	void ResetData(); // Function FSD.ProceduralSetup.ResetData
	void RemoveBLockedEntrances(); // Function FSD.ProceduralSetup.RemoveBLockedEntrances
	void OnPLSDataRecieved(); // Function FSD.ProceduralSetup.OnPLSDataRecieved
	void OnObjectivesCompleted(); // Function FSD.ProceduralSetup.OnObjectivesCompleted
	void OnCarverDataRecieved(enum class EDebrisItemPass pass); // Function FSD.ProceduralSetup.OnCarverDataRecieved
	bool IsGeneratedDataReady(); // Function FSD.ProceduralSetup.IsGeneratedDataReady
	bool IsCarverDataReady(enum class EDebrisItemPass pass); // Function FSD.ProceduralSetup.IsCarverDataReady
	void InitializeObjectives(); // Function FSD.ProceduralSetup.InitializeObjectives
	struct UMissionDNA* GetMissionDNA(); // Function FSD.ProceduralSetup.GetMissionDNA
	struct ADeepCSGWorld* GetCSGWorld(); // Function FSD.ProceduralSetup.GetCSGWorld
	void GenerateRoomsFromGraph_Async(struct AProceduralSetup* setup, struct FLatentActionInfo LatentInfo, int32_t CarvePass); // Function FSD.ProceduralSetup.GenerateRoomsFromGraph_Async
	void GenerateRoomsFromGraph(int32_t CarvePass); // Function FSD.ProceduralSetup.GenerateRoomsFromGraph
	void GenerateRoomGenerator(); // Function FSD.ProceduralSetup.GenerateRoomGenerator
	void GenerateResourceVeins_Async(struct AProceduralSetup* setup, struct FLatentActionInfo LatentInfo); // Function FSD.ProceduralSetup.GenerateResourceVeins_Async
	void GenerateResourceVeins(); // Function FSD.ProceduralSetup.GenerateResourceVeins
	void GeneratePostCarveRooms_Async(struct AProceduralSetup* setup, struct FLatentActionInfo LatentInfo); // Function FSD.ProceduralSetup.GeneratePostCarveRooms_Async
	void GeneratePostCarveRooms(); // Function FSD.ProceduralSetup.GeneratePostCarveRooms
	void GenerateLandscapeFromData(int32_t Seed, struct TArray<struct FRoomNode> Rooms, struct TArray<struct FPathObstacle> obstacles); // Function FSD.ProceduralSetup.GenerateLandscapeFromData
	void GenerateLandscape(); // Function FSD.ProceduralSetup.GenerateLandscape
	void GenerateDebrisVeins_Async(struct AProceduralSetup* setup, enum class EDebrisCarvedType carverType, struct FLatentActionInfo LatentInfo); // Function FSD.ProceduralSetup.GenerateDebrisVeins_Async
	void GenerateDebrisVeins(enum class EDebrisCarvedType carverType); // Function FSD.ProceduralSetup.GenerateDebrisVeins
	struct FVector FindLocationInDirection(struct FVector Origin, struct FVector Direction, float horizontalDeviation, float verticalDeviation, struct FRandRange Distance, float additionalDistance); // Function FSD.ProceduralSetup.FindLocationInDirection
	void FindEntrancesForAllConnections(); // Function FSD.ProceduralSetup.FindEntrancesForAllConnections
	void FillTunnels_Async(struct AProceduralSetup* setup, struct FLatentActionInfo LatentInfo); // Function FSD.ProceduralSetup.FillTunnels_Async
	void FillTunnels(); // Function FSD.ProceduralSetup.FillTunnels
	void EndRoom(int32_t ID); // Function FSD.ProceduralSetup.EndRoom
	void DoneCarving(); // Function FSD.ProceduralSetup.DoneCarving
	bool DoAsyncThreadGeneration(); // Function FSD.ProceduralSetup.DoAsyncThreadGeneration
	void CreateTunnelPaths(); // Function FSD.ProceduralSetup.CreateTunnelPaths
	int32_t CreateItemDepths(); // Function FSD.ProceduralSetup.CreateItemDepths
	void CreateGeneratedInfluenceSet(); // Function FSD.ProceduralSetup.CreateGeneratedInfluenceSet
	void CreateAdditionalRooms(); // Function FSD.ProceduralSetup.CreateAdditionalRooms
	int32_t ConnectRooms(struct FRoomNode From, struct FRoomNode to, bool hasDirt, struct UTunnelParameters* tunnelParameterOverride); // Function FSD.ProceduralSetup.ConnectRooms
	int32_t ConnectRoomIds(int32_t fromID, int32_t toID, bool hasDirt, struct UTunnelParameters* tunnelParameterOverride); // Function FSD.ProceduralSetup.ConnectRoomIds
	void CommitCarving(bool finalCommit, bool generateMesh); // Function FSD.ProceduralSetup.CommitCarving
	void CarveWithGeneratedInstantCarvers(); // Function FSD.ProceduralSetup.CarveWithGeneratedInstantCarvers
	void CarveTunnels(); // Function FSD.ProceduralSetup.CarveTunnels
	int32_t BeginRoom(struct FVector Location, float Rotation, bool CanHaveEnemies, struct URoomGenerator* baseGenerator, struct FVector outCenter, struct FRoomNode outRoom, float resourceMultiplayer); // Function FSD.ProceduralSetup.BeginRoom
	void BeginLiveGeneration(); // Function FSD.ProceduralSetup.BeginLiveGeneration
	void BeginGenerating(); // Function FSD.ProceduralSetup.BeginGenerating
	void AddToRoom(int32_t ID, struct FVector Location, float Rotation, struct URoomGenerator* additionalRoomGenerator); // Function FSD.ProceduralSetup.AddToRoom
	void AddRoomToInitialState(struct FRoomNode RoomNode); // Function FSD.ProceduralSetup.AddRoomToInitialState
	int32_t AddRoom(struct FVector Location, bool CanHaveEnemies, struct URoomGeneratorBase* RoomGenerator, bool canBeRotated, struct FVector outCenter, struct FRoomNode outRoom, float ResourceMultiplier); // Function FSD.ProceduralSetup.AddRoom
	void AddInfluenceToTunnelEntrances(struct UCaveInfluencer* Influencer, float Range); // Function FSD.ProceduralSetup.AddInfluenceToTunnelEntrances
	void AddImportantLocation(struct FVector Location, float Radius); // Function FSD.ProceduralSetup.AddImportantLocation
	void AddEnemyDebris(); // Function FSD.ProceduralSetup.AddEnemyDebris
	void AddDebrisVariantsToRooms(); // Function FSD.ProceduralSetup.AddDebrisVariantsToRooms
	int32_t AddDebrisCollider(struct FDebrisCapsule Capsule); // Function FSD.ProceduralSetup.AddDebrisCollider
	void AddCaveInfluence(struct UCaveInfluencer* Influencer, struct FVector Location, float Range); // Function FSD.ProceduralSetup.AddCaveInfluence
	int32_t AddAirParticlesCollider(struct FDebrisCapsule Capsule); // Function FSD.ProceduralSetup.AddAirParticlesCollider
};

// Class FSD.CaveBurner
// Size: 0x560 (Inherited: 0x528)
struct ACaveBurner : AProceduralSetup {
	float RoomRadius; // 0x528(0x04)
	char UnknownData_52C[0x4]; // 0x52c(0x04)
	struct FGameplayTagContainer RoomTags; // 0x530(0x20)
	bool CanOnlyBeUsedOnce; // 0x550(0x01)
	char UnknownData_551[0x7]; // 0x551(0x07)
	struct URoomGenerator* RoomGenerator; // 0x558(0x08)
};

// Class FSD.RoomBurner
// Size: 0x2e0 (Inherited: 0x220)
struct ARoomBurner : AActor {
	bool LiveUpdateEditor; // 0x220(0x01)
	enum class ERoomMirror MirrorTest; // 0x221(0x01)
	char UnknownData_222[0x6]; // 0x222(0x06)
	struct URoomGenerator* RoomGenerator; // 0x228(0x08)
	float RoomRadius; // 0x230(0x04)
	enum class ERoomMirroringSupport MirrorSupport; // 0x234(0x01)
	bool ShowRoomCollider; // 0x235(0x01)
	char UnknownData_236[0x2]; // 0x236(0x02)
	struct FGameplayTagContainer RoomTags; // 0x238(0x20)
	int32_t Seed; // 0x258(0x04)
	char UnknownData_25C[0x4]; // 0x25c(0x04)
	struct UBiome* Biome; // 0x260(0x08)
	struct UDifficultySetting* Difficulty; // 0x268(0x08)
	int32_t ForcePlayerCount; // 0x270(0x04)
	bool GenerateDebris; // 0x274(0x01)
	bool GenerateItems; // 0x275(0x01)
	bool GenerateResources; // 0x276(0x01)
	bool SpawnEncounters; // 0x277(0x01)
	struct UEnemyDescriptor* TestEnemy; // 0x278(0x08)
	int32_t TestEnemyCount; // 0x280(0x04)
	char UnknownData_284[0x4]; // 0x284(0x04)
	struct UMissionMutator* TestMutator; // 0x288(0x08)
	struct TArray<struct UMissionWarning*> TestWarnings; // 0x290(0x10)
	struct USpecialEvent* TestSpecialEvent; // 0x2a0(0x08)
	struct USpecialEvent* TestTreasure; // 0x2a8(0x08)
	struct UMissionTemplate* MissionTemplate; // 0x2b0(0x08)
	struct UMissionTemplate* CustomMissionTemplate; // 0x2b8(0x08)
	struct ADeepCSGWorld* CSGWorld; // 0x2c0(0x08)
	struct AProceduralSetup* PLSLiveEditor; // 0x2c8(0x08)
	char UnknownData_2D0[0x8]; // 0x2d0(0x08)
	struct URoomGenerator* LiveEditRoomGenerator; // 0x2d8(0x08)

	void SpawnEncounter(struct AProceduralSetup* setup); // Function FSD.RoomBurner.SpawnEncounter
};

// Class FSD.RoomPieceBurner
// Size: 0x2f8 (Inherited: 0x2e0)
struct ARoomPieceBurner : ARoomBurner {
	struct URoomPiece* RoomPiece; // 0x2e0(0x08)
	struct TArray<enum class ERoomPieceSide> ConnectedSides; // 0x2e8(0x10)
};

// Class FSD.InfluenceTester
// Size: 0x230 (Inherited: 0x220)
struct AInfluenceTester : AActor {
	struct UCaveInfluencer* Influencer; // 0x220(0x08)
	struct USphereComponent* Sphere; // 0x228(0x08)
};

// Class FSD.EnemyPawn
// Size: 0x338 (Inherited: 0x2e8)
struct AEnemyPawn : AFSDPawn {
	char UnknownData_2E8[0x8]; // 0x2e8(0x08)
	struct UEnemyHealthComponent* Health; // 0x2f0(0x08)
	struct UPawnStatsComponent* Stats; // 0x2f8(0x08)
	struct UEnemyPawnAfflictionComponent* affliction; // 0x300(0x08)
	struct UEnemyComponent* enemy; // 0x308(0x08)
	struct FName CenterMassSocketName; // 0x310(0x08)
	struct FQueuedMontage QueuedMontage; // 0x318(0x10)
	struct TArray<struct UMaterialInterface*> CachedMaterials; // 0x328(0x10)

	struct UMeshComponent* Receive_GetMeshComponent(); // Function FSD.EnemyPawn.Receive_GetMeshComponent
	void OnRep_QueuedMontage(); // Function FSD.EnemyPawn.OnRep_QueuedMontage
	struct USkeletalMeshComponent* GetMesh(); // Function FSD.EnemyPawn.GetMesh
};

// Class FSD.CaveLeech
// Size: 0x3f0 (Inherited: 0x338)
struct ACaveLeech : AEnemyPawn {
	char UnknownData_338[0x8]; // 0x338(0x08)
	struct USkeletalMeshComponent* SkeletalMesh; // 0x340(0x08)
	struct UGrabberComponent* GrabberComponent; // 0x348(0x08)
	float BiteDamage; // 0x350(0x04)
	float BitesPerSecond; // 0x354(0x04)
	float MaxDistanceXY; // 0x358(0x04)
	float GrapDistance; // 0x35c(0x04)
	float GrapDelay; // 0x360(0x04)
	float TentacleSpeed; // 0x364(0x04)
	float TentacleRetractSpeed; // 0x368(0x04)
	float RetractDuration; // 0x36c(0x04)
	float TentaclePullSpeed; // 0x370(0x04)
	float TentacleDropPlayerSpeed; // 0x374(0x04)
	float TentacleDropGroundDistance; // 0x378(0x04)
	float MaxDropPlayerDuration; // 0x37c(0x04)
	float HeadInterpSpeed; // 0x380(0x04)
	float TentacleAttachOffset; // 0x384(0x04)
	float BiteDistance; // 0x388(0x04)
	float RevivedGracePeriod; // 0x38c(0x04)
	struct UPawnAffliction* CaveLeechSenseAffliction; // 0x390(0x08)
	char UnknownData_398[0x8]; // 0x398(0x08)
	float StateTime; // 0x3a0(0x04)
	enum class ECaveLeechState State; // 0x3a4(0x01)
	char UnknownData_3A5[0x3]; // 0x3a5(0x03)
	struct FVector_NetQuantize TentacleLocation; // 0x3a8(0x0c)
	struct FVector_NetQuantize TentacleVelocity; // 0x3b4(0x0c)
	struct FWeakObjectPtr<struct AActor> Target; // 0x3c0(0x08)
	struct UHealthComponent* HealthTarget; // 0x3c8(0x08)
	struct USceneComponent* TentacleHead; // 0x3d0(0x08)
	char UnknownData_3D8[0x18]; // 0x3d8(0x18)

	void OnRep_State(); // Function FSD.CaveLeech.OnRep_State
	struct FVector GetTentacleTargetLocation(); // Function FSD.CaveLeech.GetTentacleTargetLocation
	struct FVector GetMouthLocation(); // Function FSD.CaveLeech.GetMouthLocation
	struct AActor* GetCurrentTarget(); // Function FSD.CaveLeech.GetCurrentTarget
	void Died(struct UHealthComponentBase* HealthComponent); // Function FSD.CaveLeech.Died
	void Damaged(float amount); // Function FSD.CaveLeech.Damaged
	void BP_OnTentacleLocationChanged(struct FVector Location); // Function FSD.CaveLeech.BP_OnTentacleLocationChanged
	void BP_OnStateChanged(enum class ECaveLeechState NewState); // Function FSD.CaveLeech.BP_OnStateChanged
	void BP_OnBite(struct UHealthComponent* TargetHealth); // Function FSD.CaveLeech.BP_OnBite
};

// Class FSD.CaveLeechAnimInstance
// Size: 0x2b0 (Inherited: 0x270)
struct UCaveLeechAnimInstance : UAnimInstance {
	float HeadOffset; // 0x268(0x04)
	struct ACaveLeech* CaveLeech; // 0x270(0x08)
	struct USceneComponent* CaveLeechHead; // 0x278(0x08)
	struct FRotator BaseRotation; // 0x280(0x0c)
	struct FVector HeadLocation; // 0x28c(0x0c)
	struct FRotator HeadRotation; // 0x298(0x0c)
	bool bIdle; // 0x2a4(0x01)
	bool bTracking; // 0x2a5(0x01)
	bool bPulling; // 0x2a6(0x01)
	bool bRetracting; // 0x2a7(0x01)
	bool bDying; // 0x2a8(0x01)
	bool bDead; // 0x2a9(0x01)
	bool bFrozen; // 0x2aa(0x01)
	bool bBiting; // 0x2ab(0x01)
};

// Class FSD.CaveObject
// Size: 0x228 (Inherited: 0x220)
struct ACaveObject : AActor {
	bool CanCharacterStandOn; // 0x220(0x01)
	char UnknownData_221[0x7]; // 0x221(0x07)

	void TriggerNetworkUpdate(); // Function FSD.CaveObject.TriggerNetworkUpdate
	void ResumeNetworkUpdates(); // Function FSD.CaveObject.ResumeNetworkUpdates
	void Recieve_OnGameStarted(); // Function FSD.CaveObject.Recieve_OnGameStarted
	void PauseNetworkUpdates(); // Function FSD.CaveObject.PauseNetworkUpdates
};

// Class FSD.CaveScriptComponent
// Size: 0xb0 (Inherited: 0xb0)
struct UCaveScriptComponent : UActorComponent {
};

// Class FSD.CaveVine
// Size: 0x288 (Inherited: 0x220)
struct ACaveVine : AActor {
	char GroundCollisionChannel; // 0x220(0x01)
	char UnknownData_221[0x3]; // 0x221(0x03)
	float IdleSwingSpeed; // 0x224(0x04)
	float ChaseSpeed; // 0x228(0x04)
	float MaxReach; // 0x22c(0x04)
	float GroundOffset; // 0x230(0x04)
	float NoiseRadius; // 0x234(0x04)
	float NoiseSpeed; // 0x238(0x04)
	char UnknownData_23C[0x4]; // 0x23c(0x04)
	struct USplineMeshComponent* SplineMeshComponent; // 0x240(0x08)
	struct USceneComponent* VineHead; // 0x248(0x08)
	struct FVector VineVelocity; // 0x250(0x0c)
	struct FVector VineLocation; // 0x25c(0x0c)
	struct FVector VineStartLocation; // 0x268(0x0c)
	struct FWeakObjectPtr<struct UHealthComponent> Target; // 0x274(0x08)
	char UnknownData_27C[0xc]; // 0x27c(0x0c)

	void BP_OnTargetChanged(struct UHealthComponent* NewTarget); // Function FSD.CaveVine.BP_OnTargetChanged
	void BP_OnInitialized(); // Function FSD.CaveVine.BP_OnInitialized
};

// Class FSD.CaveWorm
// Size: 0x398 (Inherited: 0x378)
struct ACaveWorm : ADeepPathfinderCharacter {
	char UnknownData_378[0x10]; // 0x378(0x10)
	struct USimpleHealthComponent* Health; // 0x388(0x08)
	float SearchChunksRadius; // 0x390(0x04)
	float SearchChunksInterval; // 0x394(0x04)

	struct AResourceChunk* SpawnResource(struct UObject* WorldContext, struct UResourceData* Data, float Size, struct FTransform Transform, struct FVector Impulse, struct FVector DropOffset); // Function FSD.CaveWorm.SpawnResource
	void Search(); // Function FSD.CaveWorm.Search
	void IncrementKillCount(struct UHealthComponentBase* HealthComponent); // Function FSD.CaveWorm.IncrementKillCount
	void DropResource(struct UResourceData* Data, float Size, struct FVector Impulse, struct FVector DropOffset); // Function FSD.CaveWorm.DropResource
};

// Class FSD.Maggot
// Size: 0x380 (Inherited: 0x378)
struct AMaggot : ADeepPathfinderCharacter {
	struct USimpleHealthComponent* HealthComponent; // 0x378(0x08)
};

// Class FSD.CellIdFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct UCellIdFunctionLibrary : UBlueprintFunctionLibrary {
};

// Class FSD.Test
// Size: 0x270 (Inherited: 0x270)
struct UTest : UAnimInstance {
};

// Class FSD.CharacterCameraController
// Size: 0xd0 (Inherited: 0xb0)
struct UCharacterCameraController : UActorComponent {
	float StartFOV; // 0xb0(0x04)
	float targetFov; // 0xb4(0x04)
	float TargetFOVSpeed; // 0xb8(0x04)
	char UnknownData_BC[0x4]; // 0xbc(0x04)
	struct APlayerCharacter* Character; // 0xc0(0x08)
	struct UCameraComponent* Camera; // 0xc8(0x08)

	void ResetFOV(float FadeSpeed); // Function FSD.CharacterCameraController.ResetFOV
	void FOVChanged(float NewFOV); // Function FSD.CharacterCameraController.FOVChanged
	void FadeToFOVRelative(float targetFov, float FadeSpeed); // Function FSD.CharacterCameraController.FadeToFOVRelative
	void FadeToFOV(float targetFov, float FadeSpeed); // Function FSD.CharacterCameraController.FadeToFOV
};

// Class FSD.CharacterIntoxicationComponent
// Size: 0x100 (Inherited: 0xb0)
struct UCharacterIntoxicationComponent : UActorComponent {
	struct FMulticastInlineDelegate OnIntoxicationChanged; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnPassOutDrunk; // 0xc0(0x10)
	struct APlayerCharacter* Character; // 0xd0(0x08)
	enum class EIntoxicationState CurrentState; // 0xd8(0x01)
	char UnknownData_D9[0x3]; // 0xd9(0x03)
	struct FLerpingPercent IntoxicationPercent; // 0xdc(0x08)
	float IntoxicationLerpSpeed; // 0xe4(0x04)
	float TimeDrunk; // 0xe8(0x04)
	struct FCountDownFloat SoberingUpCoolDown; // 0xec(0x0c)
	char SoberingPercent; // 0xf8(0x01)
	char UnknownData_F9[0x7]; // 0xf9(0x07)

	void ReceiveStateChange(enum class EIntoxicationState NewState); // Function FSD.CharacterIntoxicationComponent.ReceiveStateChange
	void ReceivePassOutDrunk(); // Function FSD.CharacterIntoxicationComponent.ReceivePassOutDrunk
	void ReceiveDrunkTick(float DeltaTime, float DrunkTime); // Function FSD.CharacterIntoxicationComponent.ReceiveDrunkTick
	void ReceiveDrunkEnd(); // Function FSD.CharacterIntoxicationComponent.ReceiveDrunkEnd
	void ReceiveDrunkBegin(); // Function FSD.CharacterIntoxicationComponent.ReceiveDrunkBegin
	void PassOutDrunkSignature__DelegateSignature(struct APlayerCharacter* Player); // DelegateFunction FSD.CharacterIntoxicationComponent.PassOutDrunkSignature__DelegateSignature
	bool IsPassOutDrunk(); // Function FSD.CharacterIntoxicationComponent.IsPassOutDrunk
	bool IsOnSpaceRig(); // Function FSD.CharacterIntoxicationComponent.IsOnSpaceRig
	bool IsLocallyControlled(); // Function FSD.CharacterIntoxicationComponent.IsLocallyControlled
	bool IsDrunk(); // Function FSD.CharacterIntoxicationComponent.IsDrunk
	void IntoxicationProgressSignature__DelegateSignature(struct APlayerCharacter* Player, float Progress); // DelegateFunction FSD.CharacterIntoxicationComponent.IntoxicationProgressSignature__DelegateSignature
	bool HasAuthority(); // Function FSD.CharacterIntoxicationComponent.HasAuthority
	float GetSoberingUpCoolDown(); // Function FSD.CharacterIntoxicationComponent.GetSoberingUpCoolDown
	float GetIntoxicationProgressMapped(struct UCurveFloat* Curve); // Function FSD.CharacterIntoxicationComponent.GetIntoxicationProgressMapped
	float GetIntoxicationProgress(); // Function FSD.CharacterIntoxicationComponent.GetIntoxicationProgress
	int32_t GetAlcoholPct(enum class EDrinkableAlcoholStrength Strength); // Function FSD.CharacterIntoxicationComponent.GetAlcoholPct
	void Consume(struct UDrinkableDataAsset* Drinkable); // Function FSD.CharacterIntoxicationComponent.Consume
	void ClearIntoxication(); // Function FSD.CharacterIntoxicationComponent.ClearIntoxication
};

// Class FSD.CharacterRecoilComponent
// Size: 0xe0 (Inherited: 0xb0)
struct UCharacterRecoilComponent : UActorComponent {
	struct FVector Recoil; // 0xb0(0x0c)
	struct FVector RecoilVelocity; // 0xbc(0x0c)
	struct FVector PrevError; // 0xc8(0x0c)
	char UnknownData_D4[0xc]; // 0xd4(0x0c)
};

// Class FSD.CharacterSettings
// Size: 0x180 (Inherited: 0x30)
struct UCharacterSettings : UDataAsset {
	struct TArray<SoftClassProperty> RankedHeroClasses; // 0x30(0x10)
	struct TArray<struct APlayerCharacter*> LoadedClasses; // 0x40(0x10)
	struct TArray<struct FText> PlayerRankNames; // 0x50(0x10)
	struct TArray<int32_t> CharacterXPLevels; // 0x60(0x10)
	struct TMap<struct FGuid, struct UPlayerCharacterID*> PlayerCharacterIDMap; // 0x70(0x50)
	struct TArray<struct UPlayerCharacterID*> PlayerCharacterIDs; // 0xc0(0x10)
	struct UPlayerCharacterID* BoscoID; // 0xd0(0x08)
	struct USkeletalMesh* NoHead; // 0xd8(0x08)
	struct USkeletalMesh* DefaultHead; // 0xe0(0x08)
	struct USkeletalMesh* ThickNeck; // 0xe8(0x08)
	struct USkeletalMesh* ThinNeck; // 0xf0(0x08)
	SoftClassProperty CarriableBagClass; // 0xf8(0x28)
	struct UUseAnimationSetting* ThrowItemAnimSettings; // 0x120(0x08)
	struct TMap<struct UPlayerCharacterID*, struct UCharacterVanityItems*> CharacterVanityItems; // 0x128(0x50)
	struct UDialogDataAsset* AutoReloadShout; // 0x178(0x08)

	void PreloadAllInventories(struct UAsyncManager* AsyncManager); // Function FSD.CharacterSettings.PreloadAllInventories
	struct UPlayerCharacterID* GetPlayerCharacterID(struct FGuid ID); // Function FSD.CharacterSettings.GetPlayerCharacterID
};

// Class FSD.CharacterSightComponent
// Size: 0x158 (Inherited: 0xb0)
struct UCharacterSightComponent : UActorComponent {
	struct FMulticastInlineDelegate OnTargetChanged; // 0xb0(0x10)
	float TargetMaxDistance; // 0xc0(0x04)
	char TraceChannel; // 0xc4(0x01)
	char UnknownData_C5[0x3]; // 0xc5(0x03)
	struct TArray<struct FWeakObjectPtr<struct AActor>> IgnoredActors; // 0xc8(0x10)
	struct APlayerCharacter* Character; // 0xd8(0x08)
	struct FWeakObjectPtr<struct AActor> TargetActor; // 0xe0(0x08)
	struct FWeakObjectPtr<struct UPrimitiveComponent> TargetPrimitive; // 0xe8(0x08)
	struct FWeakObjectPtr<struct USimpleObjectInfoComponent> TargetInfo; // 0xf0(0x08)
	struct FWeakObjectPtr<struct UTemperatureComponent> TargetTemperature; // 0xf8(0x08)
	struct FWeakObjectPtr<struct UPawnAfflictionComponent> TargetAfflictions; // 0x100(0x08)
	struct TScriptInterface<None> TargetHealth; // 0x108(0x10)
	struct TScriptInterface<None> TargetTargetable; // 0x118(0x10)
	float TargetTime; // 0x128(0x04)
	struct FReplicatedCharacterData ReplicatedData; // 0x12c(0x18)
	char UnknownData_144[0x14]; // 0x144(0x14)

	void TargetChangedSignature__DelegateSignature(struct AActor* NewTarget, struct UPrimitiveComponent* NewPrimitive); // DelegateFunction FSD.CharacterSightComponent.TargetChangedSignature__DelegateSignature
	void Server_UpdateTarget(struct AActor* NewActor, struct UPrimitiveComponent* NewPrimitive); // Function FSD.CharacterSightComponent.Server_UpdateTarget
	void RemoveIgnoreActor(struct AActor* InActor); // Function FSD.CharacterSightComponent.RemoveIgnoreActor
	void ReceiveTargetInSightTick(float DeltaTime); // Function FSD.CharacterSightComponent.ReceiveTargetInSightTick
	void ReceiveTargetChanged(); // Function FSD.CharacterSightComponent.ReceiveTargetChanged
	void GetSightStartAndEnd(float InMaxDistance, struct FVector OutStartLocation, struct FVector OutEndLocation); // Function FSD.CharacterSightComponent.GetSightStartAndEnd
	void AddIgnoreActor(struct AActor* InActor); // Function FSD.CharacterSightComponent.AddIgnoreActor
};

// Class FSD.CharacterStateComponent
// Size: 0xf8 (Inherited: 0xb0)
struct UCharacterStateComponent : UActorComponent {
	char StateId; // 0xb0(0x01)
	char UnknownData_B1[0x7]; // 0xb1(0x07)
	struct APlayerCharacter* Character; // 0xb8(0x08)
	struct UDialogDataAsset* EnterStateShout; // 0xc0(0x08)
	struct UDialogDataAsset* ExitStateShout; // 0xc8(0x08)
	struct UDialogDataAsset* AttentionShout; // 0xd0(0x08)
	struct UPlayerMovementComponent* PlayerMovement; // 0xd8(0x08)
	char UnknownData_E0[0x18]; // 0xe0(0x18)

	void ReceiveStateTick(float DeltaTime); // Function FSD.CharacterStateComponent.ReceiveStateTick
	void ReceiveStateExit(); // Function FSD.CharacterStateComponent.ReceiveStateExit
	void ReceiveStateEnter(); // Function FSD.CharacterStateComponent.ReceiveStateEnter
	bool IsLocallyControlled(); // Function FSD.CharacterStateComponent.IsLocallyControlled
	bool HasAuthority(); // Function FSD.CharacterStateComponent.HasAuthority
	float GetStateTime(); // Function FSD.CharacterStateComponent.GetStateTime
	char GetStateID(); // Function FSD.CharacterStateComponent.GetStateID
	bool GetStateActive(); // Function FSD.CharacterStateComponent.GetStateActive
	struct UPlayerMovementComponent* GetCharacterMovement(); // Function FSD.CharacterStateComponent.GetCharacterMovement
};

// Class FSD.CharacterUseComponent
// Size: 0x1f8 (Inherited: 0xb0)
struct UCharacterUseComponent : UActorComponent {
	struct FMulticastInlineDelegate OnDepositingBegin; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnDepositingEnd; // 0xc0(0x10)
	struct FMulticastInlineDelegate OnBeginHoveringEvent; // 0xd0(0x10)
	struct FMulticastInlineDelegate OnEndHoveringEvent; // 0xe0(0x10)
	struct FMulticastInlineDelegate OnBeginUsingEvent; // 0xf0(0x10)
	struct FMulticastInlineDelegate OnEndUsingEvent; // 0x100(0x10)
	struct FMulticastInlineDelegate OnBeginUseNoUsable; // 0x110(0x10)
	struct FMulticastInlineDelegate OnEndUseNoUsable; // 0x120(0x10)
	struct UUsableComponentBase* ActiveUsablee; // 0x130(0x08)
	struct UUsableComponentBase* HoveringUsable; // 0x138(0x08)
	struct USceneComponent* HoveringUsableCollider; // 0x140(0x08)
	struct USceneComponent* ActiveUsableCollider; // 0x148(0x08)
	struct USphereComponent* UseCollider; // 0x150(0x08)
	struct USoundBase* AudioBeginDepositing; // 0x158(0x08)
	struct USoundBase* AudioEndDepositing; // 0x160(0x08)
	float UseDistance; // 0x168(0x04)
	char UnknownData_16C[0x1]; // 0x16c(0x01)
	enum class EUseRestriction UseRestriction; // 0x16d(0x01)
	char UnknownData_16E[0x2]; // 0x16e(0x02)
	struct APlayerCharacter* Character; // 0x170(0x08)
	char UnknownData_178[0x30]; // 0x178(0x30)
	struct TMap<struct UUsableComponentBase*, float> UseCooldownTracker; // 0x1a8(0x50)

	void Server_SetCanUse(enum class EUseRestriction UseRestriction); // Function FSD.CharacterUseComponent.Server_SetCanUse
	void Server_EndUse(); // Function FSD.CharacterUseComponent.Server_EndUse
	void Server_BeginUse(struct UUsableComponentBase* Usable, struct USceneComponent* UsableCollider); // Function FSD.CharacterUseComponent.Server_BeginUse
	void OnRep_ActiveUsablee(struct UUsableComponentBase* lastUsable); // Function FSD.CharacterUseComponent.OnRep_ActiveUsablee
	void OnCharacterStateChanged(enum class ECharacterState NewState); // Function FSD.CharacterUseComponent.OnCharacterStateChanged
	bool IsLookingAtUsable(); // Function FSD.CharacterUseComponent.IsLookingAtUsable
	bool IsLookingAtDepositable(); // Function FSD.CharacterUseComponent.IsLookingAtDepositable
	float GetUseProgress(); // Function FSD.CharacterUseComponent.GetUseProgress
	struct AActor* GetLookingAtActor(); // Function FSD.CharacterUseComponent.GetLookingAtActor
	bool GetIsUsing(); // Function FSD.CharacterUseComponent.GetIsUsing
	bool GetIsDepositing(); // Function FSD.CharacterUseComponent.GetIsDepositing
	void All_PlaySingleUse(struct UUsableComponentBase* Usable); // Function FSD.CharacterUseComponent.All_PlaySingleUse
	void AddCustomUsableComponent(struct UUsableComponentBase* Usable, enum class ECustomUsableType eType); // Function FSD.CharacterUseComponent.AddCustomUsableComponent
};

// Class FSD.CharacterVanityComponent
// Size: 0x1e0 (Inherited: 0xb0)
struct UCharacterVanityComponent : UActorComponent {
	char UnknownData_B0[0x8]; // 0xb0(0x08)
	struct UCharacterVanityItems* AvailableVanityItems; // 0xb8(0x08)
	struct UBeardColorVanityItem* ShownBeardColor; // 0xc0(0x08)
	struct UMaterialInterface* ArmorMaterial; // 0xc8(0x08)
	struct UMaterialInstanceDynamic* DynamicSkinMaterial; // 0xd0(0x08)
	enum class EHeadVanityType HeadVanityType; // 0xd8(0x01)
	char UnknownData_D9[0x7]; // 0xd9(0x07)
	struct TArray<struct UVanityItem*> EquippedVanity; // 0xe0(0x10)
	struct UMaterialInterface* SkinMaterial; // 0xf0(0x08)
	struct TArray<struct FTattooArmorItem> Tattoos; // 0xf8(0x10)
	struct TArray<struct UMaterialInterface*> CachedMaterials; // 0x108(0x10)
	char UnknownData_118[0x68]; // 0x118(0x68)
	struct TMap<enum class EVanitySlot, struct USkeletalMeshComponent*> VanityMeshes; // 0x180(0x50)
	char UnknownData_1D0[0x10]; // 0x1d0(0x10)

	void UpdateMeshes(); // Function FSD.CharacterVanityComponent.UpdateMeshes
	void UpdateEquippedVanity(bool applyItems); // Function FSD.CharacterVanityComponent.UpdateEquippedVanity
	void SetEquippedVanityInViewer(struct TArray<struct UVanityItem*> Vanity); // Function FSD.CharacterVanityComponent.SetEquippedVanityInViewer
	void Server_SetEquippedVanity(struct TArray<struct UVanityItem*> equippedItems); // Function FSD.CharacterVanityComponent.Server_SetEquippedVanity
	struct UVanityItem* Receive_GetEquippedVanityItem(struct UObject* WorldContextObject, struct UPlayerCharacterID* Character, enum class EVanitySlot Slot); // Function FSD.CharacterVanityComponent.Receive_GetEquippedVanityItem
	void OnRep_EquippedVanity(); // Function FSD.CharacterVanityComponent.OnRep_EquippedVanity
	struct UVanityItem* GetEquippedVanityItem(enum class EVanitySlot Slot); // Function FSD.CharacterVanityComponent.GetEquippedVanityItem
	struct UCharacterVanityItems* GetAvailableVanityItems(); // Function FSD.CharacterVanityComponent.GetAvailableVanityItems
	void EnforceValidPaintjob(); // Function FSD.CharacterVanityComponent.EnforceValidPaintjob
	void CreateEquippedGear(); // Function FSD.CharacterVanityComponent.CreateEquippedGear
};

// Class FSD.CharacterVanityItems
// Size: 0x1a8 (Inherited: 0x30)
struct UCharacterVanityItems : UDataAsset {
	struct TArray<struct UHeadVanityItem*> HeadItems; // 0x30(0x10)
	struct UVanitySchematicBank* HeadSchematicBank; // 0x40(0x08)
	struct TArray<struct UBeardVanityItem*> BeardItems; // 0x48(0x10)
	struct UVanitySchematicBank* BeardSchematicBank; // 0x58(0x08)
	struct TArray<struct UArmorVanityItem*> ArmorItems; // 0x60(0x10)
	struct TArray<struct UArmorMaterialVanityItem*> ArmorMaterialItems; // 0x70(0x10)
	struct TArray<struct UArmorMaterialVanityItem*> ArmorMaterialItemsInTreassures; // 0x80(0x10)
	struct TArray<struct UEyeBrowsVanityItem*> EyebrowsItems; // 0x90(0x10)
	struct UVanitySchematicBank* EyebrowSchematicBank; // 0xa0(0x08)
	struct TArray<struct UMoustacheVanityItem*> MoustacheItems; // 0xa8(0x10)
	struct UVanitySchematicBank* MoustacheSchematicBank; // 0xb8(0x08)
	struct TArray<struct USideburnsVanityItem*> SideburnItems; // 0xc0(0x10)
	struct UVanitySchematicBank* SideburnSchematicBank; // 0xd0(0x08)
	struct TArray<struct UBeardColorVanityItem*> BeardMaterialItems; // 0xd8(0x10)
	struct UVanitySchematicBank* BeardMaterialSchematicBank; // 0xe8(0x08)
	struct TArray<struct USkinColorVanityItem*> SkinMaterialItems; // 0xf0(0x10)
	struct UVanitySchematicBank* SkinMaterialSchematicBank; // 0x100(0x08)
	struct TMap<struct FGuid, struct UVanityItem*> VanityMap; // 0x108(0x50)
	struct TMap<enum class EVanitySlot, struct UVanityItem*> DefaultItems; // 0x158(0x50)

	void SortVanityItems(struct UObject* WorldContextObject, struct UPlayerCharacterID* characterID, struct TArray<struct UVanityItem*> vanityItems); // Function FSD.CharacterVanityItems.SortVanityItems
	struct TArray<struct UVanityItem*> GetVanityItems(struct UObject* WorldContextObject, enum class EVanitySlot Slot, bool onlyStoreItems, struct UPlayerCharacterID* characterID); // Function FSD.CharacterVanityItems.GetVanityItems
	struct UVanityItem* GetVanityItem(struct FGuid VanityID); // Function FSD.CharacterVanityItems.GetVanityItem
	struct TArray<struct UVanityItem*> GetUnLockedVanityItems(struct UObject* WorldContextObject, enum class EVanitySlot Slot, bool onlyStoreItems, struct UPlayerCharacterID* characterID); // Function FSD.CharacterVanityItems.GetUnLockedVanityItems
	struct TArray<struct UVanityItem*> GetLockedVanityItems(struct UObject* WorldContextObject, enum class EVanitySlot Slot, struct UPlayerCharacterID* characterID); // Function FSD.CharacterVanityItems.GetLockedVanityItems
	struct TArray<struct UVanityItem*> GetItems(enum class EVanitySlot Slot, bool onlyStoreItems); // Function FSD.CharacterVanityItems.GetItems
	struct UVanityItem* GetDefaultVanityItem(struct UObject* WorldContext, enum class EVanitySlot Slot, struct UPlayerCharacterID* characterID); // Function FSD.CharacterVanityItems.GetDefaultVanityItem
	void Clean(); // Function FSD.CharacterVanityItems.Clean
};

// Class FSD.CharacterSelectionSwitcher
// Size: 0x220 (Inherited: 0x220)
struct ACharacterSelectionSwitcher : AActor {

	void OnVictoryPoseChanged(struct UVictoryPose* VictoryPose); // Function FSD.CharacterSelectionSwitcher.OnVictoryPoseChanged
	void OnVanityItemEquipped(enum class EVanitySlot Slot); // Function FSD.CharacterSelectionSwitcher.OnVanityItemEquipped
	void Hide(); // Function FSD.CharacterSelectionSwitcher.Hide
	struct AActor* GetViewerActor(); // Function FSD.CharacterSelectionSwitcher.GetViewerActor
	struct APlayerCharacter* GetActiveCharacter(); // Function FSD.CharacterSelectionSwitcher.GetActiveCharacter
};

// Class FSD.ChargedWeapon
// Size: 0x728 (Inherited: 0x690)
struct AChargedWeapon : AAmmoDrivenWeapon {
	struct FMulticastInlineDelegate OnChargeChanged; // 0x690(0x10)
	struct FMulticastInlineDelegate OnHeatChanged; // 0x6a0(0x10)
	char UnknownData_6B0[0x8]; // 0x6b0(0x08)
	struct UAnimMontage* FP_OverheatAnim; // 0x6b8(0x08)
	struct UAnimMontage* FP_ChargeupMontage; // 0x6c0(0x08)
	struct UParticleSystem* ChargeupParticles; // 0x6c8(0x08)
	struct UParticleSystemComponent* ChargeupParticleInstance; // 0x6d0(0x08)
	struct UFXSystemAsset* ChargeupFireMuzzleFlash; // 0x6d8(0x08)
	struct USoundCue* NormalFiresound; // 0x6e0(0x08)
	struct USoundCue* FullyChargedFireSound; // 0x6e8(0x08)
	float ChargeSpeed; // 0x6f0(0x04)
	bool Charging; // 0x6f4(0x01)
	char UnknownData_6F5[0x3]; // 0x6f5(0x03)
	float ChargeProgress; // 0x6f8(0x04)
	int32_t ShotCostAtBelowFullCharge; // 0x6fc(0x04)
	int32_t ShotCostAtFullCharge; // 0x700(0x04)
	bool ChargedShotsOnly; // 0x704(0x01)
	bool AutoFireWhenOverheated; // 0x705(0x01)
	char UnknownData_706[0x2]; // 0x706(0x02)
	float TotalHeat; // 0x708(0x04)
	char UnknownData_70C[0x4]; // 0x70c(0x04)
	float CoolingRate; // 0x710(0x04)
	float HeatPerSecondWhileCharging; // 0x714(0x04)
	float HeatPerSecondWhenCharged; // 0x718(0x04)
	float HeatPerNormalShot; // 0x71c(0x04)
	float HeatPerChargedShot; // 0x720(0x04)
	char UnknownData_724[0x4]; // 0x724(0x04)

	void SetOverheated(bool isOverheated); // Function FSD.ChargedWeapon.SetOverheated
	void Server_SetIsCharging(bool isChargingValue); // Function FSD.ChargedWeapon.Server_SetIsCharging
	void RecieveChargeProgressChanged(float NewChargeProgress); // Function FSD.ChargedWeapon.RecieveChargeProgressChanged
	void ReceiveOverheatedChanged(bool isOverheated); // Function FSD.ChargedWeapon.ReceiveOverheatedChanged
	bool GetIsCharging(); // Function FSD.ChargedWeapon.GetIsCharging
};

// Class FSD.ChargedWeaponAnimInstance
// Size: 0x290 (Inherited: 0x270)
struct UChargedWeaponAnimInstance : UAnimInstance {
	bool IsCharging; // 0x268(0x01)
	float ChargeupPlayRate; // 0x26c(0x04)
	float ChargeupPlayRateSpeedChange; // 0x270(0x04)
	float ChargedownPlayRateSpeedChange; // 0x274(0x04)
	float MaxChargeupPlayRate; // 0x278(0x04)
	struct AChargedWeapon* Weapon; // 0x280(0x08)
	char UnknownData_289[0x7]; // 0x289(0x07)
};

// Class FSD.ProjectileBase
// Size: 0x2a8 (Inherited: 0x220)
struct AProjectileBase : AActor {
	struct FProjectileImpact ProjectileImpact; // 0x220(0x30)
	bool Exploded; // 0x250(0x01)
	bool DoOnImpact; // 0x251(0x01)
	bool DoOnImpact2; // 0x252(0x01)
	bool DoOnImpact3; // 0x253(0x01)
	bool DoOnSpawnVar; // 0x254(0x01)
	char UnknownData_255[0x13]; // 0x255(0x13)
	bool IsDorment; // 0x268(0x01)
	char UnknownData_269[0x7]; // 0x269(0x07)
	struct USphereComponent* CollisionComponent; // 0x270(0x08)
	char UnknownData_278[0x4]; // 0x278(0x04)
	float LifeSpan; // 0x27c(0x04)
	float VelocityMultiplier; // 0x280(0x04)
	float GravityMultiplier; // 0x284(0x04)
	bool AffectedByDifficultySpeedModifier; // 0x288(0x01)
	char UnknownData_289[0x7]; // 0x289(0x07)
	enum class EOnProjectileImpactBehaviourEnum EOnImpactBehaviour; // 0x290(0x04)
	char UnknownData_294[0x14]; // 0x294(0x14)

	struct UTerrainMaterial* TryGetTerrainMaterial(); // Function FSD.ProjectileBase.TryGetTerrainMaterial
	void StopMovement(); // Function FSD.ProjectileBase.StopMovement
	void OnRep_ProjectileImpact(); // Function FSD.ProjectileBase.OnRep_ProjectileImpact
	void OnRep_IsDorment(bool wasDorment); // Function FSD.ProjectileBase.OnRep_IsDorment
	void OnInitialized(); // Function FSD.ProjectileBase.OnInitialized
	void OnImpacted(bool PredictedImpact, struct FHitResult HitResult); // Function FSD.ProjectileBase.OnImpacted
	void MakeBouncy(); // Function FSD.ProjectileBase.MakeBouncy
	void InitState(struct FVector ShootDirection, struct FVector initialBonusVelocity); // Function FSD.ProjectileBase.InitState
	void InitComponents(); // Function FSD.ProjectileBase.InitComponents
	void IgnoreCollision(struct UPrimitiveComponent* otherCollider); // Function FSD.ProjectileBase.IgnoreCollision
	float GetGameTimeSinceActivation(); // Function FSD.ProjectileBase.GetGameTimeSinceActivation
	int32_t GetBoneIndex(); // Function FSD.ProjectileBase.GetBoneIndex
	void DoOnSpawn(); // Function FSD.ProjectileBase.DoOnSpawn
	void DisableProjectileCollision(struct AProjectileBase* projectileA, struct AProjectileBase* projectileB); // Function FSD.ProjectileBase.DisableProjectileCollision
	void DisableAndDestroy(); // Function FSD.ProjectileBase.DisableAndDestroy
};

// Class FSD.Projectile
// Size: 0x2f0 (Inherited: 0x2a8)
struct AProjectile : AProjectileBase {
	struct FProjectileState State; // 0x2a8(0x28)
	char UnknownData_2D0[0x1]; // 0x2d0(0x01)
	bool UseArmorDamageBoneCheck; // 0x2d1(0x01)
	char UnknownData_2D2[0x6]; // 0x2d2(0x06)
	struct TArray<struct AActor*> IgnoreActorClasses; // 0x2d8(0x10)
	struct UProjectileMovementComponent* MovementComponent; // 0x2e8(0x08)

	struct AProjectileBase* SpawnProjectile(struct UObject* WorldContextObject, struct AProjectileBase* projectileClass, struct APawn* projectileOwner, struct FVector Origin, struct FRotator velocityDirection); // Function FSD.Projectile.SpawnProjectile
	struct AProjectileBase* SpawnBallisticProjectile(struct UObject* WorldContextObject, struct AProjectile* projectileClass, struct APawn* projectileOwner, struct FVector Origin, struct FVector Velocity); // Function FSD.Projectile.SpawnBallisticProjectile
	void SetHomingTargetComponent(struct USceneComponent* HomingTargetComponent, float Delay); // Function FSD.Projectile.SetHomingTargetComponent
	void OnRep_State(struct FProjectileState oldState); // Function FSD.Projectile.OnRep_State
	void OnImpact(struct FHitResult HitResult); // Function FSD.Projectile.OnImpact
	void OnBounce(struct FHitResult ImpactResult, struct FVector ImpactVelocity); // Function FSD.Projectile.OnBounce
	struct UFSDPhysicalMaterial* FindBoneIndexFromArmor(struct FHitResult HitResult, int32_t outBoneIndex); // Function FSD.Projectile.FindBoneIndexFromArmor
	void ClearMovementComponent(); // Function FSD.Projectile.ClearMovementComponent
};

// Class FSD.ChargedProjectile
// Size: 0x2f8 (Inherited: 0x2f0)
struct AChargedProjectile : AProjectile {
	bool ExplodesWhenDead; // 0x2f0(0x01)
	bool PersistentExplosion; // 0x2f1(0x01)
	bool AoEDamageInFlight; // 0x2f2(0x01)
	char UnknownData_2F3[0x1]; // 0x2f3(0x01)
	float DirectDamageReduction; // 0x2f4(0x04)

	void OnAoEDamageEnabled(); // Function FSD.ChargedProjectile.OnAoEDamageEnabled
};

// Class FSD.ChromaComponent
// Size: 0x180 (Inherited: 0xb0)
struct UChromaComponent : UActorComponent {
	struct FLinearColor HealthBarColor; // 0xb0(0x10)
	struct FLinearColor DamageEffectColor; // 0xc0(0x10)
	struct FLinearColor DownedEffectColor; // 0xd0(0x10)
	struct FLinearColor ShieldBarColor; // 0xe0(0x10)
	struct FLinearColor ShieldEffectColor; // 0xf0(0x10)
	struct FLinearColor WeaponColor; // 0x100(0x10)
	struct FLinearColor WeaponEquipedColor; // 0x110(0x10)
	struct FLinearColor GrenadeColor; // 0x120(0x10)
	struct FLinearColor WASDColor; // 0x130(0x10)
	struct FLinearColor RessuplyColor; // 0x140(0x10)
	struct FLinearColor ReloadColor; // 0x150(0x10)
	enum class EFSDChromaEffect ActiveEffect; // 0x160(0x01)
	char UnknownData_161[0x3]; // 0x161(0x03)
	float EffectDuration; // 0x164(0x04)
	uint32_t EffectSeed; // 0x168(0x04)
	char UnknownData_16C[0x14]; // 0x16c(0x14)

	void TriggerEffect(enum class EFSDChromaEffect effect); // Function FSD.ChromaComponent.TriggerEffect
};

// Class FSD.ClaimableRewardEntryWidget
// Size: 0x298 (Inherited: 0x230)
struct UClaimableRewardEntryWidget : UUserWidget {
	struct FMulticastInlineDelegate OnRewardClaimed; // 0x230(0x10)
	struct FClaimableRewardEntry Data; // 0x240(0x58)

	void WidgetDelegate__DelegateSignature(struct UClaimableRewardEntryWidget* EntryWidget); // DelegateFunction FSD.ClaimableRewardEntryWidget.WidgetDelegate__DelegateSignature
	void SignalRewardClaimed(); // Function FSD.ClaimableRewardEntryWidget.SignalRewardClaimed
	void SetData(struct FClaimableRewardEntry InData); // Function FSD.ClaimableRewardEntryWidget.SetData
	void ReceiveDataChanged(); // Function FSD.ClaimableRewardEntryWidget.ReceiveDataChanged
};

// Class FSD.ClaimableRewardViewWidget
// Size: 0x2a0 (Inherited: 0x230)
struct UClaimableRewardViewWidget : UUserWidget {
	struct FClaimableRewardView Data; // 0x230(0x70)

	void ReceiveEndFlow(); // Function FSD.ClaimableRewardViewWidget.ReceiveEndFlow
	void ReceiveDataChanged(); // Function FSD.ClaimableRewardViewWidget.ReceiveDataChanged
	void ReceiveBeginFlow(); // Function FSD.ClaimableRewardViewWidget.ReceiveBeginFlow
	void EndRewardFlow(); // Function FSD.ClaimableRewardViewWidget.EndRewardFlow
	void BeginRewardFlow(struct FClaimableRewardView InViewData); // Function FSD.ClaimableRewardViewWidget.BeginRewardFlow
};

// Class FSD.ExampleActor
// Size: 0x240 (Inherited: 0x220)
struct AExampleActor : AActor {
	struct FMulticastInlineDelegate OnExampleUpdatedEvent; // 0x220(0x10)
	float Field; // 0x230(0x04)
	char UnknownData_234[0xc]; // 0x234(0x0c)

	void Server_ExampleFunction(); // Function FSD.ExampleActor.Server_ExampleFunction
	void Client_ExampleFunction(); // Function FSD.ExampleActor.Client_ExampleFunction
	void All_ExampleFunction(); // Function FSD.ExampleActor.All_ExampleFunction
};

// Class FSD.CollectableResourceData
// Size: 0x138 (Inherited: 0xf0)
struct UCollectableResourceData : UResourceData {
	struct UDebrisPositioning* Positioning; // 0xf0(0x08)
	float Rarity; // 0xf8(0x04)
	float InfluenceRadius; // 0xfc(0x04)
	struct TArray<struct UDebrisBase*> Debris; // 0x100(0x10)
	bool UseTerrainPlacement; // 0x110(0x01)
	char UnknownData_111[0x7]; // 0x111(0x07)
	struct TArray<SoftClassProperty> CollectableClasses; // 0x118(0x10)
	struct TArray<struct AActor*> CollectableClassesLoaded; // 0x128(0x10)
};

// Class FSD.CharacterShoutsData
// Size: 0xe0 (Inherited: 0x30)
struct UCharacterShoutsData : UDataAsset {
	struct FCharacterShouts Shouts; // 0x30(0xb0)
};

// Class FSD.ShoutWidget
// Size: 0x258 (Inherited: 0x230)
struct UShoutWidget : UUserWidget {
	struct FWeakObjectPtr<struct APlayerCharacter> Sender; // 0x230(0x08)
	struct FText Text; // 0x238(0x18)
	float Duration; // 0x250(0x04)
	bool IsSubtitle; // 0x254(0x01)
	char UnknownData_255[0x3]; // 0x255(0x03)

	void OnShout(); // Function FSD.ShoutWidget.OnShout
	struct FString GetTimeString(int32_t Seconds); // Function FSD.ShoutWidget.GetTimeString
	void GetSplitTimeString(int32_t Seconds, struct FString MinutesString, struct FString SecondsString); // Function FSD.ShoutWidget.GetSplitTimeString
	struct FString GetCountDownString(int32_t Seconds); // Function FSD.ShoutWidget.GetCountDownString
};

// Class FSD.CommunicationComponent
// Size: 0x288 (Inherited: 0xb0)
struct UCommunicationComponent : UActorComponent {
	struct FMulticastInlineDelegate OnMissionShout; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnMissionShoutEnd; // 0xc0(0x10)
	struct FMulticastInlineDelegate OnMixerAnnouncement; // 0xd0(0x10)
	struct FMulticastInlineDelegate OnPlayerShouted; // 0xe0(0x10)
	struct FMulticastInlineDelegate OnMissionControlFinished; // 0xf0(0x10)
	bool ShoutingEnabled; // 0x100(0x01)
	char UnknownData_101[0x7]; // 0x101(0x07)
	struct UShoutWidget* ShoutWidgetType; // 0x108(0x08)
	struct UCharacterShoutsData* CharacterShouts; // 0x110(0x08)
	float PitchMultiplier; // 0x118(0x04)
	float MinShoutDelay; // 0x11c(0x04)
	float CloseRangeShoutDistance; // 0x120(0x04)
	char UnknownData_124[0x4]; // 0x124(0x04)
	struct TMap<struct UDialogDataAsset*, float> DelayedShouts; // 0x128(0x50)
	struct FGameplayTagContainer KillShoutAllowedTags; // 0x178(0x20)
	bool bMissionControlPaused; // 0x198(0x01)
	char UnknownData_199[0x7]; // 0x199(0x07)
	struct UAudioComponent* MissionControlAudioComponent; // 0x1a0(0x08)
	struct TMap<struct APlayerCharacter*, struct UShoutWidget*> ActiveShouts; // 0x1a8(0x50)
	struct TArray<struct FActiveOutline> ActiveOutlines; // 0x1f8(0x10)
	struct APlayerCharacter* Character; // 0x208(0x08)
	struct UDialogDataAsset* LastShout; // 0x210(0x08)
	struct UAudioComponent* ShoutAudioComponent; // 0x218(0x08)
	struct TMap<struct UDialogDataAsset*, float> ShoutHistory; // 0x220(0x50)
	char UnknownData_270[0x8]; // 0x270(0x08)
	struct TArray<struct FMissionShoutQueueItem> MissionShoutQueue; // 0x278(0x10)

	void ShoutCustomOrDefault(struct UDialogDataAsset* CustomShout, enum class EShoutType DefaultShout); // Function FSD.CommunicationComponent.ShoutCustomOrDefault
	void ShoutCustomLocalOnly(struct UDialogDataAsset* Shout); // Function FSD.CommunicationComponent.ShoutCustomLocalOnly
	void ShoutCustomClosestDwarf(struct UObject* WorldContext, struct UDialogDataAsset* Shout, struct FVector TargetLocation); // Function FSD.CommunicationComponent.ShoutCustomClosestDwarf
	void ShoutCustom(struct UDialogDataAsset* Shout); // Function FSD.CommunicationComponent.ShoutCustom
	void Shout(enum class EShoutType Shout); // Function FSD.CommunicationComponent.Shout
	void SetMissionControlPaused(bool IsPaused); // Function FSD.CommunicationComponent.SetMissionControlPaused
	void ServerShout(struct UDialogDataAsset* Shout); // Function FSD.CommunicationComponent.ServerShout
	void ServerMixerAnnouncement(struct FMixerAnnouncement Announcement); // Function FSD.CommunicationComponent.ServerMixerAnnouncement
	void ServerMissionShout(struct UDialogDataAsset* Shout, bool bPriority); // Function FSD.CommunicationComponent.ServerMissionShout
	struct UAudioComponent* PlayPitchedByClass(struct UObject* WorldContextObject, struct APlayerCharacter* CharacterClass, struct USoundBase* Sound, struct UDialogDataAsset* Shout, enum class EShoutType ShoutType, struct UAudioComponent* AudioComponent); // Function FSD.CommunicationComponent.PlayPitchedByClass
	void PlayPitchedAsync(struct UDialogDataAsset* Shout, enum class EShoutType ShoutType, bool IgnoreCoolDown, struct UAudioComponent* AudioComponent, struct UObject* WorldContextObject, float shoutVolumeMultiplier); // Function FSD.CommunicationComponent.PlayPitchedAsync
	struct UAudioComponent* PlayPitched(struct USoundBase* Sound, struct UDialogDataAsset* Shout, enum class EShoutType ShoutType, bool IgnoreCoolDown, struct UAudioComponent* AudioComponent, struct UObject* WorldContextObject); // Function FSD.CommunicationComponent.PlayPitched
	void MixerAnnouncementLocalOnly(struct UObject* WorldContext, struct FMixerAnnouncement Announcement); // Function FSD.CommunicationComponent.MixerAnnouncementLocalOnly
	void MixerAnnouncement(struct UObject* WorldContext, struct FMixerAnnouncement Announcement); // Function FSD.CommunicationComponent.MixerAnnouncement
	int32_t MissionShoutLocally(struct UObject* WorldContext, struct UDialogDataAsset* Shout); // Function FSD.CommunicationComponent.MissionShoutLocally
	void MissionShout(struct UObject* WorldContext, struct UDialogDataAsset* Shout, bool bPriority); // Function FSD.CommunicationComponent.MissionShout
	bool IsMissionControlSpeaking(); // Function FSD.CommunicationComponent.IsMissionControlSpeaking
	void ClientShout(struct APlayerCharacter* Sender, struct UDialogDataAsset* Shout, int32_t Index); // Function FSD.CommunicationComponent.ClientShout
	void ClientMixerAnnouncement(struct FMixerAnnouncement Announcement); // Function FSD.CommunicationComponent.ClientMixerAnnouncement
	void ClientMissionShout(struct UDialogDataAsset* Shout, int32_t Index, bool bPriority); // Function FSD.CommunicationComponent.ClientMissionShout
};

// Class FSD.CommnuityRewardBundle
// Size: 0x40 (Inherited: 0x30)
struct UCommnuityRewardBundle : UDataAsset {
	struct TArray<struct FCommunityReward> Rewards; // 0x30(0x10)

	void AwardRewards(struct UObject* WorldContext); // Function FSD.CommnuityRewardBundle.AwardRewards
};

// Class FSD.CommnuityRewardSetup
// Size: 0x40 (Inherited: 0x30)
struct UCommnuityRewardSetup : UDataAsset {
	struct TArray<struct UCommnuityRewardBundle*> TierRewards; // 0x30(0x10)

	struct TMap<struct UResourceData*, int32_t> GetResourcesTierOnlyReward(int32_t Tier); // Function FSD.CommnuityRewardSetup.GetResourcesTierOnlyReward
	struct TMap<struct UResourceData*, int32_t> GetResourcesReward(int32_t Tier); // Function FSD.CommnuityRewardSetup.GetResourcesReward
	void AwardTierRewards(struct UObject* WorldContext, int32_t Tier); // Function FSD.CommnuityRewardSetup.AwardTierRewards
};

// Class FSD.CommunityGoalCategory
// Size: 0x48 (Inherited: 0x30)
struct UCommunityGoalCategory : UDataAsset {
	struct FText Title; // 0x30(0x18)
};

// Class FSD.CommunityGoalFaction
// Size: 0xe8 (Inherited: 0x30)
struct UCommunityGoalFaction : UDataAsset {
	struct FText Title; // 0x30(0x18)
	struct FText Description; // 0x48(0x18)
	struct FText ShortDescription; // 0x60(0x18)
	struct FText JoinHeader; // 0x78(0x18)
	struct FText JoinBody; // 0x90(0x18)
	struct UTexture2D* Icon; // 0xa8(0x08)
	struct UTexture2D* Frame; // 0xb0(0x08)
	struct FSlateColor Color; // 0xb8(0x28)
	enum class EFSDFaction FactionID; // 0xe0(0x01)
	char UnknownData_E1[0x7]; // 0xe1(0x07)
};

// Class FSD.CommunityGoal
// Size: 0x98 (Inherited: 0x30)
struct UCommunityGoal : UDataAsset {
	bool TierValuesAreInitialized; // 0x30(0x01)
	char UnknownData_31[0x3]; // 0x31(0x03)
	struct FGuid SavegameID; // 0x34(0x10)
	bool Active; // 0x44(0x01)
	char UnknownData_45[0x3]; // 0x45(0x03)
	struct FText Title; // 0x48(0x18)
	struct FText MetaDescription; // 0x60(0x18)
	struct UCommunityGoalCategory* Category; // 0x78(0x08)
	enum class ECommunityGoalType CommunityGoalType; // 0x80(0x01)
	char UnknownData_81[0x3]; // 0x81(0x03)
	float GoalPerMemberTier1; // 0x84(0x04)
	float GoalPerMemberTier2; // 0x88(0x04)
	float GoalPerMemberTier3; // 0x8c(0x04)
	struct UCommnuityRewardSetup* RewardSetup; // 0x90(0x08)

	float TotalTierProgress(float Value, int32_t Members); // Function FSD.CommunityGoal.TotalTierProgress
	float TierValue(enum class ECommunityGoalTier Tier, float Value, int32_t Members); // Function FSD.CommunityGoal.TierValue
	float TierProgress(enum class ECommunityGoalTier Tier, float Value, int32_t Members); // Function FSD.CommunityGoal.TierProgress
	float TierGoal(enum class ECommunityGoalTier Tier, int32_t Members); // Function FSD.CommunityGoal.TierGoal
	int32_t RewardTier(float Value, int32_t Members); // Function FSD.CommunityGoal.RewardTier
	void IncrementGoal(struct UObject* WorldContext, float Value); // Function FSD.CommunityGoal.IncrementGoal
	struct FText GoalToText(enum class ECommunityGoalType StatType, float Value); // Function FSD.CommunityGoal.GoalToText
	struct FText GetCategoryTitle(); // Function FSD.CommunityGoal.GetCategoryTitle
	bool AreTiersInitialized(); // Function FSD.CommunityGoal.AreTiersInitialized
};

// Class FSD.CommunityGoalWrapper
// Size: 0x140 (Inherited: 0x28)
struct UCommunityGoalWrapper : UObject {
	bool HasCGS; // 0x28(0x01)
	char UnknownData_29[0x3]; // 0x29(0x03)
	struct FCommunityGoalStateData CGSData; // 0x2c(0x10)
	int32_t LastCollectedRewardID; // 0x3c(0x04)
	char UnknownData_40[0x8]; // 0x40(0x08)
	struct FCommunityFactionData FactionData; // 0x48(0x38)
	bool FreeBeerRewardActive; // 0x80(0x01)
	char UnknownData_81[0x7]; // 0x81(0x07)
	struct FMulticastInlineDelegate OnFreeBeerRewardChanged; // 0x88(0x10)
	char UnknownData_98[0x20]; // 0x98(0x20)
	struct FString SteamTicket; // 0xb8(0x10)
	struct FString SteamBranch; // 0xc8(0x10)
	struct FMulticastInlineDelegate OnFactionsDataReceived; // 0xd8(0x10)
	struct FMulticastInlineDelegate OnDiscordCGSDataEvent; // 0xe8(0x10)
	struct FMulticastInlineDelegate UICheck; // 0xf8(0x10)
	struct FMulticastInlineDelegate OnGoalsInitializedDelegate; // 0x108(0x10)
	char UnknownData_118[0x20]; // 0x118(0x20)
	bool AreAllGoalsInitialized; // 0x138(0x01)
	char UnknownData_139[0x7]; // 0x139(0x07)

	void UpdateAllGoalsInitialized(); // Function FSD.CommunityGoalWrapper.UpdateAllGoalsInitialized
	bool RewardReceived(); // Function FSD.CommunityGoalWrapper.RewardReceived
	void RequestGoalStateData(); // Function FSD.CommunityGoalWrapper.RequestGoalStateData
	void RequestFactionsData(); // Function FSD.CommunityGoalWrapper.RequestFactionsData
	void NextPeriod(); // Function FSD.CommunityGoalWrapper.NextPeriod
	void InitializeGoalTierTargetValues(struct UCommunityGoal* goalToInitialize); // Function FSD.CommunityGoalWrapper.InitializeGoalTierTargetValues
	struct UCommunityGoalFaction* GetPlayerCurrentFaction(struct UObject* WorldContext); // Function FSD.CommunityGoalWrapper.GetPlayerCurrentFaction
	void ClaimRewardMessage(struct UObject* WorldContext, struct FCommunityRewardNotification rewardNotification); // Function FSD.CommunityGoalWrapper.ClaimRewardMessage
	void ClaimReward(); // Function FSD.CommunityGoalWrapper.ClaimReward
	void CheckUI(); // Function FSD.CommunityGoalWrapper.CheckUI
};

// Class FSD.ControllerIconSettings
// Size: 0xb8 (Inherited: 0x38)
struct UControllerIconSettings : UDeveloperSettings {
	struct FInputTranslationTable InputTranslationTable; // 0x38(0x50)
	struct TArray<struct FActionIconMapping> Xbox_KeyIcons; // 0x88(0x10)
	struct TArray<struct FActionIconMapping> Playstation_KeyIcons; // 0x98(0x10)
	struct TArray<struct FActionIconMapping> MouseKeyboard_KeyIcons; // 0xa8(0x10)

	bool FindMouseKeyboardKeyIcon(struct FKey Key, struct FActionIconMapping KeyIcon); // Function FSD.ControllerIconSettings.FindMouseKeyboardKeyIcon
	bool FindKeyIcon(struct FKey Key, struct FActionIconMapping KeyIcon); // Function FSD.ControllerIconSettings.FindKeyIcon
	bool FindControllerKeyIcon(struct FKey Key, struct FActionIconMapping KeyIcon); // Function FSD.ControllerIconSettings.FindControllerKeyIcon
};

// Class FSD.EnemyDeepPathfinderCharacter
// Size: 0x398 (Inherited: 0x378)
struct AEnemyDeepPathfinderCharacter : ADeepPathfinderCharacter {
	char UnknownData_378[0x8]; // 0x378(0x08)
	struct UEnemyHealthComponent* HealthComponent; // 0x380(0x08)
	struct FQueuedMontage QueuedMontage; // 0x388(0x10)

	void OnRep_QueuedMontage(); // Function FSD.EnemyDeepPathfinderCharacter.OnRep_QueuedMontage
};

// Class FSD.ConvertedRobot
// Size: 0x6b8 (Inherited: 0x398)
struct AConvertedRobot : AEnemyDeepPathfinderCharacter {
	char UnknownData_398[0x8]; // 0x398(0x08)
	struct UEnemyComponent* EnemyComponent; // 0x3a0(0x08)
	struct UPawnStatsComponent* PawnStats; // 0x3a8(0x08)
	struct UOutlineComponent* outline; // 0x3b0(0x08)
	struct UHitscanComponent* HitScan; // 0x3b8(0x08)
	struct USingleUsableComponent* Usable; // 0x3c0(0x08)
	struct USceneComponent* TurretRoot; // 0x3c8(0x08)
	struct USkeletalMeshComponent* TurretMesh; // 0x3d0(0x08)
	struct UPointLightComponent* MuzzleFlash; // 0x3d8(0x08)
	struct USpotLightComponent* SpotLight; // 0x3e0(0x08)
	struct UStaticMeshComponent* LightCone; // 0x3e8(0x08)
	struct UStaticMeshComponent* LaserBeam; // 0x3f0(0x08)
	struct USceneComponent* ShieldRoot; // 0x3f8(0x08)
	struct UStaticMeshComponent* InnerShield; // 0x400(0x08)
	struct UStaticMeshComponent* OuterShield; // 0x408(0x08)
	struct UAudioComponent* PulsatingSoundComp; // 0x410(0x08)
	struct UAudioComponent* LaserWarningSound; // 0x418(0x08)
	struct UDamageComponent* Damage; // 0x420(0x08)
	struct FMulticastInlineDelegate OnStateChanged; // 0x428(0x10)
	struct FMulticastInlineDelegate OnShieldChanged; // 0x438(0x10)
	struct FMulticastInlineDelegate OnIntroductionStart; // 0x448(0x10)
	char UnknownData_458[0x10]; // 0x458(0x10)
	bool ForceSit; // 0x468(0x01)
	char UnknownData_469[0x7]; // 0x469(0x07)
	struct USoundBase* LaserSound; // 0x470(0x08)
	struct USoundBase* LastPowerDownSound; // 0x478(0x08)
	struct USoundBase* PowerUpSound; // 0x480(0x08)
	struct FWeakObjectPtr<struct UAudioComponent> LaserSoundComp; // 0x488(0x08)
	char UnknownData_490[0x18]; // 0x490(0x18)
	float IntroductionTime; // 0x4a8(0x04)
	bool IsIntroducing; // 0x4ac(0x01)
	bool IntroductionDone; // 0x4ad(0x01)
	bool IsGrowingShield; // 0x4ae(0x01)
	char UnknownData_4AF[0x1]; // 0x4af(0x01)
	float AimDownwardsOffset; // 0x4b0(0x04)
	float BigShieldScale; // 0x4b4(0x04)
	float SmallShieldScale; // 0x4b8(0x04)
	float ShieldGrowthRate; // 0x4bc(0x04)
	float LerpExp; // 0x4c0(0x04)
	float MinimumShieldSize; // 0x4c4(0x04)
	float TargetShieldSize; // 0x4c8(0x04)
	float IdleRotationSpeed; // 0x4cc(0x04)
	float LaserScaleRate; // 0x4d0(0x04)
	char UnknownData_4D4[0x4]; // 0x4d4(0x04)
	float MaxSearchAngle; // 0x4d8(0x04)
	char UnknownData_4DC[0x1c]; // 0x4dc(0x1c)
	bool DoSpecialWhenEnemy; // 0x4f8(0x01)
	bool DoSpecialWhenFriendly; // 0x4f9(0x01)
	bool PerfectTrackingWhenEnemy; // 0x4fa(0x01)
	bool PerfectTrackingWhenFriendly; // 0x4fb(0x01)
	char UnknownData_4FC[0x2]; // 0x4fc(0x02)
	bool ReplaceBurstAttack; // 0x4fe(0x01)
	char UnknownData_4FF[0x1]; // 0x4ff(0x01)
	struct USoundBase* GrenadeFireSound; // 0x500(0x08)
	struct UParticleSystem* GrenadeFireParticle; // 0x508(0x08)
	bool IsFiring; // 0x510(0x01)
	char UnknownData_511[0x3]; // 0x511(0x03)
	float TurretSpinSpeed; // 0x514(0x04)
	struct TArray<struct AActor*> Parasites; // 0x518(0x10)
	int32_t SpawnParasiteNumer; // 0x528(0x04)
	int32_t MaxParasiteSlots; // 0x52c(0x04)
	float ChanceToSpawnParasite; // 0x530(0x04)
	char UnknownData_534[0x4]; // 0x534(0x04)
	struct AParasiteEnemy* ParasiteClass; // 0x538(0x08)
	char UnknownData_540[0x6]; // 0x540(0x06)
	bool SpinTurret; // 0x546(0x01)
	char UnknownData_547[0x11]; // 0x547(0x11)
	struct AProjectile* SpecialAttackProjectile; // 0x558(0x08)
	struct AProjectile* FriendlyProjectile; // 0x560(0x08)
	char UnknownData_568[0xc]; // 0x568(0x0c)
	bool HasLockedOn; // 0x574(0x01)
	char UnknownData_575[0x3]; // 0x575(0x03)
	struct USoundBase* TargetingSound; // 0x578(0x08)
	struct UAnimSequenceBase* GrenadeShotAnimation; // 0x580(0x08)
	float LockonTime; // 0x588(0x04)
	char UnknownData_58C[0x4]; // 0x58c(0x04)
	struct USoundCue* ShootSound; // 0x590(0x08)
	float ShootSoundFadeout; // 0x598(0x04)
	char UnknownData_59C[0x4]; // 0x59c(0x04)
	struct UAudioComponent* ShootSoundInstance; // 0x5a0(0x08)
	struct USoundCue* ShootSoundTail; // 0x5a8(0x08)
	struct UParticleSystem* MuzzleEffect; // 0x5b0(0x08)
	struct UParticleSystem* TracerEffect; // 0x5b8(0x08)
	struct FRuntimeFloatCurve MuzzleLightCurve; // 0x5c0(0x88)
	char UnknownData_648[0x8]; // 0x648(0x08)
	float GunRange; // 0x650(0x04)
	float FireRate; // 0x654(0x04)
	float GrenadeFireRate; // 0x658(0x04)
	char UnknownData_65C[0x4]; // 0x65c(0x04)
	float BurstCooldown; // 0x660(0x04)
	char UnknownData_664[0x4]; // 0x664(0x04)
	int32_t MinBurst; // 0x668(0x04)
	int32_t MaxBurst; // 0x66c(0x04)
	float TurretLerpSpeed; // 0x670(0x04)
	float DamageWhenFriendly; // 0x674(0x04)
	float FriendlyFriendlyFireMultiplier; // 0x678(0x04)
	char UnknownData_67C[0x4]; // 0x67c(0x04)
	bool StartedSpecialAttack; // 0x680(0x01)
	enum class ERobotState TeamState; // 0x681(0x01)
	char UnknownData_682[0xe]; // 0x682(0x0e)
	bool IsWalking; // 0x690(0x01)
	bool IsDoingSpecialAttack; // 0x691(0x01)
	char UnknownData_692[0x6]; // 0x692(0x06)
	struct UStaticMeshComponent* TurretRotation; // 0x698(0x08)
	char UnknownData_6A0[0x8]; // 0x6a0(0x08)
	struct AActor* CurrentTarget; // 0x6a8(0x08)
	char UnknownData_6B0[0x8]; // 0x6b0(0x08)

	void UpdateGunsInsideTerrain(); // Function FSD.ConvertedRobot.UpdateGunsInsideTerrain
	void StartBossFight(); // Function FSD.ConvertedRobot.StartBossFight
	void ParasiteDamaged(float aDamage); // Function FSD.ConvertedRobot.ParasiteDamaged
	void OnWeaponsFired(struct FVector aHitResult); // Function FSD.ConvertedRobot.OnWeaponsFired
	void OnUsed(struct APlayerCharacter* aUser); // Function FSD.ConvertedRobot.OnUsed
	void OnSeePawn(struct APawn* APawn); // Function FSD.ConvertedRobot.OnSeePawn
	void OnRep_TeamState(); // Function FSD.ConvertedRobot.OnRep_TeamState
	void OnRep_Target(); // Function FSD.ConvertedRobot.OnRep_Target
	void OnRep_SpinTurret(); // Function FSD.ConvertedRobot.OnRep_SpinTurret
	void OnRep_IsIntroducting(); // Function FSD.ConvertedRobot.OnRep_IsIntroducting
	void OnRep_IsFiring(); // Function FSD.ConvertedRobot.OnRep_IsFiring
	void OnRep_IsDoingSpecialAttack(); // Function FSD.ConvertedRobot.OnRep_IsDoingSpecialAttack
	void OnParasiteDeath(struct AActor* AParasiteEnemy); // Function FSD.ConvertedRobot.OnParasiteDeath
	enum class ERobotState GetTeamState(); // Function FSD.ConvertedRobot.GetTeamState
	struct FVector GetPlayerMediumPoint(); // Function FSD.ConvertedRobot.GetPlayerMediumPoint
	struct TArray<struct AActor*> GetParasites(); // Function FSD.ConvertedRobot.GetParasites
	bool GetHasPoweredDown(); // Function FSD.ConvertedRobot.GetHasPoweredDown
	void DestroyAttatchPoint(struct USceneComponent* aComponent); // Function FSD.ConvertedRobot.DestroyAttatchPoint
	void CannonEffects(); // Function FSD.ConvertedRobot.CannonEffects
	void BP_OnStateChanged(enum class ERobotState TeamState); // Function FSD.ConvertedRobot.BP_OnStateChanged
	void BP_OnShieldChanged(bool isGrowing); // Function FSD.ConvertedRobot.BP_OnShieldChanged
	void BP_OnInstroduce(); // Function FSD.ConvertedRobot.BP_OnInstroduce
};

// Class FSD.ConvertedRobotAnimInstance
// Size: 0x280 (Inherited: 0x270)
struct UConvertedRobotAnimInstance : UAnimInstance {
	bool HasIntroduced; // 0x26c(0x01)
	bool IsWalking; // 0x26d(0x01)
	bool IsIntroducing; // 0x26e(0x01)
	bool ShouldSit; // 0x26f(0x01)
	bool StopSit; // 0x270(0x01)
	bool ShouldCollapse; // 0x271(0x01)
	bool IsPoweredDown; // 0x272(0x01)
	float WalkingRate; // 0x274(0x04)
	float NormalWalkSpeed; // 0x278(0x04)
	char UnknownData_27F[0x1]; // 0x27f(0x01)
};

// Class FSD.ConvertedRobotTurretAnimInstance
// Size: 0x270 (Inherited: 0x270)
struct UConvertedRobotTurretAnimInstance : UAnimInstance {
	bool ReplaceBurstAttack; // 0x268(0x01)
	bool IsFiringGrenades; // 0x269(0x01)
	bool IsDoingSpecialAttack; // 0x26a(0x01)
	bool ShouldFireBullets; // 0x26b(0x01)
	bool StopFiringBullets; // 0x26c(0x01)
	bool ShouldCannonDeploy; // 0x26d(0x01)
};

// Class FSD.EnemyAIController
// Size: 0x358 (Inherited: 0x358)
struct AEnemyAIController : AFSDAIController {
};

// Class FSD.ConvertedRobotController
// Size: 0x428 (Inherited: 0x358)
struct AConvertedRobotController : AEnemyAIController {
	float CheckRangeInterval; // 0x358(0x04)
	float MaxTimeInRange; // 0x35c(0x04)
	char UnknownData_360[0x4]; // 0x360(0x04)
	float PersonalSpaceRange; // 0x364(0x04)
	char UnknownData_368[0x10]; // 0x368(0x10)
	struct FGameplayTagQuery FriendlyTargetingQuery; // 0x378(0x48)
	float SpecialAttackRange; // 0x3c0(0x04)
	float SpecialAttackFireRate; // 0x3c4(0x04)
	char UnknownData_3C8[0x20]; // 0x3c8(0x20)
	float WaitBeforeSpecial; // 0x3e8(0x04)
	char UnknownData_3EC[0x4]; // 0x3ec(0x04)
	float WaitAfterSpecial; // 0x3f0(0x04)
	char UnknownData_3F4[0x8]; // 0x3f4(0x08)
	float MinSpecialAttackCooldown; // 0x3fc(0x04)
	float MaxSpecialAttackCooldown; // 0x400(0x04)
	char UnknownData_404[0x4]; // 0x404(0x04)
	struct UBehaviorTree* BehaviourTree; // 0x408(0x08)
	float UpdateTargetInterval; // 0x410(0x04)
	char UnknownData_414[0x4]; // 0x414(0x04)
	float PowerDownAfterSeconds; // 0x418(0x04)
	char UnknownData_41C[0xc]; // 0x41c(0x0c)

	void ResetCloseTimer(); // Function FSD.ConvertedRobotController.ResetCloseTimer
};

// Class FSD.CoolDownItemAggregator
// Size: 0xe8 (Inherited: 0xc8)
struct UCoolDownItemAggregator : UItemAggregator {
	float CooldownDuration; // 0xc8(0x04)
	char UnknownData_CC[0x4]; // 0xcc(0x04)
	struct USoundBase* AudioCoolDownFinished; // 0xd0(0x08)
	float CooldownRemaining; // 0xd8(0x04)
	bool CoolDownIsPaused; // 0xdc(0x01)
	char UnknownData_DD[0x3]; // 0xdd(0x03)
	struct AItem* Item; // 0xe0(0x08)

	void SetPaused(bool IsPaused); // Function FSD.CoolDownItemAggregator.SetPaused
	bool IsCoolingDown(); // Function FSD.CoolDownItemAggregator.IsCoolingDown
	float GetCoolDownProgress(); // Function FSD.CoolDownItemAggregator.GetCoolDownProgress
	void ActivateCoolDown(bool startPaused); // Function FSD.CoolDownItemAggregator.ActivateCoolDown
};

// Class FSD.CoolDownProgressWidget
// Size: 0x280 (Inherited: 0x230)
struct UCoolDownProgressWidget : UUserWidget {
	struct FCoolDownProgressStyle Style; // 0x230(0x40)
	struct FWeakObjectPtr<struct UObject> CoolDownObject; // 0x270(0x08)
	bool bIsFinished; // 0x278(0x01)
	char UnknownData_279[0x7]; // 0x279(0x07)

	void UpdateProgress(float Progress); // Function FSD.CoolDownProgressWidget.UpdateProgress
	void ReceiveUpdateProgress(float InProgress); // Function FSD.CoolDownProgressWidget.ReceiveUpdateProgress
	void ReceiveInitWidget(); // Function FSD.CoolDownProgressWidget.ReceiveInitWidget
	void Init(struct UObject* InCoolDownObject, struct FCoolDownProgressStyle InStyle); // Function FSD.CoolDownProgressWidget.Init
};

// Class FSD.PricingTier
// Size: 0x40 (Inherited: 0x30)
struct UPricingTier : UDataAsset {
	struct FString PriceKey; // 0x30(0x10)
};

// Class FSD.SchematicPricingTier
// Size: 0x40 (Inherited: 0x40)
struct USchematicPricingTier : UPricingTier {
};

// Class FSD.CreditsResourceData
// Size: 0xf0 (Inherited: 0xf0)
struct UCreditsResourceData : UResourceData {
};

// Class FSD.CritterManager
// Size: 0xf8 (Inherited: 0xb0)
struct UCritterManager : UActorComponent {
	bool DisableCritters; // 0xb0(0x01)
	char UnknownData_B1[0x3]; // 0xb1(0x03)
	float ActivationRange; // 0xb4(0x04)
	char UnknownData_B8[0x40]; // 0xb8(0x40)
};

// Class FSD.CrosshairWidget
// Size: 0x230 (Inherited: 0x230)
struct UCrosshairWidget : UUserWidget {

	void SetData(struct AItem* Item); // Function FSD.CrosshairWidget.SetData
};

// Class FSD.CrosshairAggregator
// Size: 0xe8 (Inherited: 0xc8)
struct UCrosshairAggregator : UItemAggregator {
	struct FMulticastInlineDelegate OnCrosshairCreated; // 0xc8(0x10)
	struct UUserWidget* CrosshairWidget; // 0xd8(0x08)
	struct UUserWidget* CrossHairType; // 0xe0(0x08)

	void SetCrosshair(struct UUserWidget* Widget); // Function FSD.CrosshairAggregator.SetCrosshair
	struct UUserWidget* GetOrCreateCrosshair(); // Function FSD.CrosshairAggregator.GetOrCreateCrosshair
};

// Class FSD.CryosprayItem
// Size: 0x818 (Inherited: 0x690)
struct ACryosprayItem : AAmmoDrivenWeapon {
	struct UProjectileLauncherComponent* ProjectileLauncher; // 0x690(0x08)
	struct UDamageComponent* DamageComponent; // 0x698(0x08)
	struct UStickyFlameSpawner* StickyFlames; // 0x6a0(0x08)
	struct UDamageComponent* AoEColdDamageComponent; // 0x6a8(0x08)
	struct UMotionAudioController* VelocityAudio; // 0x6b0(0x08)
	struct UParticleSystemComponent* FlameParticleComponent; // 0x6b8(0x08)
	bool PressurizedProjectileEnabled; // 0x6c0(0x01)
	char UnknownData_6C1[0x3]; // 0x6c1(0x03)
	float PressurizedProjectileDelay; // 0x6c4(0x04)
	int32_t PressurizeProjectileFullCost; // 0x6c8(0x04)
	char UnknownData_6CC[0xc]; // 0x6cc(0x0c)
	struct UParticleSystem* ChargeupParticles; // 0x6d8(0x08)
	struct UParticleSystemComponent* ChargeupParticleInstance; // 0x6e0(0x08)
	struct FDecalData ImpactDecal; // 0x6e8(0x18)
	float DecalDelay; // 0x700(0x04)
	char UnknownData_704[0x4]; // 0x704(0x04)
	struct UParticleSystem* ImpactParticles; // 0x708(0x08)
	struct UParticleSystemComponent* ImpactParticleInstance; // 0x710(0x08)
	struct TArray<struct FName> FlameParameterNames; // 0x718(0x10)
	float DamageSphereRadius; // 0x728(0x04)
	float MaxFlameDistance; // 0x72c(0x04)
	float FlameGrowthPerSecond; // 0x730(0x04)
	float friendlyFireModifier; // 0x734(0x04)
	float ChargeupTime; // 0x738(0x04)
	float ChargeDownTime; // 0x73c(0x04)
	char UnknownData_740[0x1]; // 0x740(0x01)
	bool IsCharging; // 0x741(0x01)
	char UnknownData_742[0x2]; // 0x742(0x02)
	float ChargeProgress; // 0x744(0x04)
	bool bRepressurerising; // 0x748(0x01)
	char UnknownData_749[0x3]; // 0x749(0x03)
	float RepressurerisingDoneAtPct; // 0x74c(0x04)
	float ChargeUpFadeOutTime; // 0x750(0x04)
	char UnknownData_754[0x4]; // 0x754(0x04)
	struct UAudioComponent* ChargeUpAudioComponent; // 0x758(0x08)
	float PressureTime; // 0x760(0x04)
	float PressureDropMultiplier; // 0x764(0x04)
	float PressureGainMultiplier; // 0x768(0x04)
	float CurrentPressure; // 0x76c(0x04)
	float RePressureDuration; // 0x770(0x04)
	float RePressureProgress; // 0x774(0x04)
	struct TArray<struct UItemUpgrade*> Upgrades; // 0x778(0x10)
	bool LongReachEnabled; // 0x788(0x01)
	char UnknownData_789[0xf]; // 0x789(0x0f)
	bool AoEColdEnabled; // 0x798(0x01)
	char UnknownData_799[0x7f]; // 0x799(0x7f)

	void ServerDoDamage(struct FVector_NetQuantize Start, struct FVector_NetQuantize End, char power); // Function FSD.CryosprayItem.ServerDoDamage
	void Server_TriggerAoECold(); // Function FSD.CryosprayItem.Server_TriggerAoECold
	void Server_PreLaunchProjectile(); // Function FSD.CryosprayItem.Server_PreLaunchProjectile
	void ReceiveRepressurisingChanged(bool Value); // Function FSD.CryosprayItem.ReceiveRepressurisingChanged
	void OnTargetDamaged(struct UHealthComponentBase* Health, float amount, struct UFSDPhysicalMaterial* PhysicalMaterial); // Function FSD.CryosprayItem.OnTargetDamaged
	void OnRep_IsCharging(bool OldValue); // Function FSD.CryosprayItem.OnRep_IsCharging
	void OnProjectileSpawned(struct AProjectileBase* Projectile); // Function FSD.CryosprayItem.OnProjectileSpawned
	void OnProjectileLaunched(struct FVector Location); // Function FSD.CryosprayItem.OnProjectileLaunched
	void OnPressurizedPartileShoot(); // Function FSD.CryosprayItem.OnPressurizedPartileShoot
	void OnPreProjectileLaunch(); // Function FSD.CryosprayItem.OnPreProjectileLaunch
	void All_PreLaunchProjectile(); // Function FSD.CryosprayItem.All_PreLaunchProjectile
};

// Class FSD.CryoSprayAnimInstance
// Size: 0x290 (Inherited: 0x270)
struct UCryoSprayAnimInstance : UAnimInstance {
	struct ACryosprayItem* Weapon; // 0x268(0x08)
	bool IsFiring; // 0x270(0x01)
	float ChargeProgress; // 0x274(0x04)
	struct FRotator ChargeRotation; // 0x278(0x0c)
	float ChargeBlend; // 0x284(0x04)
	float Pressure; // 0x288(0x04)
};

// Class FSD.CustomKeyBindingLibrary
// Size: 0x28 (Inherited: 0x28)
struct UCustomKeyBindingLibrary : UBlueprintFunctionLibrary {
};

// Class FSD.KeyBindingSettings
// Size: 0x50 (Inherited: 0x30)
struct UKeyBindingSettings : UDataAsset {
	struct TArray<struct FCustomKeySetting> KeyboardMouseButtons; // 0x30(0x10)
	struct TArray<struct FCustomKeySetting> ControllerButtons; // 0x40(0x10)
};

// Class FSD.CustomRichTextDecorator
// Size: 0x30 (Inherited: 0x28)
struct UCustomRichTextDecorator : URichTextBlockDecorator {
	struct URichTextBlock* RichTextBlock; // 0x28(0x08)
};

// Class FSD.DailyDealSettings
// Size: 0x40 (Inherited: 0x30)
struct UDailyDealSettings : UDataAsset {
	struct TArray<struct FDailyDealSetup> DailyDeals; // 0x30(0x10)

	bool IsDailyDealBought(struct UObject* WorldContextObject); // Function FSD.DailyDealSettings.IsDailyDealBought
	int32_t GetDailyDealSeed(); // Function FSD.DailyDealSettings.GetDailyDealSeed
	void GetDailyDeal(struct FDailyDeal outDeal); // Function FSD.DailyDealSettings.GetDailyDeal
	bool CanAffordDailyDeal(struct UObject* WorldContextObject); // Function FSD.DailyDealSettings.CanAffordDailyDeal
	bool BuyDailyDeal(struct UObject* WorldContextObject); // Function FSD.DailyDealSettings.BuyDailyDeal
};

// Class FSD.DamageAttackComponent
// Size: 0xf8 (Inherited: 0xf0)
struct UDamageAttackComponent : UAttackBaseComponent {
	struct UDamageComponent* Damage; // 0xf0(0x08)
};

// Class FSD.DamageBonusBase
// Size: 0x30 (Inherited: 0x30)
struct UDamageBonusBase : UDataAsset {

	struct UDamageBonusBase* AddDamageBonusToComponent(struct UDamageBonusBase* damageBonusClass, struct UDamageComponent* DamageComponent); // Function FSD.DamageBonusBase.AddDamageBonusToComponent
};

// Class FSD.FlatDamageBonus
// Size: 0x40 (Inherited: 0x30)
struct UFlatDamageBonus : UDamageBonusBase {
	float Damage; // 0x30(0x04)
	char UnknownData_34[0x4]; // 0x34(0x04)
	struct UDamageClass* DamageClass; // 0x38(0x08)
};

// Class FSD.TargetSpecificDamageBonus
// Size: 0x88 (Inherited: 0x30)
struct UTargetSpecificDamageBonus : UDamageBonusBase {
	float Bonus; // 0x30(0x04)
	char UnknownData_34[0x4]; // 0x34(0x04)
	struct FGameplayTagQuery tagQuery; // 0x38(0x48)
	struct FName Key; // 0x80(0x08)
};

// Class FSD.DamageConversionBonus
// Size: 0x40 (Inherited: 0x30)
struct UDamageConversionBonus : UDamageBonusBase {
	struct UDamageClass* DamageClass; // 0x30(0x08)
	float ConversionPercentage; // 0x38(0x04)
	bool DamageIsAdded; // 0x3c(0x01)
	char UnknownData_3D[0x3]; // 0x3d(0x03)
};

// Class FSD.TargetStateDamageBonus
// Size: 0x40 (Inherited: 0x30)
struct UTargetStateDamageBonus : UDamageBonusBase {
	enum class ETargetStateDamageBonusType TargetState; // 0x30(0x01)
	char UnknownData_31[0x3]; // 0x31(0x03)
	float Bonus; // 0x34(0x04)
	struct UDamageClass* DamageClass; // 0x38(0x08)
};

// Class FSD.StatusDamageBonus
// Size: 0x50 (Inherited: 0x30)
struct UStatusDamageBonus : UDamageBonusBase {
	struct TArray<struct UStatusEffect*> StatusEffects; // 0x30(0x10)
	float Bonus; // 0x40(0x04)
	char UnknownData_44[0x4]; // 0x44(0x04)
	struct UDamageClass* DamageClass; // 0x48(0x08)
};

// Class FSD.StatusAndStateDamageBonus
// Size: 0x60 (Inherited: 0x30)
struct UStatusAndStateDamageBonus : UDamageBonusBase {
	struct TArray<struct UStatusEffect*> StatusEffects; // 0x30(0x10)
	struct TArray<enum class ETargetStateDamageBonusType> TargetStates; // 0x40(0x10)
	float Bonus; // 0x50(0x04)
	char UnknownData_54[0x4]; // 0x54(0x04)
	struct UDamageClass* DamageClass; // 0x58(0x08)
};

// Class FSD.PushStatusEffectDamageBonus
// Size: 0x50 (Inherited: 0x30)
struct UPushStatusEffectDamageBonus : UDamageBonusBase {
	char UnknownData_30[0x10]; // 0x30(0x10)
	struct UStatusEffect* StatusEffect; // 0x40(0x08)
	float Chance; // 0x48(0x04)
	char UnknownData_4C[0x4]; // 0x4c(0x04)
};

// Class FSD.FearAoEBonus
// Size: 0x38 (Inherited: 0x30)
struct UFearAoEBonus : UDamageBonusBase {
	float FearFactor; // 0x30(0x04)
	float Range; // 0x34(0x04)
};

// Class FSD.AmmoLeftDamageBonus
// Size: 0x50 (Inherited: 0x40)
struct UAmmoLeftDamageBonus : UFlatDamageBonus {
	struct UCurveFloat* AmmoDamageCurve; // 0x40(0x08)
	char UnknownData_48[0x8]; // 0x48(0x08)
};

// Class FSD.AmmoUsedDamageBonus
// Size: 0x38 (Inherited: 0x30)
struct UAmmoUsedDamageBonus : UDamageBonusBase {
	float DamageBonusPerRoundFired; // 0x30(0x04)
	char UnknownData_34[0x4]; // 0x34(0x04)
};

// Class FSD.RandomDamageBonus
// Size: 0x38 (Inherited: 0x30)
struct URandomDamageBonus : UDamageBonusBase {
	struct FRandRange RandomDamageRange; // 0x30(0x08)
};

// Class FSD.PercentDamageBonus
// Size: 0x38 (Inherited: 0x30)
struct UPercentDamageBonus : UDamageBonusBase {
	float DamageMultiplier; // 0x30(0x04)
	char UnknownData_34[0x4]; // 0x34(0x04)
};

// Class FSD.GatlingHotShellsBonus
// Size: 0x40 (Inherited: 0x40)
struct UGatlingHotShellsBonus : UDamageConversionBonus {
};

// Class FSD.BreakIceBonus
// Size: 0x38 (Inherited: 0x30)
struct UBreakIceBonus : UDamageBonusBase {
	float DeFrostAmount; // 0x30(0x04)
	char UnknownData_34[0x4]; // 0x34(0x04)
};

// Class FSD.KnockbackDamageBonus
// Size: 0x38 (Inherited: 0x30)
struct UKnockbackDamageBonus : UDamageBonusBase {
	float KnockBackHorizontalForce; // 0x30(0x04)
	float KnockBackVerticalForce; // 0x34(0x04)
};

// Class FSD.DamageClass
// Size: 0x50 (Inherited: 0x30)
struct UDamageClass : UDataAsset {
	struct UPawnStat* ResistanceStat; // 0x30(0x08)
	float RagdollScale; // 0x38(0x04)
	bool BypassesShield; // 0x3c(0x01)
	bool AffectedByFriendlyFire; // 0x3d(0x01)
	char UnknownData_3E[0x2]; // 0x3e(0x02)
	struct UTexture2D* IndicatorImage; // 0x40(0x08)
	struct UDialogDataAsset* DamageShout; // 0x48(0x08)
};

// Class FSD.DamageComponent
// Size: 0x160 (Inherited: 0xb0)
struct UDamageComponent : UActorComponent {
	struct FMulticastInlineDelegate OnTargetKilledEvent; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnTargetDamagedEvent; // 0xc0(0x10)
	struct FMulticastInlineDelegate OnNoTargetHitEvent; // 0xd0(0x10)
	char UnknownData_E0[0x4]; // 0xe0(0x04)
	enum class EDamageComponentType DamageComponentType; // 0xe4(0x01)
	char UnknownData_E5[0x3]; // 0xe5(0x03)
	float Damage; // 0xe8(0x04)
	float ArmorDamageMultiplier; // 0xec(0x04)
	struct UDamageClass* DamageClass; // 0xf0(0x08)
	float WeakpointDamageMultiplier; // 0xf8(0x04)
	float FrozenDamageBonusScale; // 0xfc(0x04)
	float friendlyFireModifier; // 0x100(0x04)
	struct FGameplayTag FriendlyFireTag; // 0x104(0x08)
	bool StaggerOnlyOnWeakpointHit; // 0x10c(0x01)
	char UnknownData_10D[0x3]; // 0x10d(0x03)
	float StaggerChance; // 0x110(0x04)
	float StaggerDuration; // 0x114(0x04)
	float FearFactor; // 0x118(0x04)
	char UnknownData_11C[0x4]; // 0x11c(0x04)
	struct TArray<struct UDamageBonusBase*> DamageBonuses; // 0x120(0x10)
	bool UseAreaOfEffect; // 0x130(0x01)
	char UnknownData_131[0x3]; // 0x131(0x03)
	float RadialDamage; // 0x134(0x04)
	struct UDamageClass* RadialDamageClass; // 0x138(0x08)
	float MinDamagePct; // 0x140(0x04)
	float DamageRadius; // 0x144(0x04)
	float MaxDamageRadius; // 0x148(0x04)
	char UnknownData_14C[0x14]; // 0x14c(0x14)

	struct UDamageComponent* GetDamageComponentCDO(struct UDamageComponent* DamageComponent); // Function FSD.DamageComponent.GetDamageComponentCDO
	float GetDamage(); // Function FSD.DamageComponent.GetDamage
	void DamageTarget(struct AActor* Target, struct FVector Location, struct UPrimitiveComponent* HitComponent, struct UFSDPhysicalMaterial* PhysMat); // Function FSD.DamageComponent.DamageTarget
	void DamageArmor_Server(struct AActor* Target, int32_t BoneIndex, struct FVector impactLocation); // Function FSD.DamageComponent.DamageArmor_Server
	void DamageArmor_All(struct AActor* Target, int32_t BoneIndex); // Function FSD.DamageComponent.DamageArmor_All
};

// Class FSD.DamageSettings
// Size: 0x100 (Inherited: 0x30)
struct UDamageSettings : UDataAsset {
	float TemperatureChangePerColdDamagePoint; // 0x30(0x04)
	float TemperatureChangePerIceDamagePoint; // 0x34(0x04)
	float TemperatureChangePerHeatDamagePoint; // 0x38(0x04)
	float TemperatureChangePerFireDamagePoint; // 0x3c(0x04)
	float TemperatureShockActivationWindow; // 0x40(0x04)
	float FrozenDamageBonus; // 0x44(0x04)
	struct UStatusEffect* EnemyOnFireStatusEffect; // 0x48(0x08)
	struct UStatusEffect* PlayerOnFireStatusEffect; // 0x50(0x08)
	struct UStatusEffect* TemperatureShockFromFrozenStatusEffect; // 0x58(0x08)
	struct UStatusEffect* TemperatureShockFromBurningStatusEffect; // 0x60(0x08)
	struct TArray<struct FDecalData> ImpactDecals; // 0x68(0x10)
	struct FRuntimeFloatCurve ArmorToArmorDamageBreakingCurve; // 0x78(0x88)
};

// Class FSD.DamageSubsystem
// Size: 0x40 (Inherited: 0x30)
struct UDamageSubsystem : UGameInstanceSubsystem {
	struct TArray<struct FDamageSubsystemItem> Items; // 0x30(0x10)
};

// Class FSD.DanceSettings
// Size: 0x40 (Inherited: 0x30)
struct UDanceSettings : UDataAsset {
	struct TArray<struct FDanceItem> DanceMoves; // 0x30(0x10)
};

// Class FSD.DashPoints
// Size: 0x1d0 (Inherited: 0xb0)
struct UDashPoints : UActorComponent {
	struct FMulticastInlineDelegate OnStartDashEvent; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnStopDashEvent; // 0xc0(0x10)
	char UnknownData_D0[0xc]; // 0xd0(0x0c)
	struct FVector_NetQuantize DashLocation; // 0xdc(0x0c)
	char UnknownData_E8[0x10]; // 0xe8(0x10)
	struct FRuntimeFloatCurve DashSpeedCurve; // 0xf8(0x88)
	char UnknownData_180[0x18]; // 0x180(0x18)
	float PointOffset; // 0x198(0x04)
	float MaxRangeFromPlayer; // 0x19c(0x04)
	float MinRangeFromPlayer; // 0x1a0(0x04)
	float MinHeightAboveTarget; // 0x1a4(0x04)
	float MaxHeightAboveTarget; // 0x1a8(0x04)
	float safeReduction; // 0x1ac(0x04)
	float AcceptedDashradius; // 0x1b0(0x04)
	float DashSpeed; // 0x1b4(0x04)
	float SlowdownRadius; // 0x1b8(0x04)
	char UnknownData_1BC[0xc]; // 0x1bc(0x0c)
	int32_t IgnoreTheClosestPoints; // 0x1c8(0x04)
	enum class EDashPointsGenerationMode GenerationMode; // 0x1cc(0x01)
	bool IsDashing; // 0x1cd(0x01)
	bool IgnoreRules; // 0x1ce(0x01)
	char UnknownData_1CF[0x1]; // 0x1cf(0x01)

	void UpdateDashPointData(); // Function FSD.DashPoints.UpdateDashPointData
	void StopDashing(); // Function FSD.DashPoints.StopDashing
	void StartDashing(); // Function FSD.DashPoints.StartDashing
	void OnRep_Dashing(); // Function FSD.DashPoints.OnRep_Dashing
	void OnParentDeath(struct UHealthComponentBase* Health); // Function FSD.DashPoints.OnParentDeath
	struct FVector GetDashPoint(struct AActor* fromTarget, bool success); // Function FSD.DashPoints.GetDashPoint
};

// Class FSD.DeadStateComponent
// Size: 0x100 (Inherited: 0xf8)
struct UDeadStateComponent : UCharacterStateComponent {
	float RespawnDelay; // 0xf8(0x04)
	char UnknownData_FC[0x4]; // 0xfc(0x04)
};

// Class FSD.DealWidget
// Size: 0x230 (Inherited: 0x230)
struct UDealWidget : UUserWidget {

	void UpdateDealText(); // Function FSD.DealWidget.UpdateDealText
};

// Class FSD.FSDDebrisSettings
// Size: 0x68 (Inherited: 0x38)
struct UFSDDebrisSettings : UDeveloperSettings {
	struct FSoftObjectPath DefaultInfluencerDensityCurve; // 0x38(0x18)
	struct FSoftObjectPath DefaultInfluencerSizeCurve; // 0x50(0x18)
};

// Class FSD.CSGTriangleMapper
// Size: 0xd0 (Inherited: 0x30)
struct UCSGTriangleMapper : UDataAsset {
	bool Enabled; // 0x30(0x01)
	char UnknownData_31[0x7]; // 0x31(0x07)
	struct UTerrainMaterial* AttachToMaterial; // 0x38(0x08)
	struct TArray<struct UTerrainType*> AttachToTypes; // 0x40(0x10)
	int32_t CellCategories; // 0x50(0x04)
	float DensityInM2; // 0x54(0x04)
	float MinVerticalAngle; // 0x58(0x04)
	float MaxVerticalAngle; // 0x5c(0x04)
	struct FVector ScaleMin; // 0x60(0x0c)
	struct FVector ScaleMax; // 0x6c(0x0c)
	float ScaleBias; // 0x78(0x04)
	bool IndependentScaleAxes; // 0x7c(0x01)
	char UnknownData_7D[0x3]; // 0x7d(0x03)
	struct FVector BaseNormal; // 0x80(0x0c)
	float SurfaceNormalFactor; // 0x8c(0x04)
	struct FVector SurfaceNormalLimiter; // 0x90(0x0c)
	float RandomNormalFactor; // 0x9c(0x04)
	float RotationMinAngle; // 0xa0(0x04)
	float RotationMaxAngle; // 0xa4(0x04)
	float PosOffset; // 0xa8(0x04)
	float PosOffsetSurface; // 0xac(0x04)
	struct TArray<struct FCellNoise> NoiseLayers; // 0xb0(0x10)
	struct FDebrisCellNoiseParameters CellNoiseParameters; // 0xc0(0x10)
};

// Class FSD.DebrisBase
// Size: 0x1f8 (Inherited: 0xd0)
struct UDebrisBase : UCSGTriangleMapper {
	struct UObject* CaveInfluencer; // 0xd0(0x08)
	struct FRuntimeFloatCurve InfluencerDensityCurve; // 0xd8(0x88)
	struct FRuntimeFloatCurve InfluencerSizeCurve; // 0x160(0x88)
	struct UCurveFloat* CaveInfluenceCurve; // 0x1e8(0x08)
	struct UCurveFloat* CaveInflunceSizeCurve; // 0x1f0(0x08)
};

// Class FSD.DebrisCarved
// Size: 0x250 (Inherited: 0x1f8)
struct UDebrisCarved : UDebrisBase {
	enum class EDebrisCarvedType carverType; // 0x1f8(0x01)
	char UnknownData_1F9[0x7]; // 0x1f9(0x07)
	struct TArray<struct FUDebrisCarveMesh> Meshes; // 0x200(0x10)
	struct UTerrainMaterial* TerrainMaterial; // 0x210(0x08)
	struct FDebrisInfluence CaveInfluenceToAdd; // 0x218(0x10)
	enum class ECarveFilterType Filter; // 0x228(0x01)
	char UnknownData_229[0x3]; // 0x229(0x03)
	float ExpensiveNoise; // 0x22c(0x04)
	enum class CarveOptionsCellSize CarveCellSize; // 0x230(0x01)
	char UnknownData_231[0x3]; // 0x231(0x03)
	int32_t MinNumCarves; // 0x234(0x04)
	int32_t MaxNumCarves; // 0x238(0x04)
	float CarveOffsetRadius; // 0x23c(0x04)
	struct AActor* SpawnAttachClass; // 0x240(0x08)
	float AttachSpawnOffsetDistance; // 0x248(0x04)
	char UnknownData_24C[0x4]; // 0x24c(0x04)
};

// Class FSD.DebrisActorComponent
// Size: 0x200 (Inherited: 0x1f0)
struct UDebrisActorComponent : USceneComponent {
	char UnknownData_1F0[0x4]; // 0x1f0(0x04)
	bool Enabled; // 0x1f4(0x01)
	char UnknownData_1F5[0xb]; // 0x1f5(0x0b)
};

// Class FSD.DebrisItemComponent
// Size: 0x230 (Inherited: 0x200)
struct UDebrisItemComponent : UDebrisActorComponent {
	struct UDebrisPositioning* Debris; // 0x1f8(0x08)
	struct TArray<struct FDebrisItemActorItem> Actors; // 0x200(0x10)
	enum class EDebrisItemPass ItemPass; // 0x210(0x01)
	float InfluenceRange; // 0x214(0x04)
	float MinDistanceToImportantLocations; // 0x218(0x04)
	bool UseAmount; // 0x21c(0x01)
	struct FIRandRange amount; // 0x220(0x08)
	int32_t AmountSearchMultiplier; // 0x228(0x04)
	char UnknownData_22E[0x2]; // 0x22e(0x02)
};

// Class FSD.DebrisDataComponent
// Size: 0x200 (Inherited: 0x200)
struct UDebrisDataComponent : UDebrisActorComponent {
	struct UDebrisBase* Debris; // 0x1f8(0x08)
};

// Class FSD.DebrisVeinComponent
// Size: 0x210 (Inherited: 0x200)
struct UDebrisVeinComponent : UDebrisActorComponent {
	struct UTerrainMaterial* Material; // 0x1f8(0x08)
	enum class EDebrisCarvedType carverType; // 0x200(0x01)
	struct UVeinResourceCreator* VeinCreator; // 0x208(0x08)
};

// Class FSD.DebrisPatchComponent
// Size: 0x210 (Inherited: 0x200)
struct UDebrisPatchComponent : UDebrisActorComponent {
	struct UTerrainMaterial* Material; // 0x1f8(0x08)
	struct UPatchResourceCreator* PatchCreator; // 0x200(0x08)
};

// Class FSD.InfluencerComponent
// Size: 0x310 (Inherited: 0x200)
struct UInfluencerComponent : UDebrisActorComponent {
	struct FRuntimeFloatCurve ProbabilityCurve; // 0x1f8(0x88)
	struct FRuntimeFloatCurve ScaleCurve; // 0x280(0x88)
};

// Class FSD.DebrisProbabilityComponent
// Size: 0x210 (Inherited: 0x200)
struct UDebrisProbabilityComponent : UDebrisActorComponent {
	struct FRandRange ProbabilityRange; // 0x1f8(0x08)
	bool IsProbabilityShared; // 0x200(0x01)
	char UnknownData_209[0x7]; // 0x209(0x07)
};

// Class FSD.DebrisDataActor
// Size: 0x238 (Inherited: 0x220)
struct ADebrisDataActor : AActor {
	char UnknownData_220[0x18]; // 0x220(0x18)
};

// Class FSD.DebrisInstances
// Size: 0x6e0 (Inherited: 0x620)
struct UDebrisInstances : UHierarchicalInstancedStaticMeshComponent {
	struct UDebrisBase* DebrisBase; // 0x618(0x08)
	int32_t DebrisIndex; // 0x624(0x04)
	char UnknownData_62C[0xb4]; // 0x62c(0xb4)
};

// Class FSD.DebrisMesh
// Size: 0x250 (Inherited: 0x1f8)
struct UDebrisMesh : UDebrisBase {
	struct TArray<struct FDebrisStaticMesh> Meshes; // 0x1f8(0x10)
	struct UMaterialInterface* CommonMaterial; // 0x208(0x08)
	struct FText InGameName; // 0x210(0x18)
	struct FName GemTrackerName; // 0x228(0x08)
	struct FText InGameDescription; // 0x230(0x18)
	float StartCullDistance; // 0x248(0x04)
	float EndCullDistance; // 0x24c(0x04)
};

// Class FSD.DebrisCellNoise
// Size: 0x58 (Inherited: 0x30)
struct UDebrisCellNoise : UDataAsset {
	int32_t Seed; // 0x30(0x04)
	struct FVector CellSize; // 0x34(0x0c)
	int32_t NumValues; // 0x40(0x04)
	struct FVector InvCellSize; // 0x44(0x0c)
	bool Initialized; // 0x50(0x01)
	char UnknownData_51[0x7]; // 0x51(0x07)
};

// Class FSD.DebrisPositioning
// Size: 0x1f8 (Inherited: 0x1f8)
struct UDebrisPositioning : UDebrisBase {
};

// Class FSD.DebrisSet
// Size: 0x40 (Inherited: 0x30)
struct UDebrisSet : UDataAsset {
	struct TArray<struct TSoftObjectPtr<struct UDebrisBase>> Debris; // 0x30(0x10)
};

// Class FSD.DebrisStaticCarved
// Size: 0x240 (Inherited: 0x1f8)
struct UDebrisStaticCarved : UDebrisBase {
	enum class EDebrisCarvedType carverType; // 0x1f8(0x01)
	char UnknownData_1F9[0x7]; // 0x1f9(0x07)
	struct TArray<struct FUDebrisStaticCarveMesh> Meshes; // 0x200(0x10)
	struct UTerrainMaterial* TerrainMaterial; // 0x210(0x08)
	struct FDebrisInfluence CaveInfluenceToAdd; // 0x218(0x10)
	enum class ECarveFilterType Filter; // 0x228(0x01)
	char UnknownData_229[0x3]; // 0x229(0x03)
	float CarveOffsetRadius; // 0x22c(0x04)
	struct AActor* SpawnAttachClass; // 0x230(0x08)
	float AttachSpawnOffsetDistance; // 0x238(0x04)
	char UnknownData_23C[0x4]; // 0x23c(0x04)
};

// Class FSD.CustomItemPlacementHandling
// Size: 0x28 (Inherited: 0x28)
struct UCustomItemPlacementHandling : UInterface {
};

// Class FSD.InfluencerSpawnComponent
// Size: 0x200 (Inherited: 0x1f0)
struct UInfluencerSpawnComponent : USceneComponent {
	struct UCaveInfluencer* Influencer; // 0x1f0(0x08)
	float Range; // 0x1f8(0x04)
	char UnknownData_1FC[0x4]; // 0x1fc(0x04)
};

// Class FSD.DecalManager
// Size: 0xb0 (Inherited: 0xb0)
struct UDecalManager : UActorComponent {

	void SpawnDecal(struct FVector Location, struct FVector Normal, struct UFSDPhysicalMaterial* PhysMat); // Function FSD.DecalManager.SpawnDecal
};

// Class FSD.DeepCSGWorld
// Size: 0x810 (Inherited: 0x220)
struct ADeepCSGWorld : AActor {
	char UnknownData_220[0x8]; // 0x220(0x08)
	struct UTerrainMaterial* DebugCarveInsideTerrainMaterial; // 0x228(0x08)
	struct UTerrainMaterial* DebugCarveOutsizeTerrainMaterial; // 0x230(0x08)
	struct UTerrainMaterial* DebugCarveEdgeTerrainMaterial; // 0x238(0x08)
	struct UTerrainMaterial* GoldTerrainMaterial; // 0x240(0x08)
	struct UTerrainMaterial* MOMTerrrainMaterial; // 0x248(0x08)
	struct UTerrainMaterial* NitraTerrrainMaterial; // 0x250(0x08)
	struct UTerrainMaterial* EmptyTerrainMaterial; // 0x258(0x08)
	struct UTerrainMaterial* DefaultBurntTerrainMaterial; // 0x260(0x08)
	struct UTerrainMaterial* DefaultHardRockMaterial; // 0x268(0x08)
	struct UTerrainMaterial* DefaultBedRockMaterial; // 0x270(0x08)
	struct UTerrainType* GoldTerrainType; // 0x278(0x08)
	struct UTerrainType* MOMTerrainType; // 0x280(0x08)
	struct UTerrainType* RockTerrainType; // 0x288(0x08)
	struct UTerrainType* CrystalTerrainType; // 0x290(0x08)
	struct UTerrainType* EmptyTerrainType; // 0x298(0x08)
	struct UTerrainType* DirtTerrainType; // 0x2a0(0x08)
	struct UTerrainType* DefaultBurntTerrainType; // 0x2a8(0x08)
	struct UTerrainMaterialsCollection* TerrainMaterials; // 0x2b0(0x08)
	struct TArray<struct UDebrisSet*> StandardDebrisSets; // 0x2b8(0x10)
	struct TArray<struct UDebrisBase*> AddedDebris; // 0x2c8(0x10)
	struct TArray<struct UDebrisBase*> DebrisLevelGenerationCarved; // 0x2d8(0x10)
	struct TArray<struct UDebrisBase*> DebrisLargeCarved; // 0x2e8(0x10)
	struct TArray<struct UDebrisBase*> DebrisSmallCarved; // 0x2f8(0x10)
	struct TArray<struct UDebrisBase*> DebrisMeshes; // 0x308(0x10)
	struct UMaterialInterface* DefaultScannerMaterial; // 0x318(0x08)
	struct ADebrisDataActor* DebrisActorInstance; // 0x320(0x08)
	int32_t DebrisActorIndex; // 0x328(0x04)
	char UnknownData_32C[0x4]; // 0x32c(0x04)
	struct AProceduralSetup* ProceduralSetup; // 0x330(0x08)
	struct TArray<struct UObject*> TerrainMaterialAssets; // 0x338(0x10)
	char UnknownData_348[0x38]; // 0x348(0x38)
	struct UAsyncPathRequests* AsyncPathRequests; // 0x380(0x08)
	struct FMulticastInlineDelegate OnBaseLayerCommitDone; // 0x388(0x10)
	struct FMulticastInlineDelegate OnBaseLayerFinalCommitDone; // 0x398(0x10)
	struct TArray<struct AActor*> TerrainAttachedActors; // 0x3a8(0x10)
	struct TArray<struct FWeakObjectPtr<struct UObject>> TerrainListeners; // 0x3b8(0x10)
	struct TArray<struct UDebrisBase*> RegisteredDebrisList; // 0x3c8(0x10)
	struct TArray<struct FDebrisWhenCarving> DebrisWhenCarvingList; // 0x3d8(0x10)
	struct TArray<struct UDebrisInstances*> DebrisInstanceList; // 0x3e8(0x10)
	struct TArray<struct FWeakObjectPtr<struct UPrimitiveComponent>> ShowAlwaysScannerComponents; // 0x3f8(0x10)
	struct TArray<struct FWeakObjectPtr<struct UPrimitiveComponent>> FogOfWarScannerComponents; // 0x408(0x10)
	struct TArray<struct UDebrisBase*> DebrisHandles; // 0x418(0x10)
	char UnknownData_428[0x2c0]; // 0x428(0x2c0)
	struct FTerrainLateJoinData LateJoinData; // 0x6e8(0xa8)
	struct TArray<struct FEncodedChunkId> visibleChunks; // 0x790(0x10)
	char UnknownData_7A0[0x70]; // 0x7a0(0x70)

	void UnRegisterScannerComponent(struct UPrimitiveComponent* Component); // Function FSD.DeepCSGWorld.UnRegisterScannerComponent
	void TerrainOp_RemoveFloating(struct FRemoveFloatingIslandOperationData Data); // Function FSD.DeepCSGWorld.TerrainOp_RemoveFloating
	void TerrainOp_PickAxe(struct FPickaxeDigOperationData Data); // Function FSD.DeepCSGWorld.TerrainOp_PickAxe
	void TerrainOp_Melt(struct FMeltOperationData Data); // Function FSD.DeepCSGWorld.TerrainOp_Melt
	void TerrainOp_Explode(struct FGrenadeExplodeOperationData Data); // Function FSD.DeepCSGWorld.TerrainOp_Explode
	void TerrainOp_Drill(struct FDrillOperationData Data); // Function FSD.DeepCSGWorld.TerrainOp_Drill
	void TerrainOp_CarveSTLMesh(struct FCarveWithSTLMeshOperationData Data); // Function FSD.DeepCSGWorld.TerrainOp_CarveSTLMesh
	void TerrainOp_CarveSplineSegment(struct FSplineSegmentCarveOperationData Data); // Function FSD.DeepCSGWorld.TerrainOp_CarveSplineSegment
	void TerrainOp_CarveCollider(struct FCarveWithColliderOperationData Data); // Function FSD.DeepCSGWorld.TerrainOp_CarveCollider
	void TerrainMaterialDataLoaded(); // Function FSD.DeepCSGWorld.TerrainMaterialDataLoaded
	void SetVisibleToScanner(struct FVector Center, struct FVector Range); // Function FSD.DeepCSGWorld.SetVisibleToScanner
	void SelectDebrisSettings(); // Function FSD.DeepCSGWorld.SelectDebrisSettings
	void ResetEntireWorld(); // Function FSD.DeepCSGWorld.ResetEntireWorld
	void RemoveDebrisInstance_TerrainOp2(int32_t instance, int32_t Component); // Function FSD.DeepCSGWorld.RemoveDebrisInstance_TerrainOp2
	void RemoveDebrisInSphere(struct FVector Position, float Radius, bool onlyFragile, bool alsoDurable); // Function FSD.DeepCSGWorld.RemoveDebrisInSphere
	void RegisterScannerComponent(struct UPrimitiveComponent* Component, bool useFogOfWar); // Function FSD.DeepCSGWorld.RegisterScannerComponent
	bool Raycast(struct FVector Start, struct FVector Direction, float MaxDistance, struct FCSGRaycastHitInfo HitInfo, enum class ELandscapeCellFilter Filter); // Function FSD.DeepCSGWorld.Raycast
	bool Linecast(struct FVector Start, struct FVector End, struct FCSGRaycastHitInfo HitInfo, enum class ELandscapeCellFilter Filter); // Function FSD.DeepCSGWorld.Linecast
	bool IsPositionVisibleToScanner(struct FVector Pos); // Function FSD.DeepCSGWorld.IsPositionVisibleToScanner
	bool IsPointInsideTerrain(struct FVector Pos); // Function FSD.DeepCSGWorld.IsPointInsideTerrain
	bool IsComponentRegisteredWithScanner(struct UPrimitiveComponent* Component); // Function FSD.DeepCSGWorld.IsComponentRegisteredWithScanner
	int32_t GetTerrainHash(); // Function FSD.DeepCSGWorld.GetTerrainHash
	int32_t GetShadowQuality(); // Function FSD.DeepCSGWorld.GetShadowQuality
	struct ADebrisDataActor* GetDebrisDataActor(); // Function FSD.DeepCSGWorld.GetDebrisDataActor
	void GetAllTerrainActorsAroundPoint(struct FVector Center, struct FVector Range, struct TArray<struct AActor*> TerrainActors); // Function FSD.DeepCSGWorld.GetAllTerrainActorsAroundPoint
	void GenerateAllMeshes(); // Function FSD.DeepCSGWorld.GenerateAllMeshes
	void FinishGeneration_Blocking(); // Function FSD.DeepCSGWorld.FinishGeneration_Blocking
	float FindTotalVolumeOfMaterialInWorld(struct UTerrainMaterial* Material); // Function FSD.DeepCSGWorld.FindTotalVolumeOfMaterialInWorld
	void CarveWithSTLMeshUsingTransform_Wait(struct ADeepCSGWorld* CSGWorld, struct USTLMeshCarver* MeshCarver, struct UTerrainMaterial* Material, enum class ECarveFilterType CarveFilter, struct FTransform Transform, enum class EPreciousMaterialOptions Precious, struct FLatentActionInfo LatentInfo); // Function FSD.DeepCSGWorld.CarveWithSTLMeshUsingTransform_Wait
	void CarveWithSTLMeshUsingTransform(struct USTLMeshCarver* MeshCarver, struct UTerrainMaterial* Material, enum class ECarveFilterType CarveFilter, struct FTransform Transform, enum class EPreciousMaterialOptions Precious); // Function FSD.DeepCSGWorld.CarveWithSTLMeshUsingTransform
	void CarveWithSTLMesh_Wait(struct ADeepCSGWorld* CSGWorld, struct USTLMeshCarver* MeshCarver, struct UTerrainMaterial* Material, enum class ECarveFilterType CarveFilter, struct FVector Pos, struct FQuat Orientation, struct FVector Scale, enum class EPreciousMaterialOptions Precious, struct FLatentActionInfo LatentInfo); // Function FSD.DeepCSGWorld.CarveWithSTLMesh_Wait
	void CarveWithSTLMesh(struct USTLMeshCarver* MeshCarver, struct UTerrainMaterial* Material, enum class ECarveFilterType CarveFilter, struct FVector Pos, struct FQuat Orientation, struct FVector Scale, enum class EPreciousMaterialOptions Precious); // Function FSD.DeepCSGWorld.CarveWithSTLMesh
	void CarveWithStaticMeshUsingTransform_Wait(struct ADeepCSGWorld* CSGWorld, struct UStaticMeshCarver* MeshCarver, struct UTerrainMaterial* Material, enum class ECarveFilterType CarveFilter, struct FTransform Transform, enum class EPreciousMaterialOptions Precious, struct FLatentActionInfo LatentInfo); // Function FSD.DeepCSGWorld.CarveWithStaticMeshUsingTransform_Wait
	void CarveWithStaticMeshUsingTransform(struct UStaticMeshCarver* MeshCarver, struct UTerrainMaterial* Material, enum class ECarveFilterType CarveFilter, struct FTransform Transform, enum class EPreciousMaterialOptions Precious); // Function FSD.DeepCSGWorld.CarveWithStaticMeshUsingTransform
	void CarveWithStaticMesh(struct UStaticMeshCarver* MeshCarver, struct UTerrainMaterial* Material, enum class ECarveFilterType CarveFilter, struct FVector Pos, struct FQuat Orientation, struct FVector Scale, enum class EPreciousMaterialOptions Precious); // Function FSD.DeepCSGWorld.CarveWithStaticMesh
	void CarveWithSplineSegments(struct TArray<struct FCarveSplineSegment> Segments, struct UTerrainMaterial* Material, enum class ECarveFilterType CarveFilter, enum class EPreciousMaterialOptions Precious); // Function FSD.DeepCSGWorld.CarveWithSplineSegments
	void CarveWithSplineSegment(struct FVector SplineStart, struct FVector SplineStartTangent, struct FVector SplineEnd, struct FVector SplineEndTangent, float Radius, struct UTerrainMaterial* Material, enum class ECarveFilterType CarveFilter, enum class EPreciousMaterialOptions Precious); // Function FSD.DeepCSGWorld.CarveWithSplineSegment
	void CarveWithMeshUsingTransform_Wait(struct ADeepCSGWorld* CSGWorld, struct UStaticMesh* StaticMesh, struct UTerrainMaterial* Material, enum class ECarveFilterType CarveFilter, struct FTransform Transform, float ExpensiveNoise, enum class EPreciousMaterialOptions Precious, struct FLatentActionInfo LatentInfo); // Function FSD.DeepCSGWorld.CarveWithMeshUsingTransform_Wait
	void CarveWithMeshUsingTransform(struct UStaticMesh* StaticMesh, struct UTerrainMaterial* Material, enum class ECarveFilterType CarveFilter, struct FTransform Transform, float ExpensiveNoise, enum class EPreciousMaterialOptions Precious, enum class CarveOptionsCellSize CarverSize); // Function FSD.DeepCSGWorld.CarveWithMeshUsingTransform
	void CarveWithMesh_Wait(struct ADeepCSGWorld* CSGWorld, struct UStaticMesh* StaticMesh, struct UTerrainMaterial* Material, enum class ECarveFilterType CarveFilter, struct FVector Pos, struct FQuat Orientation, struct FVector Scale, struct FLatentActionInfo LatentInfo); // Function FSD.DeepCSGWorld.CarveWithMesh_Wait
	void CarveWithMesh(struct UStaticMesh* StaticMesh, struct UTerrainMaterial* Material, enum class ECarveFilterType CarveFilter, struct FVector Pos, struct FQuat Orientation, struct FVector Scale, enum class EPreciousMaterialOptions Precious); // Function FSD.DeepCSGWorld.CarveWithMesh
	float CalcApproximateTerrainDensity(struct FVector Pos, float Radius); // Function FSD.DeepCSGWorld.CalcApproximateTerrainDensity
	void BaseLayerCommitFinal(bool blocking); // Function FSD.DeepCSGWorld.BaseLayerCommitFinal
	void BaseLayerCommit(bool blocking, bool scheduleTesselation); // Function FSD.DeepCSGWorld.BaseLayerCommit
	void AttachActorToTerrain(struct AActor* Actor, struct FVector Pos); // Function FSD.DeepCSGWorld.AttachActorToTerrain
	void ApplyDebrisCarvers(); // Function FSD.DeepCSGWorld.ApplyDebrisCarvers
	void ApplyBaseDebrisCarvers(struct TArray<struct UDebrisBase*> Carvers); // Function FSD.DeepCSGWorld.ApplyBaseDebrisCarvers
};

// Class FSD.SavableDataAsset
// Size: 0x58 (Inherited: 0x30)
struct USavableDataAsset : UDataAsset {
	char UnknownData_30[0x8]; // 0x30(0x08)
	bool EnableDangerousSaveGameIDEditing; // 0x38(0x01)
	char UnknownData_39[0x3]; // 0x39(0x03)
	struct FGuid SavegameID; // 0x3c(0x10)
	char UnknownData_4C[0x4]; // 0x4c(0x04)
	struct UBuildRestriction* BuildRestriction; // 0x50(0x08)

	struct FGuid GetSavegameID(); // Function FSD.SavableDataAsset.GetSavegameID
};

// Class FSD.DeepDiveTemplate
// Size: 0xc0 (Inherited: 0x58)
struct UDeepDiveTemplate : USavableDataAsset {
	struct TArray<struct UDifficultySetting*> Difficulties; // 0x58(0x10)
	struct TArray<struct FDeepDiveTemplateItem> missions; // 0x68(0x10)
	struct TArray<enum class ESchematicType> Rewards; // 0x78(0x10)
	int32_t CreditsPerPrimaryObjective; // 0x88(0x04)
	int32_t CreditsPerSecondaryObjective; // 0x8c(0x04)
	int32_t XPPerPrimaryObjective; // 0x90(0x04)
	int32_t XPPerSecondaryObjective; // 0x94(0x04)
	float HazardBonus; // 0x98(0x04)
	char UnknownData_9C[0x4]; // 0x9c(0x04)
	struct FRandInterval MutatorCount; // 0xa0(0x10)
	struct FRandInterval WarningCount; // 0xb0(0x10)

	enum class ESchematicType GetStageRewardType(int32_t StageIndex); // Function FSD.DeepDiveTemplate.GetStageRewardType
};

// Class FSD.DeepDiveSettings
// Size: 0x98 (Inherited: 0x30)
struct UDeepDiveSettings : UDataAsset {
	struct UDeepDiveTemplate* NormalTemplate; // 0x30(0x08)
	struct UDeepDiveTemplate* HardTemplate; // 0x38(0x08)
	struct TArray<struct UMutator*> BaseMutators; // 0x40(0x10)
	struct TArray<struct UMissionMutator*> Mutators; // 0x50(0x10)
	struct TArray<struct UMissionWarning*> Warnings; // 0x60(0x10)
	struct TArray<struct UDialogDataAsset*> DeepDiveMissionCompleteShouts; // 0x70(0x10)
	struct TArray<struct FDeepDiveLoaderSequence> LoaderSequnces; // 0x80(0x10)
	struct UMissionNameBank* DeepDiveNameBank; // 0x90(0x08)
};

// Class FSD.DeepDiveFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct UDeepDiveFunctionLibrary : UBlueprintFunctionLibrary {

	bool IsDeepDiveElite(struct UObject* WorldContextObject, struct UDeepDive* DeepDive); // Function FSD.DeepDiveFunctionLibrary.IsDeepDiveElite
	bool GetHasEverCompletedDeepDive(struct UObject* WorldContextObject, struct UDeepDiveTemplate* DeepDive); // Function FSD.DeepDiveFunctionLibrary.GetHasEverCompletedDeepDive
};

// Class FSD.DeepDiveManager
// Size: 0xd8 (Inherited: 0x28)
struct UDeepDiveManager : UObject {
	struct FMulticastInlineDelegate OnDeepDivesRefresh; // 0x28(0x10)
	struct UDeepDive* ActiveNormalDeepDive; // 0x38(0x08)
	struct UDeepDive* ActiveHardDeepDive; // 0x40(0x08)
	struct UDeepDive* ActiveDeepDive; // 0x48(0x08)
	struct UGeneratedMission* CurrentMission; // 0x50(0x08)
	char UnknownData_58[0x4]; // 0x58(0x04)
	float currentDepth; // 0x5c(0x04)
	struct TMap<int32_t, struct FDeepDiveBank> DeepDiveBank; // 0x60(0x50)
	int32_t NumFailedRequests; // 0xb0(0x04)
	int32_t BackendDataValid; // 0xb4(0x04)
	int32_t BackendSeed; // 0xb8(0x04)
	bool LockSeed; // 0xbc(0x01)
	char UnknownData_BD[0x3]; // 0xbd(0x03)
	struct FDateTime BackendExpirationTime; // 0xc0(0x08)
	struct FDateTime LastRequestTime; // 0xc8(0x08)
	char UnknownData_D0[0x8]; // 0xd0(0x08)

	void StartDeepDive(struct UDeepDive* DeepDive); // Function FSD.DeepDiveManager.StartDeepDive
	void ReInitialize(); // Function FSD.DeepDiveManager.ReInitialize
	void MarkGivenRewards(); // Function FSD.DeepDiveManager.MarkGivenRewards
	bool IsEliteDeepDive(struct UGeneratedMission* mission); // Function FSD.DeepDiveManager.IsEliteDeepDive
	struct UDeepDive* GetDeepDiveFromMission(struct UGeneratedMission* mission); // Function FSD.DeepDiveManager.GetDeepDiveFromMission
	struct UGeneratedMission* GetCurrentSingleMission(); // Function FSD.DeepDiveManager.GetCurrentSingleMission
	int32_t GetCurrentDeepDiveStage(); // Function FSD.DeepDiveManager.GetCurrentDeepDiveStage
	struct UDeepDive* GetActiveNormalDeepDive(); // Function FSD.DeepDiveManager.GetActiveNormalDeepDive
	struct UDeepDive* GetActiveHardDeepDive(); // Function FSD.DeepDiveManager.GetActiveHardDeepDive
	struct UDeepDive* GetActiveDeepDive(); // Function FSD.DeepDiveManager.GetActiveDeepDive
	void DeepDiveRefreshDelegate__DelegateSignature(); // DelegateFunction FSD.DeepDiveManager.DeepDiveRefreshDelegate__DelegateSignature
	bool CompleteCurrentSingleMission(); // Function FSD.DeepDiveManager.CompleteCurrentSingleMission
	bool AreAllSelectedClassesQualified(); // Function FSD.DeepDiveManager.AreAllSelectedClassesQualified
};

// Class FSD.DeepDive
// Size: 0x98 (Inherited: 0x28)
struct UDeepDive : UObject {
	struct TArray<struct UGeneratedMission*> missions; // 0x28(0x10)
	struct UBiome* Biome; // 0x38(0x08)
	struct TArray<struct FDeepDiveRewardItem> GivenRewards; // 0x40(0x10)
	int32_t MissionsCompleted; // 0x50(0x04)
	char UnknownData_54[0x4]; // 0x54(0x04)
	struct TArray<int32_t> StagesCompleted; // 0x58(0x10)
	int32_t CurrentMissionIndex; // 0x68(0x04)
	char UnknownData_6C[0x4]; // 0x6c(0x04)
	struct UDeepDiveTemplate* Template; // 0x70(0x08)
	struct FText DeepDiveName; // 0x78(0x18)
	int32_t BestTime; // 0x90(0x04)
	char UnknownData_94[0x4]; // 0x94(0x04)

	bool IsCompleted(); // Function FSD.DeepDive.IsCompleted
	bool HasCompletedStage(int32_t StageIndex); // Function FSD.DeepDive.HasCompletedStage
	struct FDeepDiveRewardItem GetGivenRewardAtStage(int32_t StageIndex); // Function FSD.DeepDive.GetGivenRewardAtStage
};

// Class FSD.AsyncPathRequestsInterface
// Size: 0x28 (Inherited: 0x28)
struct UAsyncPathRequestsInterface : UInterface {
};

// Class FSD.AsyncPathRequests
// Size: 0xc8 (Inherited: 0xb0)
struct UAsyncPathRequests : UActorComponent {
	struct TArray<struct FWeakObjectPtr<struct UObject>> RequestListeners; // 0xb0(0x10)
	char UnknownData_C0[0x8]; // 0xc0(0x08)
};

// Class FSD.DeepPathfinderSceneComponent
// Size: 0x200 (Inherited: 0x1f0)
struct UDeepPathfinderSceneComponent : USceneComponent {
	char UnknownData_1F0[0x10]; // 0x1f0(0x10)
};

// Class FSD.DeepPathfinderMovement
// Size: 0x428 (Inherited: 0x138)
struct UDeepPathfinderMovement : UPawnMovementComponent {
	char UnknownData_138[0x8]; // 0x138(0x08)
	bool UseDormancy; // 0x140(0x01)
	char UnknownData_141[0x3]; // 0x141(0x03)
	float MaxPawnSpeed; // 0x144(0x04)
	float StrafeSpeed; // 0x148(0x04)
	float MinSlowdownAngle; // 0x14c(0x04)
	float MaxSlowdownAngle; // 0x150(0x04)
	float MaxStrafeDistance; // 0x154(0x04)
	float AlignDirectionSpeed; // 0x158(0x04)
	float FleeSpeedBoostMultiplier; // 0x15c(0x04)
	float MaxAcceleration; // 0x160(0x04)
	float MaxBrakingDeceleration; // 0x164(0x04)
	float AngleSpeedFilterFactor; // 0x168(0x04)
	uint32_t AIAvoidanceWeight; // 0x16c(0x04)
	enum class DeepPathFinderType PathfinderType; // 0x170(0x01)
	enum class DeepPathFinderSize PathfinderSize; // 0x171(0x01)
	enum class ETeleportType MovementPhysicsType; // 0x172(0x01)
	enum class DeepPathFinderPreference PathfinderPreference; // 0x173(0x01)
	bool AlignTowardsTargetIfStationary; // 0x174(0x01)
	char UnknownData_175[0x3]; // 0x175(0x03)
	float AlignToTargetMinRequiredAngle; // 0x178(0x04)
	bool AllowSlowTickRateWhenNotVisible; // 0x17c(0x01)
	bool ForceAPathIfNoneFound; // 0x17d(0x01)
	bool DrawServerPath; // 0x17e(0x01)
	char UnknownData_17F[0x1]; // 0x17f(0x01)
	struct FMulticastInlineDelegate OnPathBegin; // 0x180(0x10)
	struct FMulticastInlineDelegate OnPauseMovementElapsed; // 0x190(0x10)
	struct FMulticastInlineDelegate OnPathFinished; // 0x1a0(0x10)
	struct FMulticastInlineDelegate OnRefreshDestination; // 0x1b0(0x10)
	struct FMulticastInlineDelegate OnStateChanged; // 0x1c0(0x10)
	char UnknownData_1D0[0x28]; // 0x1d0(0x28)
	struct ADeepCSGWorld* CSGWorld; // 0x1f8(0x08)
	uint32_t PathMovedDist; // 0x200(0x04)
	uint32_t LocalPathMovedDist; // 0x204(0x04)
	struct FDeepRepPath Path; // 0x208(0xd0)
	struct UFakeMoverSettings* MoveSettings; // 0x2d8(0x08)
	struct AActor* TargetActor; // 0x2e0(0x08)
	int32_t CurrentPathIndex; // 0x2e8(0x04)
	float CurrentPathFraction; // 0x2ec(0x04)
	struct FVector Destination; // 0x2f0(0x0c)
	char UnknownData_2FC[0x4]; // 0x2fc(0x04)
	struct AActor* DestinationActor; // 0x300(0x08)
	float AcceptanceRadius; // 0x308(0x04)
	bool OnlyPartPath; // 0x30c(0x01)
	char UnknownData_30D[0x3]; // 0x30d(0x03)
	float PauseMovementTime; // 0x310(0x04)
	enum class EDeepMovementMode MoveMode; // 0x314(0x01)
	char UnknownData_315[0x3]; // 0x315(0x03)
	struct UPawnStatsComponent* PawnStats; // 0x318(0x08)
	char UnknownData_320[0xc]; // 0x320(0x0c)
	struct FVector LastForwardDir; // 0x32c(0x0c)
	float VerticalAngleSpeed; // 0x338(0x04)
	float HorizontalAngleSpeed; // 0x33c(0x04)
	bool IsStrafing; // 0x340(0x01)
	bool HasOustandingPathRequest; // 0x341(0x01)
	bool LastPathReachedPreciseDestination; // 0x342(0x01)
	char UnknownData_343[0x25]; // 0x343(0x25)
	float PostponedTickTime; // 0x368(0x04)
	bool LastMoveSuccessful; // 0x36c(0x01)
	bool HandleRotation; // 0x36d(0x01)
	struct FHandleRotationOptions HandleRotationOptions; // 0x36e(0x01)
	char UnknownData_36F[0x19]; // 0x36f(0x19)
	struct FVector UnfilteredPosition; // 0x388(0x0c)
	struct FVector LastDestPosUsed; // 0x394(0x0c)
	float DampOmega; // 0x3a0(0x04)
	bool UseMovementSpring; // 0x3a4(0x01)
	bool SnapToPathfinderOnFirstMove; // 0x3a5(0x01)
	char UnknownData_3A6[0x2]; // 0x3a6(0x02)
	struct FFakeMoverState FakePhysicsMove; // 0x3a8(0x60)
	float FakeSyncTime; // 0x408(0x04)
	char UnknownData_40C[0x1c]; // 0x40c(0x1c)

	void UpdateTargetActor(struct AActor* NewTarget); // Function FSD.DeepPathfinderMovement.UpdateTargetActor
	void UpdateDestination(struct FVector Dest); // Function FSD.DeepPathfinderMovement.UpdateDestination
	void UnPauseMovement(); // Function FSD.DeepPathfinderMovement.UnPauseMovement
	void TeleportTo(struct FVector destLoc, struct FRotator destRot); // Function FSD.DeepPathfinderMovement.TeleportTo
	void StopMove(); // Function FSD.DeepPathfinderMovement.StopMove
	void StopAttackStance(); // Function FSD.DeepPathfinderMovement.StopAttackStance
	bool StartMoveToActor(struct AActor* Dest, float AcceptanceRadius); // Function FSD.DeepPathfinderMovement.StartMoveToActor
	bool StartMoveTo(struct FVector Dest, float AcceptanceRadius); // Function FSD.DeepPathfinderMovement.StartMoveTo
	bool StartFleeFrom(struct FVector dangerPos, float Distance); // Function FSD.DeepPathfinderMovement.StartFleeFrom
	void StartFakePhysicsMoveSet(struct UFakeMoverSettings* MoveSettings); // Function FSD.DeepPathfinderMovement.StartFakePhysicsMoveSet
	void StartFakePhysics(struct FVector Vel); // Function FSD.DeepPathfinderMovement.StartFakePhysics
	void StartAttackStance(struct FVector stancePos); // Function FSD.DeepPathfinderMovement.StartAttackStance
	void SnapToPathfinder(); // Function FSD.DeepPathfinderMovement.SnapToPathfinder
	void SetSlowDownAngles(float Min, float Max); // Function FSD.DeepPathfinderMovement.SetSlowDownAngles
	void SetMaxSpeed(float Speed); // Function FSD.DeepPathfinderMovement.SetMaxSpeed
	void SetHandleRotation(bool flag); // Function FSD.DeepPathfinderMovement.SetHandleRotation
	void SetFreezeAlignment(bool Freeze); // Function FSD.DeepPathfinderMovement.SetFreezeAlignment
	void SetControlledExternally(bool controlled); // Function FSD.DeepPathfinderMovement.SetControlledExternally
	void PauseMovement(float Time); // Function FSD.DeepPathfinderMovement.PauseMovement
	bool PathExistTo(struct FVector Dest); // Function FSD.DeepPathfinderMovement.PathExistTo
	bool PathExistsBetween(struct FVector From, struct FVector to); // Function FSD.DeepPathfinderMovement.PathExistsBetween
	void OnRep_PathMovedDist(uint32_t lastPathMovedDist); // Function FSD.DeepPathfinderMovement.OnRep_PathMovedDist
	void OnRep_Path(struct FDeepRepPath oldPath); // Function FSD.DeepPathfinderMovement.OnRep_Path
	void OnRep_MoveSettings(struct UFakeMoverSettings* MoveSettings); // Function FSD.DeepPathfinderMovement.OnRep_MoveSettings
	bool IsFreezeAlignmentSet(); // Function FSD.DeepPathfinderMovement.IsFreezeAlignmentSet
	float GetVerticalAngleSpeed(); // Function FSD.DeepPathfinderMovement.GetVerticalAngleSpeed
	void GetRandomSpawnPointAtApproximateDistance_Async(struct FVector Origin, float Distance, bool success, struct FVector outPos, struct FLatentActionInfo LatentInfo); // Function FSD.DeepPathfinderMovement.GetRandomSpawnPointAtApproximateDistance_Async
	void GetRandomReachablePointAtApproximateDistance_Async(struct FVector Origin, float Distance, bool success, struct FVector outPos, struct FLatentActionInfo LatentInfo); // Function FSD.DeepPathfinderMovement.GetRandomReachablePointAtApproximateDistance_Async
	bool GetRandomReachablePointAtApproximateDistance(struct FVector Origin, float Distance, struct FVector outPos); // Function FSD.DeepPathfinderMovement.GetRandomReachablePointAtApproximateDistance
	struct FVector GetPathForwardDirection(); // Function FSD.DeepPathfinderMovement.GetPathForwardDirection
	enum class DeepPathFinderType GetPathfinderType(); // Function FSD.DeepPathfinderMovement.GetPathfinderType
	enum class DeepPathFinderSize GetPathfinderSize(); // Function FSD.DeepPathfinderMovement.GetPathfinderSize
	enum class EDeepMovementState GetMovementState(); // Function FSD.DeepPathfinderMovement.GetMovementState
	bool GetIsStrafing(); // Function FSD.DeepPathfinderMovement.GetIsStrafing
	float GetHorizontalAngleSpeed(); // Function FSD.DeepPathfinderMovement.GetHorizontalAngleSpeed
	struct UFakeMoverSettings* GetCurrentFakePhysicsMoveSet(); // Function FSD.DeepPathfinderMovement.GetCurrentFakePhysicsMoveSet
	bool FlyToConnectedPosition(struct FVector destPos); // Function FSD.DeepPathfinderMovement.FlyToConnectedPosition
	bool FindPointKeepingDistance(struct FVector Origin, float MinDistance, float MaxDistance, struct FVector Target, float idealTargetDistance, struct FVector outPos); // Function FSD.DeepPathfinderMovement.FindPointKeepingDistance
	struct FVector FindPathfinderPointAbove(struct FVector Pos, float HeightOffset); // Function FSD.DeepPathfinderMovement.FindPathfinderPointAbove
	struct FVector FindPathfinderOffsetPoint(struct FVector Pos, enum class EOffsetFrom offsetFrom, float HeightOffset); // Function FSD.DeepPathfinderMovement.FindPathfinderOffsetPoint
	struct FVector FindNearestPathfinderPointOverrideType(struct FVector Pos, enum class DeepPathFinderType overrideType, float MaxDistance); // Function FSD.DeepPathfinderMovement.FindNearestPathfinderPointOverrideType
	void FindNearestPathfinderPoint_Async(struct FVector Pos, float MaxDistance, bool success, struct FVector outPos, struct FLatentActionInfo LatentInfo); // Function FSD.DeepPathfinderMovement.FindNearestPathfinderPoint_Async
	struct FVector FindNearestPathfinderPoint(struct FVector Pos, float MaxDistance); // Function FSD.DeepPathfinderMovement.FindNearestPathfinderPoint
	struct FVector FindNearestConnectedPathfinderPoint(struct FVector Pos, float MaxDistance); // Function FSD.DeepPathfinderMovement.FindNearestConnectedPathfinderPoint
	struct FQuat CalcPathfinderOrientation(struct FVector Pos, struct FVector forwardDir); // Function FSD.DeepPathfinderMovement.CalcPathfinderOrientation
	bool BackOffFrom(struct FVector dangerPos, float Distance); // Function FSD.DeepPathfinderMovement.BackOffFrom
	void AddFakeMoverImpulse(struct FVector Impulse); // Function FSD.DeepPathfinderMovement.AddFakeMoverImpulse
};

// Class FSD.DefenseEvent
// Size: 0x370 (Inherited: 0x358)
struct ADefenseEvent : AGameEvent {
	float DefendDuration; // 0x358(0x04)
	char UnknownData_35C[0x4]; // 0x35c(0x04)
	struct UWidget* DefendWidget; // 0x360(0x08)
	float Progress; // 0x368(0x04)
	char UnknownData_36C[0x4]; // 0x36c(0x04)

	void OnRep_Progress(float OldValue); // Function FSD.DefenseEvent.OnRep_Progress
};

// Class FSD.DefensePointActor
// Size: 0x260 (Inherited: 0x220)
struct ADefensePointActor : AActor {
	char UnknownData_220[0x20]; // 0x220(0x20)
	struct AGameEvent* DefenseEvent; // 0x240(0x08)
	struct AGameEvent* ActiveDefenceEvent; // 0x248(0x08)
	enum class EDefendPointState DefendState; // 0x250(0x01)
	char UnknownData_251[0x7]; // 0x251(0x07)
	struct USingleUsableComponent* DefendPointUsable; // 0x258(0x08)

	void SetState(enum class EDefendPointState State); // Function FSD.DefensePointActor.SetState
	void OnRep_DefendState(); // Function FSD.DefensePointActor.OnRep_DefendState
	void OnDefensePointActivated(struct APlayerCharacter* Player); // Function FSD.DefensePointActor.OnDefensePointActivated
	void DefenseStart(); // Function FSD.DefensePointActor.DefenseStart
	void DefenseFail(); // Function FSD.DefensePointActor.DefenseFail
	void DefenseComplete(); // Function FSD.DefensePointActor.DefenseComplete
};

// Class FSD.DefenseObjective
// Size: 0x180 (Inherited: 0x150)
struct UDefenseObjective : UObjective {
	int32_t DefensePoints; // 0x150(0x04)
	int32_t PointsDefended; // 0x154(0x04)
	struct TArray<SoftClassProperty> ObjectiveDefenseClasses; // 0x158(0x10)
	struct TArray<struct ADefensePointActor*> ActiveObjectiveDefenseActors; // 0x168(0x10)
	struct UDebrisPositioning* DebrisPositioning; // 0x178(0x08)

	void PointDefended(); // Function FSD.DefenseObjective.PointDefended
	void OnRep_PointsRepaired(); // Function FSD.DefenseObjective.OnRep_PointsRepaired
	void OnDefensePointsSpawned(); // Function FSD.DefenseObjective.OnDefensePointsSpawned
};

// Class FSD.DetPack
// Size: 0x288 (Inherited: 0x220)
struct ADetPack : AActor {
	char UnknownData_220[0x20]; // 0x220(0x20)
	float UpgradedStaggerChance; // 0x240(0x04)
	float UpgradedStaggerDuration; // 0x244(0x04)
	float UpgradedFearFactor; // 0x248(0x04)
	float VisualDamageRadius; // 0x24c(0x04)
	float IncreasedFearRadius; // 0x250(0x04)
	float IncreasedStaggerRadius; // 0x254(0x04)
	struct UProjectileMovementComponent* Movement; // 0x258(0x08)
	struct UExplosionComponent* Explosion; // 0x260(0x08)
	struct USingleUsableComponent* UseComp; // 0x268(0x08)
	struct USimpleHealthComponent* SimpleHealth; // 0x270(0x08)
	struct ADetPackItem* Detonator; // 0x278(0x08)
	bool HasExploded; // 0x280(0x01)
	bool IsMoving; // 0x281(0x01)
	bool ExplodesOnDeath; // 0x282(0x01)
	bool HasExtraStaggerRadius; // 0x283(0x01)
	bool HasExtraFearRadius; // 0x284(0x01)
	char UnknownData_285[0x3]; // 0x285(0x03)

	void UseFearStaggerUpgrades(); // Function FSD.DetPack.UseFearStaggerUpgrades
	void RecieveHitObject(); // Function FSD.DetPack.RecieveHitObject
	void OnRep_IsMoving(); // Function FSD.DetPack.OnRep_IsMoving
	void OnRep_HasExploded(); // Function FSD.DetPack.OnRep_HasExploded
	void OnExploded(); // Function FSD.DetPack.OnExploded
	void OnDetPackPickedUp(struct APlayerCharacter* User); // Function FSD.DetPack.OnDetPackPickedUp
	void OnDetPackDeath(struct UHealthComponentBase* HealthComponent); // Function FSD.DetPack.OnDetPackDeath
};

// Class FSD.DetPackItem
// Size: 0x440 (Inherited: 0x368)
struct ADetPackItem : AAnimatedItem {
	char UnknownData_368[0x10]; // 0x368(0x10)
	struct ADetPack* DetPackClass; // 0x378(0x08)
	struct AItem* LoadoutProxy; // 0x380(0x08)
	struct UAnimMontage* FPThrowMontage; // 0x388(0x08)
	struct UAnimMontage* TPThrowMontage; // 0x390(0x08)
	struct UAnimMontage* FP_DetonateAnim; // 0x398(0x08)
	struct UAnimMontage* WPN_DetonateAnim; // 0x3a0(0x08)
	struct UAnimMontage* FP_EquipDetonatorAnimation; // 0x3a8(0x08)
	struct UAnimMontage* WPN_EquipDetonatorAnimation; // 0x3b0(0x08)
	struct USkeletalMeshComponent* DetonatorFPMesh; // 0x3b8(0x08)
	struct USkeletalMeshComponent* DetonatorTPMesh; // 0x3c0(0x08)
	struct UForceFeedbackEffect* DetonatorTriggerForceFeedback; // 0x3c8(0x08)
	struct UCapacityHoldingItemAggregator* Capacity; // 0x3d0(0x08)
	float SupplyStatusWeight; // 0x3d8(0x04)
	float ThrowVelocity; // 0x3dc(0x04)
	float EnheiritOwnerVelocityScale; // 0x3e0(0x04)
	float ThrowAngle; // 0x3e4(0x04)
	float CooldownAfterThrow; // 0x3e8(0x04)
	float CooldownAfterDetonation; // 0x3ec(0x04)
	float ThrowDelay; // 0x3f0(0x04)
	float ThrowZOffset; // 0x3f4(0x04)
	struct UDialogDataAsset* ShoutDetPackPlaced; // 0x3f8(0x08)
	struct UDialogDataAsset* ShoutOutOfAmmo; // 0x400(0x08)
	char UnknownData_408[0x4]; // 0x408(0x04)
	float CooldownLeft; // 0x40c(0x04)
	struct TArray<struct ADetPack*> ThrownPacks; // 0x410(0x10)
	struct TArray<struct UItemUpgrade*> DetPackUpgrades; // 0x420(0x10)
	char UnknownData_430[0xa]; // 0x430(0x0a)
	bool IsDetonatorOut; // 0x43a(0x01)
	bool HasThrownPack; // 0x43b(0x01)
	char UnknownData_43C[0x4]; // 0x43c(0x04)

	void Simulate_ThrowGrenade(); // Function FSD.DetPackItem.Simulate_ThrowGrenade
	void Server_ThrowGrenade(); // Function FSD.DetPackItem.Server_ThrowGrenade
	void Server_Detonate(); // Function FSD.DetPackItem.Server_Detonate
	void Server_CycleItem(); // Function FSD.DetPackItem.Server_CycleItem
	void Receive_OnRep_IsDetonatorOut(); // Function FSD.DetPackItem.Receive_OnRep_IsDetonatorOut
	void OnRep_IsDetonatorOut(); // Function FSD.DetPackItem.OnRep_IsDetonatorOut
	void OnDetonatingFinished(); // Function FSD.DetPackItem.OnDetonatingFinished
	int32_t GetCurrentGrenades(); // Function FSD.DetPackItem.GetCurrentGrenades
};

// Class FSD.DialogDataAsset
// Size: 0x60 (Inherited: 0x30)
struct UDialogDataAsset : UDataAsset {
	bool Enabled; // 0x30(0x01)
	bool AudioOnly; // 0x31(0x01)
	char UnknownData_32[0x2]; // 0x32(0x02)
	float ShoutDelay; // 0x34(0x04)
	float ShoutCoolDown; // 0x38(0x04)
	float ShoutChance; // 0x3c(0x04)
	struct TArray<struct FDialogStruct> Entries; // 0x40(0x10)
	struct TArray<int32_t> ShuffledIndices; // 0x50(0x10)

	int32_t SelectIndex(struct UObject* WorldContext); // Function FSD.DialogDataAsset.SelectIndex
	bool SelectEntry(struct UObject* WorldContext, struct FDialogStruct Dialog); // Function FSD.DialogDataAsset.SelectEntry
	struct FDialogStruct GetShout(int32_t Index); // Function FSD.DialogDataAsset.GetShout
};

// Class FSD.DifficultyManager
// Size: 0xe0 (Inherited: 0xb0)
struct UDifficultyManager : UActorComponent {
	char UnknownData_B0[0x18]; // 0xb0(0x18)
	int32_t ForcedPlayerCount; // 0xc8(0x04)
	char UnknownData_CC[0x4]; // 0xcc(0x04)
	struct AFSDGameMode* GameMode; // 0xd0(0x08)
	struct AFSDGameState* GameState; // 0xd8(0x08)

	struct UDifficultySetting* SelectDifficulty(int32_t Index); // Function FSD.DifficultyManager.SelectDifficulty
	float GetSmallEnemyDamageResistance(); // Function FSD.DifficultyManager.GetSmallEnemyDamageResistance
	float GetPointExtractionScaler(); // Function FSD.DifficultyManager.GetPointExtractionScaler
	float GetExtraLargeEnemyDamageResistanceD(); // Function FSD.DifficultyManager.GetExtraLargeEnemyDamageResistanceD
	float GetExtraLargeEnemyDamageResistanceC(); // Function FSD.DifficultyManager.GetExtraLargeEnemyDamageResistanceC
	float GetExtraLargeEnemyDamageResistanceB(); // Function FSD.DifficultyManager.GetExtraLargeEnemyDamageResistanceB
	float GetExtraLargeEnemyDamageResistance(); // Function FSD.DifficultyManager.GetExtraLargeEnemyDamageResistance
	float GetEnemyDamageResistance(); // Function FSD.DifficultyManager.GetEnemyDamageResistance
	float GetEnemyDamageModifier(); // Function FSD.DifficultyManager.GetEnemyDamageModifier
	float GetEnemyCountModifier(); // Function FSD.DifficultyManager.GetEnemyCountModifier
	struct UDifficultySetting* GetCurrentDifficulty(); // Function FSD.DifficultyManager.GetCurrentDifficulty
	float GetBossDifficultyScaler(); // Function FSD.DifficultyManager.GetBossDifficultyScaler
};

// Class FSD.DifficultySetting
// Size: 0x230 (Inherited: 0x58)
struct UDifficultySetting : USavableDataAsset {
	struct FText DifficultyName; // 0x58(0x18)
	struct FText ShortDifficultyName; // 0x70(0x18)
	struct FText UnlockRequirementDescription; // 0x88(0x18)
	struct UCampaign* CampaignRequirement; // 0xa0(0x08)
	float EnvironmentalDamageModifier; // 0xa8(0x04)
	char UnknownData_AC[0x4]; // 0xac(0x04)
	struct TArray<float> ExtraLargeEnemyDamageResistance; // 0xb0(0x10)
	struct TArray<float> ExtraLargeEnemyDamageResistanceB; // 0xc0(0x10)
	struct TArray<float> ExtraLargeEnemyDamageResistanceC; // 0xd0(0x10)
	struct TArray<float> ExtraLargeEnemyDamageResistanceD; // 0xe0(0x10)
	struct TArray<float> EnemyDamageResistance; // 0xf0(0x10)
	struct TArray<float> SmallEnemyDamageResistance; // 0x100(0x10)
	struct TArray<float> EnemyDamageModifier; // 0x110(0x10)
	struct TArray<float> EnemyCountModifier; // 0x120(0x10)
	float BossDifficultyScaler; // 0x130(0x04)
	float PointExtractionScaler; // 0x134(0x04)
	struct FRandInterval EncounterDifficulty; // 0x138(0x10)
	struct FRandInterval StationaryDifficulty; // 0x148(0x10)
	float SpecialEncounterModifier; // 0x158(0x04)
	float HazardBonus; // 0x15c(0x04)
	float friendlyFireModifier; // 0x160(0x04)
	char UnknownData_164[0x4]; // 0x164(0x04)
	struct FRandInterval EnemyWaveInterval; // 0x168(0x10)
	struct FRandInterval EnemyNormalWaveInterval; // 0x178(0x10)
	struct FRandInterval EnemyNormalWaveDifficulty; // 0x188(0x10)
	float WaveStartDelayScale; // 0x198(0x04)
	char UnknownData_19C[0x4]; // 0x19c(0x04)
	struct FRandInterval EnemyDiversity; // 0x1a0(0x10)
	struct FRandInterval StationaryEnemyDiversity; // 0x1b0(0x10)
	struct FIRandRange DisruptiveEnemyPoolCount; // 0x1c0(0x08)
	int32_t MinPoolSize; // 0x1c8(0x04)
	char UnknownData_1CC[0x4]; // 0x1cc(0x04)
	struct FVeteranComposition Veterans; // 0x1d0(0x20)
	float SpeedModifier; // 0x1f0(0x04)
	float AttackCooldownModifier; // 0x1f4(0x04)
	float ProjectileSpeedModifier; // 0x1f8(0x04)
	int32_t DifficultyGroup; // 0x1fc(0x04)
	int32_t DifficultyGroupIndex; // 0x200(0x04)
	char UnknownData_204[0x4]; // 0x204(0x04)
	struct TArray<struct UMissionStat*> MissionCompletedStats; // 0x208(0x10)
	bool UseSharedHealthPool; // 0x218(0x01)
	char UnknownData_219[0x3]; // 0x219(0x03)
	float HeathRegenerationMax; // 0x21c(0x04)
	float ReviveHealthRatio; // 0x220(0x04)
	float EliteChanceModifier; // 0x224(0x04)
	float EliteCooldown; // 0x228(0x04)
	int32_t MaxActiveElites; // 0x22c(0x04)

	bool IsUnlocked(struct UObject* WorldContext); // Function FSD.DifficultySetting.IsUnlocked
	float AddHazardBonus(float BaseValue); // Function FSD.DifficultySetting.AddHazardBonus
};

// Class FSD.DiscordWrapper
// Size: 0x1f0 (Inherited: 0x28)
struct UDiscordWrapper : UObject {
	char UnknownData_28[0x10]; // 0x28(0x10)
	struct FDiscordServerInviteData ServerInfo; // 0x38(0x78)
	struct FMulticastInlineDelegate OnResponseSuccessChanged; // 0xb0(0x10)
	bool LastResponseSuccessful; // 0xc0(0x01)
	char UnknownData_C1[0x7]; // 0xc1(0x07)
	struct FMulticastInlineDelegate OnDiscordEoMDataEvent; // 0xc8(0x10)
	char UnknownData_D8[0x30]; // 0xd8(0x30)
	bool UserIn; // 0x108(0x01)
	char UnknownData_109[0x7]; // 0x109(0x07)
	struct FDiscordRewardNotification rewardNotification; // 0x110(0x40)
	int32_t UserInStatus; // 0x150(0x04)
	bool HasEoM; // 0x154(0x01)
	char UnknownData_155[0x3]; // 0x155(0x03)
	struct FDiscordEoMData EoMData; // 0x158(0x20)
	bool IsConnected; // 0x178(0x01)
	char UnknownData_179[0x1]; // 0x179(0x01)
	bool ServerInfoLoaded; // 0x17a(0x01)
	char UnknownData_17B[0x5]; // 0x17b(0x05)
	struct FMulticastInlineDelegate OnDiscordServerInfoLoaded; // 0x180(0x10)
	struct FMulticastInlineDelegate OnDiscordServerCountLoaded; // 0x190(0x10)
	struct FMulticastInlineDelegate OnDiscordUserInServer; // 0x1a0(0x10)
	char UnknownData_1B0[0x40]; // 0x1b0(0x40)

	void RequestUserInServer(); // Function FSD.DiscordWrapper.RequestUserInServer
	void RequestFactionAdjustment(int32_t Faction, bool force); // Function FSD.DiscordWrapper.RequestFactionAdjustment
	void RequestEoMData(); // Function FSD.DiscordWrapper.RequestEoMData
	void RequestDiscordServerInfo(); // Function FSD.DiscordWrapper.RequestDiscordServerInfo
	void RejectInviteSignature(); // Function FSD.DiscordWrapper.RejectInviteSignature
	void IgnoreInviteSignature(); // Function FSD.DiscordWrapper.IgnoreInviteSignature
	struct FString GetAvatarURL(); // Function FSD.DiscordWrapper.GetAvatarURL
	void AdjustFaction(); // Function FSD.DiscordWrapper.AdjustFaction
	void AcceptInviteSignature(); // Function FSD.DiscordWrapper.AcceptInviteSignature
};

// Class FSD.MULE
// Size: 0x390 (Inherited: 0x378)
struct AMULE : ADeepPathfinderCharacter {
	struct UHealthComponent* HealthComponent; // 0x378(0x08)
	struct USimpleObjectInfoComponent* ObjectInfo; // 0x380(0x08)
	bool IsDown; // 0x388(0x01)
	char UnknownData_389[0x7]; // 0x389(0x07)

	void SetIsDown(bool IsDown); // Function FSD.MULE.SetIsDown
	void SetControlledByDropShip(bool Control); // Function FSD.MULE.SetControlledByDropShip
	void OnRep_IsDown(); // Function FSD.MULE.OnRep_IsDown
};

// Class FSD.DonkeyCharacter
// Size: 0x3b0 (Inherited: 0x390)
struct ADonkeyCharacter : AMULE {
	struct UResourceBank* ResourceBank; // 0x390(0x08)
	struct UOutlineComponent* OutlineComponent; // 0x398(0x08)
	struct FMulticastInlineDelegate OnReachedDropShip; // 0x3a0(0x10)

	void SetOpenForDeposit(bool Open); // Function FSD.DonkeyCharacter.SetOpenForDeposit
	void SetGotoDropShip(struct FVector Location); // Function FSD.DonkeyCharacter.SetGotoDropShip
	void EnableButton(); // Function FSD.DonkeyCharacter.EnableButton
};

// Class FSD.RepairableComponent
// Size: 0xf0 (Inherited: 0xb0)
struct URepairableComponent : UActorComponent {
	struct FMulticastInlineDelegate OnFullyRepairedEvent; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnAllResourcesAquiredEvent; // 0xc0(0x10)
	struct FMulticastInlineDelegate OnRepairedEvent; // 0xd0(0x10)
	struct UGemResourceData* RequiresCarriedResource; // 0xe0(0x08)
	int32_t ResourcesRequired; // 0xe8(0x04)
	bool IsFullyRepaired; // 0xec(0x01)
	char UnknownData_ED[0x3]; // 0xed(0x03)

	bool TryRepair(struct APlayerCharacter* User); // Function FSD.RepairableComponent.TryRepair
	void OnRep_ResourcesRequired(); // Function FSD.RepairableComponent.OnRep_ResourcesRequired
	int32_t GetResourcesRequired(); // Function FSD.RepairableComponent.GetResourcesRequired
	void Cheat_Repair(); // Function FSD.RepairableComponent.Cheat_Repair
};

// Class FSD.MiniMule
// Size: 0x3a0 (Inherited: 0x390)
struct AMiniMule : AMULE {
	struct TArray<struct AGem*> LostLegs; // 0x390(0x10)

	void SetLegsVisibleOnScanner(); // Function FSD.MiniMule.SetLegsVisibleOnScanner
	void OnLegsSetVisible(); // Function FSD.MiniMule.OnLegsSetVisible
	struct TArray<struct AGem*> FindLegsInLevelSortedByDistance(); // Function FSD.MiniMule.FindLegsInLevelSortedByDistance
};

// Class FSD.DoubleDrillAggregator
// Size: 0x148 (Inherited: 0x140)
struct UDoubleDrillAggregator : UCapacityBasedItemAggregator {
	char UnknownData_140[0x8]; // 0x140(0x08)
};

// Class FSD.DualAnimatedItem
// Size: 0x370 (Inherited: 0x318)
struct ADualAnimatedItem : AItem {
	struct UAnimInstance* FPAnimInstance; // 0x318(0x08)
	struct UPlayerAnimInstance* TPAnimInstance; // 0x320(0x08)
	struct USkeletalMeshComponent* FPRMesh; // 0x328(0x08)
	struct USkeletalMeshComponent* FPLMesh; // 0x330(0x08)
	struct USkeletalMeshComponent* TPRMesh; // 0x338(0x08)
	struct USkeletalMeshComponent* TPLMesh; // 0x340(0x08)
	struct UAnimMontage* FP_EquipAnimation; // 0x348(0x08)
	struct UAnimMontage* TP_EquipAnimation; // 0x350(0x08)
	float EquipDuration; // 0x358(0x04)
	char UnknownData_35C[0x4]; // 0x35c(0x04)
	struct UItemCharacterAnimationSet* CharacterAnimationSet; // 0x360(0x08)
	char UnknownData_368[0x8]; // 0x368(0x08)

	struct USkeletalMeshComponent* GetRItemMesh(); // Function FSD.DualAnimatedItem.GetRItemMesh
	struct USkeletalMeshComponent* GetLItemMesh(); // Function FSD.DualAnimatedItem.GetLItemMesh
};

// Class FSD.DoubleDrillItem
// Size: 0x4a8 (Inherited: 0x370)
struct ADoubleDrillItem : ADualAnimatedItem {
	char UnknownData_370[0x18]; // 0x370(0x18)
	struct UFirstPersonParticleSystemComponent* FP_Left_DrillParticles; // 0x388(0x08)
	struct UFirstPersonParticleSystemComponent* FP_Right_DrillParticles; // 0x390(0x08)
	struct UDamageComponent* DamageComponent; // 0x398(0x08)
	struct UAudioComponent* AudioComponent; // 0x3a0(0x08)
	struct UDoubleDrillAggregator* Aggregator; // 0x3a8(0x08)
	struct UAnimMontage* FPMineMontage; // 0x3b0(0x08)
	struct UAnimMontage* TPMineMontage; // 0x3b8(0x08)
	struct UAnimMontage* FPOverheat; // 0x3c0(0x08)
	struct UAnimMontage* TPOverheat; // 0x3c8(0x08)
	struct UAnimMontage* FPGunsling; // 0x3d0(0x08)
	struct UAnimMontage* TPGunsling; // 0x3d8(0x08)
	struct FName MiningSpeedAudioParamterName; // 0x3e0(0x08)
	struct UParticleSystem* DrillParticles; // 0x3e8(0x08)
	struct UForceFeedbackEffect* DrillRumble; // 0x3f0(0x08)
	float BlockParticlesScaleFP; // 0x3f8(0x04)
	float BlockParticlesScaleTP; // 0x3fc(0x04)
	enum class EDoubleDrillState State; // 0x400(0x01)
	char UnknownData_401[0x3]; // 0x401(0x03)
	float MovementPenalty; // 0x404(0x04)
	float MiningRate; // 0x408(0x04)
	float HeatReductionPerKill; // 0x40c(0x04)
	struct FVector CarveSize; // 0x410(0x0c)
	float CarveNoise; // 0x41c(0x04)
	float CarverRayCastLength; // 0x420(0x04)
	float CarveTerrainDistanceCheck; // 0x424(0x04)
	float TimeToNextMine; // 0x428(0x04)
	float CurrentDrillSpeed; // 0x42c(0x04)
	float DamageDistance; // 0x430(0x04)
	float DamageRadius; // 0x434(0x04)
	float FriendlyDamageRadius; // 0x438(0x04)
	float DamageRate; // 0x43c(0x04)
	float Damage; // 0x440(0x04)
	float ArmorDamageMultiplier; // 0x444(0x04)
	struct UDamageClass* DamageClass; // 0x448(0x08)
	float friendlyFireModifier; // 0x450(0x04)
	float MaxFuel; // 0x454(0x04)
	float Fuel; // 0x458(0x04)
	float FuelUsePerDig; // 0x45c(0x04)
	float FuelUsePerMelee; // 0x460(0x04)
	float SupplyStatusWeight; // 0x464(0x04)
	struct UDialogDataAsset* ShoutOutOfFuel; // 0x468(0x08)
	struct TArray<struct FHitResult> HitCache; // 0x470(0x10)
	struct TArray<struct FDoubleDrillDamageItem> DamageCache; // 0x480(0x10)
	char UnknownData_490[0x10]; // 0x490(0x10)
	float DrillParticlesDuration; // 0x4a0(0x04)
	bool IsMining; // 0x4a4(0x01)
	bool IsGunslinging; // 0x4a5(0x01)
	char UnknownData_4A6[0x2]; // 0x4a6(0x02)

	void Server_StopMining(); // Function FSD.DoubleDrillItem.Server_StopMining
	void Server_StartMining(); // Function FSD.DoubleDrillItem.Server_StartMining
	void Server_DoDamage(struct TArray<struct FDoubleDrillDamageItem> Targets); // Function FSD.DoubleDrillItem.Server_DoDamage
	void Server_DigBlock(struct FVector_NetQuantize Start, struct FVector_NetQuantize End); // Function FSD.DoubleDrillItem.Server_DigBlock
	void OnTargetKilled(struct AActor* Target, struct UFSDPhysicalMaterial* PhysMat); // Function FSD.DoubleDrillItem.OnTargetKilled
	void OnStopDrilling(); // Function FSD.DoubleDrillItem.OnStopDrilling
	void OnStartDrilling(); // Function FSD.DoubleDrillItem.OnStartDrilling
	void OnRep_SimulatingMining(); // Function FSD.DoubleDrillItem.OnRep_SimulatingMining
	void OnRep_IsGunslinging(); // Function FSD.DoubleDrillItem.OnRep_IsGunslinging
	void OnDrillParticlesTimerElapsed(); // Function FSD.DoubleDrillItem.OnDrillParticlesTimerElapsed
	void Client_Resupply(float percentage); // Function FSD.DoubleDrillItem.Client_Resupply
	void BP_OnDrillDamage(); // Function FSD.DoubleDrillItem.BP_OnDrillDamage
	void All_SimulateDigDebris(struct FVector_NetQuantize Position, int32_t DebrisIndex); // Function FSD.DoubleDrillItem.All_SimulateDigDebris
	void All_SimulateDigBlock(struct FVector_NetQuantize Position, bool spawnParticles, int32_t Material); // Function FSD.DoubleDrillItem.All_SimulateDigBlock
	void All_SimulateDamage(struct TArray<struct FDoubleDrillDamageItem> Targets); // Function FSD.DoubleDrillItem.All_SimulateDamage
};

// Class FSD.DoubleDrillAnimInstance
// Size: 0x280 (Inherited: 0x270)
struct UDoubleDrillAnimInstance : UAnimInstance {
	float DrillSpeed; // 0x268(0x04)
	bool IsMining; // 0x26c(0x01)
	bool IsGunslinging; // 0x26d(0x01)
	struct ADoubleDrillItem* Item; // 0x270(0x08)
	char UnknownData_27E[0x2]; // 0x27e(0x02)
};

// Class FSD.DownedStateComponent
// Size: 0x140 (Inherited: 0xf8)
struct UDownedStateComponent : UCharacterStateComponent {
	struct FDeathIntroSettings Intro; // 0xf8(0x24)
	float DownedHealthLossPerSecond; // 0x11c(0x04)
	float TerrainRemovedFallThreshold; // 0x120(0x04)
	bool DownedBombActive; // 0x124(0x01)
	char UnknownData_125[0x3]; // 0x125(0x03)
	struct UDamageComponent* DownedBombDamage; // 0x128(0x08)
	struct FMulticastInlineDelegate OnEnableDownedBombUIEvent; // 0x130(0x10)

	void TriggerDownedBombDamage(); // Function FSD.DownedStateComponent.TriggerDownedBombDamage
	void Server_TriggerDownedBomb(); // Function FSD.DownedStateComponent.Server_TriggerDownedBomb
	void Receive_TriggerDownedBomb(); // Function FSD.DownedStateComponent.Receive_TriggerDownedBomb
	struct UDamageComponent* CreateDownedBombDamage(struct UDamageComponent* DamageClass); // Function FSD.DownedStateComponent.CreateDownedBombDamage
};

// Class FSD.DrinkableActor
// Size: 0x228 (Inherited: 0x220)
struct ADrinkableActor : AActor {
	struct UDrinkableDataAsset* DrinkableData; // 0x220(0x08)

	void Pickup(struct APlayerCharacter* byCharacter); // Function FSD.DrinkableActor.Pickup
	void OnRep_DrinkableData(); // Function FSD.DrinkableActor.OnRep_DrinkableData
	void Fill(); // Function FSD.DrinkableActor.Fill
};

// Class FSD.DrinkableDataAsset
// Size: 0x218 (Inherited: 0x58)
struct UDrinkableDataAsset : USavableDataAsset {
	struct FText DrinkableName; // 0x58(0x18)
	struct FText DrinkableDescription; // 0x70(0x18)
	int32_t DrinkablePrice; // 0x88(0x04)
	char UnknownData_8C[0x4]; // 0x8c(0x04)
	struct TSoftObjectPtr<struct UTexture2D> DrinkableIcon; // 0x90(0x28)
	int32_t RequiredPlayerRank; // 0xb8(0x04)
	bool ParticipatesInFreeBeerEvent; // 0xbc(0x01)
	enum class EDrinkableAlcoholStrength AlcoholStrength; // 0xbd(0x01)
	char UnknownData_BE[0x2]; // 0xbe(0x02)
	struct UDrinkableDataAsset* SupporterEdition; // 0xc0(0x08)
	bool bPlayFireworks; // 0xc8(0x01)
	char UnknownData_C9[0x7]; // 0xc9(0x07)
	struct UMissionStat* StatConsumed; // 0xd0(0x08)
	struct UMissionStat* StatRoundOrdered; // 0xd8(0x08)
	SoftClassProperty DrinkableActorClass; // 0xe0(0x28)
	SoftClassProperty DrinkableItemClass; // 0x108(0x28)
	struct UDialogDataAsset* OrderShout; // 0x130(0x08)
	struct UDialogDataAsset* OrderCheeringShout; // 0x138(0x08)
	struct UDialogDataAsset* DrinkSaluteShout; // 0x140(0x08)
	struct UTemporaryBuff* buff; // 0x148(0x08)
	SoftClassProperty DrinkEffect; // 0x150(0x28)
	struct TMap<struct UResourceData*, int32_t> UnlockCost; // 0x178(0x50)
	struct TMap<struct UResourceData*, int32_t> PurchaseCost; // 0x1c8(0x50)

	bool TryUnlockSpecialDrinks(struct UObject* WorldContext); // Function FSD.DrinkableDataAsset.TryUnlockSpecialDrinks
	bool TryUnlockDrink(struct UObject* WorldContext); // Function FSD.DrinkableDataAsset.TryUnlockDrink
	bool TryPurchaseDrink(struct UObject* WorldContext); // Function FSD.DrinkableDataAsset.TryPurchaseDrink
	void OnRoundOrdered(struct APlayerCharacter* Character); // Function FSD.DrinkableDataAsset.OnRoundOrdered
	bool MustBeUnlocked(); // Function FSD.DrinkableDataAsset.MustBeUnlocked
	bool IsUnlocked(struct UObject* WorldContext); // Function FSD.DrinkableDataAsset.IsUnlocked
	bool IsDrinkFree(struct UObject* WorldContext); // Function FSD.DrinkableDataAsset.IsDrinkFree
	bool HasSupporterEdition(); // Function FSD.DrinkableDataAsset.HasSupporterEdition
	struct UTexture2D* GetDrinkableIcon(); // Function FSD.DrinkableDataAsset.GetDrinkableIcon
	struct UDrinkableDataAsset* GetDrinkableEdition(struct UObject* WorldContext, struct APlayerController* Player); // Function FSD.DrinkableDataAsset.GetDrinkableEdition
	bool AreSpecialDrinksUnlocked(struct UObject* WorldContext); // Function FSD.DrinkableDataAsset.AreSpecialDrinksUnlocked
};

// Class FSD.DrinkEffectComponent
// Size: 0xc0 (Inherited: 0xb0)
struct UDrinkEffectComponent : UActorComponent {
	char UnknownData_B0[0x8]; // 0xb0(0x08)
	float BeerEffectDurationSeconds; // 0xb8(0x04)
	bool AutoDestroy; // 0xbc(0x01)
	bool EffectIsActive; // 0xbd(0x01)
	char UnknownData_BE[0x2]; // 0xbe(0x02)

	void StopEffect(); // Function FSD.DrinkEffectComponent.StopEffect
	void OnStopEffect(); // Function FSD.DrinkEffectComponent.OnStopEffect
	void OnStartEffect(struct APlayerCharacter* Character); // Function FSD.DrinkEffectComponent.OnStartEffect
	void OnChangedCharacter(struct APlayerCharacter* changedToCharacter, struct UObject* DrinkEffectClass); // Function FSD.DrinkEffectComponent.OnChangedCharacter
};

// Class FSD.DrinkableItem
// Size: 0x370 (Inherited: 0x368)
struct ADrinkableItem : AAnimatedItem {
	struct UDrinkableDataAsset* DrinkableData; // 0x368(0x08)

	void OnRep_DrinkableData(); // Function FSD.DrinkableItem.OnRep_DrinkableData
	void Consume(); // Function FSD.DrinkableItem.Consume
	void ClientConsumed(); // Function FSD.DrinkableItem.ClientConsumed
	bool CheckCanSalute(); // Function FSD.DrinkableItem.CheckCanSalute
};

// Class FSD.DrinkSettings
// Size: 0xb0 (Inherited: 0x30)
struct UDrinkSettings : UDataAsset {
	struct TArray<struct FBarleySpawnItem> BarleySpawns; // 0x30(0x10)
	struct FRandInterval BarleyAmount; // 0x40(0x10)
	struct TMap<struct UResourceData*, int32_t> SpecialBeerUnlockCost; // 0x50(0x50)
	struct TArray<struct UDrinkableDataAsset*> Drinkables; // 0xa0(0x10)

	struct TArray<struct UDrinkableDataAsset*> GetBarDrinkables(struct UObject* WorldContext, bool IncludeDailySpecial, bool includeNotUnlocked, bool includePlayerRankTooLow); // Function FSD.DrinkSettings.GetBarDrinkables
	struct UDrinkableDataAsset* GetBarDailySpecial(struct UObject* WorldContext); // Function FSD.DrinkSettings.GetBarDailySpecial
};

// Class FSD.DroneAbillityStatsComponent
// Size: 0xc0 (Inherited: 0xb0)
struct UDroneAbillityStatsComponent : UActorComponent {
	bool UseOwnArmorDamageMultiplier; // 0xb0(0x01)
	char UnknownData_B1[0xf]; // 0xb1(0x0f)
};

// Class FSD.DroneCharacter
// Size: 0x390 (Inherited: 0x378)
struct ADroneCharacter : ADeepPathfinderCharacter {
	struct UHealthComponent* HealthComponent; // 0x378(0x08)
	struct UOutlineComponent* OutlineComponent; // 0x380(0x08)
	struct USimpleObjectInfoComponent* ObjectInfo; // 0x388(0x08)
};

// Class FSD.DroneDisplayActionComponent
// Size: 0x200 (Inherited: 0x1f0)
struct UDroneDisplayActionComponent : USceneComponent {
	struct UTextRenderComponent* DisplayText; // 0x1f0(0x08)
	char UnknownData_1F8[0x8]; // 0x1f8(0x08)

	void SetMode(enum class EDroneActions droneAction); // Function FSD.DroneDisplayActionComponent.SetMode
};

// Class FSD.DroneFlame
// Size: 0x268 (Inherited: 0x220)
struct ADroneFlame : AActor {
	struct UParticleSystemComponent* FlameParticles; // 0x220(0x08)
	struct UDamageComponent* Damage; // 0x228(0x08)
	char UnknownData_230[0x8]; // 0x230(0x08)
	struct TArray<struct FName> FlameParameterNames; // 0x238(0x10)
	struct UStatusEffect* OnFireStatusEffect; // 0x248(0x08)
	float DamageTickRate; // 0x250(0x04)
	char UnknownData_254[0x4]; // 0x254(0x04)
	float Duration; // 0x258(0x04)
	float FlameDiameter; // 0x25c(0x04)
	float Range; // 0x260(0x04)
	char UnknownData_264[0x4]; // 0x264(0x04)
};

// Class FSD.DroneMiningToolBase
// Size: 0xe8 (Inherited: 0xb0)
struct UDroneMiningToolBase : UActorComponent {
	struct FMulticastInlineDelegate HitSomething; // 0xb0(0x10)
	char UnknownData_C0[0x10]; // 0xc0(0x10)
	float Range; // 0xd0(0x04)
	float SameHitDistance; // 0xd4(0x04)
	float MineRadius; // 0xd8(0x04)
	int32_t MineStrength; // 0xdc(0x04)
	char UnknownData_E0[0x8]; // 0xe0(0x08)

	void StopMining(); // Function FSD.DroneMiningToolBase.StopMining
	void StartMining(); // Function FSD.DroneMiningToolBase.StartMining
	void SpawnEffects(struct UTerrainMaterial* aTerrainMaterial, bool aParialHit, struct FVector_NetQuantize aLocation, struct FVector_NetQuantize aImpactNormal); // Function FSD.DroneMiningToolBase.SpawnEffects
};

// Class FSD.DroneUseComponent
// Size: 0x120 (Inherited: 0xb0)
struct UDroneUseComponent : UActorComponent {
	struct FMulticastInlineDelegate OnUsed; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnBeginUse; // 0xc0(0x10)
	struct FMulticastInlineDelegate OnStopUse; // 0xd0(0x10)
	struct FMulticastInlineDelegate OnProgress; // 0xe0(0x10)
	struct UDialogDataAsset* BoscoLaserpointerShout; // 0xf0(0x08)
	char UnknownData_F8[0xc]; // 0xf8(0x0c)
	struct FWeakObjectPtr<struct USingleUsableComponent> SyncToUsable; // 0x104(0x08)
	float Progress; // 0x10c(0x04)
	float useDuration; // 0x110(0x04)
	char UnknownData_114[0x8]; // 0x114(0x08)
	bool ResetOnFail; // 0x11c(0x01)
	bool canUse; // 0x11d(0x01)
	char UnknownData_11E[0x2]; // 0x11e(0x02)

	void SyncedUsableUserCountChangedResponse(int32_t userCount); // Function FSD.DroneUseComponent.SyncedUsableUserCountChangedResponse
	void SyncedUsableUsedResponse(struct APlayerCharacter* User); // Function FSD.DroneUseComponent.SyncedUsableUsedResponse
	void SyncedUsableBeginUseResponse(struct APlayerCharacter* User); // Function FSD.DroneUseComponent.SyncedUsableBeginUseResponse
	void SetUseDuration(float useDuration); // Function FSD.DroneUseComponent.SetUseDuration
	void SetCanUse(bool canUse); // Function FSD.DroneUseComponent.SetCanUse
	float GetProgress(); // Function FSD.DroneUseComponent.GetProgress
	void EndUse(); // Function FSD.DroneUseComponent.EndUse
	void BeginUse(); // Function FSD.DroneUseComponent.BeginUse
};

// Class FSD.DropPod
// Size: 0x290 (Inherited: 0x220)
struct ADropPod : AActor {
	float DropHeight; // 0x220(0x04)
	struct FVector TargetLocation; // 0x224(0x0c)
	struct UAutoCarverComponent* AutoCarver; // 0x230(0x08)
	struct UCurveFloat* DepartCurve; // 0x238(0x08)
	float CarverRotationSpeed; // 0x240(0x04)
	struct FVector CarverScale; // 0x244(0x0c)
	float DepartureTime; // 0x250(0x04)
	char UnknownData_254[0x4]; // 0x254(0x04)
	struct FVector StartLocation; // 0x258(0x0c)
	enum class EDropPodState State; // 0x264(0x01)
	char UnknownData_265[0x7]; // 0x265(0x07)
	float DrillSpeed; // 0x26c(0x04)
	float FreeFallAcceleration; // 0x270(0x04)
	float FreeFallSpeed; // 0x274(0x04)
	char UnknownData_278[0x18]; // 0x278(0x18)

	void StartDrilling(); // Function FSD.DropPod.StartDrilling
	void PrepForTakeOff(); // Function FSD.DropPod.PrepForTakeOff
	void OnRep_State(); // Function FSD.DropPod.OnRep_State
	void OnPrepForTakeOff(); // Function FSD.DropPod.OnPrepForTakeOff
	void OnDroppodImpact(); // Function FSD.DropPod.OnDroppodImpact
	void OnDrillingStarted(); // Function FSD.DropPod.OnDrillingStarted
	void OnDeparting(); // Function FSD.DropPod.OnDeparting
	struct ADropPod* DropToMission(struct UObject* WorldContextObject, struct ADropPod* podClass, struct FVector Location); // Function FSD.DropPod.DropToMission
	void Depart(); // Function FSD.DropPod.Depart
};

// Class FSD.FSDMiningHead
// Size: 0x298 (Inherited: 0x290)
struct AFSDMiningHead : ADropPod {
	struct UResourceBank* ResourceBank; // 0x290(0x08)
};

// Class FSD.DropToTerrainComponent
// Size: 0xf8 (Inherited: 0xb0)
struct UDropToTerrainComponent : UActorComponent {
	char UnknownData_B0[0xc]; // 0xb0(0x0c)
	float FallVelocity; // 0xbc(0x04)
	float TerrainTraceMaxDistance; // 0xc0(0x04)
	char UnknownData_C4[0x4]; // 0xc4(0x04)
	struct FMulticastInlineDelegate OnFallToTerrainStateChanged; // 0xc8(0x10)
	struct FVector CurrentLocation; // 0xd8(0x0c)
	struct FVector DropTarget; // 0xe4(0x0c)
	bool IsDetecting; // 0xf0(0x01)
	char UnknownData_F1[0x7]; // 0xf1(0x07)

	void StopDropDetection(bool stopFalling); // Function FSD.DropToTerrainComponent.StopDropDetection
	void SetParentPositionOnAll(struct FVector CurrentParentLocation); // Function FSD.DropToTerrainComponent.SetParentPositionOnAll
	void OnTerrainRemoved(); // Function FSD.DropToTerrainComponent.OnTerrainRemoved
	void BeginDropDetection(); // Function FSD.DropToTerrainComponent.BeginDropDetection
};

// Class FSD.DualWieldWeapon
// Size: 0x6c8 (Inherited: 0x690)
struct ADualWieldWeapon : AAmmoDrivenWeapon {
	char UnknownData_690[0x8]; // 0x690(0x08)
	struct UFirstPersonSkeletalMeshComponent* FPMeshLeft; // 0x698(0x08)
	struct USkeletalMeshComponent* TPMeshLeft; // 0x6a0(0x08)
	struct UAnimMontage* WPN_Left_Reload; // 0x6a8(0x08)
	struct UAnimMontage* WPN_Left_TP_Reload; // 0x6b0(0x08)
	struct UFXSystemAsset* CasingParticlesLeft; // 0x6b8(0x08)
	struct FName MuzzleLeft; // 0x6c0(0x08)
};

// Class FSD.DualWieldAnimInstance
// Size: 0x270 (Inherited: 0x270)
struct UDualWieldAnimInstance : UAnimInstance {
};

// Class FSD.DualMachinePistols
// Size: 0x6d8 (Inherited: 0x6c8)
struct ADualMachinePistols : ADualWieldWeapon {
	struct UStatusEffect* EmptyClipStatusEffect; // 0x6c8(0x08)
	char UnknownData_6D0[0x8]; // 0x6d0(0x08)

	void Server_TriggerStatusEffect(); // Function FSD.DualMachinePistols.Server_TriggerStatusEffect
};

// Class FSD.DynamicReverbComponent
// Size: 0x100 (Inherited: 0xb0)
struct UDynamicReverbComponent : UActorComponent {
	float LargeCaveValue; // 0xb0(0x04)
	float MediumCaveValue; // 0xb4(0x04)
	float SmallCaveValue; // 0xb8(0x04)
	float FadeTime; // 0xbc(0x04)
	float Priority; // 0xc0(0x04)
	char UnknownData_C4[0x3c]; // 0xc4(0x3c)

	void TimerTriggered(); // Function FSD.DynamicReverbComponent.TimerTriggered
};

// Class FSD.ElectroBeam
// Size: 0x2b8 (Inherited: 0x220)
struct AElectroBeam : AActor {
	struct UCapsuleComponent* Collider; // 0x220(0x08)
	struct TArray<struct AActor*> ParentPlants; // 0x228(0x10)
	struct FVector LocationOffset; // 0x238(0x0c)
	struct FVector_NetQuantize SourceLocation; // 0x244(0x0c)
	struct FVector_NetQuantize TargetLocation; // 0x250(0x0c)
	char UnknownData_25C[0x4]; // 0x25c(0x04)
	struct USceneComponent* DelaySource; // 0x260(0x08)
	struct USceneComponent* DelayTarget; // 0x268(0x08)
	struct UParticleSystemComponent* BeamEffect; // 0x270(0x08)
	struct UAudioComponent* ZappSound; // 0x278(0x08)
	struct TArray<struct UStatusEffect*> StatusEffectsToApply; // 0x280(0x10)
	float MaxLitTime; // 0x290(0x04)
	float MinLitTime; // 0x294(0x04)
	float MaxUnlitTime; // 0x298(0x04)
	float MinUnlitTime; // 0x29c(0x04)
	bool ShouldFlicker; // 0x2a0(0x01)
	bool IsLit; // 0x2a1(0x01)
	char UnknownData_2A2[0x16]; // 0x2a2(0x16)

	void SetTarget(struct USceneComponent* TargetPoint); // Function FSD.ElectroBeam.SetTarget
	void SetSource(struct USceneComponent* SourcePoint); // Function FSD.ElectroBeam.SetSource
	void SetParents(struct AActor* firstParent, struct AActor* secondParent); // Function FSD.ElectroBeam.SetParents
	void RecalculateBeam(); // Function FSD.ElectroBeam.RecalculateBeam
	void OnRep_TargetLocation(); // Function FSD.ElectroBeam.OnRep_TargetLocation
	void OnRep_SourceLocation(); // Function FSD.ElectroBeam.OnRep_SourceLocation
	void OnRep_Flag(); // Function FSD.ElectroBeam.OnRep_Flag
	void OnParentTwoDeath(struct UHealthComponentBase* HealthComponent); // Function FSD.ElectroBeam.OnParentTwoDeath
	void OnParentOneDeath(struct UHealthComponentBase* HealthComponent); // Function FSD.ElectroBeam.OnParentOneDeath
	struct UParticleSystemComponent* GetParticleEffect(); // Function FSD.ElectroBeam.GetParticleEffect
	struct UCapsuleComponent* GetCollider(); // Function FSD.ElectroBeam.GetCollider
	struct UAudioComponent* GetAudio(); // Function FSD.ElectroBeam.GetAudio
	void DelayedSetTarget(struct USceneComponent* TargetPoint); // Function FSD.ElectroBeam.DelayedSetTarget
	void DelayedSetSource(struct USceneComponent* SourcePoint); // Function FSD.ElectroBeam.DelayedSetSource
	void DeactivateCollisionAndEffect(); // Function FSD.ElectroBeam.DeactivateCollisionAndEffect
};

// Class FSD.SentryElectroBeam
// Size: 0x2c8 (Inherited: 0x2b8)
struct ASentryElectroBeam : AElectroBeam {
	struct TArray<struct ARedeployableSentryGun*> Sentries; // 0x2b8(0x10)
};

// Class FSD.ElevatorPlant
// Size: 0x2f0 (Inherited: 0x220)
struct AElevatorPlant : AActor {
	struct FMulticastInlineDelegate OnStartTimelineEvent; // 0x220(0x10)
	struct FMulticastInlineDelegate COnStateChangedEvent; // 0x230(0x10)
	struct UAudioComponent* MovingSoundComponent; // 0x240(0x08)
	struct USoundCue* GrabSound; // 0x248(0x08)
	struct FVector RestPositionOffset; // 0x250(0x0c)
	struct FVector RelativeRestLocation; // 0x25c(0x0c)
	struct FVector RelativeDestinationLocation; // 0x268(0x0c)
	struct FVector BaseTangentDirectionOffset; // 0x274(0x0c)
	struct FVector LeafTangentDirectionOffset; // 0x280(0x0c)
	struct FVector LeafLocationNoise; // 0x28c(0x0c)
	struct FRotator LeafNoiseRotator; // 0x298(0x0c)
	float BaseTangentLength; // 0x2a4(0x04)
	struct USplineMeshComponent* CSplineMesh; // 0x2a8(0x08)
	struct USceneComponent* CVineBase; // 0x2b0(0x08)
	struct USceneComponent* CVineLeaf; // 0x2b8(0x08)
	char UnknownData_2C0[0x10]; // 0x2c0(0x10)
	float InitialBaseTangentLength; // 0x2d0(0x04)
	float LeafLocationNoiseSize; // 0x2d4(0x04)
	float VineMovementAlpha; // 0x2d8(0x04)
	bool IsMoving; // 0x2dc(0x01)
	bool IsOpen; // 0x2dd(0x01)
	bool Extend; // 0x2de(0x01)
	char UnknownData_2DF[0x1]; // 0x2df(0x01)
	struct UCurveFloat* DipOffsetCurve; // 0x2e0(0x08)
	struct UCurveFloat* LocationLerpCurve; // 0x2e8(0x08)

	void SetLeafNoiseRotator(struct FRotator aRotator); // Function FSD.ElevatorPlant.SetLeafNoiseRotator
	void SetLeafLocationNoise(struct FVector aVector); // Function FSD.ElevatorPlant.SetLeafLocationNoise
	void SetIsOpen(bool aValue); // Function FSD.ElevatorPlant.SetIsOpen
	void SetIsExtended(bool aValue); // Function FSD.ElevatorPlant.SetIsExtended
	void SetBaseTangentLength(float Value); // Function FSD.ElevatorPlant.SetBaseTangentLength
	void SetBaseTangentDirectionOffset(struct FVector aVector); // Function FSD.ElevatorPlant.SetBaseTangentDirectionOffset
	void OnRep_RelavtiveDestinationLocation(); // Function FSD.ElevatorPlant.OnRep_RelavtiveDestinationLocation
	void OnRep_Open(); // Function FSD.ElevatorPlant.OnRep_Open
	void OnMatchStarted(); // Function FSD.ElevatorPlant.OnMatchStarted
	void MoreTick(struct FVector DipOffset, float aValue); // Function FSD.ElevatorPlant.MoreTick
	float GetVineMovementAlpha(); // Function FSD.ElevatorPlant.GetVineMovementAlpha
	struct FVector GetRelativeRestLocation(); // Function FSD.ElevatorPlant.GetRelativeRestLocation
	struct FVector GetRelativeDestinationLocation(); // Function FSD.ElevatorPlant.GetRelativeDestinationLocation
	float GetLeafLocationNoiseSize(); // Function FSD.ElevatorPlant.GetLeafLocationNoiseSize
	bool GetIsMoving(); // Function FSD.ElevatorPlant.GetIsMoving
	bool GetIsExtended(); // Function FSD.ElevatorPlant.GetIsExtended
	float GetInitialTangentLenth(); // Function FSD.ElevatorPlant.GetInitialTangentLenth
};

// Class FSD.EliminationObjective
// Size: 0x1f0 (Inherited: 0x150)
struct UEliminationObjective : UObjective {
	int32_t ObjectCount; // 0x150(0x04)
	char UnknownData_154[0x4]; // 0x154(0x04)
	struct UDebrisPositioning* Positioning; // 0x158(0x08)
	struct TArray<int32_t> ExcludeRoomIDs; // 0x160(0x10)
	SoftClassProperty ObjectToSpawn; // 0x170(0x28)
	struct UCaveInfluencer* CaveInfluencer; // 0x198(0x08)
	float DebrisRadius; // 0x1a0(0x04)
	char UnknownData_1A4[0x4]; // 0x1a4(0x04)
	struct TArray<struct UDebrisBase*> ObjectDebris; // 0x1a8(0x10)
	int32_t EnemiesKilled; // 0x1b8(0x04)
	int32_t EnemiesToKill; // 0x1bc(0x04)
	struct TArray<struct FEliminationDescriptors> TargetDescriptors; // 0x1c0(0x10)
	struct TArray<struct FEliminationDescriptors> TargetQueue; // 0x1d0(0x10)
	struct TArray<struct FEliminationTarget> ActiveEliminationTargets; // 0x1e0(0x10)

	void RegisterEliminationTargets(struct TArray<struct AFSDPawn*> Targets); // Function FSD.EliminationObjective.RegisterEliminationTargets
	void ReceiveTargetSpawned(); // Function FSD.EliminationObjective.ReceiveTargetSpawned
	void ReceiveTargetKilled(); // Function FSD.EliminationObjective.ReceiveTargetKilled
	void OnTargetKilled(struct UHealthComponentBase* Health); // Function FSD.EliminationObjective.OnTargetKilled
	void OnRep_EnemiesToKill(int32_t prevAmount); // Function FSD.EliminationObjective.OnRep_EnemiesToKill
	void OnRep_EnemiesKilled(int32_t prevAmount); // Function FSD.EliminationObjective.OnRep_EnemiesKilled
	struct TArray<struct UEnemyDescriptor*> GetNextTargetInQueue(); // Function FSD.EliminationObjective.GetNextTargetInQueue
};

// Class FSD.EncounterActor
// Size: 0x220 (Inherited: 0x220)
struct AEncounterActor : AActor {

	void Receive_EncounterHasSpawned(struct APawn* spawnedPawn); // Function FSD.EncounterActor.Receive_EncounterHasSpawned
};

// Class FSD.EncounterManager
// Size: 0x110 (Inherited: 0xb0)
struct UEncounterManager : UActorComponent {
	float SpawnDistanceFromRoomBounds; // 0xb0(0x04)
	char UnknownData_B4[0x4]; // 0xb4(0x04)
	struct TArray<struct FEncounterManagerItem> Encounters; // 0xb8(0x10)
	struct AProceduralSetup* ProceduralSetup; // 0xc8(0x08)
	struct UEnemySpawnManager* SpawnManager; // 0xd0(0x08)
	struct TArray<struct UEnemyDescriptor*> EnemyPool; // 0xd8(0x10)
	struct TArray<struct UEnemyDescriptor*> EncounterPool; // 0xe8(0x10)
	struct TArray<struct UCritterDescriptor*> CritterPool; // 0xf8(0x10)
	char UnknownData_108[0x8]; // 0x108(0x08)

	void ShowSpawnLocations(); // Function FSD.EncounterManager.ShowSpawnLocations
	struct TArray<struct UEnemyDescriptor*> GetEnemyPool(); // Function FSD.EncounterManager.GetEnemyPool
	struct TArray<struct UEnemyDescriptor*> GetEncounterPool(); // Function FSD.EncounterManager.GetEncounterPool
	struct TArray<struct UCritterDescriptor*> GetCritterPool(); // Function FSD.EncounterManager.GetCritterPool
};

// Class FSD.EncounterSettings
// Size: 0x160 (Inherited: 0x30)
struct UEncounterSettings : UDataAsset {
	struct FIRandRange StationaryEnemyCount; // 0x30(0x08)
	struct TArray<struct UEnemyDescriptor*> CommonEnemies; // 0x38(0x10)
	struct TArray<struct UEnemyDescriptor*> SpecialEnemies; // 0x48(0x10)
	struct TArray<struct UEnemyDescriptor*> DisruptiveEnemies; // 0x58(0x10)
	struct TArray<struct UEnemyDescriptor*> StationaryEnemies; // 0x68(0x10)
	struct TArray<struct UCritterDescriptor*> CommonCritters; // 0x78(0x10)
	struct TArray<struct FEncounterRareCritterItem> RareCritters; // 0x88(0x10)
	struct TArray<struct FEncounterSpecialItem> SpecialEncounters; // 0x98(0x10)
	float RequiredDifficultyPerDiversity; // 0xa8(0x04)
	float GlobalDifficultyScale; // 0xac(0x04)
	struct FRandInterval EncounterDifficulty; // 0xb0(0x10)
	struct FRandInterval StationaryDifficulty; // 0xc0(0x10)
	struct FRandRange CritterSpawnDifficulty; // 0xd0(0x08)
	struct FGameplayTag SmallRoomTag; // 0xd8(0x08)
	struct FGameplayTag MediumRoomTag; // 0xe0(0x08)
	struct FGameplayTag LargeRoomTag; // 0xe8(0x08)
	float SmallRoomDifficultyModifier; // 0xf0(0x04)
	float MediumRoomDifficultyModifier; // 0xf4(0x04)
	float LargeRoomDifficultyModifier; // 0xf8(0x04)
	char UnknownData_FC[0x4]; // 0xfc(0x04)
	struct TMap<struct UEnemyDescriptor*, struct FEliteEnemyEntry> HeroEnemies; // 0x100(0x50)
	struct FRandInterval HeroEnemySpawn; // 0x150(0x10)
};

// Class FSD.EnemyFamily
// Size: 0x50 (Inherited: 0x30)
struct UEnemyFamily : UDataAsset {
	struct UTexture2D* Icon; // 0x30(0x08)
	struct FText Name; // 0x38(0x18)
};

// Class FSD.ObjectInfoComponent
// Size: 0xb0 (Inherited: 0xb0)
struct UObjectInfoComponent : UActorComponent {

	struct UDialogDataAsset* GetLookAtShout(struct UPrimitiveComponent* TargetComponent); // Function FSD.ObjectInfoComponent.GetLookAtShout
	bool GetIsPingableByLaserpointer(struct UPrimitiveComponent* TargetComponent); // Function FSD.ObjectInfoComponent.GetIsPingableByLaserpointer
	struct FText GetInGameName(struct UPrimitiveComponent* TargetComponent); // Function FSD.ObjectInfoComponent.GetInGameName
	struct UTexture2D* GetInGameIcon(struct UPrimitiveComponent* TargetComponent); // Function FSD.ObjectInfoComponent.GetInGameIcon
	struct FText GetInGameDescription(struct UPrimitiveComponent* TargetComponent); // Function FSD.ObjectInfoComponent.GetInGameDescription
	struct UActorContextWidget* GetContextWidget(struct APlayerController* InPlayerController); // Function FSD.ObjectInfoComponent.GetContextWidget
};

// Class FSD.SimpleObjectInfoComponent
// Size: 0x158 (Inherited: 0xb0)
struct USimpleObjectInfoComponent : UObjectInfoComponent {
	struct FText InGameName; // 0xb0(0x18)
	struct FText InGameDescription; // 0xc8(0x18)
	struct UDialogDataAsset* LookAtShout; // 0xe0(0x08)
	struct UTexture2D* Icon; // 0xe8(0x08)
	bool bIsPingableByLaserpointer; // 0xf0(0x01)
	char UnknownData_F1[0x7]; // 0xf1(0x07)
	struct UActorContextWidget* ContextWidgetClass; // 0xf8(0x08)
	struct TMap<struct FWeakObjectPtr<struct USceneComponent>, struct FSimpleObjectInfoData> ComponentMap; // 0x100(0x50)
	struct UActorContextWidget* ContextWidget; // 0x150(0x08)

	void SetInGameName(struct FString GameName); // Function FSD.SimpleObjectInfoComponent.SetInGameName
	void SetInGameDescription(struct FString GameDescription); // Function FSD.SimpleObjectInfoComponent.SetInGameDescription
	void SetContextWidget(struct UActorContextWidget* InContextWidget); // Function FSD.SimpleObjectInfoComponent.SetContextWidget
	void AddComponentObjectInfo(struct USceneComponent* TargetComponent, struct FSimpleObjectInfoData Data); // Function FSD.SimpleObjectInfoComponent.AddComponentObjectInfo
};

// Class FSD.EnemyComponent
// Size: 0x190 (Inherited: 0x158)
struct UEnemyComponent : USimpleObjectInfoComponent {
	struct UEnemyFamily* Family; // 0x158(0x08)
	struct UDialogDataAsset* KillShout; // 0x160(0x08)
	struct UEnemyID* EnemyID; // 0x168(0x08)
	struct FString mixerName; // 0x170(0x10)
	struct FMulticastInlineDelegate OnMixerNameChange; // 0x180(0x10)

	struct UEnemyID* GetID(); // Function FSD.EnemyComponent.GetID
	struct FText GetFamilyName(); // Function FSD.EnemyComponent.GetFamilyName
	struct UTexture2D* GetFamilyIcon(); // Function FSD.EnemyComponent.GetFamilyIcon
};

// Class FSD.TestAnimInstance
// Size: 0x990 (Inherited: 0x270)
struct UTestAnimInstance : UAnimInstance {
	struct FTestAnimInstanceProxy AnimInstanceProxy; // 0x270(0x700)
	float WalkCycleSpeed; // 0x970(0x04)
	float StartMovingSpeed; // 0x974(0x04)
	float StopMovingSpeed; // 0x978(0x04)
	float WalkCycleMinRate; // 0x97c(0x04)
	float MeshScale; // 0x980(0x04)
	char UnknownData_984[0xc]; // 0x984(0x0c)
};

// Class FSD.JellyFishAnimInstance
// Size: 0x2c0 (Inherited: 0x2c0)
struct UJellyFishAnimInstance : UEnemyAnimInstance {
	float HorizontalAngle; // 0x2b8(0x04)
	float VerticalSpeed; // 0x2bc(0x04)
};

// Class FSD.GliderBeastAnimInstance
// Size: 0x2f0 (Inherited: 0x2c0)
struct UGliderBeastAnimInstance : UEnemyAnimInstance {
	float SyncAnimLength; // 0x2b8(0x04)
	struct FGliderAnimSync AnimSync; // 0x2bc(0x20)
	bool IsFrozen; // 0x2dc(0x01)
	char UnknownData_2E5[0xb]; // 0x2e5(0x0b)
};

// Class FSD.EnemyAttacker
// Size: 0x28 (Inherited: 0x28)
struct UEnemyAttacker : UInterface {

	float GetAttackDamageModifier(); // Function FSD.EnemyAttacker.GetAttackDamageModifier
};

// Class FSD.EnemyControlStateComponent
// Size: 0x270 (Inherited: 0xf8)
struct UEnemyControlStateComponent : UCharacterStateComponent {
	bool UseThirdPersonCam; // 0xf8(0x01)
	char UnknownData_F9[0x7]; // 0xf9(0x07)
	struct FControlEnemyState StateData; // 0x100(0x60)
	char UnknownData_160[0x8]; // 0x160(0x08)
	enum class EEnemyControlState ControlState; // 0x168(0x01)
	char UnknownData_169[0x37]; // 0x169(0x37)
	struct FQuat AngularVelocity; // 0x1a0(0x10)
	struct FQuat ControlRotation; // 0x1b0(0x10)
	char UnknownData_1C0[0xb0]; // 0x1c0(0xb0)

	void ServerExit(); // Function FSD.EnemyControlStateComponent.ServerExit
	void OnRep_StateData(struct FControlEnemyState oldState); // Function FSD.EnemyControlStateComponent.OnRep_StateData
	void OnRep_ControlState(enum class EEnemyControlState oldState); // Function FSD.EnemyControlStateComponent.OnRep_ControlState
	void OnEnemyCrashMontageEnded(struct UAnimMontage* Montage, bool interrupted); // Function FSD.EnemyControlStateComponent.OnEnemyCrashMontageEnded
	void OnControllingEnemyAttached(); // Function FSD.EnemyControlStateComponent.OnControllingEnemyAttached
	void OnControllingEnemy(bool IsControlling); // Function FSD.EnemyControlStateComponent.OnControllingEnemy
	void JumpPressed(); // Function FSD.EnemyControlStateComponent.JumpPressed
	struct UAIPlayerControlComponent* GetAiPlayerControlComponent(); // Function FSD.EnemyControlStateComponent.GetAiPlayerControlComponent
};

// Class FSD.EnemyDescriptor
// Size: 0x218 (Inherited: 0x30)
struct UEnemyDescriptor : UDataAsset {
	struct UEnemyID* EnemyID; // 0x30(0x08)
	SoftClassProperty EnemyClass; // 0x38(0x28)
	enum class EVeteranScaling VeteranScaling; // 0x60(0x01)
	char UnknownData_61[0x7]; // 0x61(0x07)
	struct TArray<struct UEnemyDescriptor*> VeteranClasses; // 0x68(0x10)
	struct TMap<struct UBiome*, SoftClassProperty> BiomeEnemyClassOverrides; // 0x78(0x50)
	SoftClassProperty EliteEnemyClass; // 0xc8(0x28)
	struct TSet<struct UMissionTemplate*> BannedMissionTypes; // 0xf0(0x50)
	enum class EEnemySignificance EnemySignificance; // 0x140(0x01)
	char UnknownData_141[0x3]; // 0x141(0x03)
	struct FVector SpawnOffset; // 0x144(0x0c)
	bool UsesSpawnEffects; // 0x150(0x01)
	char UnknownData_151[0x3]; // 0x151(0x03)
	enum class ECreatureSize CreatureSize; // 0x154(0x04)
	struct UDebrisPositioning* Positioning; // 0x158(0x08)
	int32_t PlacementCategories; // 0x160(0x04)
	char UnknownData_164[0x4]; // 0x164(0x04)
	struct UCaveInfluencer* CaveInfluencer; // 0x168(0x08)
	struct TArray<struct FEnemyDebris> Debris; // 0x170(0x10)
	float InfluencerRange; // 0x180(0x04)
	char UnknownData_184[0x4]; // 0x184(0x04)
	struct AActor* PlacementCarver; // 0x188(0x08)
	enum class DeepPathFinderType PathfinderType; // 0x190(0x01)
	char UnknownData_191[0x7]; // 0x191(0x07)
	struct FGameplayTagQuery PlacementRoomQuery; // 0x198(0x48)
	float SpawnSpread; // 0x1e0(0x04)
	int32_t IdealSpawnSize; // 0x1e4(0x04)
	bool CanBeUsedForConstantPressure; // 0x1e8(0x01)
	bool CanBeUsedInEncounters; // 0x1e9(0x01)
	char UnknownData_1EA[0x2]; // 0x1ea(0x02)
	float DifficultyRating; // 0x1ec(0x04)
	int32_t MinSpawnCount; // 0x1f0(0x04)
	int32_t MaxSpawnCount; // 0x1f4(0x04)
	float Rarity; // 0x1f8(0x04)
	float SpawnAmountModifier; // 0x1fc(0x04)
	int32_t RequiredMainCampaignProgress; // 0x200(0x04)
	bool UsesSpawnRarityModifiers; // 0x204(0x01)
	char UnknownData_205[0x3]; // 0x205(0x03)
	struct TArray<struct FSpawnRarityItem> SpawnRarityModifiers; // 0x208(0x10)

	struct APawn* GetEnemyClass(struct UBiome* Biome, bool isElite); // Function FSD.EnemyDescriptor.GetEnemyClass
};

// Class FSD.BaseCritterDescriptor
// Size: 0xb8 (Inherited: 0x30)
struct UBaseCritterDescriptor : UDataAsset {
	SoftClassProperty CritterClass; // 0x30(0x28)
	struct TMap<struct UBiome*, SoftClassProperty> BiomeClassOverrides; // 0x58(0x50)
	struct UDebrisPositioning* Positioning; // 0xa8(0x08)
	enum class DeepPathFinderType PathfinderType; // 0xb0(0x01)
	char UnknownData_B1[0x7]; // 0xb1(0x07)
};

// Class FSD.CritterDescriptor
// Size: 0xd0 (Inherited: 0xb8)
struct UCritterDescriptor : UBaseCritterDescriptor {
	struct FIRandRange SpawnAmountPerRoom; // 0xb8(0x08)
	float SpawnChancePerRoom; // 0xc0(0x04)
	struct FIRandRange SpawnAmountPerLevel; // 0xc4(0x08)
	char UnknownData_CC[0x4]; // 0xcc(0x04)
};

// Class FSD.RareCritterDescriptor
// Size: 0xc0 (Inherited: 0xb8)
struct URareCritterDescriptor : UBaseCritterDescriptor {
	float Rarity; // 0xb8(0x04)
	char UnknownData_BC[0x4]; // 0xbc(0x04)
};

// Class FSD.EnemyMinersManualData
// Size: 0x180 (Inherited: 0x30)
struct UEnemyMinersManualData : UDataAsset {
	struct UEnemyID* EnemyID; // 0x30(0x08)
	struct FText Name; // 0x38(0x18)
	struct FText RichDescription; // 0x50(0x18)
	struct TArray<struct FText> GameplayTips; // 0x68(0x10)
	enum class EEnemyFamily Family; // 0x78(0x01)
	enum class EEnemyType EnemyType; // 0x79(0x01)
	char UnknownData_7A[0x6]; // 0x7a(0x06)
	struct TArray<struct FEnemyAttackDescription> AttackType; // 0x80(0x10)
	struct TArray<struct FEnemyAttackDescription> SpecialAttacks; // 0x90(0x10)
	struct TArray<struct UAnimSequenceBase*> AttackAnimations; // 0xa0(0x10)
	enum class EArmorType ArmorType; // 0xb0(0x01)
	char UnknownData_B1[0x7]; // 0xb1(0x07)
	struct FText Armor; // 0xb8(0x18)
	struct FText Weakpoint; // 0xd0(0x18)
	struct FEnemyMinersManualStats EnemyStats; // 0xe8(0x0c)
	char UnknownData_F4[0x4]; // 0xf4(0x04)
	struct TArray<enum class EDamageType> Resistances; // 0xf8(0x10)
	struct TArray<enum class EDamageType> Weaknesses; // 0x108(0x10)
	struct TArray<struct FText> LoreInfo; // 0x118(0x10)
	bool AlwaysUnlocked; // 0x128(0x01)
	char UnknownData_129[0x3]; // 0x129(0x03)
	int32_t InfoUnlockSpeed; // 0x12c(0x04)
	struct TSoftObjectPtr<struct UTexture2D> EnemyIcon; // 0x130(0x28)
	SoftClassProperty PreviewActor; // 0x158(0x28)

	struct UTexture2D* GetEnemyIcon(); // Function FSD.EnemyMinersManualData.GetEnemyIcon
};

// Class FSD.EnemyDrone
// Size: 0x398 (Inherited: 0x398)
struct AEnemyDrone : AEnemyDeepPathfinderCharacter {
};

// Class FSD.HealthComponentBase
// Size: 0x148 (Inherited: 0xb0)
struct UHealthComponentBase : UActorComponent {
	char UnknownData_B0[0x8]; // 0xb0(0x08)
	struct FMulticastInlineDelegate OnHealthChanged; // 0xb8(0x10)
	struct FMulticastInlineDelegate OnDamageHealed; // 0xc8(0x10)
	struct FMulticastInlineDelegate OnDamageTaken; // 0xd8(0x10)
	struct FMulticastInlineDelegate OnHit; // 0xe8(0x10)
	struct FMulticastInlineDelegate OnBodypartHit; // 0xf8(0x10)
	struct FMulticastInlineDelegate OnDeath; // 0x108(0x10)
	struct FMulticastInlineDelegate OnRadialDamage; // 0x118(0x10)
	struct FMulticastInlineDelegate OnCanTakeDamageChanged; // 0x128(0x10)
	bool ShowLaserPointMarkerWhenDead; // 0x138(0x01)
	char UnknownData_139[0xf]; // 0x139(0x0f)

	float TakeRadialDamage(float damageAmount, struct FVector BlastCenter, float BlastRadius, float MaxDamageRadius, float MinDamagePct, struct AController* EventInstigator, struct AActor* DamageCauser, struct UPrimitiveComponent* HitComponent, struct UDamageClass* DamageClass); // Function FSD.HealthComponentBase.TakeRadialDamage
	void TakeDamageSimple(float damageAmount, struct AActor* DamageCauser, struct UDamageClass* DamageClass); // Function FSD.HealthComponentBase.TakeDamageSimple
	void SetHealthDirectly(float newHealthValue); // Function FSD.HealthComponentBase.SetHealthDirectly
	void SetCanTakeDamage(bool canTakeDamage); // Function FSD.HealthComponentBase.SetCanTakeDamage
	void Kill(struct AActor* DamageCauser); // Function FSD.HealthComponentBase.Kill
	bool IsDead(); // Function FSD.HealthComponentBase.IsDead
	bool IsAlive(); // Function FSD.HealthComponentBase.IsAlive
	float Heal(float amount); // Function FSD.HealthComponentBase.Heal
	bool GetShowHealthBar(); // Function FSD.HealthComponentBase.GetShowHealthBar
	float GetHealthPct(); // Function FSD.HealthComponentBase.GetHealthPct
	struct TScriptInterface<None> GetHealthComponentForCollider(struct UPrimitiveComponent* Primitive); // Function FSD.HealthComponentBase.GetHealthComponentForCollider
	struct FVector GetHealthBarWorldOffset(); // Function FSD.HealthComponentBase.GetHealthBarWorldOffset
	float GetHealth(); // Function FSD.HealthComponentBase.GetHealth
	struct UParticleSystem* GetGenericImpactParticles(); // Function FSD.HealthComponentBase.GetGenericImpactParticles
	bool GetCanTakeDamage(); // Function FSD.HealthComponentBase.GetCanTakeDamage
	bool CanTakeDamageFrom(struct UDamageClass* DamageClass); // Function FSD.HealthComponentBase.CanTakeDamageFrom
	void CanTakeDamageDelegate__DelegateSignature(bool OutCanTakeDamage); // DelegateFunction FSD.HealthComponentBase.CanTakeDamageDelegate__DelegateSignature
};

// Class FSD.HealthComponent
// Size: 0x248 (Inherited: 0x148)
struct UHealthComponent : UHealthComponentBase {
	struct FMulticastInlineDelegate OnArmorChanged; // 0x148(0x10)
	struct FMulticastInlineDelegate OnArmorDamaged; // 0x158(0x10)
	struct FMulticastInlineDelegate OnArmorHealed; // 0x168(0x10)
	struct FMulticastInlineDelegate OnDeathDetailed; // 0x178(0x10)
	struct FMulticastInlineDelegate OnNewHealthSegment; // 0x188(0x10)
	float Damage; // 0x198(0x04)
	char UnknownData_19C[0x4]; // 0x19c(0x04)
	struct TArray<float> HealthSegmentSizes; // 0x1a0(0x10)
	bool CanDamageThroughSegments; // 0x1b0(0x01)
	char UnknownData_1B1[0xb]; // 0x1b1(0x0b)
	bool SubHeathComponentsMustDieFirst; // 0x1bc(0x01)
	char UnknownData_1BD[0x3]; // 0x1bd(0x03)
	struct TArray<struct USubHealthComponent*> SubHealthComponents; // 0x1c0(0x10)
	bool InvulnerableToNonDefinedResistances; // 0x1d0(0x01)
	char UnknownData_1D1[0x7]; // 0x1d1(0x07)
	struct TMap<struct UPawnStat*, float> Resistances; // 0x1d8(0x50)
	bool AffectedByGlobalWeakpointDamageMultiplier; // 0x228(0x01)
	bool UseDormancy; // 0x229(0x01)
	char UnknownData_22A[0x6]; // 0x22a(0x06)
	struct UPawnStatsComponent* PawnStats; // 0x230(0x08)
	char UnknownData_238[0x10]; // 0x238(0x10)

	void ToggleCanTakeDamage(); // Function FSD.HealthComponent.ToggleCanTakeDamage
	void Resupply(float percentage); // Function FSD.HealthComponent.Resupply
	void OnRep_Damage(float oldDamage); // Function FSD.HealthComponent.OnRep_Damage
	void HealArmor(float amount); // Function FSD.HealthComponent.HealArmor
	bool HasArmor(); // Function FSD.HealthComponent.HasArmor
	float GetMaxArmor(); // Function FSD.HealthComponent.GetMaxArmor
	enum class EHealthbarType GetHealthbarType(); // Function FSD.HealthComponent.GetHealthbarType
	void GetCurrentHealthSegment(int32_t Segment, float segmentHealth, float segmentHealthPercent); // Function FSD.HealthComponent.GetCurrentHealthSegment
	float GetArmorPct(); // Function FSD.HealthComponent.GetArmorPct
	float GetArmor(); // Function FSD.HealthComponent.GetArmor
	void Client_ReceivedHit(float amount, struct UDamageClass* DamageClass, struct AActor* DamageCauser, bool anyHealthLost); // Function FSD.HealthComponent.Client_ReceivedHit
};

// Class FSD.EnemyHealthComponent
// Size: 0x288 (Inherited: 0x248)
struct UEnemyHealthComponent : UHealthComponent {
	struct FVector KillImpactNormal; // 0x248(0x0c)
	bool IsBulletSpongeEnemy; // 0x254(0x01)
	enum class EEnemyHealthScaling EnemyHealthScaling; // 0x255(0x01)
	char UnknownData_256[0x2]; // 0x256(0x02)
	float Courage; // 0x258(0x04)
	float MaxHealth; // 0x25c(0x04)
	char UnknownData_260[0x4]; // 0x260(0x04)
	bool bShowHealthBar; // 0x264(0x01)
	char UnknownData_265[0x3]; // 0x265(0x03)
	struct FVector HealthBarOffsetWorld; // 0x268(0x0c)
	bool bIsBossFight; // 0x274(0x01)
	char UnknownData_275[0x3]; // 0x275(0x03)
	int32_t BossFightHealthBarSegments; // 0x278(0x04)
	bool bRegisterEnemy; // 0x27c(0x01)
	char UnknownData_27D[0x3]; // 0x27d(0x03)
	float MixerBuff; // 0x280(0x04)
	char UnknownData_284[0x4]; // 0x284(0x04)

	void SetMaxHealth(float newMaxHealth); // Function FSD.EnemyHealthComponent.SetMaxHealth
	void OnSubArmorDamaged(float amount); // Function FSD.EnemyHealthComponent.OnSubArmorDamaged
	void IncrementKillCount(); // Function FSD.EnemyHealthComponent.IncrementKillCount
	float GetMaxHealth(); // Function FSD.EnemyHealthComponent.GetMaxHealth
};

// Class FSD.EnemyMeleeAttackAnimNotify
// Size: 0x40 (Inherited: 0x38)
struct UEnemyMeleeAttackAnimNotify : UAnimNotify {
	struct FName AttackTag; // 0x38(0x08)
};

// Class FSD.EnemyRangedAttackAnimNotify
// Size: 0x38 (Inherited: 0x38)
struct UEnemyRangedAttackAnimNotify : UAnimNotify {
};

// Class FSD.StopLeadingNotify
// Size: 0x38 (Inherited: 0x38)
struct UStopLeadingNotify : UAnimNotify {
};

// Class FSD.EnemySettings
// Size: 0x158 (Inherited: 0x30)
struct UEnemySettings : UDataAsset {
	struct TArray<struct UEnemyDescriptor*> EnemiesAllowedInWaves; // 0x30(0x10)
	struct FRandRange EnemyWaveRange; // 0x40(0x08)
	struct TMap<struct UEnemyID*, struct UEnemyDescriptor*> EnemyDescriptor; // 0x48(0x50)
	char UnknownData_98[0x10]; // 0x98(0x10)
	struct FGameplayTagQuery EliteAllowQuery; // 0xa8(0x48)
	struct TMap<struct UEnemyDescriptor*, struct FEliteEnemyEntry> HeroEnemies; // 0xf0(0x50)
	struct FRandFloatInterval HeroEnemySpawn; // 0x140(0x10)
	int32_t EliteRequiredCampaignProgress; // 0x150(0x04)
	char UnknownData_154[0x4]; // 0x154(0x04)
};

// Class FSD.SpawnSettings
// Size: 0x58 (Inherited: 0x30)
struct USpawnSettings : UDataAsset {
	struct TArray<struct UParticleSystem*> SpawnEffects; // 0x30(0x10)
	struct TArray<struct USoundCue*> SpawnSounds; // 0x40(0x10)
	struct FRandRange SpawnDuration; // 0x50(0x08)
};

// Class FSD.EnemySpawnManager
// Size: 0x268 (Inherited: 0xb0)
struct UEnemySpawnManager : UActorComponent {
	struct FMulticastInlineDelegate OnEnemyDestroyed; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnEnemyDied; // 0xc0(0x10)
	struct FMulticastInlineDelegate OnEnemySpawned; // 0xd0(0x10)
	struct USpawnEffectsComponent* SpawnEffects; // 0xe0(0x08)
	char UnknownData_E8[0x8]; // 0xe8(0x08)
	struct TArray<struct APawn*> ActiveEnemies; // 0xf0(0x10)
	struct TArray<struct APawn*> ActiveSwarmerEnemies; // 0x100(0x10)
	struct TArray<struct UStatusEffect*> ActiveGlobalStatusEffects; // 0x110(0x10)
	struct TMap<struct UEnemyDescriptor*, struct FSpawnRarityModifierItem> SpawnRarityModifiers; // 0x120(0x50)
	struct TArray<struct APawn*> ActiveCritters; // 0x170(0x10)
	struct TArray<struct APawn*> CritcalEnemies; // 0x180(0x10)
	int32_t MaxActiveEnemies; // 0x190(0x04)
	int32_t MaxActiveSwarmers; // 0x194(0x04)
	int32_t MaxActiveCritters; // 0x198(0x04)
	float MaxDistanceBeforeCleanup; // 0x19c(0x04)
	struct FGameplayTag SwarmerTag; // 0x1a0(0x08)
	struct FGameplayTag RegularTag; // 0x1a8(0x08)
	struct FGameplayTag CritterTag; // 0x1b0(0x08)
	struct AProceduralSetup* ProceduralSetup; // 0x1b8(0x08)
	struct TArray<struct FSpawnQueueItem> SpawnQueue; // 0x1c0(0x10)
	bool bDestroyingAllEnemies; // 0x1d0(0x01)
	char UnknownData_1D1[0x97]; // 0x1d1(0x97)

	void SpawnerDestroyed(struct APawn* Actor); // Function FSD.EnemySpawnManager.SpawnerDestroyed
	bool SpawnEnemy(struct UEnemyDescriptor* descriptor, struct FTransform Transform, struct FDelegate Callback, bool useSpawnFX, bool Alert); // Function FSD.EnemySpawnManager.SpawnEnemy
	void SetSpawningEnabled(bool newSpawningEnabled); // Function FSD.EnemySpawnManager.SetSpawningEnabled
	void RemoveGlobalStatusEffect(struct UStatusEffect* StatusEffect); // Function FSD.EnemySpawnManager.RemoveGlobalStatusEffect
	void RegisterSpawner(struct APawn* Actor); // Function FSD.EnemySpawnManager.RegisterSpawner
	void RegisterSpawnedEnemy(struct AActor* enemy); // Function FSD.EnemySpawnManager.RegisterSpawnedEnemy
	void PromoteToCritical(struct APawn* Pawn); // Function FSD.EnemySpawnManager.PromoteToCritical
	void OnMatchStarted(); // Function FSD.EnemySpawnManager.OnMatchStarted
	void OnMatchEnded(); // Function FSD.EnemySpawnManager.OnMatchEnded
	bool GetSpawningEnabled(); // Function FSD.EnemySpawnManager.GetSpawningEnabled
	void EnemyDestroyed(struct AActor* Actor); // Function FSD.EnemySpawnManager.EnemyDestroyed
	void EnemyDeath(struct UHealthComponentBase* HealthComponent); // Function FSD.EnemySpawnManager.EnemyDeath
	void DestroyAllEnemies(); // Function FSD.EnemySpawnManager.DestroyAllEnemies
	bool CanSpawn(struct UEnemyDescriptor* EnemyDescriptor); // Function FSD.EnemySpawnManager.CanSpawn
	void AddGlobalStatusEffect(struct UStatusEffect* StatusEffect); // Function FSD.EnemySpawnManager.AddGlobalStatusEffect
};

// Class FSD.SpawnEffectsComponent
// Size: 0x1d8 (Inherited: 0xb0)
struct USpawnEffectsComponent : UActorComponent {
	struct FSpawnEffectsArray ActiveEffects; // 0xb0(0x120)
	struct UMaterialInstance* BiomeMaterialOverride; // 0x1d0(0x08)
};

// Class FSD.PheromoneSpawnerComponent
// Size: 0x118 (Inherited: 0xb0)
struct UPheromoneSpawnerComponent : UActorComponent {
	struct FRandRange SpawnInterval; // 0xb0(0x08)
	float AttackPositioningCostModifier; // 0xb8(0x04)
	char UnknownData_BC[0x4]; // 0xbc(0x04)
	struct UEnemyDescriptor* enemy; // 0xc0(0x08)
	struct TMap<struct AActor*, float> InfectedActors; // 0xc8(0x50)
};

// Class FSD.TemperatureComponent
// Size: 0xc8 (Inherited: 0xb0)
struct UTemperatureComponent : UActorComponent {
	char UnknownData_B0[0x10]; // 0xb0(0x10)
	float FrozenDamageBonusScale; // 0xc0(0x04)
	char UnknownData_C4[0x4]; // 0xc4(0x04)

	bool TryPushHeatSource(struct AActor* Target, float Temperature, enum class ETemperatureIntensity Intensity); // Function FSD.TemperatureComponent.TryPushHeatSource
	bool TryPopHeatSource(struct AActor* Target, float Temperature, enum class ETemperatureIntensity Intensity); // Function FSD.TemperatureComponent.TryPopHeatSource
	float GetCurrentTemperature(); // Function FSD.TemperatureComponent.GetCurrentTemperature
	void ChangeTemperature(float Degrees, struct AActor* Source); // Function FSD.TemperatureComponent.ChangeTemperature
};

// Class FSD.EnemyTemperatureComponent
// Size: 0x140 (Inherited: 0xc8)
struct UEnemyTemperatureComponent : UTemperatureComponent {
	float UpdateTime; // 0xc8(0x04)
	bool DieIfFrozen; // 0xcc(0x01)
	char UnknownData_CD[0x3]; // 0xcd(0x03)
	float TemperatureChangeScale; // 0xd0(0x04)
	float BurnTemperature; // 0xd4(0x04)
	float DouseFireTemperature; // 0xd8(0x04)
	float FreezeTemperature; // 0xdc(0x04)
	float UnFreezeTemperature; // 0xe0(0x04)
	int32_t WarmingRate; // 0xe4(0x04)
	int32_t CoolingRate; // 0xe8(0x04)
	bool IsHeatsourceWhenOnFire; // 0xec(0x01)
	char UnknownData_ED[0x3]; // 0xed(0x03)
	float OnFireHeatRange; // 0xf0(0x04)
	float MaxColdSlowdown; // 0xf4(0x04)
	char UnknownData_F8[0x8]; // 0xf8(0x08)
	struct UPawnStatsComponent* PawnStats; // 0x100(0x08)
	char UnknownData_108[0x18]; // 0x108(0x18)
	int32_t WarmingCooldown; // 0x120(0x04)
	char UnknownData_124[0x1c]; // 0x124(0x1c)

	void TimerCallback(); // Function FSD.EnemyTemperatureComponent.TimerCallback
	void OnDeath(struct UHealthComponentBase* HealthComponent); // Function FSD.EnemyTemperatureComponent.OnDeath
	void DoTemperatureShock(struct UStatusEffectsComponent* Status); // Function FSD.EnemyTemperatureComponent.DoTemperatureShock
};

// Class FSD.EnemyTemperatureReplicatorComponent
// Size: 0xf0 (Inherited: 0xb0)
struct UEnemyTemperatureReplicatorComponent : UActorComponent {
	struct FMulticastInlineDelegate OnTemperatureEffectChanged; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnIsFrozenChanged; // 0xc0(0x10)
	struct FMulticastInlineDelegate OnIsOnFireChanged; // 0xd0(0x10)
	struct FWeakObjectPtr<struct UEnemyTemperatureComponent> EnemyTemperatureComponent; // 0xe0(0x08)
	int32_t TemperatureEffect; // 0xe8(0x04)
	bool bIsFrozen; // 0xec(0x01)
	bool bIsOnFire; // 0xed(0x01)
	char UnknownData_EE[0x2]; // 0xee(0x02)

	void OnRep_TemperatureEffect(); // Function FSD.EnemyTemperatureReplicatorComponent.OnRep_TemperatureEffect
	void OnRep_IsOnFire(); // Function FSD.EnemyTemperatureReplicatorComponent.OnRep_IsOnFire
	void OnRep_IsFrozen(); // Function FSD.EnemyTemperatureReplicatorComponent.OnRep_IsFrozen
	bool IsOnFire(); // Function FSD.EnemyTemperatureReplicatorComponent.IsOnFire
	bool IsFrozen(); // Function FSD.EnemyTemperatureReplicatorComponent.IsFrozen
	float GetTemperatureEffect(); // Function FSD.EnemyTemperatureReplicatorComponent.GetTemperatureEffect
	void BoolDelegate__DelegateSignature(bool Value); // DelegateFunction FSD.EnemyTemperatureReplicatorComponent.BoolDelegate__DelegateSignature
};

// Class FSD.EnemyWaveController
// Size: 0x30 (Inherited: 0x28)
struct UEnemyWaveController : UObject {
	bool IsComplete; // 0x28(0x01)
	bool IsSuitableForSolo; // 0x29(0x01)
	char UnknownData_2A[0x6]; // 0x2a(0x06)

	void StartWave(); // Function FSD.EnemyWaveController.StartWave
	void ResumeWave(); // Function FSD.EnemyWaveController.ResumeWave
	void PauseWave(); // Function FSD.EnemyWaveController.PauseWave
	void OnWaveCompleted(); // Function FSD.EnemyWaveController.OnWaveCompleted
};

// Class FSD.EnemyWaveManager
// Size: 0x138 (Inherited: 0xb0)
struct UEnemyWaveManager : UActorComponent {
	struct TArray<struct FWaveEntry> ScriptedWaves; // 0xb0(0x10)
	struct TArray<struct FWaveEntry> EndMissionWaves; // 0xc0(0x10)
	struct TArray<struct UEnemyWaveController*> ActiveScriptedWaves; // 0xd0(0x10)
	float StartDelay; // 0xe0(0x04)
	float spawnRadiusFromSpawnPoint; // 0xe4(0x04)
	bool ScriptedWavesEnabled; // 0xe8(0x01)
	bool NormalWavesEnabled; // 0xe9(0x01)
	bool OverrideDifficultyScriptedWaveInternal; // 0xea(0x01)
	char UnknownData_EB[0x1]; // 0xeb(0x01)
	struct FRandRange OverrideScriptedWaveInterval; // 0xec(0x08)
	char UnknownData_F4[0x4]; // 0xf4(0x04)
	struct AFSDGameMode* GameMode; // 0xf8(0x08)
	struct UEnemySpawnManager* SpawnManager; // 0x100(0x08)
	char UnknownData_108[0x10]; // 0x108(0x10)
	struct TArray<struct UObject*> NormalWavesBlockStack; // 0x118(0x10)
	struct TArray<struct UObject*> ScriptedWavesBlockStack; // 0x128(0x10)

	struct UEnemyWaveController* TriggerWave(struct UEnemyWaveController* waveClass); // Function FSD.EnemyWaveManager.TriggerWave
	void TriggerEndWave(bool cancelAllWaves); // Function FSD.EnemyWaveManager.TriggerEndWave
	void SpawnScriptedWave(); // Function FSD.EnemyWaveManager.SpawnScriptedWave
	void PushDisableScriptedWaves(struct UObject* Owner); // Function FSD.EnemyWaveManager.PushDisableScriptedWaves
	void PushDisableNormalWaves(struct UObject* Owner); // Function FSD.EnemyWaveManager.PushDisableNormalWaves
	void PopDisableScriptedWaves(struct UObject* Owner); // Function FSD.EnemyWaveManager.PopDisableScriptedWaves
	void PopDisableNormalWaves(struct UObject* Owner); // Function FSD.EnemyWaveManager.PopDisableNormalWaves
	void OnMatchEnded(); // Function FSD.EnemyWaveManager.OnMatchEnded
	void OnEnemySpawned(struct APawn* enemy); // Function FSD.EnemyWaveManager.OnEnemySpawned
	bool AreScriptedWavesBlocked(); // Function FSD.EnemyWaveManager.AreScriptedWavesBlocked
	bool AreNormalWavesBlocked(); // Function FSD.EnemyWaveManager.AreNormalWavesBlocked
};

// Class FSD.EscortMuleAIController
// Size: 0x410 (Inherited: 0x358)
struct AEscortMuleAIController : AFSDAIController {
	char UnknownData_358[0x10]; // 0x358(0x10)
	struct TArray<struct FVector> CurrentPath; // 0x368(0x10)
	char UnknownData_378[0x50]; // 0x378(0x50)
	struct TArray<struct FVector> GaragePath; // 0x3c8(0x10)
	int32_t PathIndex; // 0x3d8(0x04)
	int32_t CurrentRoom; // 0x3dc(0x04)
	struct UEscortObjective* EscortObj; // 0x3e0(0x08)
	int32_t TunnelStartIndex; // 0x3e8(0x04)
	int32_t TunnelEndIndex; // 0x3ec(0x04)
	char UnknownData_3F0[0x18]; // 0x3f0(0x18)
	struct FRandomStream RandomStream; // 0x408(0x08)

	void SetDozerNextPathSegment(); // Function FSD.EscortMuleAIController.SetDozerNextPathSegment
	void OnPathComplete(); // Function FSD.EscortMuleAIController.OnPathComplete
	struct TArray<struct FVector> GetPathForDebug(int32_t Segment); // Function FSD.EscortMuleAIController.GetPathForDebug
	struct FVector GetPathEndTagent(); // Function FSD.EscortMuleAIController.GetPathEndTagent
	void FindDozerPath(struct FVector StartPosition); // Function FSD.EscortMuleAIController.FindDozerPath
};

// Class FSD.EscortObjective
// Size: 0x310 (Inherited: 0x150)
struct UEscortObjective : UObjective {
	struct FMulticastInlineDelegate OnProgressUpdated; // 0x150(0x10)
	struct FMulticastInlineDelegate OnShellBreakPauseChange; // 0x160(0x10)
	struct FMulticastInlineDelegate OnMuleRefueled; // 0x170(0x10)
	bool DidRescueDorettaHead; // 0x180(0x01)
	char UnknownData_181[0x3]; // 0x181(0x03)
	int32_t AreasToScan; // 0x184(0x04)
	int32_t ScanCount; // 0x188(0x04)
	char UnknownData_18C[0x4]; // 0x18c(0x04)
	struct TArray<struct FVector> ScanLocations; // 0x190(0x10)
	struct UDebrisPositioning* Positioning; // 0x1a0(0x08)
	struct UDebrisPositioning* EscortMulePositioning; // 0x1a8(0x08)
	struct UCurveFloat* CostDistanceCurve; // 0x1b0(0x08)
	float DebrisRadius; // 0x1b8(0x04)
	char UnknownData_1BC[0x4]; // 0x1bc(0x04)
	struct TArray<struct UDebrisBase*> ObjectDebris; // 0x1c0(0x10)
	SoftClassProperty RefuelObjectClass; // 0x1d0(0x28)
	SoftClassProperty DestinationClass; // 0x1f8(0x28)
	int32_t AreasScanned; // 0x220(0x04)
	enum class EEscortMissionState State; // 0x224(0x01)
	bool FinalBattle; // 0x225(0x01)
	char UnknownData_226[0x2]; // 0x226(0x02)
	struct UCarvedResourceData* FuelResource; // 0x228(0x08)
	struct UResourceData* GemResource; // 0x230(0x08)
	struct FMulticastInlineDelegate OnCannisterRegistered; // 0x238(0x10)
	float ServerShellProgress; // 0x248(0x04)
	char UnknownData_24C[0x1c]; // 0x24c(0x1c)
	int32_t SecondsToDestroyHeartstone; // 0x268(0x04)
	int32_t FullCanistersRequired; // 0x26c(0x04)
	int32_t FullCanisters; // 0x270(0x04)
	int32_t FuelResourceAmount; // 0x274(0x04)
	SoftClassProperty GarageDropCarver; // 0x278(0x28)
	SoftClassProperty EscortMuleDropBeaconClass; // 0x2a0(0x28)
	SoftClassProperty GarageClass; // 0x2c8(0x28)
	struct FVector EscortMuleDropLocation; // 0x2f0(0x0c)
	char UnknownData_2FC[0x4]; // 0x2fc(0x04)
	struct AEscortMule* EscortMule; // 0x300(0x08)
	struct AEscortDestination* EscortDestination; // 0x308(0x08)

	void SyncProgressTimer(); // Function FSD.EscortObjective.SyncProgressTimer
	void StartShellBreak(); // Function FSD.EscortObjective.StartShellBreak
	void SpawnGarage(); // Function FSD.EscortObjective.SpawnGarage
	void SetState(enum class EEscortMissionState State); // Function FSD.EscortObjective.SetState
	void SetShellBreakPaused(bool newPaused); // Function FSD.EscortObjective.SetShellBreakPaused
	void SetEscortMule(struct AEscortMule* MULE); // Function FSD.EscortObjective.SetEscortMule
	void RegisterFuelCannister(struct AExtractorItem* extractor); // Function FSD.EscortObjective.RegisterFuelCannister
	void RecordFailStage(bool muleDied); // Function FSD.EscortObjective.RecordFailStage
	void OnResourceChanged(struct UCappedResource* CappedResource, float amount); // Function FSD.EscortObjective.OnResourceChanged
	void OnRep_FullCanisters(); // Function FSD.EscortObjective.OnRep_FullCanisters
	void OnRep_EscortState(); // Function FSD.EscortObjective.OnRep_EscortState
	void OnRep_EscortMule(); // Function FSD.EscortObjective.OnRep_EscortMule
	void OnRep_AreasToScan(int32_t prevAmount); // Function FSD.EscortObjective.OnRep_AreasToScan
	void OnRep_AreasScanned(int32_t prevAmount); // Function FSD.EscortObjective.OnRep_AreasScanned
	void OnMuleDied(struct UHealthComponentBase* HealthComponent); // Function FSD.EscortObjective.OnMuleDied
	void OnHealthChanged(float Health); // Function FSD.EscortObjective.OnHealthChanged
	void OnFullCanistersChanged(int32_t amount); // Function FSD.EscortObjective.OnFullCanistersChanged
	void OnEscortMuleSpawnedEvent(); // Function FSD.EscortObjective.OnEscortMuleSpawnedEvent
	float GetShellBreakProgress(); // Function FSD.EscortObjective.GetShellBreakProgress
	bool DoesPathExist(struct FVector Start, struct FVector End); // Function FSD.EscortObjective.DoesPathExist
};

// Class FSD.EscortMule
// Size: 0x490 (Inherited: 0x2e8)
struct AEscortMule : AFSDPawn {
	char UnknownData_2E8[0x8]; // 0x2e8(0x08)
	struct FMulticastInlineDelegate OnMuleActivated; // 0x2f0(0x10)
	struct FMulticastInlineDelegate OnSpeedChanged; // 0x300(0x10)
	struct FMulticastInlineDelegate OnFullCanistersChanged; // 0x310(0x10)
	struct FMulticastInlineDelegate OnExitGaragePathSet; // 0x320(0x10)
	struct FMulticastInlineDelegate Cheat_SetMuleSpeed; // 0x330(0x10)
	struct FMulticastInlineDelegate Cheat_JumpToNextPhase; // 0x340(0x10)
	struct UFriendlyHealthComponent* HealthComponent; // 0x350(0x08)
	struct USimpleObjectInfoComponent* ObjectInfo; // 0x358(0x08)
	struct URestrictedResourceBank* ResourceBank; // 0x360(0x08)
	char UnknownData_368[0x8]; // 0x368(0x08)
	struct FTransform TargetTransform; // 0x370(0x30)
	struct FTransform PreviousTransform; // 0x3a0(0x30)
	char UnknownData_3D0[0x20]; // 0x3d0(0x20)
	struct FEscortMuleMovementState MovementState; // 0x3f0(0x50)
	float SpeedModifier; // 0x440(0x04)
	char UnknownData_444[0x4]; // 0x444(0x04)
	struct USkeletalMeshComponent* Mesh; // 0x448(0x08)
	struct UOutlineComponent* OutlineComponent; // 0x450(0x08)
	float HealPerTickNormal; // 0x458(0x04)
	float HealPerTickUnderAttack; // 0x45c(0x04)
	bool CannisterVisible_Left; // 0x460(0x01)
	bool CannisterVisible_Right; // 0x461(0x01)
	char UnknownData_462[0x2]; // 0x462(0x02)
	struct FVector NextStop; // 0x464(0x0c)
	bool IsCarvingTunnel; // 0x470(0x01)
	char UnknownData_471[0x3]; // 0x471(0x03)
	int32_t FullCanisters; // 0x474(0x04)
	struct TArray<struct FEscortMuleExtractorSlot> ExtractorSlots; // 0x478(0x10)
	char UnknownData_488[0x8]; // 0x488(0x08)

	bool TryHeal(struct APlayerCharacter* User, float amount); // Function FSD.EscortMule.TryHeal
	void SetTargetTransform(struct FTransform InTransform); // Function FSD.EscortMule.SetTargetTransform
	void SetSpeedModifier(float inSpeedModifier); // Function FSD.EscortMule.SetSpeedModifier
	void SetFullExtracterAttached(struct UInstantUsable* Usable); // Function FSD.EscortMule.SetFullExtracterAttached
	void SetExtractorDetached(struct UInstantUsable* Usable); // Function FSD.EscortMule.SetExtractorDetached
	void SetExitGaragePath(struct TArray<struct FVector> Path); // Function FSD.EscortMule.SetExitGaragePath
	void ResetExtractors(); // Function FSD.EscortMule.ResetExtractors
	void PathIsReady(); // Function FSD.EscortMule.PathIsReady
	void OnRep_SpeedModifier(); // Function FSD.EscortMule.OnRep_SpeedModifier
	void OnRep_MovementState(); // Function FSD.EscortMule.OnRep_MovementState
	void OnRep_IsCarvingTunnel(); // Function FSD.EscortMule.OnRep_IsCarvingTunnel
	void OnRep_ExtractorSlots(); // Function FSD.EscortMule.OnRep_ExtractorSlots
	void OnObjectiveStateChanged(enum class EEscortMissionState NewState); // Function FSD.EscortMule.OnObjectiveStateChanged
	void OnExtractorSlotChanged(struct FEscortMuleExtractorSlot Slot, int32_t Index); // Function FSD.EscortMule.OnExtractorSlotChanged
	void OnExtractorDetached(struct AExtractorItem* Item); // Function FSD.EscortMule.OnExtractorDetached
	void ObjectiveStateChange(enum class EEscortMissionState NewState); // Function FSD.EscortMule.ObjectiveStateChange
	enum class EEscortExtractorState GetExtractorState(struct UInstantUsable* Usable); // Function FSD.EscortMule.GetExtractorState
	void ActivateMule(); // Function FSD.EscortMule.ActivateMule
};

// Class FSD.EscortMuleTrack
// Size: 0x248 (Inherited: 0x220)
struct AEscortMuleTrack : AActor {
	char UnknownData_220[0x8]; // 0x220(0x08)
	struct FGameplayTagContainer GameplayTags; // 0x228(0x20)
};

// Class FSD.EscortDestination
// Size: 0x260 (Inherited: 0x220)
struct AEscortDestination : AActor {
	struct FMulticastInlineDelegate OnShellCracked; // 0x220(0x10)
	struct UDamageComponent* EndExplosionDamage; // 0x230(0x08)
	float NextBreakpoint; // 0x238(0x04)
	int32_t StageForAnalytics; // 0x23c(0x04)
	int32_t SecondsToDestroyHeartstone; // 0x240(0x04)
	char UnknownData_244[0x4]; // 0x244(0x04)
	struct TArray<float> BreakpointsPercent; // 0x248(0x10)
	float Radius; // 0x258(0x04)
	float ShellThickness; // 0x25c(0x04)

	void MeltPlatforms(struct ADeepCSGWorld* CSGWorld, struct TArray<struct FVector> meltPoints, float meltRadius); // Function FSD.EscortDestination.MeltPlatforms
	struct UTerrainMaterial* GetTerrainMaterialByHandle(struct ADeepCSGWorld* CSGWorld, int32_t materialHandle); // Function FSD.EscortDestination.GetTerrainMaterialByHandle
	int32_t GetSecondsToDestroyObjective(); // Function FSD.EscortDestination.GetSecondsToDestroyObjective
	struct FVector GetClosestPointOnRadius(struct FVector CurrentLocation, int32_t numberOfShellsCracked, struct FVector dirFromCenter); // Function FSD.EscortDestination.GetClosestPointOnRadius
};

// Class FSD.FSDPhysicsActor
// Size: 0x230 (Inherited: 0x220)
struct AFSDPhysicsActor : AActor {
	int32_t MovementUpdateFrequency; // 0x220(0x04)
	int32_t MovementUpdateEventTriggeredFrequency; // 0x224(0x04)
	char UnknownData_228[0x8]; // 0x228(0x08)

	void ForceMovementUpdate(); // Function FSD.FSDPhysicsActor.ForceMovementUpdate
};

// Class FSD.CarriableItem
// Size: 0x248 (Inherited: 0x230)
struct ACarriableItem : AFSDPhysicsActor {
	struct FMulticastInlineDelegate OnAttachedChangeDelegate; // 0x230(0x10)
	bool StrictDeposit; // 0x240(0x01)
	char UnknownData_241[0x7]; // 0x241(0x07)

	void Throw(struct FVector force); // Function FSD.CarriableItem.Throw
	void Receive_OnDeposited(struct APlayerCharacter* fromPlayer); // Function FSD.CarriableItem.Receive_OnDeposited
	void OnAttachChanged(bool Attached); // Function FSD.CarriableItem.OnAttachChanged
};

// Class FSD.DorrettaHead
// Size: 0x258 (Inherited: 0x248)
struct ADorrettaHead : ACarriableItem {
	struct UCarriableInstantUsable* Usable; // 0x248(0x08)
	struct UCarriableComponent* CarriableComponent; // 0x250(0x08)
};

// Class FSD.FuelCannisterAttachedAnimInstance
// Size: 0x270 (Inherited: 0x270)
struct UFuelCannisterAttachedAnimInstance : UAnimInstance {
	bool CanBeTaken; // 0x268(0x01)

	void SetCanBeTaken(bool canBeTakenValue); // Function FSD.FuelCannisterAttachedAnimInstance.SetCanBeTaken
};

// Class FSD.FuelCannisterItemAnimInstance
// Size: 0x270 (Inherited: 0x270)
struct UFuelCannisterItemAnimInstance : UAnimInstance {
	bool IsOnGround; // 0x268(0x01)
	bool IsFull; // 0x269(0x01)
	bool IsShooting; // 0x26a(0x01)
};

// Class FSD.EscortMuleAnimInstance
// Size: 0x270 (Inherited: 0x270)
struct UEscortMuleAnimInstance : UAnimInstance {
	bool LeftCannistersVisible; // 0x268(0x01)
	bool RightCannistersVisible; // 0x269(0x01)
	bool IsEngineRunning; // 0x26a(0x01)
	bool IsBeingRefueled; // 0x26b(0x01)
	bool PlatformOut; // 0x26c(0x01)

	void OnTookDamage(struct UHealthComponent* Health); // Function FSD.EscortMuleAnimInstance.OnTookDamage
};

// Class FSD.ExplosiveBarrelEvent
// Size: 0x360 (Inherited: 0x358)
struct AExplosiveBarrelEvent : AGameEvent {
	struct UDamageComponent* EndDamage; // 0x358(0x08)
};

// Class FSD.BarrelDispenser
// Size: 0x258 (Inherited: 0x220)
struct ABarrelDispenser : AActor {
	char UnknownData_220[0x8]; // 0x220(0x08)
	struct ACarriableItem* BarrelClass; // 0x228(0x08)
	char UnknownData_230[0x8]; // 0x230(0x08)
	struct USingleUsableComponent* Usable; // 0x238(0x08)
	struct USkeletalMeshComponent* Mesh; // 0x240(0x08)
	float FirstBarrelGenerationTime; // 0x248(0x04)
	float BarrelGenerationTime; // 0x24c(0x04)
	bool IsReady; // 0x250(0x01)
	bool HasBarrel; // 0x251(0x01)
	char UnknownData_252[0x6]; // 0x252(0x06)

	void SetPicked(struct APlayerCharacter* User); // Function FSD.BarrelDispenser.SetPicked
	void OnUsed(struct APlayerCharacter* User); // Function FSD.BarrelDispenser.OnUsed
	void OnSpawnedItem(struct AActor* spawned); // Function FSD.BarrelDispenser.OnSpawnedItem
	void OnFolded(); // Function FSD.BarrelDispenser.OnFolded
	void OnDeployed(); // Function FSD.BarrelDispenser.OnDeployed
	void FoldUp(); // Function FSD.BarrelDispenser.FoldUp
	void Deploy(); // Function FSD.BarrelDispenser.Deploy
};

// Class FSD.BarrelDispenserAnimInstance
// Size: 0x270 (Inherited: 0x270)
struct UBarrelDispenserAnimInstance : UAnimInstance {
	bool IsReady; // 0x268(0x01)
	bool HasBarrel; // 0x269(0x01)
};

// Class FSD.ExtractorItem
// Size: 0x528 (Inherited: 0x368)
struct AExtractorItem : AAnimatedItem {
	char UnknownData_368[0x8]; // 0x368(0x08)
	struct FMulticastInlineDelegate OnCurrentLoadChangedEvent; // 0x370(0x10)
	struct FMulticastInlineDelegate OnCharacterEquipChange; // 0x380(0x10)
	struct UBoxComponent* DroppedCollider; // 0x390(0x08)
	struct USkeletalMeshComponent* DroppedMesh; // 0x398(0x08)
	struct UFirstPersonParticleSystemComponent* FP_DrillParticles; // 0x3a0(0x08)
	struct UAudioComponent* AudioComponent; // 0x3a8(0x08)
	struct UPointLightComponent* SurfaceLight; // 0x3b0(0x08)
	struct UParticleSystemComponent* MeltingParticles; // 0x3b8(0x08)
	struct UParticleSystemComponent* InvalidSurfaceParticles; // 0x3c0(0x08)
	struct UParticleSystemComponent* FPMuzzleParticles; // 0x3c8(0x08)
	struct UParticleSystemComponent* FPMuzzleInvalidParticles; // 0x3d0(0x08)
	struct UParticleSystemComponent* TPMuzzleParticles; // 0x3d8(0x08)
	struct UParticleSystemComponent* TPMuzzleInvalidParticles; // 0x3e0(0x08)
	struct UAnimMontage* FPMineMontage; // 0x3e8(0x08)
	struct UAnimMontage* TPMineMontage; // 0x3f0(0x08)
	struct UAnimMontage* FPGunsling; // 0x3f8(0x08)
	struct UAnimMontage* TPGunsling; // 0x400(0x08)
	struct FName MiningSpeedAudioParamterName; // 0x408(0x08)
	struct UParticleSystem* DrillParticles; // 0x410(0x08)
	struct UForceFeedbackEffect* DrillRumble; // 0x418(0x08)
	float BlockParticlesScaleFP; // 0x420(0x04)
	float BlockParticlesScaleTP; // 0x424(0x04)
	enum class EExtractorState State; // 0x428(0x01)
	char UnknownData_429[0x3]; // 0x429(0x03)
	float MovementPenalty; // 0x42c(0x04)
	float CarverRayCastLength; // 0x430(0x04)
	float CarveTerrainDistanceCheck; // 0x434(0x04)
	float CurrentDrillSpeed; // 0x438(0x04)
	char UnknownData_43C[0x14]; // 0x43c(0x14)
	float DrillParticlesDuration; // 0x450(0x04)
	char UnknownData_454[0x4]; // 0x454(0x04)
	struct UResourceData* ExtractetMaterial; // 0x458(0x08)
	float TimeBeforeInvalidShout; // 0x460(0x04)
	char UnknownData_464[0x4]; // 0x464(0x04)
	struct UDialogDataAsset* InvalidSurfaceShout; // 0x468(0x08)
	struct UDialogDataAsset* ShoutFull; // 0x470(0x08)
	struct USoundCue* DigSound; // 0x478(0x08)
	bool IsMining; // 0x480(0x01)
	bool IsGunslinging; // 0x481(0x01)
	bool ReadyToExtract; // 0x482(0x01)
	char UnknownData_483[0xd]; // 0x483(0x0d)
	struct UParticleSystem* VacuumEffect; // 0x490(0x08)
	struct UParticleSystem* ChunkSplatEffect; // 0x498(0x08)
	struct USoundCue* ChunkSplatSound; // 0x4a0(0x08)
	char UnknownData_4A8[0x24]; // 0x4a8(0x24)
	float MaxDifference; // 0x4cc(0x04)
	char UnknownData_4D0[0x4]; // 0x4d0(0x04)
	float MeltingTime; // 0x4d4(0x04)
	float ChunkMultiplier; // 0x4d8(0x04)
	float CollectChunkCooldown; // 0x4dc(0x04)
	float CrossfadeSpeed; // 0x4e0(0x04)
	char UnknownData_4E4[0x14]; // 0x4e4(0x14)
	float VacuumEffectOffset; // 0x4f8(0x04)
	float MaxCapacity; // 0x4fc(0x04)
	float PlayerCountBonus; // 0x500(0x04)
	char UnknownData_504[0x4]; // 0x504(0x04)
	struct FColor SurfaceLightInitialColor; // 0x508(0x04)
	struct FColor SurfaceLightEndColor; // 0x50c(0x04)
	float SurfaceLightMinIntensity; // 0x510(0x04)
	float SurfaceLightMaxIntensity; // 0x514(0x04)
	float CurrentLoad; // 0x518(0x04)
	char UnknownData_51C[0xc]; // 0x51c(0x0c)

	void SetCanPickup(bool canPickup); // Function FSD.ExtractorItem.SetCanPickup
	void Server_StopMining(); // Function FSD.ExtractorItem.Server_StopMining
	void Server_StartMining(); // Function FSD.ExtractorItem.Server_StartMining
	void Server_SetReadyToExtract(bool IsReady); // Function FSD.ExtractorItem.Server_SetReadyToExtract
	void Server_DigBlock(struct FVector_NetQuantize Start, struct FVector_NetQuantize End); // Function FSD.ExtractorItem.Server_DigBlock
	void Server_CollectChunk(struct AResourceChunk* chunk); // Function FSD.ExtractorItem.Server_CollectChunk
	void ResetCurrentLoad(); // Function FSD.ExtractorItem.ResetCurrentLoad
	void OnValidSurfaceChanged(bool IsValid); // Function FSD.ExtractorItem.OnValidSurfaceChanged
	void OnThrown(struct FVector Direction); // Function FSD.ExtractorItem.OnThrown
	void OnStopDrilling(); // Function FSD.ExtractorItem.OnStopDrilling
	void OnStartDrilling(); // Function FSD.ExtractorItem.OnStartDrilling
	void OnRep_SimulatingMining(); // Function FSD.ExtractorItem.OnRep_SimulatingMining
	void OnRep_IsGunslinging(); // Function FSD.ExtractorItem.OnRep_IsGunslinging
	void OnRep_CurrentLoad(); // Function FSD.ExtractorItem.OnRep_CurrentLoad
	void OnCurrentLoadChanged(float Load); // Function FSD.ExtractorItem.OnCurrentLoadChanged
	void OnChunkCooldownOver(); // Function FSD.ExtractorItem.OnChunkCooldownOver
	bool IsFull(); // Function FSD.ExtractorItem.IsFull
	struct UBoxComponent* GetRootCollider(); // Function FSD.ExtractorItem.GetRootCollider
	void All_SimulateDigBlock(struct FVector_NetQuantize Position, bool spawnParticles, int32_t Material); // Function FSD.ExtractorItem.All_SimulateDigBlock
	void All_ChunkSplat(struct AResourceChunk* chunk); // Function FSD.ExtractorItem.All_ChunkSplat
	void AddResource(float amount); // Function FSD.ExtractorItem.AddResource
};

// Class FSD.ExtruderPlant
// Size: 0x248 (Inherited: 0x220)
struct AExtruderPlant : AActor {
	struct USkeletalMeshComponent* SkeletalMesh; // 0x220(0x08)
	struct UAnimationAsset* ExtrudeAnimation; // 0x228(0x08)
	struct UAnimationAsset* RetractAnimation; // 0x230(0x08)
	struct UAudioComponent* Audio; // 0x238(0x08)
	char UnknownData_240[0x8]; // 0x240(0x08)
};

// Class FSD.FacilityDrone
// Size: 0x5c8 (Inherited: 0x398)
struct AFacilityDrone : AEnemyDeepPathfinderCharacter {
	char UnknownData_398[0x8]; // 0x398(0x08)
	struct UPawnSensingComponent* PawnSensing; // 0x3a0(0x08)
	struct USphereComponent* CollisionSphere; // 0x3a8(0x08)
	struct USphereComponent* NearTargetSphere; // 0x3b0(0x08)
	struct UParticleSystemComponent* TearingGroundParticles; // 0x3b8(0x08)
	struct UParticleSystemComponent* AirTrailParticles; // 0x3c0(0x08)
	struct UEnemyComponent* EnemyComponent; // 0x3c8(0x08)
	struct UDamageComponent* Damage; // 0x3d0(0x08)
	struct UDamageComponent* BumpDamage; // 0x3d8(0x08)
	struct UPawnAlertComponent* Alert; // 0x3e0(0x08)
	struct UProjectileAttackComponent* RollingRangedAttack; // 0x3e8(0x08)
	struct UProjectileAttackComponent* FlyingRangedAttack; // 0x3f0(0x08)
	struct UHitscanComponent* HitScan; // 0x3f8(0x08)
	char UnknownData_400[0x14]; // 0x400(0x14)
	bool IsLockedOn; // 0x414(0x01)
	char UnknownData_415[0x3]; // 0x415(0x03)
	float DelayAfterLockOn; // 0x418(0x04)
	char UnknownData_41C[0x4]; // 0x41c(0x04)
	struct USoundCue* ImpactCue; // 0x420(0x08)
	struct USoundCue* JumpSound; // 0x428(0x08)
	float LaunchPower; // 0x430(0x04)
	struct FFloatInterval JumpInterval; // 0x434(0x08)
	char UnknownData_43C[0x9]; // 0x43c(0x09)
	bool CanJump; // 0x445(0x01)
	char UnknownData_446[0x2]; // 0x446(0x02)
	float ChanceForJump; // 0x448(0x04)
	float MinJumpCooldown; // 0x44c(0x04)
	float MaxJumpCooldown; // 0x450(0x04)
	float JumpForce; // 0x454(0x04)
	float TimeBeforeGroundCheck; // 0x458(0x04)
	char UnknownData_45C[0x4]; // 0x45c(0x04)
	float StartFlyingTimer; // 0x460(0x04)
	char UnknownData_464[0x4]; // 0x464(0x04)
	float MinRollingTime; // 0x468(0x04)
	float MaxRollingTime; // 0x46c(0x04)
	float MinFlyingTime; // 0x470(0x04)
	float MaxFlyingTime; // 0x474(0x04)
	float SpawnRocketsTime; // 0x478(0x04)
	char UnknownData_47C[0xc]; // 0x47c(0x0c)
	struct UFakeMoverSettings* RollSettings; // 0x488(0x08)
	struct UFakeMoverSettings* JumpSettings; // 0x490(0x08)
	struct UFakeMoverSettings* SpawnRocketsSettings; // 0x498(0x08)
	struct UFakeMoverSettings* IdleSettings; // 0x4a0(0x08)
	enum class EFacilityDroneState State; // 0x4a8(0x01)
	char UnknownData_4A9[0x3]; // 0x4a9(0x03)
	float MinTurretAngle; // 0x4ac(0x04)
	float MaxTurretAngle; // 0x4b0(0x04)
	float SpawnRocketsCheckTime; // 0x4b4(0x04)
	char UnknownData_4B8[0x4]; // 0x4b8(0x04)
	float SpawnRocketsChance; // 0x4bc(0x04)
	char UnknownData_4C0[0x30]; // 0x4c0(0x30)
	float FlyingDampOmega; // 0x4f0(0x04)
	float RollingDampOmega; // 0x4f4(0x04)
	struct FRuntimeFloatCurve MuzzleLightCurve; // 0x4f8(0x88)
	char UnknownData_580[0x8]; // 0x580(0x08)
	float GunRange; // 0x588(0x04)
	float RollingAttackCooldown; // 0x58c(0x04)
	float FlyingAttackCooldown; // 0x590(0x04)
	char UnknownData_594[0x4]; // 0x594(0x04)
	float TurretLerpSpeed; // 0x598(0x04)
	bool FiringRockets; // 0x59c(0x01)
	char UnknownData_59D[0x7]; // 0x59d(0x07)
	float AimDownwardsOffset; // 0x5a4(0x04)
	char UnknownData_5A8[0x18]; // 0x5a8(0x18)
	struct AActor* CurrentTarget; // 0x5c0(0x08)

	void OnStateChangedEvent(enum class EFacilityDroneState CurrentState); // Function FSD.FacilityDrone.OnStateChangedEvent
	void OnSpawnRocketsEvent(); // Function FSD.FacilityDrone.OnSpawnRocketsEvent
	void OnRocketsEnded(); // Function FSD.FacilityDrone.OnRocketsEnded
	void OnRep_Target(); // Function FSD.FacilityDrone.OnRep_Target
	void OnRep_State(); // Function FSD.FacilityDrone.OnRep_State
	void OnRep_IsLockedOn(); // Function FSD.FacilityDrone.OnRep_IsLockedOn
	void OnRep_FiringRockets(); // Function FSD.FacilityDrone.OnRep_FiringRockets
	void OnLockedOn(); // Function FSD.FacilityDrone.OnLockedOn
	void OnLandedEvent(); // Function FSD.FacilityDrone.OnLandedEvent
	void OnJumpEvent(); // Function FSD.FacilityDrone.OnJumpEvent
	void OnFireRockets(); // Function FSD.FacilityDrone.OnFireRockets
	void OnDroneAlerted(); // Function FSD.FacilityDrone.OnDroneAlerted
	void OnDeath(struct UHealthComponentBase* aHealthComponent); // Function FSD.FacilityDrone.OnDeath
	void OnCollided(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult SweepResult); // Function FSD.FacilityDrone.OnCollided
	void Jumped(); // Function FSD.FacilityDrone.Jumped
	void ImpactSound(); // Function FSD.FacilityDrone.ImpactSound
	void EndFireRockets(); // Function FSD.FacilityDrone.EndFireRockets
};

// Class FSD.SpiderAnimInstance
// Size: 0x410 (Inherited: 0x2c0)
struct USpiderAnimInstance : UEnemyAnimInstance {
	float Speed; // 0x2c0(0x04)
	struct FVector Velocity; // 0x2c4(0x0c)
	float WalkCycleSpeed; // 0x2d0(0x04)
	float StartMovingSpeed; // 0x2d4(0x04)
	float StopMovingSpeed; // 0x2d8(0x04)
	float WalkCycleMinRate; // 0x2dc(0x04)
	float WalkCyclePlayRate; // 0x2e0(0x04)
	float MeshScale; // 0x2e4(0x04)
	float Direction; // 0x2e8(0x04)
	float PathDirectionLerpSpeedIn; // 0x2ec(0x04)
	float PathDirectionLerpSpeedOut; // 0x2f0(0x04)
	float PathDirection; // 0x2f4(0x04)
	float HorizontalAngularSpeed; // 0x2f8(0x04)
	float HorizontalAngularSpeed_Abs; // 0x2fc(0x04)
	float VerticalAngularSpeed; // 0x300(0x04)
	enum class EMoveDirection MoveDirection; // 0x304(0x01)
	bool IsMoving; // 0x305(0x01)
	bool IsStrafing; // 0x306(0x01)
	bool IsMovingAndStrafing; // 0x307(0x01)
	bool IsFrozen; // 0x308(0x01)
	bool IsStaggered; // 0x309(0x01)
	char UnknownData_30A[0x2]; // 0x30a(0x02)
	float StaggerStrength; // 0x30c(0x04)
	bool IsAirborne; // 0x310(0x01)
	char UnknownData_311[0x7]; // 0x311(0x07)
	struct UParticleSystem* FootStepParticle; // 0x318(0x08)
	struct USoundCue* FootStepSound; // 0x320(0x08)
	struct FName FootStepLeftBoneName; // 0x328(0x08)
	struct FName FootStepRightBoneName; // 0x330(0x08)
	float FootStepParticleCullDistance; // 0x338(0x04)
	char UnknownData_33C[0x4]; // 0x33c(0x04)
	struct TMap<struct UEnemyPlaySoundKey*, struct USoundCue*> PlaySoundByKeyMap; // 0x340(0x50)
	struct TMap<struct UEnemySpawnEffectsKey*, struct UParticleSystem*> SpawnEffectsByKeyMap; // 0x390(0x50)
	int32_t RandomWalkCycleIndex; // 0x3e0(0x04)
	char UnknownData_3E4[0x4]; // 0x3e4(0x04)
	struct TArray<struct FRandomWalkCycleEntry> RandomWalkCycles; // 0x3e8(0x10)
	bool TurnToIdle; // 0x3f8(0x01)
	bool IdleToTurnLeft; // 0x3f9(0x01)
	bool IdleToTurnRight; // 0x3fa(0x01)
	bool TurnToWalk; // 0x3fb(0x01)
	bool WalkToTurnRight; // 0x3fc(0x01)
	bool WalkToTurnLeft; // 0x3fd(0x01)
	bool IsInFakePhysics; // 0x3fe(0x01)
	char UnknownData_3FF[0x11]; // 0x3ff(0x11)

	void SetMeshScale(float NewScale); // Function FSD.SpiderAnimInstance.SetMeshScale
	void SetDeathAnimation(struct UAnimSequenceBase* Animation); // Function FSD.SpiderAnimInstance.SetDeathAnimation
	void PlayForcedCycle(float Duration); // Function FSD.SpiderAnimInstance.PlayForcedCycle
};

// Class FSD.FacilityDroneAnimInstnace
// Size: 0x430 (Inherited: 0x410)
struct UFacilityDroneAnimInstnace : USpiderAnimInstance {
	struct FRotator TurretRotation; // 0x408(0x0c)
	struct FRotator ModifiedTurretRotation; // 0x414(0x0c)
	enum class EFacilityDroneState DroneState; // 0x420(0x01)
	char UnknownData_429[0x7]; // 0x429(0x07)
};

// Class FSD.FacilityGeneratorLine
// Size: 0x2a0 (Inherited: 0x220)
struct AFacilityGeneratorLine : AActor {
	float HeightOffsetMin; // 0x220(0x04)
	float HeightOffsetMax; // 0x224(0x04)
	float MaxSegmentLength; // 0x228(0x04)
	char UnknownData_22C[0x4]; // 0x22c(0x04)
	struct USplineComponent* SplineComponent; // 0x230(0x08)
	struct TSoftObjectPtr<struct UStaticMesh> LineMeshPtr; // 0x238(0x28)
	struct ATetherStation* Station; // 0x260(0x08)
	struct AActor* Generator; // 0x268(0x08)
	struct UStaticMesh* MeshInstance; // 0x270(0x08)
	char UnknownData_278[0x10]; // 0x278(0x10)
	struct TArray<struct FVector> ReplicatedPath; // 0x288(0x10)
	char UnknownData_298[0x8]; // 0x298(0x08)

	void OnRep_Path(); // Function FSD.FacilityGeneratorLine.OnRep_Path
};

// Class FSD.FacilityObjective
// Size: 0x2a8 (Inherited: 0x150)
struct UFacilityObjective : UObjective {
	SoftClassProperty GeneratorClass; // 0x150(0x28)
	SoftClassProperty GeneratorBeaconClass; // 0x178(0x28)
	int32_t GeneratorCount; // 0x1a0(0x04)
	struct FDelegate OnFirstEncounterDroneSpawned_Delegate; // 0x1a4(0x10)
	struct FDelegate OnSecondEncounterDroneSpawned_Delegate; // 0x1b4(0x10)
	char UnknownData_1C4[0x2c]; // 0x1c4(0x2c)
	struct TArray<struct UEnemyDescriptor*> TurretDescriptors; // 0x1f0(0x10)
	struct TArray<struct UEnemyDescriptor*> EncounterEnemies; // 0x200(0x10)
	float EncounterDifficulty; // 0x210(0x04)
	char UnknownData_214[0x4]; // 0x214(0x04)
	struct FRandInterval Diversity; // 0x218(0x10)
	struct FIRandRange EncountersPerRoom; // 0x228(0x08)
	struct FIRandRange TurretEncountersRange; // 0x230(0x08)
	int32_t MinimumTurretEncounters; // 0x238(0x04)
	char UnknownData_23C[0x4]; // 0x23c(0x04)
	struct TArray<struct AActor*> SmallGenerators; // 0x240(0x10)
	struct ATetherStation* mainFacility; // 0x250(0x08)
	struct AActor* ActiveTetherGenerator; // 0x258(0x08)
	struct TArray<int32_t> ShieldGeneratorRooms; // 0x260(0x10)
	int32_t MainFacilityRoom; // 0x270(0x04)
	char UnknownData_274[0x4]; // 0x274(0x04)
	struct TArray<struct AActor*> ShieldGenerators; // 0x278(0x10)
	struct UResourceData* GoalResource; // 0x288(0x08)
	float AmountRequired; // 0x290(0x04)
	float AmountCollected; // 0x294(0x04)
	int32_t GeneratorsActivated; // 0x298(0x04)
	char UnknownData_29C[0xc]; // 0x29c(0x0c)

	void SpawnFacilityEncounters(struct AProceduralSetup* setup, struct UEncounterManager* Encounters, int32_t turretIndex); // Function FSD.FacilityObjective.SpawnFacilityEncounters
	struct TArray<struct FTransform> SpawnEndBattleTurrets(int32_t amountOfTurrets, struct AProceduralSetup* setup, struct UDebrisPositioning* DebrisPositioning, struct AActor* terrainPlacement, bool success); // Function FSD.FacilityObjective.SpawnEndBattleTurrets
	void SetMainFacility(struct ATetherStation* mainFacility); // Function FSD.FacilityObjective.SetMainFacility
	void SetActiveTetherGenerator(struct AActor* tetherGenerator); // Function FSD.FacilityObjective.SetActiveTetherGenerator
	void SecondGeneratorEncounterSpawn(struct APawn* spawned); // Function FSD.FacilityObjective.SecondGeneratorEncounterSpawn
	struct AActor* PlaceObjectInRoom(struct AProceduralSetup* setup, int32_t roomIndex, struct FVector Origin, float Radius, struct UDebrisPositioning* Positioning, struct AActor* placementActor, struct UCurveFloat* debrisCurve); // Function FSD.FacilityObjective.PlaceObjectInRoom
	void OnResourceChanged(struct UCappedResource* Resource, float amount); // Function FSD.FacilityObjective.OnResourceChanged
	void OnRep_GeneratorsActivated(); // Function FSD.FacilityObjective.OnRep_GeneratorsActivated
	void OnRep_AmountCollected(); // Function FSD.FacilityObjective.OnRep_AmountCollected
	void OnCoreDeposited(); // Function FSD.FacilityObjective.OnCoreDeposited
	void InitGeneratorCount(int32_t generators); // Function FSD.FacilityObjective.InitGeneratorCount
	struct FTransform GetTurretGoal(struct AProceduralSetup* setup, struct FVector Origin, float idealRange, struct UDebrisPositioning* DebrisPositioning, struct AActor* terrainPlacement, bool success); // Function FSD.FacilityObjective.GetTurretGoal
	struct TArray<struct AActor*> GetOverChargers(); // Function FSD.FacilityObjective.GetOverChargers
	bool GetGeneratorsDone(); // Function FSD.FacilityObjective.GetGeneratorsDone
	int32_t GetFacilityRoomIndex(); // Function FSD.FacilityObjective.GetFacilityRoomIndex
	struct FVector GetFacilityLocation(); // Function FSD.FacilityObjective.GetFacilityLocation
	void GeneratorActivated(); // Function FSD.FacilityObjective.GeneratorActivated
	void FirstGeneratorEncounterSpawn(struct APawn* spawned); // Function FSD.FacilityObjective.FirstGeneratorEncounterSpawn
	void DropOverCharger(struct AProceduralSetup* setup, int32_t roomIndex, struct FVector facilityLocation, float idealRange, struct UDebrisPositioning* DebrisPositioning, struct AActor* terrainPlacement); // Function FSD.FacilityObjective.DropOverCharger
	void ChangeObjective(); // Function FSD.FacilityObjective.ChangeObjective
	void AddShieldGenerator(struct AActor* charger, int32_t roomIndex); // Function FSD.FacilityObjective.AddShieldGenerator
};

// Class FSD.FacilityShieldGenerator
// Size: 0x248 (Inherited: 0x220)
struct AFacilityShieldGenerator : AActor {
	char UnknownData_220[0x8]; // 0x220(0x08)
	struct FGameplayTagContainer GameplayTags; // 0x228(0x20)
};

// Class FSD.FacilityTurretController
// Size: 0x378 (Inherited: 0x358)
struct AFacilityTurretController : AFSDAIController {
	struct UAIPerceptionComponent* Perception; // 0x358(0x08)
	char UnknownData_360[0x18]; // 0x360(0x18)

	void OnTurretsAttackingChanged(bool IsAttacking); // Function FSD.FacilityTurretController.OnTurretsAttackingChanged
	void OnTargetDied(struct UHealthComponentBase* Health); // Function FSD.FacilityTurretController.OnTargetDied
	void OnPerceptionUpdated(struct AActor* sensedActor, struct FAIStimulus Stimulus); // Function FSD.FacilityTurretController.OnPerceptionUpdated
};

// Class FSD.FacilityTurret
// Size: 0x3a0 (Inherited: 0x338)
struct AFacilityTurret : AEnemyPawn {
	char UnknownData_338[0x8]; // 0x338(0x08)
	struct USceneComponent* Root; // 0x340(0x08)
	struct UProjectileAttackComponent* Attack; // 0x348(0x08)
	struct UParticleSystemComponent* RangeIndicatorParticles; // 0x350(0x08)
	char UnknownData_358[0x10]; // 0x358(0x10)
	struct USoundCue* EngagedAudio; // 0x368(0x08)
	struct AProjectileBase* projectileClass; // 0x370(0x08)
	char UnknownData_378[0x14]; // 0x378(0x14)
	float Offset; // 0x38c(0x04)
	struct AActor* CurrentTarget; // 0x390(0x08)
	bool TurretEngaged; // 0x398(0x01)
	bool AlwaysActive; // 0x399(0x01)
	char UnknownData_39A[0x6]; // 0x39a(0x06)

	void SetIsAttacking(bool IsAttacking); // Function FSD.FacilityTurret.SetIsAttacking
	void OnWeaponFired(struct FVector HitResult); // Function FSD.FacilityTurret.OnWeaponFired
	void OnRep_TurretEngaged(); // Function FSD.FacilityTurret.OnRep_TurretEngaged
	void OnEngagedChanged(bool engaged); // Function FSD.FacilityTurret.OnEngagedChanged
	struct FRotator GetLookingDirection(); // Function FSD.FacilityTurret.GetLookingDirection
	struct FVector GetEyeLoc(); // Function FSD.FacilityTurret.GetEyeLoc
};

// Class FSD.SpinningFacilityturret
// Size: 0x3d0 (Inherited: 0x3a0)
struct ASpinningFacilityturret : AFacilityTurret {
	struct FRotator TargetRotation; // 0x3a0(0x0c)
	struct FRandRange AimAtTargetEveryTurn; // 0x3ac(0x08)
	float TurnCooldown; // 0x3b4(0x04)
	float TurnTimer; // 0x3b8(0x04)
	float Acceptance; // 0x3bc(0x04)
	float TurnSpeed; // 0x3c0(0x04)
	char UnknownData_3C4[0xc]; // 0x3c4(0x0c)

	void OnAttack(); // Function FSD.SpinningFacilityturret.OnAttack
};

// Class FSD.AimingFacilityTurret
// Size: 0x3d0 (Inherited: 0x3a0)
struct AAimingFacilityTurret : AFacilityTurret {
	float LockonTime; // 0x3a0(0x04)
	float BurstInterval; // 0x3a4(0x04)
	float FireInterval; // 0x3a8(0x04)
	float TurretRotationSpeed; // 0x3ac(0x04)
	char UnknownData_3B0[0x14]; // 0x3b0(0x14)
	struct FInt32Interval BurstCount; // 0x3c4(0x08)
	bool IsLockedOn; // 0x3cc(0x01)
	char UnknownData_3CD[0x3]; // 0x3cd(0x03)
};

// Class FSD.FakeFallComponent
// Size: 0xd8 (Inherited: 0xb0)
struct UFakeFallComponent : UActorComponent {
	char UnknownData_B0[0x28]; // 0xb0(0x28)

	void StartFakeFall(); // Function FSD.FakeFallComponent.StartFakeFall
};

// Class FSD.FakeMoverSettings
// Size: 0x90 (Inherited: 0x30)
struct UFakeMoverSettings : UDataAsset {
	enum class DeepPathFinderSize PathfinderColiSize; // 0x30(0x01)
	bool StickToSurface; // 0x31(0x01)
	bool AlignRotationToSurface; // 0x32(0x01)
	char UnknownData_33[0x1]; // 0x33(0x01)
	float AirFriction; // 0x34(0x04)
	float SurfaceFriction; // 0x38(0x04)
	float Gravity; // 0x3c(0x04)
	float AirGravity; // 0x40(0x04)
	struct FFakeMoverPropulsion Propulsion; // 0x44(0x14)
	struct FFakeMoverTarget NearestPlayerInfluence; // 0x58(0x1c)
	struct FFakeMoverTarget TargetInfluence; // 0x74(0x1c)
};

// Class FSD.FakePhysicsMover
// Size: 0x2c0 (Inherited: 0x220)
struct AFakePhysicsMover : AActor {
	struct USceneComponent* Root; // 0x220(0x08)
	struct FFakeMoverState MoverState; // 0x228(0x60)
	struct FFakeMoveState posVel; // 0x288(0x24)
	char UnknownData_2AC[0x4]; // 0x2ac(0x04)
	struct UFakeMoverSettings* MoveSettings; // 0x2b0(0x08)
	float SyncTime; // 0x2b8(0x04)
	char UnknownData_2BC[0x4]; // 0x2bc(0x04)

	void Teleport(struct FVector Pos, struct FVector Vel); // Function FSD.FakePhysicsMover.Teleport
	void OnRep_PosVel(struct FFakeMoveState posVel); // Function FSD.FakePhysicsMover.OnRep_PosVel
	void OnRep_MoveSettings(struct UFakeMoverSettings* MoveSettings); // Function FSD.FakePhysicsMover.OnRep_MoveSettings
	void ApplyImpulse(struct FVector Impulse); // Function FSD.FakePhysicsMover.ApplyImpulse
};

// Class FSD.FallingStateComponent
// Size: 0x1a0 (Inherited: 0xf8)
struct UFallingStateComponent : UCharacterStateComponent {
	float FallDamageStartVelocity; // 0xf8(0x04)
	float FallDamageModifier; // 0xfc(0x04)
	float AutoClimbMinDelay; // 0x100(0x04)
	float AutoClimbLookForwardDistance; // 0x104(0x04)
	float MaxClimbHeight; // 0x108(0x04)
	float MinClimbHeight; // 0x10c(0x04)
	float CapsuleCheckZOffset; // 0x110(0x04)
	float MinInputDotProduct; // 0x114(0x04)
	float JumpZVelocity; // 0x118(0x04)
	bool DebugAutoClimb; // 0x11c(0x01)
	char UnknownData_11D[0x3]; // 0x11d(0x03)
	struct UDialogDataAsset* FallingShout; // 0x120(0x08)
	float ShoutAfterDistance; // 0x128(0x04)
	char UnknownData_12C[0x4]; // 0x12c(0x04)
	struct UUseAnimationSetting* ClimbUseSettings; // 0x130(0x08)
	char UnknownData_138[0x24]; // 0x138(0x24)
	float HoverBootAirFriction; // 0x15c(0x04)
	float HoverBootAirControl; // 0x160(0x04)
	float HoverBootGravityScale; // 0x164(0x04)
	struct UDialogDataAsset* ShoutHoverBootsBegin; // 0x168(0x08)
	float HoverBootActivateDuration; // 0x170(0x04)
	bool bHoverBootsActive; // 0x174(0x01)
	char UnknownData_175[0x3]; // 0x175(0x03)
	float HoverBootMaxDuration; // 0x178(0x04)
	struct FVector2D JumpBootsVelocityWindow; // 0x17c(0x08)
	float JumpBootsZVelocity; // 0x184(0x04)
	char UnknownData_188[0x8]; // 0x188(0x08)
	bool JumpBootsActive; // 0x190(0x01)
	char UnknownData_191[0xf]; // 0x191(0x0f)

	void ShowJumpBootsActivation(); // Function FSD.FallingStateComponent.ShowJumpBootsActivation
	void Server_TakeFallDamage(float amount); // Function FSD.FallingStateComponent.Server_TakeFallDamage
	void Server_ShowFallImpact(struct UFSDPhysicalMaterial* PhysMat); // Function FSD.FallingStateComponent.Server_ShowFallImpact
	void Server_SetJumpPressed(bool Pressed); // Function FSD.FallingStateComponent.Server_SetJumpPressed
	void Server_SetHoverBootsPressed(bool IsPressed); // Function FSD.FallingStateComponent.Server_SetHoverBootsPressed
	void Server_SetFallVelocity(float Velocity); // Function FSD.FallingStateComponent.Server_SetFallVelocity
	void Server_ClimbLedge(bool shouldPlayAnimation); // Function FSD.FallingStateComponent.Server_ClimbLedge
	void Server_ActivateJumpBoots(); // Function FSD.FallingStateComponent.Server_ActivateJumpBoots
	void ReceiveHoverBootsTick(float DeltaSeconds); // Function FSD.FallingStateComponent.ReceiveHoverBootsTick
	void ReceiveHoverBootsActiveChanged(bool IsActive); // Function FSD.FallingStateComponent.ReceiveHoverBootsActiveChanged
	void OnRep_HoverBootsActive(); // Function FSD.FallingStateComponent.OnRep_HoverBootsActive
	void JumpReleased(); // Function FSD.FallingStateComponent.JumpReleased
	void JumpPressed(); // Function FSD.FallingStateComponent.JumpPressed
	void HoverBootsReleased(); // Function FSD.FallingStateComponent.HoverBootsReleased
	void HoverBootsPressed(); // Function FSD.FallingStateComponent.HoverBootsPressed
	void All_ShowJumpBootsActivation(); // Function FSD.FallingStateComponent.All_ShowJumpBootsActivation
	void All_ShowFallImpact(struct UFSDPhysicalMaterial* PhysMat); // Function FSD.FallingStateComponent.All_ShowFallImpact
	void All_ShowClimbLedge(); // Function FSD.FallingStateComponent.All_ShowClimbLedge
};

// Class FSD.FindFriendSessionsBlueprintCallProxy
// Size: 0x80 (Inherited: 0x30)
struct UFindFriendSessionsBlueprintCallProxy : UOnlineBlueprintCallProxyBase {
	struct FMulticastInlineDelegate OnSuccess; // 0x30(0x10)
	struct FMulticastInlineDelegate OnFailure; // 0x40(0x10)
	struct UObject* WorldContextObject; // 0x50(0x08)
	char UnknownData_58[0x28]; // 0x58(0x28)

	struct UFindFriendSessionsBlueprintCallProxy* FindFriendSessions(struct UObject* WorldContextObject, struct FString FriendId); // Function FSD.FindFriendSessionsBlueprintCallProxy.FindFriendSessions
};

// Class FSD.FirstPersonSkeletalMeshComponent
// Size: 0xac0 (Inherited: 0xac0)
struct UFirstPersonSkeletalMeshComponent : USkeletalMeshComponent {

	struct FVector CalcFirstPersonFOVPositionCorrection(struct APlayerController* PlayerController, struct FVector origPos); // Function FSD.FirstPersonSkeletalMeshComponent.CalcFirstPersonFOVPositionCorrection
};

// Class FSD.FirstPersonStaticMeshComponent
// Size: 0x490 (Inherited: 0x480)
struct UFirstPersonStaticMeshComponent : UStaticMeshComponent {
	bool EnabledFPFOV; // 0x480(0x01)
	char UnknownData_481[0xf]; // 0x481(0x0f)
};

// Class FSD.FirstPersonWidgetComponent
// Size: 0x540 (Inherited: 0x540)
struct UFirstPersonWidgetComponent : UWidgetComponent {
};

// Class FSD.FirstPersonParticleSystemComponent
// Size: 0x650 (Inherited: 0x650)
struct UFirstPersonParticleSystemComponent : UParticleSystemComponent {

	struct UParticleSystemComponent* SpawnFirstPersonEmitterAttached(struct UParticleSystem* EmitterTemplate, struct USceneComponent* AttachToComponent, struct FName AttachPointName, struct FVector Location, struct FRotator Rotation, struct FVector Scale, char LocationType, bool bAutoDestroy); // Function FSD.FirstPersonParticleSystemComponent.SpawnFirstPersonEmitterAttached
};

// Class FSD.FirstPersonPointLightComponent
// Size: 0x350 (Inherited: 0x350)
struct UFirstPersonPointLightComponent : UPointLightComponent {
};

// Class FSD.FlameThrowerItem
// Size: 0x850 (Inherited: 0x690)
struct AFlameThrowerItem : AAmmoDrivenWeapon {
	struct UParticleSystemComponent* FlameParticleComponent; // 0x690(0x08)
	struct UDamageComponent* DamageComponent; // 0x698(0x08)
	struct UStickyFlameSpawner* StickyFlames; // 0x6a0(0x08)
	struct UDamageComponent* AoEHeatDamageComponent; // 0x6a8(0x08)
	struct UDamageComponent* ExplodingTargetsDamageComponent; // 0x6b0(0x08)
	struct UMotionAudioController* MotionAudio; // 0x6b8(0x08)
	struct FDecalData ImpactDecal; // 0x6c0(0x18)
	float DecalDelay; // 0x6d8(0x04)
	float CurrentDecalDelay; // 0x6dc(0x04)
	struct UParticleSystem* ImpactParticles; // 0x6e0(0x08)
	struct UParticleSystemComponent* ImpactParticleInstance; // 0x6e8(0x08)
	struct UParticleSystem* FP_LongReachParticles; // 0x6f0(0x08)
	struct UParticleSystem* TP_LongReachParticles; // 0x6f8(0x08)
	float VeryLongReachThreshold; // 0x700(0x04)
	char UnknownData_704[0x4]; // 0x704(0x04)
	struct UParticleSystem* FP_VeryLongReachParticles; // 0x708(0x08)
	struct UParticleSystem* TP_VeryLongReachParticles; // 0x710(0x08)
	struct TArray<struct FName> FlameParameterNames; // 0x718(0x10)
	float DamageSphereRadius; // 0x728(0x04)
	float MaxFlameDistance; // 0x72c(0x04)
	float FlameGrowthPerSecond; // 0x730(0x04)
	float FlameEndPointResponsiveness; // 0x734(0x04)
	float FlameIntensityPerSecond; // 0x738(0x04)
	char UnknownData_73C[0x4]; // 0x73c(0x04)
	struct UStatusEffect* OnFireStatusEffect; // 0x740(0x08)
	float ChanceToFleeOnDamage; // 0x748(0x04)
	float MeltPointRadius; // 0x74c(0x04)
	float MeltPointBuildTime; // 0x750(0x04)
	float MeltCarveTime; // 0x754(0x04)
	struct UParticleSystem* MeltSteamParticle; // 0x758(0x08)
	struct TArray<struct UItemUpgrade*> Upgrades; // 0x760(0x10)
	bool LongReachEnabled; // 0x770(0x01)
	char UnknownData_771[0xf]; // 0x771(0x0f)
	bool AoEHeatEnabled; // 0x780(0x01)
	char UnknownData_781[0x3]; // 0x781(0x03)
	float KilledTargetsExplosionChance; // 0x784(0x04)
	float ShowDamageParticle; // 0x788(0x04)
	char UnknownData_78C[0x4]; // 0x78c(0x04)
	struct UParticleSystem* DamangeTargetsParticles; // 0x790(0x08)
	struct UParticleSystem* KilledTargetsExplodingParticles; // 0x798(0x08)
	struct USoundCue* KilledTargetsExplodingSound; // 0x7a0(0x08)
	char UnknownData_7A8[0xa8]; // 0x7a8(0xa8)

	void TriggerAoEHeat(); // Function FSD.FlameThrowerItem.TriggerAoEHeat
	void ServerMeltIce(struct TArray<struct FVector> meltPoints); // Function FSD.FlameThrowerItem.ServerMeltIce
	void ServerDoDamage(struct FVector_NetQuantize Start, struct FVector_NetQuantize End); // Function FSD.FlameThrowerItem.ServerDoDamage
	void OnTargetKilled(struct AActor* Target, struct UFSDPhysicalMaterial* PhysMat); // Function FSD.FlameThrowerItem.OnTargetKilled
	void OnTargetDamaged(struct UHealthComponentBase* Health, float amount, struct UFSDPhysicalMaterial* PhysicalMaterial); // Function FSD.FlameThrowerItem.OnTargetDamaged
	void All_ShowTargetBurstIntoFire(struct FVector_NetQuantize Location, struct FRotator Rotation); // Function FSD.FlameThrowerItem.All_ShowTargetBurstIntoFire
	void All_FlameFeedback(struct FVector_NetQuantize Location, struct FRotator Rotation); // Function FSD.FlameThrowerItem.All_FlameFeedback
};

// Class FSD.Flare
// Size: 0x2b0 (Inherited: 0x230)
struct AFlare : AFSDPhysicsActor {
	char UnknownData_230[0x18]; // 0x230(0x18)
	float InitialSpeed; // 0x248(0x04)
	float InitialAngularImpulse; // 0x24c(0x04)
	float InitialAngularImpulseRandomScale; // 0x250(0x04)
	int32_t MaxFlares; // 0x254(0x04)
	float ProductionTime; // 0x258(0x04)
	float Duration; // 0x25c(0x04)
	struct FLinearColor ChromaColor; // 0x260(0x10)
	bool IsFlareOn; // 0x270(0x01)
	char UnknownData_271[0x7]; // 0x271(0x07)
	struct AActor* DamageCauser; // 0x278(0x08)
	struct AActor* WeaponPreviewClass; // 0x280(0x08)
	struct AItem* LoadoutItem; // 0x288(0x08)
	char UnknownData_290[0x8]; // 0x290(0x08)
	struct UItemID* ItemID; // 0x298(0x08)
	struct USoundCue* ImpactGroundSound; // 0x2a0(0x08)
	char UnknownData_2A8[0x8]; // 0x2a8(0x08)

	void OnUpdateShadowRadius(); // Function FSD.Flare.OnUpdateShadowRadius
	void OnRep_IsFlareOn(); // Function FSD.Flare.OnRep_IsFlareOn
	void OnFlareSpawnCompleted(); // Function FSD.Flare.OnFlareSpawnCompleted
	void OnFlareIgnite(); // Function FSD.Flare.OnFlareIgnite
	void OnFlareExtinguish(); // Function FSD.Flare.OnFlareExtinguish
	void Inhibit(); // Function FSD.Flare.Inhibit
	struct AActor* GetWeaponViewClass(); // Function FSD.Flare.GetWeaponViewClass
	struct AFlare* GetFlareDefaultObject(struct AFlare* flareClass); // Function FSD.Flare.GetFlareDefaultObject
	void ActorWasHit(struct AActor* SelfActor, struct AActor* OtherActor, struct FVector NormalImpulse, struct FHitResult Hit); // Function FSD.Flare.ActorWasHit
	void ActivateFlare(); // Function FSD.Flare.ActivateFlare
};

// Class FSD.FlareGunProjectile
// Size: 0x300 (Inherited: 0x2f0)
struct AFlareGunProjectile : AProjectile {
	float Duration; // 0x2f0(0x04)
	bool IsFlareOn; // 0x2f4(0x01)
	char UnknownData_2F5[0xb]; // 0x2f5(0x0b)

	void OnUpdateShadowRadius(); // Function FSD.FlareGunProjectile.OnUpdateShadowRadius
	void OnRep_IsFlareOn(); // Function FSD.FlareGunProjectile.OnRep_IsFlareOn
	void OnProjectileSpawnCompleted(); // Function FSD.FlareGunProjectile.OnProjectileSpawnCompleted
	void OnFlareIgnite(); // Function FSD.FlareGunProjectile.OnFlareIgnite
	void OnFlareExtinguish(); // Function FSD.FlareGunProjectile.OnFlareExtinguish
	void OnDroppodImpact(struct AMiningPod* DropPod); // Function FSD.FlareGunProjectile.OnDroppodImpact
	void Inhibit(); // Function FSD.FlareGunProjectile.Inhibit
	void ActivateFlare(); // Function FSD.FlareGunProjectile.ActivateFlare
};

// Class FSD.FlareController
// Size: 0xd8 (Inherited: 0xb0)
struct UFlareController : UActorComponent {
	struct FMulticastInlineDelegate OnShadowQualityChanged; // 0xb0(0x10)
	struct TArray<struct FFlareMeta> FlaresMeta; // 0xc0(0x10)
	char UnknownData_D0[0x8]; // 0xd0(0x08)

	void UnregisterFlareGunProjectile(struct AFlareGunProjectile* flareprj); // Function FSD.FlareController.UnregisterFlareGunProjectile
	void UnregisterFlare(struct AFlare* Flare); // Function FSD.FlareController.UnregisterFlare
	void RegisterFlareGunProjectile(struct AFlareGunProjectile* flareprj); // Function FSD.FlareController.RegisterFlareGunProjectile
	void RegisterFlare(struct AFlare* Flare); // Function FSD.FlareController.RegisterFlare
	struct AActor* FindFlareNear(struct UObject* WorldContextObject, struct FVector Pos, bool allowMoving, float maxLightRadiusFraction); // Function FSD.FlareController.FindFlareNear
};

// Class FSD.NegPointLightComponent
// Size: 0x350 (Inherited: 0x350)
struct UNegPointLightComponent : UPointLightComponent {
};

// Class FSD.PerkAsset
// Size: 0xc8 (Inherited: 0x30)
struct UPerkAsset : UDataAsset {
	struct FGuid SavegameID; // 0x30(0x10)
	struct FText Title; // 0x40(0x18)
	struct UTexture2D* Icon; // 0x58(0x08)
	bool bIsEquippable; // 0x60(0x01)
	char UnknownData_61[0x7]; // 0x61(0x07)
	struct UDialogDataAsset* ShoutOnUseCharge; // 0x68(0x08)
	struct TArray<SoftClassProperty> PerkLogicClasses; // 0x70(0x10)
	SoftClassProperty HudIconWidgetClass; // 0x80(0x28)
	struct TArray<SoftClassProperty> HudActivationWidgets; // 0xa8(0x10)
	int32_t MaxUseCharges; // 0xb8(0x04)
	float CoolDownBetweenUse; // 0xbc(0x04)
	bool bIsHighlighted; // 0xc0(0x01)
	char UnknownData_C1[0x7]; // 0xc1(0x07)

	bool UseCharge(struct APlayerController* PlayerController); // Function FSD.PerkAsset.UseCharge
	bool Unequip(struct UObject* WorldContext, struct UPlayerCharacterID* characterID); // Function FSD.PerkAsset.Unequip
	void SetHighlighted(struct UObject* WorldContext, bool IsHighlighted); // Function FSD.PerkAsset.SetHighlighted
	void SetCharacterPerks(struct UObject* WorldContext, struct UPlayerCharacterID* characterID, struct TArray<struct UPerkAsset*> perks); // Function FSD.PerkAsset.SetCharacterPerks
	bool IsUsageType(enum class EPerkUsageType InType); // Function FSD.PerkAsset.IsUsageType
	bool IsPerkAvailableInTier(int32_t Tier); // Function FSD.PerkAsset.IsPerkAvailableInTier
	bool IsEquippedBy(struct UObject* WorldContext, struct UPlayerCharacterID* characterID); // Function FSD.PerkAsset.IsEquippedBy
	float GetUseCoolDownTimeLeft(struct APlayerController* PlayerController); // Function FSD.PerkAsset.GetUseCoolDownTimeLeft
	float GetUseCoolDownProgress(struct APlayerController* PlayerController); // Function FSD.PerkAsset.GetUseCoolDownProgress
	float GetUseCoolDownDuration(struct APlayerController* PlayerController); // Function FSD.PerkAsset.GetUseCoolDownDuration
	enum class EPerkUsageType GetUsageType(); // Function FSD.PerkAsset.GetUsageType
	enum class EPerkTierState GetStateAtTier(struct UObject* WorldContext, int32_t Tier); // Function FSD.PerkAsset.GetStateAtTier
	int32_t GetRemainingUseCharges(struct APlayerController* PlayerController); // Function FSD.PerkAsset.GetRemainingUseCharges
	int32_t GetRankTier(int32_t Rank); // Function FSD.PerkAsset.GetRankTier
	struct FText GetRankDescription(int32_t Rank); // Function FSD.PerkAsset.GetRankDescription
	int32_t GetRankCost(int32_t Rank); // Function FSD.PerkAsset.GetRankCost
	bool GetRankAtTier(int32_t Tier, int32_t Rank); // Function FSD.PerkAsset.GetRankAtTier
	int32_t GetMaxUseCharges(struct APlayerController* PlayerController); // Function FSD.PerkAsset.GetMaxUseCharges
	struct UPerkHUDIconWidget* GetHudIconWidgetClass(); // Function FSD.PerkAsset.GetHudIconWidgetClass
	struct TArray<struct UPerkHUDActivationWidget*> GetHudActivationWidgets(enum class EPerkHUDActivationLocation Location); // Function FSD.PerkAsset.GetHudActivationWidgets
	struct UPerkDelegateItem* GetDelegates(struct UObject* WorldContext); // Function FSD.PerkAsset.GetDelegates
	int32_t GetCurrentRank(struct UObject* WorldContext); // Function FSD.PerkAsset.GetCurrentRank
	int32_t GetChargesUsed(struct APlayerController* PlayerController); // Function FSD.PerkAsset.GetChargesUsed
	struct FString GetAdditionalRankDescription(int32_t Rank); // Function FSD.PerkAsset.GetAdditionalRankDescription
	bool Equip(struct UObject* WorldContext, struct UPlayerCharacterID* characterID); // Function FSD.PerkAsset.Equip
	bool CanUseCharge(struct APlayerController* PlayerController); // Function FSD.PerkAsset.CanUseCharge
	bool BuyPerkAtTier(struct UObject* WorldContext, int32_t Tier); // Function FSD.PerkAsset.BuyPerkAtTier
};

// Class FSD.FloatPerkAsset
// Size: 0xe8 (Inherited: 0xc8)
struct UFloatPerkAsset : UPerkAsset {
	struct TArray<struct FFloatPerkRank> Ranks; // 0xc8(0x10)
	struct TArray<struct FFloatPerkEffect> Effects; // 0xd8(0x10)

	float GetPerkValue(struct UObject* WorldContext); // Function FSD.FloatPerkAsset.GetPerkValue
	float GetLastTierValue(); // Function FSD.FloatPerkAsset.GetLastTierValue
	float GetFloatPerkValue(struct UObject* WorldContext, struct UFloatPerkAsset* Perk, float UnclaimedValue); // Function FSD.FloatPerkAsset.GetFloatPerkValue
};

// Class FSD.FloatPerkActivation
// Size: 0x30 (Inherited: 0x30)
struct UFloatPerkActivation : UDataAsset {

	void Receive_ActivatePerk(struct APlayerCharacter* Character, float Value); // Function FSD.FloatPerkActivation.Receive_ActivatePerk
};

// Class FSD.StatPerkActivation
// Size: 0x40 (Inherited: 0x30)
struct UStatPerkActivation : UFloatPerkActivation {
	struct UPawnStat* PawnStat; // 0x30(0x08)
	enum class EPawnStatType StatType; // 0x38(0x01)
	char UnknownData_39[0x7]; // 0x39(0x07)
};

// Class FSD.FloatPerkComponent
// Size: 0xc0 (Inherited: 0xb0)
struct UFloatPerkComponent : UActorComponent {
	float FloatValue; // 0xb0(0x04)
	char UnknownData_B4[0x4]; // 0xb4(0x04)
	struct APlayerCharacter* PlayerCharacter; // 0xb8(0x08)

	void Receive_OnInitialized(); // Function FSD.FloatPerkComponent.Receive_OnInitialized
};

// Class FSD.CreateComponentPerkActivation
// Size: 0x58 (Inherited: 0x30)
struct UCreateComponentPerkActivation : UFloatPerkActivation {
	SoftClassProperty ComponentClass; // 0x30(0x28)
};

// Class FSD.EscapableGrabberEnemyActivation
// Size: 0x58 (Inherited: 0x30)
struct UEscapableGrabberEnemyActivation : UFloatPerkActivation {
	SoftClassProperty EnemyGrabberClass; // 0x30(0x28)
};

// Class FSD.SetCooldownPerkActivation
// Size: 0x30 (Inherited: 0x30)
struct USetCooldownPerkActivation : UFloatPerkActivation {
};

// Class FSD.SetMaxUsesPerkActivation
// Size: 0x30 (Inherited: 0x30)
struct USetMaxUsesPerkActivation : UFloatPerkActivation {
};

// Class FSD.KillNearbyCreaturePerkComponent
// Size: 0xe8 (Inherited: 0xc0)
struct UKillNearbyCreaturePerkComponent : UFloatPerkComponent {
	SoftClassProperty EnemyClass; // 0xc0(0x28)
};

// Class FSD.BezerkPerkComponent
// Size: 0xd0 (Inherited: 0xc0)
struct UBezerkPerkComponent : UFloatPerkComponent {
	struct UPawnStat* BoostedStat; // 0xc0(0x08)
	float AmountPerValue; // 0xc8(0x04)
	char UnknownData_CC[0x4]; // 0xcc(0x04)

	void OnHealthChanged(float Health); // Function FSD.BezerkPerkComponent.OnHealthChanged
};

// Class FSD.EyeForEyePerkComponent
// Size: 0x100 (Inherited: 0xc0)
struct UEyeForEyePerkComponent : UFloatPerkComponent {
	float Cooldown; // 0xc0(0x04)
	char UnknownData_C4[0x4]; // 0xc4(0x04)
	SoftClassProperty EyeForEyeSTE; // 0xc8(0x28)
	char UnknownData_F0[0x8]; // 0xf0(0x08)
	struct UStatusEffect* LoadedSTE; // 0xf8(0x08)

	void OnHit(float Damage, struct UDamageClass* inDamageClass, struct AActor* DamageCauser, bool anyHealthLost); // Function FSD.EyeForEyePerkComponent.OnHit
};

// Class FSD.ThornsPerkComponent
// Size: 0xe0 (Inherited: 0xc0)
struct UThornsPerkComponent : UFloatPerkComponent {
	struct UDamageClass* DamageClass; // 0xc0(0x08)
	float Cooldown; // 0xc8(0x04)
	char UnknownData_CC[0x4]; // 0xcc(0x04)
	struct UStatusEffect* ThornsSTE; // 0xd0(0x08)
	char UnknownData_D8[0x8]; // 0xd8(0x08)

	void OnHit(float Damage, struct UDamageClass* inDamageClass, struct AActor* DamageCauser, bool anyHealthLost); // Function FSD.ThornsPerkComponent.OnHit
};

// Class FSD.SalutePerkComponent
// Size: 0xd0 (Inherited: 0xc0)
struct USalutePerkComponent : UFloatPerkComponent {
	float Cooldown; // 0xc0(0x04)
	float FleeRadius; // 0xc4(0x04)
	char UnknownData_C8[0x8]; // 0xc8(0x08)

	void OnSalute(); // Function FSD.SalutePerkComponent.OnSalute
};

// Class FSD.ShieldLinkComponent
// Size: 0x138 (Inherited: 0xc0)
struct UShieldLinkComponent : UFloatPerkComponent {
	struct UStatusEffect* BoostedStatusEffect; // 0xc0(0x08)
	struct UStatusEffect* BoostedStatusEffectInstance; // 0xc8(0x08)
	float LinkDistance; // 0xd0(0x04)
	char UnknownData_D4[0x4]; // 0xd4(0x04)
	struct TSet<struct APlayerCharacter*> LinkedCharacters; // 0xd8(0x50)
	struct UStatusEffect* LinkStatusEffect; // 0x128(0x08)
	char UnknownData_130[0x8]; // 0x130(0x08)

	void TimerFunction(); // Function FSD.ShieldLinkComponent.TimerFunction
};

// Class FSD.BeastMasterComponent
// Size: 0xc8 (Inherited: 0xc0)
struct UBeastMasterComponent : UFloatPerkComponent {
	bool ShowCanCharmIcon; // 0xc0(0x01)
	char UnknownData_C1[0x7]; // 0xc1(0x07)

	void SetDamage(struct UDamageComponent* cmp, float dmg); // Function FSD.BeastMasterComponent.SetDamage
	struct UActorComponent* AddPetComponent(struct UActorComponent* ComponentClass, struct AFSDPawn* targetPet, struct APlayerCharacter* petOwner); // Function FSD.BeastMasterComponent.AddPetComponent
};

// Class FSD.PetComponent
// Size: 0xb8 (Inherited: 0xb0)
struct UPetComponent : UActorComponent {
	struct FWeakObjectPtr<struct APlayerCharacter> OwningPlayer; // 0xb0(0x08)

	void ReceiveOwningPlayerChanged(); // Function FSD.PetComponent.ReceiveOwningPlayerChanged
};

// Class FSD.BeastMasterUseSphere
// Size: 0x410 (Inherited: 0x410)
struct UBeastMasterUseSphere : USphereComponent {
};

// Class FSD.FloodFillSettings
// Size: 0x68 (Inherited: 0x30)
struct UFloodFillSettings : UDataAsset {
	struct FVector NoiseSize; // 0x30(0x0c)
	float FreqMultiplier; // 0x3c(0x04)
	float AmplitudeMultiplier; // 0x40(0x04)
	float MinValue; // 0x44(0x04)
	float MaxValue; // 0x48(0x04)
	bool Turbulence; // 0x4c(0x01)
	bool Invert; // 0x4d(0x01)
	char UnknownData_4E[0x2]; // 0x4e(0x02)
	int32_t Octaves; // 0x50(0x04)
	char UnknownData_54[0x4]; // 0x54(0x04)
	struct TArray<struct FLayeredNoise> NoiseLayers; // 0x58(0x10)
};

// Class FSD.DetailNoise
// Size: 0x70 (Inherited: 0x68)
struct UDetailNoise : UFloodFillSettings {
	float NoiseRange; // 0x68(0x04)
	char UnknownData_6C[0x4]; // 0x6c(0x04)
};

// Class FSD.FlyingStateComponent
// Size: 0xf8 (Inherited: 0xf8)
struct UFlyingStateComponent : UCharacterStateComponent {
};

// Class FSD.ForgingFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct UForgingFunctionLibrary : UBlueprintFunctionLibrary {

	void SortSchematicDelegate__DelegateSignature(struct USchematic* Schematic1, struct USchematic* Schematic2, bool FirstIsLarger); // DelegateFunction FSD.ForgingFunctionLibrary.SortSchematicDelegate__DelegateSignature
	struct USchematic* GiveForginMasteryReward(struct UObject* WorldContextObject); // Function FSD.ForgingFunctionLibrary.GiveForginMasteryReward
	bool GiveForgingXP(struct UObject* WorldContextObject); // Function FSD.ForgingFunctionLibrary.GiveForgingXP
	struct TArray<struct USchematic*> GetOwnedSchematicsSorted(struct UObject* WorldContextObject, bool SmallestFirst, struct FDelegate IsLargerThan); // Function FSD.ForgingFunctionLibrary.GetOwnedSchematicsSorted
	struct TArray<struct USchematic*> GetOwnedSchematics(struct UObject* WorldContextObject); // Function FSD.ForgingFunctionLibrary.GetOwnedSchematics
	enum class ESchematicType GetNextForgingMasterRewardType(struct UObject* WorldContextObject); // Function FSD.ForgingFunctionLibrary.GetNextForgingMasterRewardType
	int32_t GetForgingXP(struct UObject* WorldContextObject); // Function FSD.ForgingFunctionLibrary.GetForgingXP
	float GetForgingLevelProgress(struct UObject* WorldContextObject); // Function FSD.ForgingFunctionLibrary.GetForgingLevelProgress
	int32_t GetForgingLevel(struct UObject* WorldContextObject); // Function FSD.ForgingFunctionLibrary.GetForgingLevel
	struct TArray<struct USchematic*> GetForgedSchematics(struct UObject* WorldContextObject); // Function FSD.ForgingFunctionLibrary.GetForgedSchematics
	struct TArray<struct USchematic*> GetAllSchematicsSorted(struct UObject* WorldContextObject, bool SmallestFirst, struct FDelegate IsLargerThan); // Function FSD.ForgingFunctionLibrary.GetAllSchematicsSorted
	struct TArray<struct USchematic*> GetAllSchematics(struct UObject* WorldContextObject); // Function FSD.ForgingFunctionLibrary.GetAllSchematics
};

// Class FSD.FormationData
// Size: 0xd0 (Inherited: 0x30)
struct UFormationData : UDataAsset {
	struct TArray<struct FFormationDataItem> FormationItems; // 0x30(0x10)
	struct FGameplayTagQuery LeaderQuery; // 0x40(0x48)
	struct FGameplayTagQuery MemberQuery; // 0x88(0x48)
};

// Class FSD.GroundFormationData
// Size: 0xe0 (Inherited: 0xd0)
struct UGroundFormationData : UFormationData {
	int32_t FormationSize; // 0xd0(0x04)
	float FormationSpread; // 0xd4(0x04)
	float RandomSpread; // 0xd8(0x04)
	char UnknownData_DC[0x4]; // 0xdc(0x04)
};

// Class FSD.FlyingFormationData
// Size: 0xe0 (Inherited: 0xd0)
struct UFlyingFormationData : UFormationData {
	int32_t FormationSize; // 0xd0(0x04)
	float FormationSpread; // 0xd4(0x04)
	float RandomSpread; // 0xd8(0x04)
	char UnknownData_DC[0x4]; // 0xdc(0x04)
};

// Class FSD.FormationsManagerComponent
// Size: 0xd8 (Inherited: 0xb0)
struct UFormationsManagerComponent : UActorComponent {
	struct UEnemySpawnManager* SpawnManager; // 0xb0(0x08)
	struct TArray<struct UFormationData*> FormationData; // 0xb8(0x10)
	char UnknownData_C8[0x10]; // 0xc8(0x10)
};

// Class FSD.FragileDebrisCleaner
// Size: 0x200 (Inherited: 0x1f0)
struct UFragileDebrisCleaner : USceneComponent {
	float CleanRadius; // 0x1f0(0x04)
	char UnknownData_1F4[0xc]; // 0x1f4(0x0c)
};

// Class FSD.FriendlyHealthComponent
// Size: 0x288 (Inherited: 0x248)
struct UFriendlyHealthComponent : UHealthComponent {
	char UnknownData_248[0x4]; // 0x248(0x04)
	float MaxHealth; // 0x24c(0x04)
	float friendlyFireModifier; // 0x250(0x04)
	float NeutralDamageModifier; // 0x254(0x04)
	float BigHitDamageModifier; // 0x258(0x04)
	float BigHitDamageReductionThreshold; // 0x25c(0x04)
	struct UParticleSystem* GenericImpactParticles; // 0x260(0x08)
	char UnknownData_268[0x20]; // 0x268(0x20)

	float GetMaxHealth(); // Function FSD.FriendlyHealthComponent.GetMaxHealth
};

// Class FSD.FrozenStateComponent
// Size: 0x128 (Inherited: 0xf8)
struct UFrozenStateComponent : UCharacterStateComponent {
	struct FRandRange DeFrostAmount; // 0xf8(0x08)
	struct USoundBase* AudioFreeFromIce; // 0x100(0x08)
	struct UFSDPhysicalMaterial* IcePhysicalMaterial; // 0x108(0x08)
	struct UFSDPhysicalMaterial* DwarfFleshMaterial; // 0x110(0x08)
	char UnknownData_118[0x4]; // 0x118(0x04)
	float SlowAnimationSpeed; // 0x11c(0x04)
	char UnknownData_120[0x8]; // 0x120(0x08)

	void Server_ThawPlayer(); // Function FSD.FrozenStateComponent.Server_ThawPlayer
	void ReceiveOnDefrosting(); // Function FSD.FrozenStateComponent.ReceiveOnDefrosting
};

// Class FSD.FSDAchievement
// Size: 0x158 (Inherited: 0x58)
struct UFSDAchievement : USavableDataAsset {
	char UnknownData_58[0x30]; // 0x58(0x30)
	struct FString SteamAPIAchievementName; // 0x88(0x10)
	struct FString SteamAPIStatName; // 0x98(0x10)
	struct FString XboxAchievementID; // 0xa8(0x10)
	float AchievementTargetValue; // 0xb8(0x04)
	char UnknownData_BC[0x4]; // 0xbc(0x04)
	enum class EFSDAchievementType AchievementType; // 0xc0(0x01)
	char UnknownData_C1[0x97]; // 0xc1(0x97)

	void SetAchievementProgressForEntireServer(float Progress, struct UObject* WorldContext); // Function FSD.FSDAchievement.SetAchievementProgressForEntireServer
	void SetAchievementProgress(float Progress, struct AFSDPlayerController* Player, struct UObject* WorldContext); // Function FSD.FSDAchievement.SetAchievementProgress
	void ResetStatForAchievement(struct UFSDAchievement* AchievementToReset, struct AFSDPlayerController* Player); // Function FSD.FSDAchievement.ResetStatForAchievement
	float GetAchievementTargetValue(); // Function FSD.FSDAchievement.GetAchievementTargetValue
};

// Class FSD.AchievementList
// Size: 0x1a0 (Inherited: 0x30)
struct UAchievementList : UDataAsset {
	struct UFSDAchievement* WeakspotAchievement; // 0x30(0x08)
	struct UFSDAchievement* MissionTimeAchievement; // 0x38(0x08)
	struct UFSDAchievement* MissionHosterAchievement; // 0x40(0x08)
	struct UFSDAchievement* RollerCoasterAchievement; // 0x48(0x08)
	struct UFSDAchievement* DrillByShootingAchievement; // 0x50(0x08)
	struct UFSDAchievement* BarrelKickerAchievement; // 0x58(0x08)
	struct UFSDAchievement* Hazard3CompletedAchievement; // 0x60(0x08)
	struct UFSDAchievement* Hazard3StreakAchievement; // 0x68(0x08)
	struct UFSDAchievement* Hazard4CompletedAchievement; // 0x70(0x08)
	struct UFSDAchievement* Hazard4StreakAchievement; // 0x78(0x08)
	struct UFSDAchievement* Hazard5CompletedAchievement; // 0x80(0x08)
	struct UFSDAchievement* Hazard5StreakAchievement; // 0x88(0x08)
	struct UFSDAchievement* Hazard3NoKillNoSupplyAchievement; // 0x90(0x08)
	struct UFSDAchievement* Hazard4NoKillNoSupplyAchievement; // 0x98(0x08)
	struct UFSDAchievement* Hazard5NoKillNoSupplyAchievement; // 0xa0(0x08)
	struct UFSDAchievement* PlayedWithLowerRankAchievement; // 0xa8(0x08)
	struct UFSDAchievement* MilestoneAchievementPerfMatters; // 0xb0(0x08)
	struct UFSDAchievement* MilestoneAchievement; // 0xb8(0x08)
	struct UFSDAchievement* OwnedPerkAchievement; // 0xc0(0x08)
	struct UFSDAchievement* MovingOnUpAchievement; // 0xc8(0x08)
	struct UFSDAchievement* CorporateClimberAchievement; // 0xd0(0x08)
	struct UFSDAchievement* HatTrickAchievement; // 0xd8(0x08)
	struct UFSDAchievement* FullTeamAchievement; // 0xe0(0x08)
	struct UFSDAchievement* SilverTierEmployeeAchievement; // 0xe8(0x08)
	struct UFSDAchievement* ProTeamAchievement; // 0xf0(0x08)
	struct UFSDAchievement* GoldTierEmployeeAchievement; // 0xf8(0x08)
	struct UFSDAchievement* LegendaryTeamAchievement; // 0x100(0x08)
	struct UFSDAchievement* AllVanityEquippedAchievement; // 0x108(0x08)
	struct UFSDAchievement* MoustacheBuyerAchievement; // 0x110(0x08)
	struct UFSDAchievement* MutatorAchievement; // 0x118(0x08)
	struct UFSDAchievement* StateOfTheArtAchievement; // 0x120(0x08)
	struct UFSDAchievement* ExploringMyOptionsAchievement; // 0x128(0x08)
	struct UFSDAchievement* AdvancedRoboticsAchievement; // 0x130(0x08)
	struct UFSDAchievement* WithoutAPaddleAchievement; // 0x138(0x08)
	struct UFSDAchievement* FirstMissionCompleted; // 0x140(0x08)
	struct UFSDAchievement* HundredMissionsCompleted; // 0x148(0x08)
	struct UFSDAchievement* TenSoloMissionsCompleted; // 0x150(0x08)
	struct UFSDAchievement* SupplyPodsCalledStat; // 0x158(0x08)
	struct UFSDAchievement* LootbugsKilledStat; // 0x160(0x08)
	struct UFSDAchievement* PraetoriansKilledStat; // 0x168(0x08)
	struct UFSDAchievement* NormalDeepDiveCompleted; // 0x170(0x08)
	struct UFSDAchievement* EliteDeepDiveCompleted; // 0x178(0x08)
	struct UFSDAchievement* DeepDiveCompletedUnderTime; // 0x180(0x08)
	struct UFSDAchievement* DeepDivesCompleted; // 0x188(0x08)
	struct TArray<struct UFSDAchievement*> AllAchievements; // 0x190(0x10)
};

// Class FSD.FSDAdvancedLabel
// Size: 0x268 (Inherited: 0x230)
struct UFSDAdvancedLabel : UUserWidget {
	struct FText FormattedText; // 0x230(0x18)
	struct FText ControllerOverrideText; // 0x248(0x18)
	bool UpperCase; // 0x260(0x01)
	enum class EFSDInputSource PreviewAs; // 0x261(0x01)
	char UnknownData_262[0x6]; // 0x262(0x06)

	void SetText(struct FText NewText, struct FText OverrideControllerText); // Function FSD.FSDAdvancedLabel.SetText
	void SetAlwaysShowAs(enum class EFSDInputSource InPreferredSource); // Function FSD.FSDAdvancedLabel.SetAlwaysShowAs
	void Refresh(); // Function FSD.FSDAdvancedLabel.Refresh
	void OnReset(); // Function FSD.FSDAdvancedLabel.OnReset
	void OnNewLine(int32_t Index); // Function FSD.FSDAdvancedLabel.OnNewLine
	void OnLanguageChanged(struct FString NewCulture); // Function FSD.FSDAdvancedLabel.OnLanguageChanged
	void OnInputSourceChanged(enum class EFSDInputSource Source); // Function FSD.FSDAdvancedLabel.OnInputSourceChanged
	void OnAddString(struct FString Value); // Function FSD.FSDAdvancedLabel.OnAddString
	void OnAddKeyName(struct FString Name); // Function FSD.FSDAdvancedLabel.OnAddKeyName
	void OnAddIcon(struct FString Name, struct FActionIconMapping Icon); // Function FSD.FSDAdvancedLabel.OnAddIcon
	struct FText GetText(); // Function FSD.FSDAdvancedLabel.GetText
	bool GetIsDesignTime(); // Function FSD.FSDAdvancedLabel.GetIsDesignTime
	enum class EFSDInputSource GetCurrentInputSource(); // Function FSD.FSDAdvancedLabel.GetCurrentInputSource
	struct UTextBlock* CreateTextBlock(struct FString Text, struct FSlateFontInfo InFontInfo, struct FLinearColor Color); // Function FSD.FSDAdvancedLabel.CreateTextBlock
	struct UImage* CreateImageSized(struct UTexture2D* Texture, int32_t Width, int32_t Height); // Function FSD.FSDAdvancedLabel.CreateImageSized
	struct UImage* CreateImage(struct UTexture2D* Texture, bool MatchSize); // Function FSD.FSDAdvancedLabel.CreateImage
	struct UHorizontalBox* CreateHorizontalBox(); // Function FSD.FSDAdvancedLabel.CreateHorizontalBox
};

// Class FSD.GamepadCursorSettings
// Size: 0x48 (Inherited: 0x38)
struct UGamepadCursorSettings : UDeveloperSettings {
	float MaxSpeed; // 0x38(0x04)
	float Acceleration; // 0x3c(0x04)
	float StickySlowDown; // 0x40(0x04)
	float DeadZone; // 0x44(0x04)
};

// Class FSD.AnimNotify_PlaySound2D
// Size: 0x48 (Inherited: 0x38)
struct UAnimNotify_PlaySound2D : UAnimNotify {
	struct USoundBase* Sound; // 0x38(0x08)
	float VolumeMultiplier; // 0x40(0x04)
	float PitchMultiplier; // 0x44(0x04)
};

// Class FSD.AnimNotifyState_PlaySound
// Size: 0x58 (Inherited: 0x30)
struct UAnimNotifyState_PlaySound : UAnimNotifyState {
	struct USoundCue* Sound; // 0x30(0x08)
	struct FName SocketName; // 0x38(0x08)
	struct FVector LocationOffset; // 0x40(0x0c)
	struct FRotator RotationOffset; // 0x4c(0x0c)
};

// Class FSD.AnimNotify_FSDPlayParticleEffect
// Size: 0x90 (Inherited: 0x38)
struct UAnimNotify_FSDPlayParticleEffect : UAnimNotify {
	struct UParticleSystem* PSTemplate; // 0x38(0x08)
	struct FVector LocationOffset; // 0x40(0x0c)
	struct FRotator RotationOffset; // 0x4c(0x0c)
	bool AlwaysZUp; // 0x58(0x01)
	char UnknownData_59[0x3]; // 0x59(0x03)
	struct FVector Scale; // 0x5c(0x0c)
	char UnknownData_68[0x18]; // 0x68(0x18)
	char Attached : 1; // 0x80(0x01)
	char UnknownData_80_1 : 7; // 0x80(0x01)
	char UnknownData_81[0x3]; // 0x81(0x03)
	struct FName SocketName; // 0x84(0x08)
	bool IsFirstPerson; // 0x8c(0x01)
	bool UseTerainMaterial; // 0x8d(0x01)
	char UnknownData_8E[0x2]; // 0x8e(0x02)
};

// Class FSD.EnemyPlaySoundKey
// Size: 0x30 (Inherited: 0x30)
struct UEnemyPlaySoundKey : UDataAsset {
};

// Class FSD.EnemyPlaySoundByKeyAnimNotify
// Size: 0x58 (Inherited: 0x38)
struct UEnemyPlaySoundByKeyAnimNotify : UAnimNotify {
	struct UEnemyPlaySoundKey* SoundKey; // 0x38(0x08)
	float VolumeMultiplier; // 0x40(0x04)
	float PitchMultiplier; // 0x44(0x04)
	char bFollow : 1; // 0x48(0x01)
	char UnknownData_48_1 : 7; // 0x48(0x01)
	char UnknownData_49[0x3]; // 0x49(0x03)
	struct FName AttachName; // 0x4c(0x08)
	char UnknownData_54[0x4]; // 0x54(0x04)
};

// Class FSD.AnimNotify_PushSoundMix
// Size: 0x48 (Inherited: 0x38)
struct UAnimNotify_PushSoundMix : UAnimNotify {
	struct USoundMix* SoundMix; // 0x38(0x08)
	float MaxDistance; // 0x40(0x04)
	char UnknownData_44[0x4]; // 0x44(0x04)
};

// Class FSD.AnimNotifyState_SoundMix
// Size: 0x40 (Inherited: 0x30)
struct UAnimNotifyState_SoundMix : UAnimNotifyState {
	struct USoundMix* SoundMix; // 0x30(0x08)
	float MaxDistance; // 0x38(0x04)
	char UnknownData_3C[0x4]; // 0x3c(0x04)
};

// Class FSD.EnemySpawnEffectsKey
// Size: 0x30 (Inherited: 0x30)
struct UEnemySpawnEffectsKey : UDataAsset {
};

// Class FSD.EnemySpawnEffectsByKeyAnimNotify
// Size: 0x50 (Inherited: 0x38)
struct UEnemySpawnEffectsByKeyAnimNotify : UAnimNotify {
	struct UEnemySpawnEffectsKey* EffectKey; // 0x38(0x08)
	char Attached : 1; // 0x40(0x01)
	char UnknownData_40_1 : 7; // 0x40(0x01)
	char UnknownData_41[0x3]; // 0x41(0x03)
	struct FName SocketName; // 0x44(0x08)
	char UnknownData_4C[0x4]; // 0x4c(0x04)
};

// Class FSD.AnimNotifyState_EnemyPlaySoundByKey
// Size: 0x60 (Inherited: 0x30)
struct UAnimNotifyState_EnemyPlaySoundByKey : UAnimNotifyState {
	struct UEnemyPlaySoundKey* SoundKey; // 0x30(0x08)
	float FadeOut; // 0x38(0x04)
	struct FName SocketName; // 0x3c(0x08)
	struct FVector LocationOffset; // 0x44(0x0c)
	struct FRotator RotationOffset; // 0x50(0x0c)
	char UnknownData_5C[0x4]; // 0x5c(0x04)
};

// Class FSD.AnimNotify_CameraShake
// Size: 0x50 (Inherited: 0x38)
struct UAnimNotify_CameraShake : UAnimNotify {
	float InnerRadius; // 0x38(0x04)
	float OuterRadius; // 0x3c(0x04)
	bool ControllerOnly; // 0x40(0x01)
	char UnknownData_41[0x7]; // 0x41(0x07)
	struct UCameraShake* CameraShake; // 0x48(0x08)
};

// Class FSD.AnimNotify_Shout
// Size: 0x48 (Inherited: 0x38)
struct UAnimNotify_Shout : UAnimNotify {
	struct UDialogDataAsset* Shout; // 0x38(0x08)
	bool ShoutNetworked; // 0x40(0x01)
	char UnknownData_41[0x3]; // 0x41(0x03)
	float LocalShoutVolumeMultiplier; // 0x44(0x04)
};

// Class FSD.AnimNotify_FootStep
// Size: 0x40 (Inherited: 0x38)
struct UAnimNotify_FootStep : UAnimNotify {
	bool IsLeft; // 0x38(0x01)
	char UnknownData_39[0x7]; // 0x39(0x07)
};

// Class FSD.AnimNotify_MessageOwner
// Size: 0x40 (Inherited: 0x38)
struct UAnimNotify_MessageOwner : UAnimNotify {
	struct FName Message; // 0x38(0x08)
};

// Class FSD.AnimNotify_TerrainFootStep
// Size: 0x48 (Inherited: 0x38)
struct UAnimNotify_TerrainFootStep : UAnimNotify {
	struct UParticleSystem* ParticleTemplate; // 0x38(0x08)
	struct FName BoneName; // 0x40(0x08)
};

// Class FSD.AnimNotify_SpawnActor
// Size: 0x60 (Inherited: 0x38)
struct UAnimNotify_SpawnActor : UAnimNotify {
	struct AActor* Actor; // 0x38(0x08)
	struct FName SocketName; // 0x40(0x08)
	struct FVector LocationOffset; // 0x48(0x0c)
	struct FRotator RotationOffset; // 0x54(0x0c)
};

// Class FSD.AnimNotifyState_SpawnMesh
// Size: 0x68 (Inherited: 0x30)
struct UAnimNotifyState_SpawnMesh : UAnimNotifyState {
	struct UStaticMesh* Mesh; // 0x30(0x08)
	bool UseFirstPersonComponent; // 0x38(0x01)
	char UnknownData_39[0x3]; // 0x39(0x03)
	struct FName SocketName; // 0x3c(0x08)
	struct FVector ScaleOverride; // 0x44(0x0c)
	struct FVector LocationOffset; // 0x50(0x0c)
	struct FRotator RotationOffset; // 0x5c(0x0c)
};

// Class FSD.AnimNotifyState_SpawnSkeletalMesh
// Size: 0x70 (Inherited: 0x30)
struct UAnimNotifyState_SpawnSkeletalMesh : UAnimNotifyState {
	struct USkeletalMesh* Mesh; // 0x30(0x08)
	struct UAnimSequenceBase* AnimationToPlay; // 0x38(0x08)
	bool UseFirstPersonComponent; // 0x40(0x01)
	char UnknownData_41[0x3]; // 0x41(0x03)
	struct FName SocketName; // 0x44(0x08)
	struct FVector ScaleOverride; // 0x4c(0x0c)
	struct FVector LocationOffset; // 0x58(0x0c)
	struct FRotator RotationOffset; // 0x64(0x0c)
};

// Class FSD.AnimNotifyState_SpawnSkinnedMesh
// Size: 0x58 (Inherited: 0x30)
struct UAnimNotifyState_SpawnSkinnedMesh : UAnimNotifyState {
	enum class EItemCategory ItemCategory; // 0x30(0x01)
	bool UseFirstPersonComponent; // 0x31(0x01)
	char UnknownData_32[0x2]; // 0x32(0x02)
	struct FName SocketName; // 0x34(0x08)
	struct FVector LocationOffset; // 0x3c(0x0c)
	struct FRotator RotationOffset; // 0x48(0x0c)
	char UnknownData_54[0x4]; // 0x54(0x04)
};

// Class FSD.AnimNotifyState_HideBone
// Size: 0x38 (Inherited: 0x30)
struct UAnimNotifyState_HideBone : UAnimNotifyState {
	struct FName BoneName; // 0x30(0x08)
};

// Class FSD.AnimNotifyState_Salute
// Size: 0x40 (Inherited: 0x30)
struct UAnimNotifyState_Salute : UAnimNotifyState {
	struct FName BoneName; // 0x30(0x08)
	bool FirstPerson; // 0x38(0x01)
	char UnknownData_39[0x7]; // 0x39(0x07)
};

// Class FSD.AnimNotifyState_InputWindow
// Size: 0x30 (Inherited: 0x30)
struct UAnimNotifyState_InputWindow : UAnimNotifyState {
};

// Class FSD.SpawnReleasedActor
// Size: 0x28 (Inherited: 0x28)
struct USpawnReleasedActor : UInterface {

	bool Released(); // Function FSD.SpawnReleasedActor.Released
	bool Attached(struct AActor* Parent); // Function FSD.SpawnReleasedActor.Attached
};

// Class FSD.AnimNotifyState_SpawnAndReleaseActor
// Size: 0x58 (Inherited: 0x30)
struct UAnimNotifyState_SpawnAndReleaseActor : UAnimNotifyState {
	struct AActor* Actor; // 0x30(0x08)
	struct FName SocketName; // 0x38(0x08)
	struct FVector LocationOffset; // 0x40(0x0c)
	struct FRotator RotationOffset; // 0x4c(0x0c)
};

// Class FSD.AnimNotifyState_HideEquippedItem
// Size: 0x30 (Inherited: 0x30)
struct UAnimNotifyState_HideEquippedItem : UAnimNotifyState {
};

// Class FSD.AnimNotifyState_OverrideItemOffset
// Size: 0x40 (Inherited: 0x30)
struct UAnimNotifyState_OverrideItemOffset : UAnimNotifyState {
	struct FVector CameraOffset; // 0x30(0x0c)
	char UnknownData_3C[0x4]; // 0x3c(0x04)
};

// Class FSD.AnimNotifyState_WeaponReload
// Size: 0x30 (Inherited: 0x30)
struct UAnimNotifyState_WeaponReload : UAnimNotifyState {
};

// Class FSD.AnimNotifyState_ConstrainItem
// Size: 0x40 (Inherited: 0x30)
struct UAnimNotifyState_ConstrainItem : UAnimNotifyState {
	struct FName OldConstraint; // 0x30(0x08)
	struct FName NewConstraint; // 0x38(0x08)
};

// Class FSD.GameAnimationsSettings
// Size: 0x68 (Inherited: 0x38)
struct UGameAnimationsSettings : UDeveloperSettings {
	struct FSoftObjectPath FootstepTestingSound; // 0x38(0x18)
	struct FSoftObjectPath FootstepTestingParticles; // 0x50(0x18)
};

// Class FSD.DynamicMeshScaler
// Size: 0xc0 (Inherited: 0xb0)
struct UDynamicMeshScaler : UActorComponent {
	char UnknownData_B0[0x10]; // 0xb0(0x10)
};

// Class FSD.AnimNotifyState_TimedParticleEffectWithImpactDecals
// Size: 0x80 (Inherited: 0x60)
struct UAnimNotifyState_TimedParticleEffectWithImpactDecals : UAnimNotifyState_TimedParticleEffect {
	struct UMaterialInterface* DecalMaterial; // 0x60(0x08)
	float DecalSize; // 0x68(0x04)
	float FadeStartDelay; // 0x6c(0x04)
	float FadeDuration; // 0x70(0x04)
	char UnknownData_74[0xc]; // 0x74(0x0c)

	void OnParticleCollision(struct FName EventName, float EmitterTime, int32_t ParticleTime, struct FVector Location, struct FVector Velocity, struct FVector Direction, struct FVector Normal, struct FName BoneName, struct UPhysicalMaterial* PhysMat); // Function FSD.AnimNotifyState_TimedParticleEffectWithImpactDecals.OnParticleCollision
};

// Class FSD.FSDAnimationFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct UFSDAnimationFunctionLibrary : UBlueprintFunctionLibrary {

	float GetAnimSequenceLength(struct UAnimSequence* AnimSequence); // Function FSD.FSDAnimationFunctionLibrary.GetAnimSequenceLength
};

// Class FSD.FSDAssetManager
// Size: 0x438 (Inherited: 0x438)
struct UFSDAssetManager : UAssetManager {
};

// Class FSD.FSDBehaviorTreeComponent
// Size: 0x270 (Inherited: 0x270)
struct UFSDBehaviorTreeComponent : UBehaviorTreeComponent {
};

// Class FSD.FSDCheatManager
// Size: 0xb8 (Inherited: 0x78)
struct UFSDCheatManager : UCheatManager {
	int32_t RoomJumpCount; // 0x78(0x04)
	float PreviousMaxDistanceBeforeCleanup; // 0x7c(0x04)
	bool UnlimitedScoutFlareDuration; // 0x80(0x01)
	char UnknownData_81[0x7]; // 0x81(0x07)
	struct FMulticastInlineDelegate ToggleHoopGameMovement; // 0x88(0x10)
	struct AActor* SpawnPosMarker; // 0x98(0x08)
	bool EscortShowSmartRockDebug; // 0xa0(0x01)
	bool IsUsingSavedCheats; // 0xa1(0x01)
	char UnknownData_A2[0x16]; // 0xa2(0x16)

	void SwitchCharacter(struct APlayerCharacter* NewCharacter); // Function FSD.FSDCheatManager.SwitchCharacter
	void SpawnEnemies(struct UEnemyDescriptor* desscriptor, int32_t count); // Function FSD.FSDCheatManager.SpawnEnemies
	void SpawnCritters(struct UCritterDescriptor* descriptor, int32_t count); // Function FSD.FSDCheatManager.SpawnCritters
	void SpawnBosco(SoftClassProperty droneClass, struct AFSDAIController* aControllerClass); // Function FSD.FSDCheatManager.SpawnBosco
	void ShowTutorialDebug(); // Function FSD.FSDCheatManager.ShowTutorialDebug
	void SetStandingDown(bool standingDown); // Function FSD.FSDCheatManager.SetStandingDown
	void SetSpawnEnemies(bool SpawnEnemies); // Function FSD.FSDCheatManager.SetSpawnEnemies
	void SetQuadPickAxe(bool quad); // Function FSD.FSDCheatManager.SetQuadPickAxe
	void SetHUDVisible(bool ShowHUD); // Function FSD.FSDCheatManager.SetHUDVisible
	void SetGodMode(bool God); // Function FSD.FSDCheatManager.SetGodMode
	void SetFastMovement(bool fast); // Function FSD.FSDCheatManager.SetFastMovement
	void ResetTutorials(); // Function FSD.FSDCheatManager.ResetTutorials
	void ResetSpacerigIntroMessage(); // Function FSD.FSDCheatManager.ResetSpacerigIntroMessage
	void R_RemoveResources(int32_t Number); // Function FSD.FSDCheatManager.R_RemoveResources
	void R_RemoveCredits(int32_t Number); // Function FSD.FSDCheatManager.R_RemoveCredits
	void R_AddResources(int32_t Number); // Function FSD.FSDCheatManager.R_AddResources
	void R_AddPerkPoints(int32_t amount); // Function FSD.FSDCheatManager.R_AddPerkPoints
	void R_AddNitra(float amount); // Function FSD.FSDCheatManager.R_AddNitra
	void R_AddMorkite(float amount); // Function FSD.FSDCheatManager.R_AddMorkite
	void R_AddMatrixCores(int32_t Number); // Function FSD.FSDCheatManager.R_AddMatrixCores
	void R_AddHollomite(float amount); // Function FSD.FSDCheatManager.R_AddHollomite
	void R_AddGold(float amount); // Function FSD.FSDCheatManager.R_AddGold
	void R_AddDystrum(float amount); // Function FSD.FSDCheatManager.R_AddDystrum
	void R_AddCredits(int32_t Number); // Function FSD.FSDCheatManager.R_AddCredits
	void R_AddCraftingResource(int32_t amount, int32_t Type); // Function FSD.FSDCheatManager.R_AddCraftingResource
	void R_Add_BitterGem(int32_t amount); // Function FSD.FSDCheatManager.R_Add_BitterGem
	void R_Add_Aquarq(int32_t amount); // Function FSD.FSDCheatManager.R_Add_Aquarq
	bool IsInGodMode(); // Function FSD.FSDCheatManager.IsInGodMode
	void GetListOfRoomNames(struct TArray<struct FString> roomNames); // Function FSD.FSDCheatManager.GetListOfRoomNames
	void DestroyAllInstances(struct AActor* destroy); // Function FSD.FSDCheatManager.DestroyAllInstances
	void Cheat_UnlockAllWeapons(struct UObject* WorldContextObject); // Function FSD.FSDCheatManager.Cheat_UnlockAllWeapons
	void Cheat_UnlockAllUpgrades(struct UObject* WorldContextObject); // Function FSD.FSDCheatManager.Cheat_UnlockAllUpgrades
	void Cheat_UnlockAll_Poses(struct UObject* WorldContextObject); // Function FSD.FSDCheatManager.Cheat_UnlockAll_Poses
	void Cheat_UnlockAll_Beers(struct UObject* WorldContextObject); // Function FSD.FSDCheatManager.Cheat_UnlockAll_Beers
	void Cheat_SetSpawnPosMarker(struct AActor* Actor); // Function FSD.FSDCheatManager.Cheat_SetSpawnPosMarker
	void Cheat_SetHealth(float newHealthValue, struct APlayerCharacter* Player); // Function FSD.FSDCheatManager.Cheat_SetHealth
	void Cheat_Schematic_UnlockAll(struct UObject* WorldContextObject); // Function FSD.FSDCheatManager.Cheat_Schematic_UnlockAll
	void Cheat_Schematic_ResetAll(struct UObject* WorldContextObject); // Function FSD.FSDCheatManager.Cheat_Schematic_ResetAll
	void Cheat_Schematic_GiveRandom(struct UObject* WorldContextObject); // Function FSD.FSDCheatManager.Cheat_Schematic_GiveRandom
	void Cheat_Schematic_ForgeAll(struct UObject* WorldContextObject); // Function FSD.FSDCheatManager.Cheat_Schematic_ForgeAll
	void Cheat_Resources(struct UObject* WorldContextObject, int32_t amount); // Function FSD.FSDCheatManager.Cheat_Resources
	void Cheat_ResetEquippedUpgrades(struct UObject* WorldContextObject); // Function FSD.FSDCheatManager.Cheat_ResetEquippedUpgrades
	void Cheat_RemoveResources(struct UObject* WorldContextObject, int32_t amount); // Function FSD.FSDCheatManager.Cheat_RemoveResources
	void Cheat_PickAxeVanity_UnlockAll(struct UObject* WorldContextObject); // Function FSD.FSDCheatManager.Cheat_PickAxeVanity_UnlockAll
	void Cheat_PickAxeVanity_ResetAll(struct UObject* WorldContextObject); // Function FSD.FSDCheatManager.Cheat_PickAxeVanity_ResetAll
	void Cheat_MinersManual_ShowAll(struct UObject* WorldContextObject); // Function FSD.FSDCheatManager.Cheat_MinersManual_ShowAll
	void Cheat_GenerateNewMissionSeed(struct UObject* WorldContextObject, bool Enabled); // Function FSD.FSDCheatManager.Cheat_GenerateNewMissionSeed
	void Cheat_ForceTreasure(struct UObject* WorldContextObject); // Function FSD.FSDCheatManager.Cheat_ForceTreasure
	void Cheat_ForceLostPack(struct UObject* WorldContextObject); // Function FSD.FSDCheatManager.Cheat_ForceLostPack
	void Cheat_DeepDives_Refresh(struct UObject* WorldContextObject); // Function FSD.FSDCheatManager.Cheat_DeepDives_Refresh
	void Cheat_Campaign_Complete(struct UObject* WorldContextObject); // Function FSD.FSDCheatManager.Cheat_Campaign_Complete
	void Cheat_Campaign_Advance(struct UObject* WorldContextObject); // Function FSD.FSDCheatManager.Cheat_Campaign_Advance
	void Cheat_AddXP(struct UObject* WorldContextObject, int32_t amount); // Function FSD.FSDCheatManager.Cheat_AddXP
	void Cheat_AddPerkPoints(struct UObject* WorldContextObject, int32_t amount); // Function FSD.FSDCheatManager.Cheat_AddPerkPoints
	void Cheat_AddCredits(struct UObject* WorldContextObject, int32_t amount); // Function FSD.FSDCheatManager.Cheat_AddCredits
	void C_UnlockOverclocking(); // Function FSD.FSDCheatManager.C_UnlockOverclocking
	void C_UnlockAll_WeaponUpgrades(); // Function FSD.FSDCheatManager.C_UnlockAll_WeaponUpgrades
	void C_UnlockAll_WeaponSkins_Paintjobs(); // Function FSD.FSDCheatManager.C_UnlockAll_WeaponSkins_Paintjobs
	void C_UnlockAll_WeaponSkins_Frameworks(); // Function FSD.FSDCheatManager.C_UnlockAll_WeaponSkins_Frameworks
	void C_UnlockAll_WeaponSkins(); // Function FSD.FSDCheatManager.C_UnlockAll_WeaponSkins
	void C_UnlockAll_Weapons(); // Function FSD.FSDCheatManager.C_UnlockAll_Weapons
	void C_UnlockAll_StoreVanity(); // Function FSD.FSDCheatManager.C_UnlockAll_StoreVanity
	void C_UnlockAll_Poses_ForAll(); // Function FSD.FSDCheatManager.C_UnlockAll_Poses_ForAll
	void C_UnlockAll_Poses(); // Function FSD.FSDCheatManager.C_UnlockAll_Poses
	void C_UnlockAll_PickaxeParts(); // Function FSD.FSDCheatManager.C_UnlockAll_PickaxeParts
	void C_UnlockAll_Perks(); // Function FSD.FSDCheatManager.C_UnlockAll_Perks
	void C_UnlockAll_Drinks(); // Function FSD.FSDCheatManager.C_UnlockAll_Drinks
	void C_UnlockAll_Beers(); // Function FSD.FSDCheatManager.C_UnlockAll_Beers
	void C_UnlockAll_ArmorMats(); // Function FSD.FSDCheatManager.C_UnlockAll_ArmorMats
	void C_UnlockAll(); // Function FSD.FSDCheatManager.C_UnlockAll
	void C_Treasures_Track(bool Track); // Function FSD.FSDCheatManager.C_Treasures_Track
	void C_Treasures_Reward(int32_t count); // Function FSD.FSDCheatManager.C_Treasures_Reward
	void C_ToggleHoopGameMovement(); // Function FSD.FSDCheatManager.C_ToggleHoopGameMovement
	void C_ToggleFadingEnabled(); // Function FSD.FSDCheatManager.C_ToggleFadingEnabled
	void C_ToggleFadingDebug(); // Function FSD.FSDCheatManager.C_ToggleFadingDebug
	void C_ToggleCanShowBlood(); // Function FSD.FSDCheatManager.C_ToggleCanShowBlood
	void C_SpawnScriptedWaveIndex(int32_t Index); // Function FSD.FSDCheatManager.C_SpawnScriptedWaveIndex
	void C_SpawnScriptedWave(); // Function FSD.FSDCheatManager.C_SpawnScriptedWave
	void C_SpawnNormalWave(); // Function FSD.FSDCheatManager.C_SpawnNormalWave
	void C_SpawnEvenRewarder(); // Function FSD.FSDCheatManager.C_SpawnEvenRewarder
	void C_SpawnBarrelOnPlayer(int32_t amount); // Function FSD.FSDCheatManager.C_SpawnBarrelOnPlayer
	void C_SetUseSavedCheatsByDefault(bool useSavedCheats); // Function FSD.FSDCheatManager.C_SetUseSavedCheatsByDefault
	void C_SetTestMission(int32_t missionIndex); // Function FSD.FSDCheatManager.C_SetTestMission
	void C_SetSavedCheats(); // Function FSD.FSDCheatManager.C_SetSavedCheats
	void C_SetPlayers(int32_t Number); // Function FSD.FSDCheatManager.C_SetPlayers
	void C_SetHealth(float Health); // Function FSD.FSDCheatManager.C_SetHealth
	void C_SetFlyMode(bool flyEnabled); // Function FSD.FSDCheatManager.C_SetFlyMode
	void C_SetFastFlares(); // Function FSD.FSDCheatManager.C_SetFastFlares
	void C_SetEnglish(int32_t Val); // Function FSD.FSDCheatManager.C_SetEnglish
	void C_SetDancing(bool shouldDance); // Function FSD.FSDCheatManager.C_SetDancing
	void C_SetAmmoCostEnabled(bool Enabled); // Function FSD.FSDCheatManager.C_SetAmmoCostEnabled
	void C_ScoutFlareInfiniteDuration(bool Enabled); // Function FSD.FSDCheatManager.C_ScoutFlareInfiniteDuration
	void C_Schematics_UnlockAll(); // Function FSD.FSDCheatManager.C_Schematics_UnlockAll
	void C_Schematics_ResetAll(); // Function FSD.FSDCheatManager.C_Schematics_ResetAll
	void C_Schematics_ForgeAll(); // Function FSD.FSDCheatManager.C_Schematics_ForgeAll
	void C_Schematics_ClearHasSeenFirstMessage(); // Function FSD.FSDCheatManager.C_Schematics_ClearHasSeenFirstMessage
	void C_Schematic_GiveRandom(); // Function FSD.FSDCheatManager.C_Schematic_GiveRandom
	void C_Revive(); // Function FSD.FSDCheatManager.C_Revive
	void C_Resupply(); // Function FSD.FSDCheatManager.C_Resupply
	void C_ResetSteamAchievementStats(); // Function FSD.FSDCheatManager.C_ResetSteamAchievementStats
	void C_ResetForgingXP(); // Function FSD.FSDCheatManager.C_ResetForgingXP
	void C_ResetCheatedResources(int32_t newAmount); // Function FSD.FSDCheatManager.C_ResetCheatedResources
	void C_ResetAchievements(); // Function FSD.FSDCheatManager.C_ResetAchievements
	void C_Reset_YearTwoGifts(); // Function FSD.FSDCheatManager.C_Reset_YearTwoGifts
	void C_Reset_WeaponSkinsAndUpgrades(); // Function FSD.FSDCheatManager.C_Reset_WeaponSkinsAndUpgrades
	void C_Reset_WeaponSkins_Paintjobs(); // Function FSD.FSDCheatManager.C_Reset_WeaponSkins_Paintjobs
	void C_Reset_WeaponSkins_Framworks(); // Function FSD.FSDCheatManager.C_Reset_WeaponSkins_Framworks
	void C_Reset_WeaponSkins(); // Function FSD.FSDCheatManager.C_Reset_WeaponSkins
	void C_Reset_PickaxeParts(); // Function FSD.FSDCheatManager.C_Reset_PickaxeParts
	void C_Reset_Perks(); // Function FSD.FSDCheatManager.C_Reset_Perks
	void C_Reset_MinersManual(); // Function FSD.FSDCheatManager.C_Reset_MinersManual
	void C_Reset_EnemyKillCount(); // Function FSD.FSDCheatManager.C_Reset_EnemyKillCount
	void C_Reset_Drinks(); // Function FSD.FSDCheatManager.C_Reset_Drinks
	void C_RemovePlayerRanks(int32_t Number); // Function FSD.FSDCheatManager.C_RemovePlayerRanks
	void C_RemoveAllWidgets(); // Function FSD.FSDCheatManager.C_RemoveAllWidgets
	void C_RefreshDailyDeal(int32_t Seed); // Function FSD.FSDCheatManager.C_RefreshDailyDeal
	void C_Refinery_BreakPipes(); // Function FSD.FSDCheatManager.C_Refinery_BreakPipes
	void C_RecordMode(); // Function FSD.FSDCheatManager.C_RecordMode
	void C_Promotion_SetLevelSpecific(struct APlayerCharacter* onCharacter, int32_t Number); // Function FSD.FSDCheatManager.C_Promotion_SetLevelSpecific
	void C_Promotion_SetLevel(int32_t Number); // Function FSD.FSDCheatManager.C_Promotion_SetLevel
	void C_Promotion_SetCampaignComplete(); // Function FSD.FSDCheatManager.C_Promotion_SetCampaignComplete
	void C_Promotion_ClearRewardsSeen(); // Function FSD.FSDCheatManager.C_Promotion_ClearRewardsSeen
	void C_ProjectileDebugPrintToggle(); // Function FSD.FSDCheatManager.C_ProjectileDebugPrintToggle
	void C_MissionMap_ForceWarning(int32_t Index); // Function FSD.FSDCheatManager.C_MissionMap_ForceWarning
	void C_MissionMap_ForceAnomaly(int32_t Index); // Function FSD.FSDCheatManager.C_MissionMap_ForceAnomaly
	void C_MissionMap_DoubleWarning(int32_t indexA, int32_t indexB); // Function FSD.FSDCheatManager.C_MissionMap_DoubleWarning
	void C_MinersManual_EnableWorkInProgress(struct UObject* WorldContextObject); // Function FSD.FSDCheatManager.C_MinersManual_EnableWorkInProgress
	void C_MachineEvents_Track(bool Track); // Function FSD.FSDCheatManager.C_MachineEvents_Track
	void C_MachineEvents_FinishCurrent(); // Function FSD.FSDCheatManager.C_MachineEvents_FinishCurrent
	void C_LevelUpCharacter(int32_t amount); // Function FSD.FSDCheatManager.C_LevelUpCharacter
	void C_KillAll(); // Function FSD.FSDCheatManager.C_KillAll
	void C_JumpToNextRoom(); // Function FSD.FSDCheatManager.C_JumpToNextRoom
	void C_IncrementAllMissionStats(int32_t amount); // Function FSD.FSDCheatManager.C_IncrementAllMissionStats
	void C_GodMode(); // Function FSD.FSDCheatManager.C_GodMode
	void C_GiveAllGenericHeroItems(); // Function FSD.FSDCheatManager.C_GiveAllGenericHeroItems
	void C_GameDLC_ResetAnnouncements(); // Function FSD.FSDCheatManager.C_GameDLC_ResetAnnouncements
	void C_FSDEvent_SetDebugEvent(struct FString EventName); // Function FSD.FSDCheatManager.C_FSDEvent_SetDebugEvent
	void C_FSDEvent_ClearSeenRewards(); // Function FSD.FSDCheatManager.C_FSDEvent_ClearSeenRewards
	void C_FixedPLSSeed(int32_t Seed); // Function FSD.FSDCheatManager.C_FixedPLSSeed
	void C_FixedMissionSeed(int32_t Seed); // Function FSD.FSDCheatManager.C_FixedMissionSeed
	void C_FailMission(); // Function FSD.FSDCheatManager.C_FailMission
	void C_FadeFromBlack(struct UObject* WorldContextObject); // Function FSD.FSDCheatManager.C_FadeFromBlack
	void C_Facility_DisableShields(); // Function FSD.FSDCheatManager.C_Facility_DisableShields
	void C_Escort_ShowSmartRockDebug(bool shouldShow); // Function FSD.FSDCheatManager.C_Escort_ShowSmartRockDebug
	void C_Escort_SetMuleSpeed(struct UObject* WorldContextObject, float Speed); // Function FSD.FSDCheatManager.C_Escort_SetMuleSpeed
	void C_Escort_JumpToNextPhase(struct UObject* WorldContextObject); // Function FSD.FSDCheatManager.C_Escort_JumpToNextPhase
	void C_Escort_AddOilShale(int32_t Number); // Function FSD.FSDCheatManager.C_Escort_AddOilShale
	void C_DeepDives_UnlockAll(); // Function FSD.FSDCheatManager.C_DeepDives_UnlockAll
	void C_DeepDives_SetSeed(int32_t Seed); // Function FSD.FSDCheatManager.C_DeepDives_SetSeed
	void C_DeepDives_Reset(); // Function FSD.FSDCheatManager.C_DeepDives_Reset
	void C_DeepDives_Refresh(); // Function FSD.FSDCheatManager.C_DeepDives_Refresh
	void C_DeepDives_List(); // Function FSD.FSDCheatManager.C_DeepDives_List
	void C_CompleteObjectives(); // Function FSD.FSDCheatManager.C_CompleteObjectives
	void C_CompleteMission(); // Function FSD.FSDCheatManager.C_CompleteMission
	void C_ClearAllMissionStats(); // Function FSD.FSDCheatManager.C_ClearAllMissionStats
	void C_ClearAllMilestones(); // Function FSD.FSDCheatManager.C_ClearAllMilestones
	void C_ChangeIntoxication(int32_t Percent); // Function FSD.FSDCheatManager.C_ChangeIntoxication
	void C_Campaign_ResetProgress(); // Function FSD.FSDCheatManager.C_Campaign_ResetProgress
	void C_Campaign_ResetCompleted(); // Function FSD.FSDCheatManager.C_Campaign_ResetCompleted
	void C_Campaign_CompleteCurrent(); // Function FSD.FSDCheatManager.C_Campaign_CompleteCurrent
	void C_Campaign_Advance(); // Function FSD.FSDCheatManager.C_Campaign_Advance
	void C_AutoRotateMissionMap(bool Enabled); // Function FSD.FSDCheatManager.C_AutoRotateMissionMap
	void C_AddXP(int32_t Number); // Function FSD.FSDCheatManager.C_AddXP
	void C_AddUncappedXP(int32_t amount); // Function FSD.FSDCheatManager.C_AddUncappedXP
	void C_AddForgingXP(int32_t Number); // Function FSD.FSDCheatManager.C_AddForgingXP
};

// Class FSD.FSDCloudLoadSave
// Size: 0x60 (Inherited: 0x28)
struct UFSDCloudLoadSave : UObject {
	struct FMulticastInlineDelegate OnCloudLoadAll; // 0x28(0x10)
	struct FMulticastInlineDelegate OnCloudLoadAllFailed; // 0x38(0x10)
	struct FString SteamBranch; // 0x48(0x10)
	int32_t NumFailedSaves; // 0x58(0x04)
	char UnknownData_5C[0x4]; // 0x5c(0x04)

	void StartCloudLoadAll(struct UObject* WorldContextObject, int32_t Index); // Function FSD.FSDCloudLoadSave.StartCloudLoadAll
};

// Class FSD.FSDCreateSessionCallbackProxy
// Size: 0x98 (Inherited: 0x30)
struct UFSDCreateSessionCallbackProxy : UOnlineBlueprintCallProxyBase {
	struct FMulticastInlineDelegate OnSuccess; // 0x30(0x10)
	struct FMulticastInlineDelegate OnFailure; // 0x40(0x10)
	char UnknownData_50[0x48]; // 0x50(0x48)

	struct UFSDCreateSessionCallbackProxy* FSDCreateSession(struct UObject* WorldContextObject, struct APlayerController* PlayerController, int32_t PublicConnections, bool bUseLAN, bool bFriendsOnly); // Function FSD.FSDCreateSessionCallbackProxy.FSDCreateSession
};

// Class FSD.FSDCustomDPIScalingRule
// Size: 0x28 (Inherited: 0x28)
struct UFSDCustomDPIScalingRule : UDPICustomScalingRule {
};

// Class FSD.FSDEvent
// Size: 0x100 (Inherited: 0x30)
struct UFSDEvent : UDataAsset {
	struct FMulticastInlineDelegate OnActiveChanged; // 0x30(0x10)
	struct FName EventName; // 0x40(0x08)
	struct FGuid SavegameID; // 0x48(0x10)
	bool bHasClaimableRewards; // 0x58(0x01)
	bool bFreeBeerEvent; // 0x59(0x01)
	char UnknownData_5A[0x6]; // 0x5a(0x06)
	struct TArray<SoftClassProperty> EventDebris; // 0x60(0x10)
	struct TArray<struct TSoftObjectPtr<struct UWorld>> SpacerigSublevels; // 0x70(0x10)
	struct FClaimableRewardView ClaimableRewards; // 0x80(0x70)
	struct TArray<SoftClassProperty> Campaigns; // 0xf0(0x10)

	void MarkClaimableRewardsSeen(struct UObject* WorldContext); // Function FSD.FSDEvent.MarkClaimableRewardsSeen
	bool IsFsdEventActive(struct UObject* WorldContext, struct UFSDEvent* FSDEvent); // Function FSD.FSDEvent.IsFsdEventActive
	bool HasUnseenClaimableRewards(struct UObject* WorldContext); // Function FSD.FSDEvent.HasUnseenClaimableRewards
	bool GiveRewards(struct APlayerController* PlayerController); // Function FSD.FSDEvent.GiveRewards
	bool GetIsActive(struct UObject* WorldContext); // Function FSD.FSDEvent.GetIsActive
};

// Class FSD.FSDEventCollection
// Size: 0x90 (Inherited: 0x30)
struct UFSDEventCollection : UDataAsset {
	struct TSet<struct UFSDEvent*> Events; // 0x30(0x50)
	struct FMulticastInlineDelegate OnEventActiveChanged; // 0x80(0x10)

	struct UFSDEvent* FindEventHandler(struct FName EventName); // Function FSD.FSDEventCollection.FindEventHandler
	struct TArray<struct UFSDEvent*> FindAllEventHandlers(struct FName EventName); // Function FSD.FSDEventCollection.FindAllEventHandlers
};

// Class FSD.FSDEventManager
// Size: 0x120 (Inherited: 0x30)
struct UFSDEventManager : UGameInstanceSubsystem {
	struct FMulticastInlineDelegate OnFSDEventsRefresh; // 0x30(0x10)
	struct FMulticastInlineDelegate OnEventActiveChanged; // 0x40(0x10)
	struct TSet<struct FName> PendingActiveEvents; // 0x50(0x50)
	struct TSet<struct FName> ActiveEvents; // 0xa0(0x50)
	int32_t NumFailedRequests; // 0xf0(0x04)
	bool BackendDataValid; // 0xf4(0x01)
	char UnknownData_F5[0x3]; // 0xf5(0x03)
	struct FDateTime LastRequestTime; // 0xf8(0x08)
	float NextCheckTime; // 0x100(0x04)
	char UnknownData_104[0x1c]; // 0x104(0x1c)

	bool IsEventActive(struct UFSDEvent* FSDEvent); // Function FSD.FSDEventManager.IsEventActive
	struct TArray<struct UFSDEvent*> GetActiveEventHandlers(); // Function FSD.FSDEventManager.GetActiveEventHandlers
	void FSDEventsRefreshDelegate__DelegateSignature(); // DelegateFunction FSD.FSDEventManager.FSDEventsRefreshDelegate__DelegateSignature
	bool FSDEventsReady(); // Function FSD.FSDEventManager.FSDEventsReady
};

// Class FSD.FSDFindSessionsCallbackProxy
// Size: 0xb0 (Inherited: 0x30)
struct UFSDFindSessionsCallbackProxy : UOnlineBlueprintCallProxyBase {
	struct FMulticastInlineDelegate OnSuccess; // 0x30(0x10)
	struct FMulticastInlineDelegate OnFailure; // 0x40(0x10)
	struct FMulticastInlineDelegate OnRefresh; // 0x50(0x10)
	char UnknownData_60[0x38]; // 0x60(0x38)
	struct UObject* WorldContextObject; // 0x98(0x08)
	struct UFSDFindSteamSessions* FSDFindSteamSessions; // 0xa0(0x08)
	char UnknownData_A8[0x8]; // 0xa8(0x08)

	void OnFSDCompleted(bool bSuccess, struct TArray<struct FBlueprintSessionResult> Results); // Function FSD.FSDFindSessionsCallbackProxy.OnFSDCompleted
	void ManualRefreshServerList(); // Function FSD.FSDFindSessionsCallbackProxy.ManualRefreshServerList
	struct UFSDFindSessionsCallbackProxy* FSDFindSessions(struct UObject* WorldContextObject, struct APlayerController* PlayerController, int32_t MaxResults, bool bUseLAN); // Function FSD.FSDFindSessionsCallbackProxy.FSDFindSessions
	struct UFSDFindSessionsCallbackProxy* FSDFindFullSessions(struct UObject* WorldContextObject, struct APlayerController* PlayerController, int32_t MaxResults); // Function FSD.FSDFindSessionsCallbackProxy.FSDFindFullSessions
};

// Class FSD.FSDFlyingBugController
// Size: 0x390 (Inherited: 0x358)
struct AFSDFlyingBugController : AFSDAIController {
	char UnknownData_358[0x18]; // 0x358(0x18)
	struct UBehaviorTree* BehaviourTree; // 0x370(0x08)
	char UnknownData_378[0x8]; // 0x378(0x08)
	float UpdateLosInterval; // 0x380(0x04)
	bool SetTargetOnAlert; // 0x384(0x01)
	bool SyncTargetWithBB; // 0x385(0x01)
	char UnknownData_386[0xa]; // 0x386(0x0a)

	void OnFlyingBugAlerted(); // Function FSD.FSDFlyingBugController.OnFlyingBugAlerted
};

// Class FSD.DashingFlyingBugController
// Size: 0x390 (Inherited: 0x390)
struct ADashingFlyingBugController : AFSDFlyingBugController {
};

// Class FSD.FSDFriendsAndInvites
// Size: 0x78 (Inherited: 0x28)
struct UFSDFriendsAndInvites : UObject {
	struct FMulticastInlineDelegate OnFriendsChanged; // 0x28(0x10)
	struct FMulticastInlineDelegate OnFriendInvitesChanged; // 0x38(0x10)
	struct FMulticastInlineDelegate OnRequestRefresh; // 0x48(0x10)
	struct TArray<struct FBlueprintFriend> Friends; // 0x58(0x10)
	struct TArray<struct FBlueprintFriend> FriendInvites; // 0x68(0x10)

	void Init(); // Function FSD.FSDFriendsAndInvites.Init
};

// Class FSD.MissionResultInfo
// Size: 0xa8 (Inherited: 0x28)
struct UMissionResultInfo : UObject {
	bool HasInfo; // 0x28(0x01)
	char UnknownData_29[0x3]; // 0x29(0x03)
	float MissionTime; // 0x2c(0x04)
	float MissionTotalHazBonus; // 0x30(0x04)
	char UnknownData_34[0x4]; // 0x34(0x04)
	struct FText MissionHazName; // 0x38(0x18)
	float MissionHazBonus; // 0x50(0x04)
	float ComplexityBonus; // 0x54(0x04)
	int32_t ComplexityDots; // 0x58(0x04)
	float LenghtBonus; // 0x5c(0x04)
	int32_t LenghtDots; // 0x60(0x04)
	char UnknownData_64[0x4]; // 0x64(0x04)
	struct TArray<struct FText> WarningTitles; // 0x68(0x10)
	struct TArray<struct UTexture2D*> WarningIcons; // 0x78(0x10)
	struct TArray<float> WarningBonusses; // 0x88(0x10)
	float TotalCreditsSum; // 0x98(0x04)
	float TotalXPSum; // 0x9c(0x04)
	bool WasSuccess; // 0xa0(0x01)
	char UnknownData_A1[0x7]; // 0xa1(0x07)

	float GetWarningBonusSum(); // Function FSD.MissionResultInfo.GetWarningBonusSum
};

// Class FSD.CampaignNotification
// Size: 0x40 (Inherited: 0x28)
struct UCampaignNotification : UObject {
	struct UCampaign* Campaign; // 0x28(0x08)
	struct UCampaignMission* mission; // 0x30(0x08)
	int32_t Progress; // 0x38(0x04)
	bool bIsCampaignCompleted; // 0x3c(0x01)
	char UnknownData_3D[0x3]; // 0x3d(0x03)
};

// Class FSD.FSDGameInstance
// Size: 0xd40 (Inherited: 0x198)
struct UFSDGameInstance : UGameInstance {
	char UnknownData_198[0x8]; // 0x198(0x08)
	struct FMulticastInlineDelegate OnTemporaryBuffChanged; // 0x1a0(0x10)
	struct FMulticastInlineDelegate OnGameSettingsChanged; // 0x1b0(0x10)
	struct FMulticastInlineDelegate OnGraphicsSettingsChanged; // 0x1c0(0x10)
	struct FMulticastInlineDelegate OnPressStart; // 0x1d0(0x10)
	struct FMulticastInlineDelegate OnJoinPendingInvite; // 0x1e0(0x10)
	struct FMulticastInlineDelegate OnSkinChangedEvent; // 0x1f0(0x10)
	struct FMulticastInlineDelegate OnLoaderStart; // 0x200(0x10)
	struct FMulticastInlineDelegate OnPlayLevelSequenceInCharacterWorld; // 0x210(0x10)
	struct FMulticastInlineDelegate OnLoaderStop; // 0x220(0x10)
	struct FMulticastInlineDelegate OnCharacterSelectionStart; // 0x230(0x10)
	struct FMulticastInlineDelegate OnStartForging; // 0x240(0x10)
	struct FMulticastInlineDelegate OnForgingDone; // 0x250(0x10)
	struct FMulticastInlineDelegate OnCharacterSelectionStop; // 0x260(0x10)
	struct FMulticastInlineDelegate OnShowCharacterSelectionRefresh; // 0x270(0x10)
	struct FMulticastInlineDelegate OnTutorialManagerSet; // 0x280(0x10)
	struct FMulticastInlineDelegate OnLocalPlayerCharacterSet; // 0x290(0x10)
	struct FMulticastInlineDelegate OnShowReconnectScreen; // 0x2a0(0x10)
	struct FMulticastInlineDelegate OnXBoxAccountPickerClosed; // 0x2b0(0x10)
	struct FMulticastInlineDelegate OnXBoxChangeUser; // 0x2c0(0x10)
	struct FMulticastInlineDelegate OnGravityChanged; // 0x2d0(0x10)
	struct FMulticastInlineDelegate OnNewPostProcessingManager; // 0x2e0(0x10)
	struct FMulticastInlineDelegate OnPreviewSkinChanged; // 0x2f0(0x10)
	bool ShowingReconnectScreen; // 0x300(0x01)
	char UnknownData_301[0x7]; // 0x301(0x07)
	struct FPendingRewards PendingMissionRewards; // 0x308(0x190)
	struct TArray<struct FClaimableRewardEntry> PendingPromotionRewards; // 0x498(0x10)
	struct FWeakObjectPtr<struct UMouseCursorWidget> MouseCursorWidget; // 0x4a8(0x08)
	struct FMulticastInlineDelegate OnShowCharacterSelector; // 0x4b0(0x10)
	struct FMulticastInlineDelegate OnShowViewer3D; // 0x4c0(0x10)
	struct FMulticastInlineDelegate OnShowCharacterSelectorEquipSlot; // 0x4d0(0x10)
	struct FMulticastInlineDelegate OnShowCharacterSelectorEquip; // 0x4e0(0x10)
	struct FMulticastInlineDelegate OnShowCharacterSelectorRotate; // 0x4f0(0x10)
	struct FMulticastInlineDelegate OnShowEndScreen; // 0x500(0x10)
	struct AProceduralSetup* ProceduralSetup; // 0x510(0x08)
	bool HasStartedAMission; // 0x518(0x01)
	char UnknownData_519[0x7]; // 0x519(0x07)
	struct FString FSDPassword; // 0x520(0x10)
	bool FSDPrivateServer; // 0x530(0x01)
	bool SoloSession; // 0x531(0x01)
	bool IsJoiningInvite; // 0x532(0x01)
	bool FirstTimeInFrontend; // 0x533(0x01)
	bool SessionFirstStartOnSpaceRig; // 0x534(0x01)
	bool ShowFirstCharacterSelector; // 0x535(0x01)
	bool ShowSaveWarning; // 0x536(0x01)
	char UnknownData_537[0x1]; // 0x537(0x01)
	struct AActor* WorldViewTargetDummy; // 0x538(0x08)
	struct UMissionResultInfo* MissionResultInfo; // 0x540(0x08)
	bool LoaderSequencePlaying; // 0x548(0x01)
	char UnknownData_549[0x7]; // 0x549(0x07)
	struct FString LastPerksLoadout; // 0x550(0x10)
	struct AActor* CharacterSelectionLastViewTarget; // 0x560(0x08)
	bool HasSeenInfoScreen; // 0x568(0x01)
	char UnknownData_569[0x7]; // 0x569(0x07)
	struct FTransform CharacterSelectionViewTargetTransform; // 0x570(0x30)
	struct FTransform LoaderViewTargetTransform; // 0x5a0(0x30)
	struct FMulticastInlineDelegate OnGeneratedMissionChanged; // 0x5d0(0x10)
	struct FGameStateSeamlessTravelStorage GameStateSeamlessTravelStorage; // 0x5e0(0x150)
	struct FWeakObjectPtr<struct ADonkeyCharacter> Donkey; // 0x730(0x08)
	struct FMulticastInlineDelegate OnBoscoChanged; // 0x738(0x10)
	bool DEBUGSpawnRandomMissions; // 0x748(0x01)
	char UnknownData_749[0x1b]; // 0x749(0x1b)
	int32_t DEBUGSeedOverride; // 0x764(0x04)
	bool CanPlayOnline; // 0x768(0x01)
	bool CanCommunicateOnline; // 0x769(0x01)
	char UnknownData_76A[0x6]; // 0x76a(0x06)
	struct FMulticastInlineDelegate OnSteamSearchRegionChanged; // 0x770(0x10)
	struct FMulticastInlineDelegate OnSteamServerJoinStatusChanged; // 0x780(0x10)
	struct FMulticastInlineDelegate OnStartSearchForFriendsComplete; // 0x790(0x10)
	struct TMap<struct FString, struct FString> FriendSessions; // 0x7a0(0x50)
	struct FMulticastInlineDelegate OnNewSpaceRigNotification; // 0x7f0(0x10)
	char UnknownData_800[0x8]; // 0x800(0x08)
	struct UDiscordWrapper* DiscordWI; // 0x808(0x08)
	struct UCommunityGoalWrapper* CommunityWI; // 0x810(0x08)
	struct UGoogleAnalyticsWrapper* GoogleAnalyticsWI; // 0x818(0x08)
	struct USpecialEvent* ForcedSpecialEvent; // 0x820(0x08)
	char UnknownData_828[0x2]; // 0x828(0x02)
	bool ShowMinerManualWorkInProgress; // 0x82a(0x01)
	char UnknownData_82B[0x5]; // 0x82b(0x05)
	struct FMulticastInlineDelegate OnCampaignNotification; // 0x830(0x10)
	struct FMulticastInlineDelegate OnMinersManualNotification; // 0x840(0x10)
	struct FMulticastInlineDelegate OnNewHUDWarning; // 0x850(0x10)
	struct FMulticastInlineDelegate OnNewBossFight; // 0x860(0x10)
	struct FMulticastInlineDelegate OnBossFightRemoved; // 0x870(0x10)
	struct TArray<struct TScriptInterface<None>> ActiveBossFights; // 0x880(0x10)
	char UnknownData_890[0x38]; // 0x890(0x38)
	float LastDreadnaughtKillTime; // 0x8c8(0x04)
	struct FWeakObjectPtr<struct UWindowWidget> ActiveEscapeMenu; // 0x8cc(0x08)
	char UnknownData_8D4[0x4]; // 0x8d4(0x04)
	struct UCampaignNotification* CampaignNotification; // 0x8d8(0x08)
	char UnknownData_8E0[0x10]; // 0x8e0(0x10)
	struct FWeakObjectPtr<struct APostProcessingManager> PostProcessingManager; // 0x8f0(0x08)
	struct FFadeData Fading; // 0x8f8(0x48)
	struct TArray<struct FSpaceRigNotification> SpaceRigNotifications; // 0x940(0x10)
	struct FWeakObjectPtr<struct ABosco> Drone; // 0x950(0x08)
	struct FWeakObjectPtr<struct APlayerCharacter> LocalPlayerCharacter; // 0x958(0x08)
	struct FWeakObjectPtr<struct ATutorialManager> TutorialManager; // 0x960(0x08)
	struct ACharacterSelectionSwitcher* CharacterSelectionSwitcher; // 0x968(0x08)
	bool bGameSettingsChanged; // 0x970(0x01)
	char UnknownData_971[0x7]; // 0x971(0x07)
	struct FFSDServerSearchOptions ServerSearchOptions; // 0x978(0x40)
	bool ServerSearchActive; // 0x9b8(0x01)
	char UnknownData_9B9[0x27]; // 0x9b9(0x27)
	bool IsOnPressStartScreen; // 0x9e0(0x01)
	bool HasSeenStartScreen; // 0x9e1(0x01)
	char UnknownData_9E2[0x6]; // 0x9e2(0x06)
	struct AProceduralSetup* ProceduralLevel; // 0x9e8(0x08)
	struct UIconGenerationManager* IconGenerationManagerClass; // 0x9f0(0x08)
	struct UIconGenerationManager* IconGenerationManager; // 0x9f8(0x08)
	char UnknownData_A00[0x8]; // 0xa00(0x08)
	struct UCampaignManager* CampaignManager; // 0xa08(0x08)
	struct UDeepDiveManager* DeepDiveManager; // 0xa10(0x08)
	struct UGeneratedMission* GeneratedMission; // 0xa18(0x08)
	struct UDifficultySetting* DesiredDifficulty; // 0xa20(0x08)
	struct UFSDSaveGame* SaveGame; // 0xa28(0x08)
	enum class EDisconnectReason DisconnectReason; // 0xa30(0x01)
	char UnknownData_A31[0x7]; // 0xa31(0x07)
	struct TArray<struct UWorld*> AlwaysLoadedWorlds; // 0xa38(0x10)
	bool ShowCharacterSelectionWorld; // 0xa48(0x01)
	char UnknownData_A49[0x7]; // 0xa49(0x07)
	struct AActor* Viewer3DClass; // 0xa50(0x08)
	bool ShowLoaderWorld; // 0xa58(0x01)
	bool CharacterSelectionWorldActive; // 0xa59(0x01)
	bool MixerInteractivityEnabled; // 0xa5a(0x01)
	bool LoaderWorldActive; // 0xa5b(0x01)
	bool ResetHUDWhenReturning; // 0xa5c(0x01)
	char UnknownData_A5D[0x3]; // 0xa5d(0x03)
	struct UStatHat* StatHat; // 0xa60(0x08)
	struct USchematic* ActiveForgeSchematic; // 0xa68(0x08)
	struct UFSDCloudLoadSave* FSDCloudLoadSave; // 0xa70(0x08)
	struct UFSDSessionUpdater* SessionUpdater; // 0xa78(0x08)
	struct UFSDSendToURL* SendToURL; // 0xa80(0x08)
	struct UFSDFriendsAndInvites* FriendsAndInvites; // 0xa88(0x08)
	double SessionStartTime; // 0xa90(0x08)
	int32_t SessionStartTimestamp; // 0xa98(0x04)
	float InKBytesPerSecond; // 0xa9c(0x04)
	float OutKBytesPerSecond; // 0xaa0(0x04)
	char UnknownData_AA4[0x4]; // 0xaa4(0x04)
	struct UTemporaryBuff* TemporaryBuff; // 0xaa8(0x08)
	struct TSoftObjectPtr<struct ULevelSequence> NextLoaderSequence; // 0xab0(0x28)
	enum class EAlwaysLoadedWorlds NextLoaderLevel; // 0xad8(0x01)
	char UnknownData_AD9[0x7]; // 0xad9(0x07)
	struct TSoftObjectPtr<struct ULevelSequence> DeepDiveLoaderSequence; // 0xae0(0x28)
	struct TSoftObjectPtr<struct ULevelSequence> DeepDiveLoaderSequence2; // 0xb08(0x28)
	char UnknownData_B30[0x210]; // 0xb30(0x210)

	void UpdateGlobelMissionSeed(); // Function FSD.FSDGameInstance.UpdateGlobelMissionSeed
	void StopPhotographyInputProcessor(); // Function FSD.FSDGameInstance.StopPhotographyInputProcessor
	void StopPersonalAnalytics(); // Function FSD.FSDGameInstance.StopPersonalAnalytics
	void SteamServerJoinStatusDelegate__DelegateSignature(enum class ESteamServerJoinStatus Status); // DelegateFunction FSD.FSDGameInstance.SteamServerJoinStatusDelegate__DelegateSignature
	void SteamSearchRegionDelegate__DelegateSignature(enum class ESteamSearchRegion Region); // DelegateFunction FSD.FSDGameInstance.SteamSearchRegionDelegate__DelegateSignature
	void StartPhotographyInputProcessor(); // Function FSD.FSDGameInstance.StartPhotographyInputProcessor
	void StartPersonalAnalytics(); // Function FSD.FSDGameInstance.StartPersonalAnalytics
	struct AProceduralSetup* SpawnProcedural(); // Function FSD.FSDGameInstance.SpawnProcedural
	bool ShouldPendingRewardsBeShown(); // Function FSD.FSDGameInstance.ShouldPendingRewardsBeShown
	bool ShouldPendingRewardsBeGiven(); // Function FSD.FSDGameInstance.ShouldPendingRewardsBeGiven
	void SetViewer3DClassWithLocation(struct AActor* NewClass, enum class ECharselectionCameraLocation Location); // Function FSD.FSDGameInstance.SetViewer3DClassWithLocation
	void SetViewer3DClass(struct AActor* NewClass); // Function FSD.FSDGameInstance.SetViewer3DClass
	void SetSteamServerJoinStatus(enum class ESteamServerJoinStatus NewStatus); // Function FSD.FSDGameInstance.SetSteamServerJoinStatus
	void SetSteamSearchRegion(enum class ESteamSearchRegion NewRegion); // Function FSD.FSDGameInstance.SetSteamSearchRegion
	void SetServerSearchOptions(struct FFSDServerSearchOptions options); // Function FSD.FSDGameInstance.SetServerSearchOptions
	void SetServerSearchActive(bool Active); // Function FSD.FSDGameInstance.SetServerSearchActive
	void SetSelectedMission(struct UGeneratedMission* mission, bool updateSessionSettings); // Function FSD.FSDGameInstance.SetSelectedMission
	void SetProceduralMap(struct AProceduralSetup* procedural); // Function FSD.FSDGameInstance.SetProceduralMap
	void SetMinersManualNotification(enum class EMinersManualSection Section, struct UObject* IdentifyingObject, struct FText Text); // Function FSD.FSDGameInstance.SetMinersManualNotification
	void SetLoaderWorldVisible(bool V, bool resetHud); // Function FSD.FSDGameInstance.SetLoaderWorldVisible
	void SetIsUsingOnlineFeatures(bool bIsOnlineFeatureUsed); // Function FSD.FSDGameInstance.SetIsUsingOnlineFeatures
	void SetHasSeenInfoScreen(); // Function FSD.FSDGameInstance.SetHasSeenInfoScreen
	void SetFSDPassword(struct FString pw); // Function FSD.FSDGameInstance.SetFSDPassword
	void SetEligableForRetirementAssignment(bool eligable); // Function FSD.FSDGameInstance.SetEligableForRetirementAssignment
	void SetCharacterSelectionWorldVisible(bool V, enum class ECharselectionCameraLocation cameraLocation, bool resetHud, enum class ECharacterSelectorItemStatus itemStatus); // Function FSD.FSDGameInstance.SetCharacterSelectionWorldVisible
	void SetCharacterSelectionSwitcher(struct ACharacterSelectionSwitcher* switcher); // Function FSD.FSDGameInstance.SetCharacterSelectionSwitcher
	void SendSteamInfo(); // Function FSD.FSDGameInstance.SendSteamInfo
	void RestoreCursors(); // Function FSD.FSDGameInstance.RestoreCursors
	void ResetSaveGame(); // Function FSD.FSDGameInstance.ResetSaveGame
	void RemoveRemporaryBuff(); // Function FSD.FSDGameInstance.RemoveRemporaryBuff
	void RemoveBosco(); // Function FSD.FSDGameInstance.RemoveBosco
	void RegisterBossFight(struct TScriptInterface<None> BossFight); // Function FSD.FSDGameInstance.RegisterBossFight
	void PostInit(bool reload); // Function FSD.FSDGameInstance.PostInit
	void PairingUsePreviousProfile(); // Function FSD.FSDGameInstance.PairingUsePreviousProfile
	void PairingUseNewProfile(); // Function FSD.FSDGameInstance.PairingUseNewProfile
	void OnStartSearchForFriendsComplete__DelegateSignature(bool bWasSuccessful, struct FString ErrorStr); // DelegateFunction FSD.FSDGameInstance.OnStartSearchForFriendsComplete__DelegateSignature
	void OnNewFSDSessionID(struct FString sessionId); // Function FSD.FSDGameInstance.OnNewFSDSessionID
	void OnNetworkFailure(struct UWorld* World, struct UNetDriver* NetDriver, char failType, struct FString errorMessage); // Function FSD.FSDGameInstance.OnNetworkFailure
	void OnLoadComplete(struct FString MapName); // Function FSD.FSDGameInstance.OnLoadComplete
	void NewHUDWarningDelegate__DelegateSignature(struct UHUDWarningWidget* newWidget); // DelegateFunction FSD.FSDGameInstance.NewHUDWarningDelegate__DelegateSignature
	void LoadSaveGame(struct UFSDSaveGame* toLoad); // Function FSD.FSDGameInstance.LoadSaveGame
	bool IsScreenFadingToBlack(struct UObject* WorldContext); // Function FSD.FSDGameInstance.IsScreenFadingToBlack
	bool IsScreenFadingFromBlack(struct UObject* WorldContext); // Function FSD.FSDGameInstance.IsScreenFadingFromBlack
	bool IsScreenFading(struct UObject* WorldContext); // Function FSD.FSDGameInstance.IsScreenFading
	bool IsPendingInvitePasswordProtected(); // Function FSD.FSDGameInstance.IsPendingInvitePasswordProtected
	bool IsPendingInviteModded(); // Function FSD.FSDGameInstance.IsPendingInviteModded
	bool IsMutatorActive(struct UMutator* mutatorClass); // Function FSD.FSDGameInstance.IsMutatorActive
	bool IsFreeBeerRewardActive(); // Function FSD.FSDGameInstance.IsFreeBeerRewardActive
	bool IsCampaignMission(); // Function FSD.FSDGameInstance.IsCampaignMission
	bool HasSignedIn(); // Function FSD.FSDGameInstance.HasSignedIn
	bool HasPendingInvite(); // Function FSD.FSDGameInstance.HasPendingInvite
	bool HasAnalytics(); // Function FSD.FSDGameInstance.HasAnalytics
	void GraphicsUserSettingsChanged(); // Function FSD.FSDGameInstance.GraphicsUserSettingsChanged
	void GiveTemporaryBuff(struct UTemporaryBuff* buff, struct APlayerCharacter* Player); // Function FSD.FSDGameInstance.GiveTemporaryBuff
	struct FVector2D GetViewportSize(); // Function FSD.FSDGameInstance.GetViewportSize
	SoftClassProperty GetSoftReferenceToPLS(); // Function FSD.FSDGameInstance.GetSoftReferenceToPLS
	struct TArray<struct FBlueprintSessionResult> GetServersFriendsArePlaying(struct TArray<struct FBlueprintSessionResult> servers); // Function FSD.FSDGameInstance.GetServersFriendsArePlaying
	bool GetPendingRewards(struct FPendingRewardsStats OutStats, struct FPendingRewards OutRewards); // Function FSD.FSDGameInstance.GetPendingRewards
	bool GetNextSpaceRigNotification(struct FSpaceRigNotification NextNotification); // Function FSD.FSDGameInstance.GetNextSpaceRigNotification
	struct TArray<struct UMutator*> GetMutators(struct UMutator* mutatorClass); // Function FSD.FSDGameInstance.GetMutators
	struct AFSDPlayerController* GetLocalFSDPlayerController(); // Function FSD.FSDGameInstance.GetLocalFSDPlayerController
	struct UIconGenerationManager* GetIconGenerationManager(); // Function FSD.FSDGameInstance.GetIconGenerationManager
	bool GetHasSeenInfoScreen(); // Function FSD.FSDGameInstance.GetHasSeenInfoScreen
	int32_t GetGlobalMissionSeed(); // Function FSD.FSDGameInstance.GetGlobalMissionSeed
	struct UGeneratedMission* GetGeneratedMission(); // Function FSD.FSDGameInstance.GetGeneratedMission
	struct UMutator* GetFirstMutator(struct UMutator* mutatorClass); // Function FSD.FSDGameInstance.GetFirstMutator
	float GetCurrentFadeAmount(); // Function FSD.FSDGameInstance.GetCurrentFadeAmount
	struct APlayerCharacter* GetCharacterSelectorCharacter(); // Function FSD.FSDGameInstance.GetCharacterSelectorCharacter
	void GameUserSettingsChanged(); // Function FSD.FSDGameInstance.GameUserSettingsChanged
	void FadeScreenToBlack(struct UObject* WorldContext, float FadeTime, float Delay, bool ResetExistingFades, bool CapFramerate, bool FadeWorldOnly, bool ToSpaceRig, struct UTexture* loadingImage); // Function FSD.FSDGameInstance.FadeScreenToBlack
	void FadeScreenFromBlack(struct UObject* WorldContext, float FadeTime, float Delay, bool ResetExistingFades, bool CapFramerate, bool FadeWorldOnly, bool ToSpaceRig); // Function FSD.FSDGameInstance.FadeScreenFromBlack
	void DeregisterBossFight(struct AActor* boss); // Function FSD.FSDGameInstance.DeregisterBossFight
	void CloseSessionLobby(); // Function FSD.FSDGameInstance.CloseSessionLobby
	void ClearPendingRewards(); // Function FSD.FSDGameInstance.ClearPendingRewards
	void ClearGameStateSeamlessTravelStorage(); // Function FSD.FSDGameInstance.ClearGameStateSeamlessTravelStorage
	void ClearCampaignNotifications(); // Function FSD.FSDGameInstance.ClearCampaignNotifications
	void ChangeSkinPreview(struct UItemSkin* PreviewSkin); // Function FSD.FSDGameInstance.ChangeSkinPreview
	void CancelJoin(); // Function FSD.FSDGameInstance.CancelJoin
	void BossFightDelegate__DelegateSignature(struct TScriptInterface<None> BossFight); // DelegateFunction FSD.FSDGameInstance.BossFightDelegate__DelegateSignature
	void BlackoutScreen(struct UObject* WorldContext, bool FadeWorldOnly); // Function FSD.FSDGameInstance.BlackoutScreen
	struct UHUDWarningWidget* AddWarningToHUD(struct UHUDWarningWidget* WidgetClass, struct UTexture2D* Texture, struct USoundBase* PingSound); // Function FSD.FSDGameInstance.AddWarningToHUD
	void AddToFriendSessions(struct FString friendSessionId, struct FString friendName); // Function FSD.FSDGameInstance.AddToFriendSessions
	void AddStatValue(struct FString Key, float Value); // Function FSD.FSDGameInstance.AddStatValue
	void AddStatCount(struct FString Key, int32_t count); // Function FSD.FSDGameInstance.AddStatCount
	void AddSpaceRigNotification(struct FSpaceRigNotification NewNotification, struct FString ID, bool TriggerEvent); // Function FSD.FSDGameInstance.AddSpaceRigNotification
};

// Class FSD.FSDGameMode
// Size: 0x4c8 (Inherited: 0x308)
struct AFSDGameMode : AGameMode {
	struct FMulticastInlineDelegate OnMatchStarted; // 0x308(0x10)
	struct FMulticastInlineDelegate OnAllControllersReady; // 0x318(0x10)
	struct FMulticastInlineDelegate OnPlayerLoggedIn; // 0x328(0x10)
	struct FMulticastInlineDelegate OnDonkeyCalled; // 0x338(0x10)
	bool GenerationStarted; // 0x348(0x01)
	char UnknownData_349[0x7]; // 0x349(0x07)
	struct UPheromoneSpawnerComponent* PheromoneComponent; // 0x350(0x08)
	struct UEnemySpawnManager* EnemySpawnManager; // 0x358(0x08)
	struct UObjectivesManager* ObjectivesManager; // 0x360(0x08)
	struct UKeepInsideWorld* KeepInsideWorld; // 0x368(0x08)
	struct UDifficultyManager* DifficultyManagerComponent; // 0x370(0x08)
	struct UMissionManager* MissionManager; // 0x378(0x08)
	struct UEncounterManager* EncounterManagerComponent; // 0x380(0x08)
	struct UCritterManager* CritterManager; // 0x388(0x08)
	struct TArray<struct AFSDPlayerController*> PlayerControllers; // 0x390(0x10)
	struct UFormationsManagerComponent* FormationsManager; // 0x3a0(0x08)
	char UnknownData_3A8[0x20]; // 0x3a8(0x20)
	SoftClassProperty DropPodClass; // 0x3c8(0x28)
	SoftClassProperty MuleClass; // 0x3f0(0x28)
	SoftClassProperty DropodEscapeClass; // 0x418(0x28)
	SoftClassProperty droneClass; // 0x440(0x28)
	float ContinueCountdown; // 0x468(0x04)
	bool PreventAllLatejoin; // 0x46c(0x01)
	bool PreventLateJoinOnMissionStart; // 0x46d(0x01)
	char UnknownData_46E[0x2]; // 0x46e(0x02)
	float PlayerSpawnHeightOffset; // 0x470(0x04)
	float FriendlyFireGracePeriod; // 0x474(0x04)
	struct TArray<struct UEnemyDescriptor*> ForcedEnemyPool; // 0x478(0x10)
	bool UseNormalEncounters; // 0x488(0x01)
	bool UseStationaryEncounter; // 0x489(0x01)
	bool AllowSpecialEncounters; // 0x48a(0x01)
	char UnknownData_48B[0x5]; // 0x48b(0x05)
	struct UEnemyWaveManager* CachedWaveManager; // 0x490(0x08)
	char UnknownData_498[0x30]; // 0x498(0x30)

	void StartGame(); // Function FSD.FSDGameMode.StartGame
	void SpawnMissionCriticalItems(); // Function FSD.FSDGameMode.SpawnMissionCriticalItems
	void SignalEndLevelToClients(); // Function FSD.FSDGameMode.SignalEndLevelToClients
	void ResetDeaths(); // Function FSD.FSDGameMode.ResetDeaths
	void RecieveEndLevel(); // Function FSD.FSDGameMode.RecieveEndLevel
	void RecieveAllDwarvesDown(); // Function FSD.FSDGameMode.RecieveAllDwarvesDown
	void Recieve_ContinueTimerEnded(); // Function FSD.FSDGameMode.Recieve_ContinueTimerEnded
	void ReceivePostSeamlessTravel(); // Function FSD.FSDGameMode.ReceivePostSeamlessTravel
	void OnObjectivesInitialized(); // Function FSD.FSDGameMode.OnObjectivesInitialized
	void OnLevelGenerationComplete(int32_t pass); // Function FSD.FSDGameMode.OnLevelGenerationComplete
	void OnControllerDestroyed(struct AActor* Controller); // Function FSD.FSDGameMode.OnControllerDestroyed
	void LoadSpaceRig(); // Function FSD.FSDGameMode.LoadSpaceRig
	void LoadMission(struct FString MapName, SoftClassProperty optionalGameMode); // Function FSD.FSDGameMode.LoadMission
	void HostAbortMission(); // Function FSD.FSDGameMode.HostAbortMission
	struct UEnemyWaveManager* GetWaveManager(); // Function FSD.FSDGameMode.GetWaveManager
	struct AActor* GetPlayerStart(struct AFSDPlayerController* Controller); // Function FSD.FSDGameMode.GetPlayerStart
	struct ADonkeyCharacter* GetMuleClass(); // Function FSD.FSDGameMode.GetMuleClass
	struct UEncounterManager* GetEncounterManager(); // Function FSD.FSDGameMode.GetEncounterManager
	struct FSoftObjectPath GetDropPodPath(); // Function FSD.FSDGameMode.GetDropPodPath
	struct FSoftObjectPath GetDropPodEscapePath(); // Function FSD.FSDGameMode.GetDropPodEscapePath
	struct AMiningPod* GetDropPodEscapeClass(); // Function FSD.FSDGameMode.GetDropPodEscapeClass
	struct AMiningPod* GetDropPodClass(); // Function FSD.FSDGameMode.GetDropPodClass
	struct FSoftObjectPath GetDronePath(); // Function FSD.FSDGameMode.GetDronePath
	struct ABosco* GetDroneClass(); // Function FSD.FSDGameMode.GetDroneClass
	struct UDifficultyManager* GetDifficultyManager(); // Function FSD.FSDGameMode.GetDifficultyManager
	int32_t GetCurrentLevel(); // Function FSD.FSDGameMode.GetCurrentLevel
	bool FSDSetPause(struct APlayerController* PC, enum class EPauseReason pauseReason); // Function FSD.FSDGameMode.FSDSetPause
    void EndLevel(); // Function FSD.FSDGameMode.EndLevel
    bool FSDKickPlayer(struct APlayerController* KickedPlayer, struct FText KickReason); // Function FSD.FSDGameMode.FSDKickPlayer
    bool FSDClearPause(enum class EPauseReason pauseReason); // Function FSD.FSDGameMode.FSDClearPause
	void DonkeyButtonPressed(); // Function FSD.FSDGameMode.DonkeyButtonPressed
	void DestroyNonLocalPlayers(); // Function FSD.FSDGameMode.DestroyNonLocalPlayers
	void Debug_ShowPlayerSpheres(); // Function FSD.FSDGameMode.Debug_ShowPlayerSpheres
	bool AllPlayersHaveSelectedCharacter(); // Function FSD.FSDGameMode.AllPlayersHaveSelectedCharacter
	bool AllPlayersHaveGeneratedLevel(); // Function FSD.FSDGameMode.AllPlayersHaveGeneratedLevel
	void AddControllerForGracePeriod(struct APlayerCharacter* APlayerCharacter); // Function FSD.FSDGameMode.AddControllerForGracePeriod
	void AboutMission(); // Function FSD.FSDGameMode.AboutMission
};

// Class FSD.FSDGameModeSpaceRig
// Size: 0x4e0 (Inherited: 0x4c8)
struct AFSDGameModeSpaceRig : AFSDGameMode {
	char AmountOfPlayersSpawnedInMedbay; // 0x4c8(0x01)
	bool StartedSession; // 0x4c9(0x01)
	char UnknownData_4CA[0x16]; // 0x4ca(0x16)

	struct AActor* GetFreeSpawnOfType(enum class ESpacerigStartType aType, struct AFSDPlayerController* AController); // Function FSD.FSDGameModeSpaceRig.GetFreeSpawnOfType
};

// Class FSD.MissionGenerationManager
// Size: 0x88 (Inherited: 0x30)
struct UMissionGenerationManager : UGameInstanceSubsystem {
	struct TMap<int32_t, struct FGeneratedMissionGroup> AllMissionGroups; // 0x30(0x50)
	bool ResetSelectedMission; // 0x80(0x01)
	char UnknownData_81[0x7]; // 0x81(0x07)

	struct TArray<struct UGeneratedMission*> GetMissions(int32_t Seed); // Function FSD.MissionGenerationManager.GetMissions
	struct UGeneratedMission* GetMissionFromSeeds(int32_t GlobalSeed, int32_t MissionSeed); // Function FSD.MissionGenerationManager.GetMissionFromSeeds
	struct TArray<struct UGeneratedMission*> GetAvailableMissions(); // Function FSD.MissionGenerationManager.GetAvailableMissions
};

// Class FSD.FSDGameplayStatics
// Size: 0x28 (Inherited: 0x28)
struct UFSDGameplayStatics : UBlueprintFunctionLibrary {

	struct UParticleSystemComponent* SpawnScaledEmitterAtLocation(struct UObject* WorldContextObject, struct FScaledEffect ScaledEffect, struct FVector Location, struct FRotator Rotation, bool bAutoDestroy); // Function FSD.FSDGameplayStatics.SpawnScaledEmitterAtLocation
	struct UDecalComponent* SpawnDecalData(struct UObject* WorldContextObject, struct FVector Location, struct FVector UpVector, struct FDecalData DecalData); // Function FSD.FSDGameplayStatics.SpawnDecalData
	struct UDecalComponent* SpawnDecalAtActor(struct AActor* Actor, struct UMaterialInterface* DecalMaterial, float Size, float Duration, float FadeDuration); // Function FSD.FSDGameplayStatics.SpawnDecalAtActor
	struct UDecalComponent* SpawnDecal(struct UObject* WorldContextObject, struct UMaterialInterface* DecalMaterial, struct FVector Location, struct FVector UpVector, float Size, float Duration, float FadeDuration); // Function FSD.FSDGameplayStatics.SpawnDecal
};

// Class FSD.FSDTagSettings
// Size: 0x120 (Inherited: 0x30)
struct UFSDTagSettings : UDataAsset {
	struct FGameplayTagQuery IsFriendlyQuery; // 0x30(0x48)
	struct FGameplayTagQuery IsNeutralQuery; // 0x78(0x48)
	struct FGameplayTagQuery IsHostileQuery; // 0xc0(0x48)
	struct FFSDTagsRoot Root; // 0x108(0x18)
};

// Class FSD.FSDGameSession
// Size: 0x248 (Inherited: 0x238)
struct AFSDGameSession : AGameSession {
	struct TArray<struct FUniqueNetIdRepl> BannedPlayers; // 0x238(0x10)
};

// Class FSD.GameStats
// Size: 0x230 (Inherited: 0x220)
struct AGameStats : AInfo {
	int32_t NumberOfPlayersEscapedInPod; // 0x220(0x04)
	float TotalGoldMined; // 0x224(0x04)
	int32_t TotalEnemiesKilled; // 0x228(0x04)
	int32_t MissionHaz; // 0x22c(0x04)

	void OnPlayerMinedGold(struct UCappedResource* Resource, float amount); // Function FSD.GameStats.OnPlayerMinedGold
};

// Class FSD.FSDGameState
// Size: 0x660 (Inherited: 0x290)
struct AFSDGameState : AGameState {
	struct FMulticastInlineDelegate OnMissionTimeUpdated; // 0x290(0x10)
	struct FMulticastInlineDelegate OnTerrainGenerated; // 0x2a0(0x10)
	struct FMulticastInlineDelegate OnTerrainGenerationStarting; // 0x2b0(0x10)
	struct FMulticastInlineDelegate OnMatchStarted; // 0x2c0(0x10)
	struct FMulticastInlineDelegate OnMatchEnded; // 0x2d0(0x10)
	struct FMulticastInlineDelegate OnGameEventCompletedEvent; // 0x2e0(0x10)
	struct FMulticastInlineDelegate OnPlayerJoined; // 0x2f0(0x10)
	struct FMulticastInlineDelegate OnPlayerLeave; // 0x300(0x10)
	struct FMulticastInlineDelegate OnContinueActive; // 0x310(0x10)
	struct FMulticastInlineDelegate OnContinueCountdownChanged; // 0x320(0x10)
	struct FMulticastInlineDelegate OnAllDwarvesDown; // 0x330(0x10)
	struct FMulticastInlineDelegate OnTeamMemberCampaignMissionChanged; // 0x340(0x10)
	struct FMulticastInlineDelegate OnEnemyKilledEvent; // 0x350(0x10)
	struct FMulticastInlineDelegate OnPlayerCharacterRegistered; // 0x360(0x10)
	int32_t CurrentLevel; // 0x370(0x04)
	char UnknownData_374[0x4]; // 0x374(0x04)
	struct AMiningPod* EscapePod; // 0x378(0x08)
	struct FString FSDSessionID; // 0x380(0x10)
	struct FMulticastInlineDelegate OnBoscoReviveCounterChanged; // 0x390(0x10)
	bool bTeamDown; // 0x3a0(0x01)
	char UnknownData_3A1[0x7]; // 0x3a1(0x07)
	struct FMulticastInlineDelegate OnTeamDown; // 0x3a8(0x10)
	char UnknownData_3B8[0x8]; // 0x3b8(0x08)
	struct FMulticastInlineDelegate OnObjectivesCompleted; // 0x3c0(0x10)
	struct FMulticastInlineDelegate OnObjectiveAdded; // 0x3d0(0x10)
	struct FMulticastInlineDelegate OnDifficultyChanged; // 0x3e0(0x10)
	struct FMulticastInlineDelegate OnCountdownStarted; // 0x3f0(0x10)
	struct FMulticastInlineDelegate OnCountdownTimeChanged; // 0x400(0x10)
	struct FMulticastInlineDelegate OnCountdownFinished; // 0x410(0x10)
	struct ADeepCSGWorld* CSGWorld; // 0x420(0x08)
	int32_t LastSupplyPodTimeStamp; // 0x428(0x04)
	char UnknownData_42C[0x4]; // 0x42c(0x04)
	struct AProceduralSetup* ProceduralSetup; // 0x430(0x08)
	bool DelayLateJoin; // 0x438(0x01)
	char UnknownData_439[0x7]; // 0x439(0x07)
	struct UPrimitiveComponent* FakeMovementBase; // 0x440(0x08)
	int32_t PlayerSurvivalCreditBonus; // 0x448(0x04)
	float ResourceAmountPenalty; // 0x44c(0x04)
	float ObjectivesCreditPenalty; // 0x450(0x04)
	char UnknownData_454[0x4]; // 0x454(0x04)
	struct FText TextMissionCompleted; // 0x458(0x18)
	struct FText TextSecondaryObjective; // 0x470(0x18)
	struct FText TextSurvivalBonus; // 0x488(0x18)
	struct FText TextMined; // 0x4a0(0x18)
	struct FText TextCollected; // 0x4b8(0x18)
	struct FText TextBonus; // 0x4d0(0x18)
	int32_t BoscoReviveCounter; // 0x4e8(0x04)
	char UnknownData_4EC[0x4]; // 0x4ec(0x04)
	struct USpawnEffectsComponent* SpawnEffects; // 0x4f0(0x08)
	struct UDynamicMeshScaler* MeshScaler; // 0x4f8(0x08)
	struct UFlareController* FlareController; // 0x500(0x08)
	struct UGemProximityTracker* GemProximityTracker; // 0x508(0x08)
	struct UAttackerManagerComponent* AttackerManager; // 0x510(0x08)
	struct USoundMixManagerComponent* SoundMixManager; // 0x518(0x08)
	struct UTeamResourcesComponent* TeamResources; // 0x520(0x08)
	bool IsOnSpaceRig; // 0x528(0x01)
	bool PlayerMadeItToDropPod; // 0x529(0x01)
	char UnknownData_52A[0x6]; // 0x52a(0x06)
	struct TArray<struct APlayerCharacter*> ActivePlayerCharacters; // 0x530(0x10)
	struct FReplicatedObjectives Objectives; // 0x540(0x18)
	struct FText CompletedGameEventName; // 0x558(0x18)
	struct FGeneratedMissionSeed GeneratedMissionSeed; // 0x570(0x58)
	bool objectivesCompleted; // 0x5c8(0x01)
	char UnknownData_5C9[0x7]; // 0x5c9(0x07)
	struct UDifficultySetting* CurrentDifficultySetting; // 0x5d0(0x08)
	bool RememberDifficulty; // 0x5d8(0x01)
	char UnknownData_5D9[0x7]; // 0x5d9(0x07)
	struct UPlayerProximityTracker* ProximityTracker; // 0x5e0(0x08)
	struct UShowroomManager* ShowroomManager; // 0x5e8(0x08)
	struct AGameStats* GameStats; // 0x5f0(0x08)
	uint32_t MissionTime; // 0x5f8(0x04)
	uint32_t MissionStartTime; // 0x5fc(0x04)
	uint32_t MissionHaz; // 0x600(0x04)
	bool PreventLatejoinCharacterDuplication; // 0x604(0x01)
	bool StartPressed; // 0x605(0x01)
	bool ContinuePressed; // 0x606(0x01)
	char UnknownData_607[0x1]; // 0x607(0x01)
	int32_t ContinuesCountdown; // 0x608(0x04)
	bool AllDwarvesDown; // 0x60c(0x01)
	bool MissionAborted; // 0x60d(0x01)
	char UnknownData_60E[0x2]; // 0x60e(0x02)
	int32_t CountdownRemaining; // 0x610(0x04)
	char UnknownData_614[0x4]; // 0x614(0x04)
	struct FText countdownText; // 0x618(0x18)
	bool CanCarryOverResources; // 0x630(0x01)
	char UnknownData_631[0x2f]; // 0x631(0x2f)

	void StartCountdown(int32_t Duration, struct FText countdownName); // Function FSD.FSDGameState.StartCountdown
	void SetPreventLatejoinCharacterDuplication(bool prevent); // Function FSD.FSDGameState.SetPreventLatejoinCharacterDuplication
	void SetPlayersHaveReachedDroppod(bool newHasPlayerReached); // Function FSD.FSDGameState.SetPlayersHaveReachedDroppod
	void SetGeneratedMissionParameters(struct UGeneratedMission* mission); // Function FSD.FSDGameState.SetGeneratedMissionParameters
	void SetCurrentDifficulty(struct UDifficultySetting* Setting, bool updateSessionSettings); // Function FSD.FSDGameState.SetCurrentDifficulty
	void SetCompletionData(bool objectivesCompleted, int32_t playersInPod); // Function FSD.FSDGameState.SetCompletionData
	void ReceiveGeneratedMissionReplicated(); // Function FSD.FSDGameState.ReceiveGeneratedMissionReplicated
	void PostLocalizedGameMessage(struct FText Msg, struct TArray<struct FText> Arguments); // Function FSD.FSDGameState.PostLocalizedGameMessage
	void PostGameMessage(struct FString Msg); // Function FSD.FSDGameState.PostGameMessage
	void OnRep_StartPressed(bool oldStartPressed); // Function FSD.FSDGameState.OnRep_StartPressed
	void OnRep_ObjectivesCompleted(); // Function FSD.FSDGameState.OnRep_ObjectivesCompleted
	void OnRep_MissionTime(); // Function FSD.FSDGameState.OnRep_MissionTime
	void OnRep_GeneratedMissionSeed(); // Function FSD.FSDGameState.OnRep_GeneratedMissionSeed
	void OnRep_FSDSessionID(); // Function FSD.FSDGameState.OnRep_FSDSessionID
	void OnRep_CurrentDifficultySetting(); // Function FSD.FSDGameState.OnRep_CurrentDifficultySetting
	void OnRep_CountdownText(); // Function FSD.FSDGameState.OnRep_CountdownText
	void OnRep_CountdownRemaining(int32_t prevTime); // Function FSD.FSDGameState.OnRep_CountdownRemaining
	void OnRep_ContinuePressed(); // Function FSD.FSDGameState.OnRep_ContinuePressed
	void OnRep_ContinueCountdown(); // Function FSD.FSDGameState.OnRep_ContinueCountdown
	void OnRep_CompletedGameEvent(); // Function FSD.FSDGameState.OnRep_CompletedGameEvent
	void OnRep_BoscoReviveCounter(); // Function FSD.FSDGameState.OnRep_BoscoReviveCounter
	void OnRep_AllDwarvesDown(); // Function FSD.FSDGameState.OnRep_AllDwarvesDown
	int32_t MissionEndscreenSeed(); // Function FSD.FSDGameState.MissionEndscreenSeed
	bool IsTutorialMission(); // Function FSD.FSDGameState.IsTutorialMission
	bool IsCountingDown(); // Function FSD.FSDGameState.IsCountingDown
	void InitObjectives(); // Function FSD.FSDGameState.InitObjectives
	bool HasObjectivesReplicated(); // Function FSD.FSDGameState.HasObjectivesReplicated
	void HandleSeamlessTravelEvent(); // Function FSD.FSDGameState.HandleSeamlessTravelEvent
	struct AFSDPlayerState* GetServerPlayerState(); // Function FSD.FSDGameState.GetServerPlayerState
	struct UObjective* GetSecondaryObjective(); // Function FSD.FSDGameState.GetSecondaryObjective
	struct AProceduralSetup* GetProceduralSetup(); // Function FSD.FSDGameState.GetProceduralSetup
	struct UObjective* GetPrimaryObjective(); // Function FSD.FSDGameState.GetPrimaryObjective
	bool GetPreventLatejoinCharacterDuplication(); // Function FSD.FSDGameState.GetPreventLatejoinCharacterDuplication
	bool GetPlayersHaveReachedDroppod(); // Function FSD.FSDGameState.GetPlayersHaveReachedDroppod
	struct TArray<struct APlayerCharacter*> GetPlayableCharacters(); // Function FSD.FSDGameState.GetPlayableCharacters
	struct TArray<struct UPlayerCharacterID*> GetPlayableCharacterIDs(); // Function FSD.FSDGameState.GetPlayableCharacterIDs
	struct TArray<struct UObjective*> GetObjectives(); // Function FSD.FSDGameState.GetObjectives
	struct TArray<struct AFSDPlayerState*> GetNetworkSortedPlayerArray(); // Function FSD.FSDGameState.GetNetworkSortedPlayerArray
	int32_t GetMissionTime(); // Function FSD.FSDGameState.GetMissionTime
	bool GetMissionSuccessful(); // Function FSD.FSDGameState.GetMissionSuccessful
	int32_t GetMissionStartTime(); // Function FSD.FSDGameState.GetMissionStartTime
	int32_t GetMissionRewardXP(bool primary); // Function FSD.FSDGameState.GetMissionRewardXP
	int32_t GetMissionRewardCreditSum(); // Function FSD.FSDGameState.GetMissionRewardCreditSum
	struct TArray<struct FCreditsReward> GetMissionRewardCredits(); // Function FSD.FSDGameState.GetMissionRewardCredits
	bool GetMissionCompletedCreditReward(bool primary, int32_t OutReward); // Function FSD.FSDGameState.GetMissionCompletedCreditReward
	int32_t GetGlobalMissionSeed(); // Function FSD.FSDGameState.GetGlobalMissionSeed
	struct AGameStats* GetGameStats(); // Function FSD.FSDGameState.GetGameStats
	struct TMap<struct UResourceData*, float> GetCollectedResources(); // Function FSD.FSDGameState.GetCollectedResources
	struct TArray<struct UFSDEvent*> GetActiveEventsFromMission(); // Function FSD.FSDGameState.GetActiveEventsFromMission
	void ClientNewMessage(struct FFSDChatMessage Msg); // Function FSD.FSDGameState.ClientNewMessage
	void Client_StartPressed(); // Function FSD.FSDGameState.Client_StartPressed
	void Client_NewLocalizedMessage(struct FFSDLocalizedChatMessage Msg); // Function FSD.FSDGameState.Client_NewLocalizedMessage
	bool AllMissionEndResultsReceived(); // Function FSD.FSDGameState.AllMissionEndResultsReceived
	void All_SpawnScaledEffectAt(struct FScaledEffect effect, struct FVector_NetQuantize Location); // Function FSD.FSDGameState.All_SpawnScaledEffectAt
	void All_SpawnScaledEffectAndCueAt(struct FScaledEffect effect, struct USoundCue* Audio, struct FVector_NetQuantize Location); // Function FSD.FSDGameState.All_SpawnScaledEffectAndCueAt
};

// Class FSD.FSDGameUserSettings
// Size: 0x400 (Inherited: 0x120)
struct UFSDGameUserSettings : UGameUserSettings {
	char UnknownData_120[0x8]; // 0x120(0x08)
	struct FMulticastInlineDelegate OnUseHoldToRunChanged; // 0x128(0x10)
	struct FMulticastInlineDelegate OnFOVChanged; // 0x138(0x10)
	struct FMulticastInlineDelegate OnLanguageChanged; // 0x148(0x10)
	struct FMulticastInlineDelegate OnGameServerNameChanged; // 0x158(0x10)
	struct FMulticastInlineDelegate OnFontSizeChanged; // 0x168(0x10)
	struct FMulticastInlineDelegate OnJukeboxStreamerModeChanged; // 0x178(0x10)
	bool bJukeboxStreamerMode; // 0x188(0x01)
	bool bGraphicSettingsChanged; // 0x189(0x01)
	char UnknownData_18A[0x6]; // 0x18a(0x06)
	struct FString CurrentUserSetSaveSlotName; // 0x190(0x10)
	struct FMulticastInlineDelegate OnCanShowBloodChanged; // 0x1a0(0x10)
	float volumeCharacterVoice; // 0x1b0(0x04)
	float volumeMissionControl; // 0x1b4(0x04)
	float volumeMaster; // 0x1b8(0x04)
	float volumeSFX; // 0x1bc(0x04)
	float volumeMusic; // 0x1c0(0x04)
	char UnknownData_1C4[0x4]; // 0x1c4(0x04)
	struct FString CurrentAudioOutputDeviceId; // 0x1c8(0x10)
	bool UseDefaultAudioOutputDevice; // 0x1d8(0x01)
	char UnknownData_1D9[0x3]; // 0x1d9(0x03)
	float Sharpening; // 0x1dc(0x04)
	int32_t AntiAliasingType; // 0x1e0(0x04)
	bool TemporalAAUpsamplingEnabled; // 0x1e4(0x01)
	char UnknownData_1E5[0x3]; // 0x1e5(0x03)
	float volumeVoice; // 0x1e8(0x04)
	char UnknownData_1EC[0x4]; // 0x1ec(0x04)
	struct USoundClass* soundClassCharacterVoices; // 0x1f0(0x08)
	struct USoundClass* soundClassMissionControl; // 0x1f8(0x08)
	struct USoundClass* soundClassMaster; // 0x200(0x08)
	struct USoundClass* soundClassSFX; // 0x208(0x08)
	struct USoundClass* soundClassUI; // 0x210(0x08)
	struct USoundClass* soundClassMusic; // 0x218(0x08)
	struct USoundClass* soundClassVoice; // 0x220(0x08)
	int32_t ChatFontSize; // 0x228(0x04)
	bool bUseVoiceChat; // 0x22c(0x01)
	bool bUsePushToTalk; // 0x22d(0x01)
	char UnknownData_22E[0x2]; // 0x22e(0x02)
	struct FString LocalGameServerName; // 0x230(0x10)
	struct FString LocalGameServerNameFiltered; // 0x240(0x10)
	bool AppearOffline; // 0x250(0x01)
	bool AutoRefreshServerlist; // 0x251(0x01)
	char UnknownData_252[0x2]; // 0x252(0x02)
	float MouseXSensitivity; // 0x254(0x04)
	float MouseYSensitivity; // 0x258(0x04)
	bool UseSeperateSensetivity; // 0x25c(0x01)
	bool InvertMouse; // 0x25d(0x01)
	bool InvertScroolWheel; // 0x25e(0x01)
	bool UseHoldToRun; // 0x25f(0x01)
	bool UseToggleLaserpointer; // 0x260(0x01)
	char UnknownData_261[0x3]; // 0x261(0x03)
	float FOV; // 0x264(0x04)
	float HeadbobbingScale; // 0x268(0x04)
	float CameraShakeScale; // 0x26c(0x04)
	float ChatFadeTime; // 0x270(0x04)
	bool UseStreamerProgram; // 0x274(0x01)
	bool SoundOnChatMessage; // 0x275(0x01)
	bool PhotosensitiveMode; // 0x276(0x01)
	bool ShowUIAnimations; // 0x277(0x01)
	bool UseProfanityFilter; // 0x278(0x01)
	char UnknownData_279[0x3]; // 0x279(0x03)
	float ForceFeedbackScale; // 0x27c(0x04)
	bool InvertFlightControls; // 0x280(0x01)
	bool EnableDx12ByDefault; // 0x281(0x01)
	char UnknownData_282[0x2]; // 0x282(0x02)
	struct FHUDElements HUDElements; // 0x284(0x78)
	struct FCharacterOptions CharacterOptions; // 0x2fc(0x02)
	char UnknownData_2FE[0x2]; // 0x2fe(0x02)
	float DownedTurnDirection_Controller; // 0x300(0x04)
	float DownedTurnDirection_Mouse; // 0x304(0x04)
	float UIDPIScale; // 0x308(0x04)
	char UnknownData_30C[0x4]; // 0x30c(0x04)
	bool EnableCustomUIScale; // 0x310(0x01)
	char UnknownData_311[0x7]; // 0x311(0x07)
	struct FMulticastInlineDelegate OnInputSourceChanged; // 0x318(0x10)
	bool CheckCursorOutOfBounds; // 0x328(0x01)
	char UnknownData_329[0x7]; // 0x329(0x07)
	struct FMulticastInlineDelegate OnEnableTutorialHintsChanged; // 0x330(0x10)
	struct FMulticastInlineDelegate OnShowFPSChanged; // 0x340(0x10)
	struct FMulticastInlineDelegate OnShowNetInfoChanged; // 0x350(0x10)
	struct FMulticastInlineDelegate OnDx12Enabled; // 0x360(0x10)
	struct FIntPoint ResolutionToBeApplied; // 0x370(0x08)
	bool VSyncToBeApplied; // 0x378(0x01)
	bool Dx12ToBeApplied; // 0x379(0x01)
	char InFullscreenModeToBeApplied; // 0x37a(0x01)
	bool InFullscreenModeToBeAppliedValid; // 0x37b(0x01)
	bool VSyncToBeAppliedValid; // 0x37c(0x01)
	bool Dx12ToBeAppliedValid; // 0x37d(0x01)
	bool ResolutionToBeAppliedValid; // 0x37e(0x01)
	bool bShowUpgradeExtraDetails; // 0x37f(0x01)
	struct FMulticastInlineDelegate OnShowUpgradeExtraDetailsChanged; // 0x380(0x10)
	struct FMulticastInlineDelegate OnCustomKeyBindingsChanged; // 0x390(0x10)
	enum class EFSDInputSource CurrentInputSource; // 0x3a0(0x01)
	enum class EFSDInputSource RequestedInputSource; // 0x3a1(0x01)
	char UnknownData_3A2[0x6]; // 0x3a2(0x06)
	struct TArray<struct FCustomKeyBinding> CustomKeyBindings; // 0x3a8(0x10)
	struct TArray<struct FCustomKeyBinding> CustomControllerBindings; // 0x3b8(0x10)
	bool SwapControllerThumbsticks; // 0x3c8(0x01)
	bool bTutorialHintsEnabled; // 0x3c9(0x01)
	bool bShowSubtitles; // 0x3ca(0x01)
	bool bShowFPS; // 0x3cb(0x01)
	bool bShowNetInfo; // 0x3cc(0x01)
	bool bCanShowBlood; // 0x3cd(0x01)
	bool PreventLatejoinCharacterDuplication; // 0x3ce(0x01)
	bool TranslatorDebugModeEnabled; // 0x3cf(0x01)
	struct FString PreviousCulture; // 0x3d0(0x10)
	struct FControllerSettings ControllerSettings; // 0x3e0(0x0c)
	char UnknownData_3EC[0x4]; // 0x3ec(0x04)
	struct TArray<struct FGuid> SelectedDifficultyLevels; // 0x3f0(0x10)

	void UpdateVolumeSettings(struct USoundClass* CharacterVoices, struct USoundClass* MissionControl, struct USoundClass* Master, struct USoundClass* Music, struct USoundClass* SFX, struct USoundClass* UI, struct USoundClass* Voice); // Function FSD.FSDGameUserSettings.UpdateVolumeSettings
	void UpdateForceFeedbackScaleOnController(struct APlayerController* Controller); // Function FSD.FSDGameUserSettings.UpdateForceFeedbackScaleOnController
	bool ToggleTranslatorDebugMode(); // Function FSD.FSDGameUserSettings.ToggleTranslatorDebugMode
	bool ToggleShowUpgradeExtraDetails(); // Function FSD.FSDGameUserSettings.ToggleShowUpgradeExtraDetails
	void SetZiplineGunAutoSwitch(bool shouldAutoSwitch); // Function FSD.FSDGameUserSettings.SetZiplineGunAutoSwitch
	void SetVSyncEnabledToBeApplied(bool bEnable); // Function FSD.FSDGameUserSettings.SetVSyncEnabledToBeApplied
	void SetVolume(enum class EVolumeType volumeType, float Volume); // Function FSD.FSDGameUserSettings.SetVolume
	void SetVoiceChatEnabled(bool bEnable); // Function FSD.FSDGameUserSettings.SetVoiceChatEnabled
	void SetUseToggleTerrainScanner(bool useToggleTerrainScanner); // Function FSD.FSDGameUserSettings.SetUseToggleTerrainScanner
	void SetUseToggleLaserpointer(bool UseToggleLaserpointer); // Function FSD.FSDGameUserSettings.SetUseToggleLaserpointer
	void SetUseStreamerProgram(bool UseStreamerProgram); // Function FSD.FSDGameUserSettings.SetUseStreamerProgram
	void SetUseSeparateSensitivity(bool newSetting); // Function FSD.FSDGameUserSettings.SetUseSeparateSensitivity
	void SetUseProfanityFilter(bool shouldUse); // Function FSD.FSDGameUserSettings.SetUseProfanityFilter
	void SetUseHoldToRun(bool UseHoldToRun); // Function FSD.FSDGameUserSettings.SetUseHoldToRun
	void SetUseDefaultAudioOutputDevice(struct UObject* WorldContextObject, bool UseDefault); // Function FSD.FSDGameUserSettings.SetUseDefaultAudioOutputDevice
	void SetUseCustomUIScale(bool UseCustomScale); // Function FSD.FSDGameUserSettings.SetUseCustomUIScale
	void SetUIDPIScale(float uiscale); // Function FSD.FSDGameUserSettings.SetUIDPIScale
	void SetTutorialHintsEnabled(bool Enabled); // Function FSD.FSDGameUserSettings.SetTutorialHintsEnabled
	void SetTemporalAAUpscalingEnabled(bool bEnable); // Function FSD.FSDGameUserSettings.SetTemporalAAUpscalingEnabled
	void SetSwapControllerThumbsticks(bool InSwapThumbsticks); // Function FSD.FSDGameUserSettings.SetSwapControllerThumbsticks
	void SetShowUIAnimations(bool shouldShow); // Function FSD.FSDGameUserSettings.SetShowUIAnimations
	void SetShowSubtitles(bool Show); // Function FSD.FSDGameUserSettings.SetShowSubtitles
	void SetShowNetInfo(bool Visible); // Function FSD.FSDGameUserSettings.SetShowNetInfo
	void SetShowFPS(bool Visible); // Function FSD.FSDGameUserSettings.SetShowFPS
	void SetSharpening(float Sharpening); // Function FSD.FSDGameUserSettings.SetSharpening
	void SetScreenResolutionToBeApplied(struct FIntPoint Resolution); // Function FSD.FSDGameUserSettings.SetScreenResolutionToBeApplied
	void SetPushToTalk(bool bEnable); // Function FSD.FSDGameUserSettings.SetPushToTalk
	void SetPreventLatejoinCharacterDuplication(bool prevent); // Function FSD.FSDGameUserSettings.SetPreventLatejoinCharacterDuplication
	void SetPlaySoundOnChatMessage(bool playSoundOnMessage); // Function FSD.FSDGameUserSettings.SetPlaySoundOnChatMessage
	void SetPhotosensitiveMode(bool modeOn); // Function FSD.FSDGameUserSettings.SetPhotosensitiveMode
	void SetMouseYSensitivity(float newSensitivity); // Function FSD.FSDGameUserSettings.SetMouseYSensitivity
	void SetMouseXSensitivity(float newSensitivity); // Function FSD.FSDGameUserSettings.SetMouseXSensitivity
	void SetJukeboxStreamerMode(bool InStreamerMode); // Function FSD.FSDGameUserSettings.SetJukeboxStreamerMode
	void SetInvertMouseWheel(bool invertMouseWheel); // Function FSD.FSDGameUserSettings.SetInvertMouseWheel
	void SetInvertMouse(bool InvertMouse); // Function FSD.FSDGameUserSettings.SetInvertMouse
	void SetInvertFlightControls(bool Invert); // Function FSD.FSDGameUserSettings.SetInvertFlightControls
	void SetInputSource(enum class EFSDInputSource NewSource); // Function FSD.FSDGameUserSettings.SetInputSource
	void SetHeadBobbingScale(float HeadbobbingScale); // Function FSD.FSDGameUserSettings.SetHeadBobbingScale
	void SetGrapplingHookAutoSwitch(bool shouldAutoSwitch); // Function FSD.FSDGameUserSettings.SetGrapplingHookAutoSwitch
	void SetGamma(float gamme); // Function FSD.FSDGameUserSettings.SetGamma
	void SetGameServerName(int32_t localUserNum, struct FString Name); // Function FSD.FSDGameUserSettings.SetGameServerName
	void SetFullscreenModeToBeApplied(char InFullscreenMode); // Function FSD.FSDGameUserSettings.SetFullscreenModeToBeApplied
	void SetFOV(float FOV); // Function FSD.FSDGameUserSettings.SetFOV
	void SetForceFeedbackScale(float Scale); // Function FSD.FSDGameUserSettings.SetForceFeedbackScale
	void SetDx12EnabledToBeApplied(bool bEnable); // Function FSD.FSDGameUserSettings.SetDx12EnabledToBeApplied
	void SetDownCameraTurnDirection(enum class EFSDInputSource InputSource, float InDirection); // Function FSD.FSDGameUserSettings.SetDownCameraTurnDirection
	void SetDisableMasterEQ(bool B); // Function FSD.FSDGameUserSettings.SetDisableMasterEQ
	void SetDifficultySelected(struct UDifficultySetting* Difficulty, bool IsSelected); // Function FSD.FSDGameUserSettings.SetDifficultySelected
	void SetDebugLocalizerMode(bool bEnable); // Function FSD.FSDGameUserSettings.SetDebugLocalizerMode
	void SetCurrentUserSaveSlotName(struct UObject* WorldContextObject, struct FString saveSlotName, enum class ESaveSlotChangeProcedure changeProcedure); // Function FSD.FSDGameUserSettings.SetCurrentUserSaveSlotName
	void SetCheckForOutOfBoundsEnabled(bool Enabled); // Function FSD.FSDGameUserSettings.SetCheckForOutOfBoundsEnabled
	void SetChatFontSize(int32_t inFontSize); // Function FSD.FSDGameUserSettings.SetChatFontSize
	void SetChatFadeTime(float FadeTime); // Function FSD.FSDGameUserSettings.SetChatFadeTime
	void SetCanShowBlood(bool bloodAllowed); // Function FSD.FSDGameUserSettings.SetCanShowBlood
	void SetCameraShakeScale(float CameraShakeScale); // Function FSD.FSDGameUserSettings.SetCameraShakeScale
	void SetAutoRefreshServerlist(bool Value); // Function FSD.FSDGameUserSettings.SetAutoRefreshServerlist
	bool SetAudioOutputDevice(struct UObject* WorldContextObject, struct FString DeviceID); // Function FSD.FSDGameUserSettings.SetAudioOutputDevice
	bool SetAudioInputDevice(struct FString DeviceName); // Function FSD.FSDGameUserSettings.SetAudioInputDevice
	void SetAppearOffline(bool bEnable); // Function FSD.FSDGameUserSettings.SetAppearOffline
	void SetAntiAliasingType(int32_t AntiAliasingType); // Function FSD.FSDGameUserSettings.SetAntiAliasingType
	void SetAimSensitivity(float NewValue); // Function FSD.FSDGameUserSettings.SetAimSensitivity
	void SetAimOuterAcceleration(float NewValue); // Function FSD.FSDGameUserSettings.SetAimOuterAcceleration
	void SetAimDeadZone(float NewValue); // Function FSD.FSDGameUserSettings.SetAimDeadZone
	void ResetGraphicsChanges(); // Function FSD.FSDGameUserSettings.ResetGraphicsChanges
	void ResetControllerSettings(); // Function FSD.FSDGameUserSettings.ResetControllerSettings
	void PostInitFSDUserSettings(); // Function FSD.FSDGameUserSettings.PostInitFSDUserSettings
	bool IsVoiceChatEnabled(); // Function FSD.FSDGameUserSettings.IsVoiceChatEnabled
	bool IsDx12Enabled(); // Function FSD.FSDGameUserSettings.IsDx12Enabled
	bool IsDebugLocalizerModeEnabled(); // Function FSD.FSDGameUserSettings.IsDebugLocalizerModeEnabled
	bool IsCurrentInputSource(enum class EFSDInputSource InputSource); // Function FSD.FSDGameUserSettings.IsCurrentInputSource
	void InitializeDifficultySelection(struct UObject* WorldContext, struct TArray<struct UDifficultySetting*> StartSelection); // Function FSD.FSDGameUserSettings.InitializeDifficultySelection
	bool HasAudioOutputDeviceChanged(struct FString AudioDeviceChangedTo); // Function FSD.FSDGameUserSettings.HasAudioOutputDeviceChanged
	bool GetZiplineGunAutoSwitch(); // Function FSD.FSDGameUserSettings.GetZiplineGunAutoSwitch
	bool GetVSyncEnabledToBeApplied(); // Function FSD.FSDGameUserSettings.GetVSyncEnabledToBeApplied
	float GetVolume(enum class EVolumeType volumeType); // Function FSD.FSDGameUserSettings.GetVolume
	bool GetUseToggleTerrainScanner(); // Function FSD.FSDGameUserSettings.GetUseToggleTerrainScanner
	bool GetUseToggleLaserpointer(); // Function FSD.FSDGameUserSettings.GetUseToggleLaserpointer
	bool GetUseStreamerProgram(); // Function FSD.FSDGameUserSettings.GetUseStreamerProgram
	bool GetUseSeparateSensitivity(); // Function FSD.FSDGameUserSettings.GetUseSeparateSensitivity
	bool GetUseProfanityFilter(); // Function FSD.FSDGameUserSettings.GetUseProfanityFilter
	bool GetUseHoldToRun(); // Function FSD.FSDGameUserSettings.GetUseHoldToRun
	bool GetUseDefaultAudioOutputDevice(); // Function FSD.FSDGameUserSettings.GetUseDefaultAudioOutputDevice
	bool GetUseCustomUIScale(); // Function FSD.FSDGameUserSettings.GetUseCustomUIScale
	float GetUIDPIScale(); // Function FSD.FSDGameUserSettings.GetUIDPIScale
	bool GetTutorialHintsEnabled(); // Function FSD.FSDGameUserSettings.GetTutorialHintsEnabled
	bool GetTemporalAAUpscalingEnabled(); // Function FSD.FSDGameUserSettings.GetTemporalAAUpscalingEnabled
	bool GetShowUIAnimations(); // Function FSD.FSDGameUserSettings.GetShowUIAnimations
	bool GetShowSubtitles(); // Function FSD.FSDGameUserSettings.GetShowSubtitles
	bool GetShowNetInfo(); // Function FSD.FSDGameUserSettings.GetShowNetInfo
	bool GetShowFPS(); // Function FSD.FSDGameUserSettings.GetShowFPS
	float GetSharpening(); // Function FSD.FSDGameUserSettings.GetSharpening
	struct FIntPoint GetScreenResolutionToBeApplied(); // Function FSD.FSDGameUserSettings.GetScreenResolutionToBeApplied
	bool GetPushToTalk(); // Function FSD.FSDGameUserSettings.GetPushToTalk
	bool GetPreventLatejoinCharacterDuplication(); // Function FSD.FSDGameUserSettings.GetPreventLatejoinCharacterDuplication
	bool GetPlaySoundOnChatMessage(); // Function FSD.FSDGameUserSettings.GetPlaySoundOnChatMessage
	bool GetPhotosensitiveMode(); // Function FSD.FSDGameUserSettings.GetPhotosensitiveMode
	float GetMouseYSensitivity(); // Function FSD.FSDGameUserSettings.GetMouseYSensitivity
	float GetMouseXSensitivity(); // Function FSD.FSDGameUserSettings.GetMouseXSensitivity
	bool GetIsDifficultySelected(struct UDifficultySetting* Difficulty); // Function FSD.FSDGameUserSettings.GetIsDifficultySelected
	bool GetInvertMouseWheel(); // Function FSD.FSDGameUserSettings.GetInvertMouseWheel
	bool GetInvertMouse(); // Function FSD.FSDGameUserSettings.GetInvertMouse
	bool GetInvertFlightControls(); // Function FSD.FSDGameUserSettings.GetInvertFlightControls
	enum class EFSDInputSource GetInputSource(); // Function FSD.FSDGameUserSettings.GetInputSource
	float GetHeadBobbingScale(); // Function FSD.FSDGameUserSettings.GetHeadBobbingScale
	bool GetGrapplingHookAutoSwitch(); // Function FSD.FSDGameUserSettings.GetGrapplingHookAutoSwitch
	float GetGamma(); // Function FSD.FSDGameUserSettings.GetGamma
	char GetFullscreenModeToBeApplied(); // Function FSD.FSDGameUserSettings.GetFullscreenModeToBeApplied
	struct UFSDGameUserSettings* GetFSDGameUserSettings(); // Function FSD.FSDGameUserSettings.GetFSDGameUserSettings
	float GetFOV(); // Function FSD.FSDGameUserSettings.GetFOV
	float GetForceFeedbackScale(); // Function FSD.FSDGameUserSettings.GetForceFeedbackScale
	bool GetDx12EnabledToBeApplied(); // Function FSD.FSDGameUserSettings.GetDx12EnabledToBeApplied
	float GetDownCameraTurnDirection(enum class EFSDInputSource InputSource); // Function FSD.FSDGameUserSettings.GetDownCameraTurnDirection
	bool GetDisableMasterEQ(); // Function FSD.FSDGameUserSettings.GetDisableMasterEQ
	struct FString GetCurrentUserSaveSlotName(); // Function FSD.FSDGameUserSettings.GetCurrentUserSaveSlotName
	enum class EFSDInputSource GetCurrentInputSource(); // Function FSD.FSDGameUserSettings.GetCurrentInputSource
	bool GetCurrentAudioOutputDevice(struct UObject* WorldContextObject, struct FString AudioDevice); // Function FSD.FSDGameUserSettings.GetCurrentAudioOutputDevice
	struct FString GetCurrentAudioInputDeviceName(); // Function FSD.FSDGameUserSettings.GetCurrentAudioInputDeviceName
	float GetCurrentAudioInputDeviceAmplitude(int32_t localUserId); // Function FSD.FSDGameUserSettings.GetCurrentAudioInputDeviceAmplitude
	bool GetCheckForOutOfBounds(); // Function FSD.FSDGameUserSettings.GetCheckForOutOfBounds
	int32_t GetChatFontSize(); // Function FSD.FSDGameUserSettings.GetChatFontSize
	float GetChatFadeTime(); // Function FSD.FSDGameUserSettings.GetChatFadeTime
	float GetCameraShakeScale(); // Function FSD.FSDGameUserSettings.GetCameraShakeScale
	bool GetAvaliableAudioOutputDevices(struct UObject* WorldContextObject, struct TArray<struct FString> AudioDevices); // Function FSD.FSDGameUserSettings.GetAvaliableAudioOutputDevices
	bool GetAvaliableAudioInputDevices(struct TArray<struct FString> AudioDevices); // Function FSD.FSDGameUserSettings.GetAvaliableAudioInputDevices
	bool GetAvailableScreenResolutionsForNonPrimaryMonitors(struct TArray<struct FIntPoint> Resolutions); // Function FSD.FSDGameUserSettings.GetAvailableScreenResolutionsForNonPrimaryMonitors
	bool GetAutoRefreshServerlist(); // Function FSD.FSDGameUserSettings.GetAutoRefreshServerlist
	struct FString GetAudioOutputDeviceName(struct UObject* WorldContextObject, struct FString DeviceID); // Function FSD.FSDGameUserSettings.GetAudioOutputDeviceName
	bool GetAppearOffline(); // Function FSD.FSDGameUserSettings.GetAppearOffline
	int32_t GetAntiAliasingType(); // Function FSD.FSDGameUserSettings.GetAntiAliasingType
	float GetAimSensitivity(); // Function FSD.FSDGameUserSettings.GetAimSensitivity
	float GetAimOuterAcceleration(); // Function FSD.FSDGameUserSettings.GetAimOuterAcceleration
	float GetAimDeadZone(); // Function FSD.FSDGameUserSettings.GetAimDeadZone
	struct FString GameServerNameFiltered(); // Function FSD.FSDGameUserSettings.GameServerNameFiltered
	struct FString GameServerName(); // Function FSD.FSDGameUserSettings.GameServerName
	bool FSDSetCurrentLanguage(struct UObject* WorldContextObject, struct FString Culture); // Function FSD.FSDGameUserSettings.FSDSetCurrentLanguage
	struct UFSDGameUserSettings* FSDGameUserSettings(); // Function FSD.FSDGameUserSettings.FSDGameUserSettings
	void ClearCustomKeyBindings(bool InGamepadKeys); // Function FSD.FSDGameUserSettings.ClearCustomKeyBindings
	bool CanShowBlood(); // Function FSD.FSDGameUserSettings.CanShowBlood
	bool AreModsInstalledInWrongPlace(struct TArray<struct FString> outFiles); // Function FSD.FSDGameUserSettings.AreModsInstalledInWrongPlace
	void ApplyGraphicsChanges(); // Function FSD.FSDGameUserSettings.ApplyGraphicsChanges
};

// Class FSD.FSDHUD
// Size: 0x338 (Inherited: 0x310)
struct AFSDHUD : AHUD {
	struct FMulticastInlineDelegate SetObjectivesVisible; // 0x310(0x10)
	struct FMulticastInlineDelegate OnHUDVisibilityChanged; // 0x320(0x10)
	char IsVisibleFlags; // 0x330(0x01)
	char UnknownData_331[0x7]; // 0x331(0x07)

	bool ToggleHUDVisibility(enum class EHUDVisibilityReason reason); // Function FSD.FSDHUD.ToggleHUDVisibility
	void ShowObjectives(bool InVisibility); // Function FSD.FSDHUD.ShowObjectives
	void SetObjectivesVisible__DelegateSignature(bool InVisible, bool animate); // DelegateFunction FSD.FSDHUD.SetObjectivesVisible__DelegateSignature
	void SetHUDVisible(bool IsVisible, enum class EHUDVisibilityReason reason); // Function FSD.FSDHUD.SetHUDVisible
	void RadarPointAdded(struct URadarPointComponent* radarPoint); // Function FSD.FSDHUD.RadarPointAdded
	void PlayerSpawned(struct APlayerCharacter* Player); // Function FSD.FSDHUD.PlayerSpawned
	void OnVisibilityChanged(); // Function FSD.FSDHUD.OnVisibilityChanged
	bool IsHUDVisibleFlagSet(enum class EHUDVisibilityReason reason); // Function FSD.FSDHUD.IsHUDVisibleFlagSet
	void HudVisibilityChanged__DelegateSignature(bool InHudVisible); // DelegateFunction FSD.FSDHUD.HudVisibilityChanged__DelegateSignature
	void HandleSeamlessTravel(); // Function FSD.FSDHUD.HandleSeamlessTravel
	bool GetHUDVisible(); // Function FSD.FSDHUD.GetHUDVisible
	struct AFSDHUD* GetFSDHUD(struct APlayerController* InPlayerController); // Function FSD.FSDHUD.GetFSDHUD
};

// Class FSD.FSDMainHUDWidget
// Size: 0x230 (Inherited: 0x230)
struct UFSDMainHUDWidget : UUserWidget {

	void OnRadarPointAdded(struct URadarPointComponent* Point); // Function FSD.FSDMainHUDWidget.OnRadarPointAdded
	void AddRadarPoint(struct URadarPointComponent* Point); // Function FSD.FSDMainHUDWidget.AddRadarPoint
};

// Class FSD.FSDInWorldWidget
// Size: 0x238 (Inherited: 0x230)
struct UFSDInWorldWidget : UUserWidget {
	bool bHUDVisibile; // 0x230(0x01)
	char UnknownData_231[0x7]; // 0x231(0x07)

	void ReceiveHUDVisibilityChanged(bool InHudVisible); // Function FSD.FSDInWorldWidget.ReceiveHUDVisibilityChanged
	void CallbackHUDVisibilityChanged(bool InHudVisible); // Function FSD.FSDInWorldWidget.CallbackHUDVisibilityChanged
};

// Class FSD.FSDJoinSessionCallbackProxy
// Size: 0x198 (Inherited: 0x30)
struct UFSDJoinSessionCallbackProxy : UOnlineBlueprintCallProxyBase {
	struct FMulticastInlineDelegate OnSuccess; // 0x30(0x10)
	struct FMulticastInlineDelegate OnFailure; // 0x40(0x10)
	char UnknownData_50[0x128]; // 0x50(0x128)
	struct UObject* WorldContextObject; // 0x178(0x08)
	char UnknownData_180[0x18]; // 0x180(0x18)

	struct UFSDJoinSessionCallbackProxy* FSDJoinSession(struct UObject* WorldContextObject, struct APlayerController* PlayerController, struct FBlueprintSessionResult SearchResult, struct FString FSDPassword, bool fromInvite); // Function FSD.FSDJoinSessionCallbackProxy.FSDJoinSession
};

// Class FSD.FSDKismetArrayExtensionFunctions
// Size: 0x28 (Inherited: 0x28)
struct UFSDKismetArrayExtensionFunctions : UKismetArrayLibrary {

	void Array_GetRandom(struct TArray<int32_t> TargetArray, int32_t Item); // Function FSD.FSDKismetArrayExtensionFunctions.Array_GetRandom
};

// Class FSD.FSDMatchmakingCallbackProxy
// Size: 0x130 (Inherited: 0x30)
struct UFSDMatchmakingCallbackProxy : UOnlineBlueprintCallProxyBase {
	struct FMulticastInlineDelegate OnSuccess; // 0x30(0x10)
	struct FMulticastInlineDelegate OnFailure; // 0x40(0x10)
	struct FMulticastInlineDelegate OnCancelled; // 0x50(0x10)
	struct FDelegate FailDelegateHandle; // 0x60(0x10)
	char UnknownData_70[0x28]; // 0x70(0x28)
	struct UMissionTemplate* mission; // 0x98(0x08)
	struct UBiome* Biome; // 0xa0(0x08)
	struct UDifficultySetting* Difficulty; // 0xa8(0x08)
	char UnknownData_B0[0x80]; // 0xb0(0x80)

	struct UFSDMatchmakingCallbackProxy* FSDMatchmaking(struct UObject* WorldContextObject, struct APlayerController* PlayerController, struct FDelegate FailDelegate, struct UDifficultySetting* DesiredDifficulty, struct UBiome* desiredBiome, struct UMissionTemplate* desiredMission); // Function FSD.FSDMatchmakingCallbackProxy.FSDMatchmaking
	void CancelMatchmaking(); // Function FSD.FSDMatchmakingCallbackProxy.CancelMatchmaking
};

// Class FSD.FSDMath
// Size: 0x28 (Inherited: 0x28)
struct UFSDMath : UBlueprintFunctionLibrary {

	struct FVector SphericalToCartesian(float Radius, float azimuth, float elecation); // Function FSD.FSDMath.SphericalToCartesian
	bool PercentageCheck(float percentage); // Function FSD.FSDMath.PercentageCheck
	void GetAzimuthAndElevation(struct FVector Direction, struct FTransform coordinateSystem, float azimuth, float elevation); // Function FSD.FSDMath.GetAzimuthAndElevation
	float CubicSegmentLength(struct FVector p0, struct FVector tangent1, struct FVector p1, struct FVector tangent2); // Function FSD.FSDMath.CubicSegmentLength
	struct FVector CubicInterpBlueprint(struct FVector p0, struct FVector tangent1, struct FVector p1, struct FVector tangent2, float alpha); // Function FSD.FSDMath.CubicInterpBlueprint
	void CartesianToSpherical(struct FVector Location, float outAzimuth, float outElevation, float outRadius); // Function FSD.FSDMath.CartesianToSpherical
};

// Class FSD.FSDOnlineSessionClient
// Size: 0x1e0 (Inherited: 0x1e0)
struct UFSDOnlineSessionClient : UOnlineSessionClient {
};

// Class FSD.FSDOnlineSystemUtils
// Size: 0x28 (Inherited: 0x28)
struct UFSDOnlineSystemUtils : UBlueprintFunctionLibrary {

	void TryToResolvePrivilege(struct APlayerState* PlayerState, enum class EBlueprintableUserPrivileges Privilege, enum class EBlueprintablePrivilegeResults reason); // Function FSD.FSDOnlineSystemUtils.TryToResolvePrivilege
	void ShowUpgradeAccountUI(struct APlayerState* PlayerState); // Function FSD.FSDOnlineSystemUtils.ShowUpgradeAccountUI
	void ShowInstallModsSite(); // Function FSD.FSDOnlineSystemUtils.ShowInstallModsSite
	void ShowAccountPicker(struct UFSDGameInstance* gInstance, int32_t GamePlayerID); // Function FSD.FSDOnlineSystemUtils.ShowAccountPicker
	void OpenURLInOverlay(struct FString URL); // Function FSD.FSDOnlineSystemUtils.OpenURLInOverlay
	void OpenProfileByUserId(struct APlayerState* Requestor, struct FString RequesteeUserID); // Function FSD.FSDOnlineSystemUtils.OpenProfileByUserId
	void OpenProfile(struct APlayerState* Requestor, struct APlayerState* Requestee); // Function FSD.FSDOnlineSystemUtils.OpenProfile
	void GetIsPrivilegeAllowed(struct APlayerState* PlayerState, enum class EBlueprintableUserPrivileges Privilege, struct FDelegate Delegate); // Function FSD.FSDOnlineSystemUtils.GetIsPrivilegeAllowed
};

// Class FSD.FSDPhysicalMaterial
// Size: 0x150 (Inherited: 0x80)
struct UFSDPhysicalMaterial : UPhysicalMaterial {
	float BreakingDecelerationScale; // 0x80(0x04)
	float BreakingFrictionScale; // 0x84(0x04)
	float MaxAccelerationScale; // 0x88(0x04)
	char UnknownData_8C[0x4]; // 0x8c(0x04)
	struct UFXSystemAsset* ImpactParticles; // 0x90(0x08)
	struct UNiagaraSystem* ImpactNParticles; // 0x98(0x08)
	struct UMaterialInstance* ImpactMaterialOverride; // 0xa0(0x08)
	struct USoundCue* ImpactSound; // 0xa8(0x08)
	struct USoundCue* MeleeImpactSound; // 0xb0(0x08)
	bool UseImpactDecalOverrides; // 0xb8(0x01)
	char UnknownData_B9[0x7]; // 0xb9(0x07)
	struct TArray<struct FDecalData> ImpactDecals; // 0xc0(0x10)
	struct USoundCue* FirstPersonDamageIndicatorSound; // 0xd0(0x08)
	bool IsWeakPoint; // 0xd8(0x01)
	bool IsSubhealthCollider; // 0xd9(0x01)
	char UnknownData_DA[0x2]; // 0xda(0x02)
	float DamageMultiplier; // 0xdc(0x04)
	struct UFXSystemAsset* FootStepParticle; // 0xe0(0x08)
	struct UMaterialInstance* FootstepMaterialOverride; // 0xe8(0x08)
	struct FDecalData LeftFootprintDecal; // 0xf0(0x18)
	struct FDecalData RightFootprintDecal; // 0x108(0x18)
	struct USoundCue* FootStepSound; // 0x120(0x08)
	float ExtraFallVelocity; // 0x128(0x04)
	char UnknownData_12C[0x4]; // 0x12c(0x04)
	struct UFXSystemAsset* FallImpactEffect; // 0x130(0x08)
	struct USoundCue* FallImpactSound; // 0x138(0x08)
	bool alwaysPenetrate; // 0x140(0x01)
	char UnknownData_141[0x7]; // 0x141(0x07)
	struct UReactiveTerrain* ReactiveTerrain; // 0x148(0x08)

	struct UFXSystemComponent* SpawnImpactParticles(struct UObject* WorldContextObject, struct FVector Location, struct FVector Normal); // Function FSD.FSDPhysicalMaterial.SpawnImpactParticles
	struct UFSDPhysicalMaterial* GetPhysicalMaterialFromPrimitive(struct UPrimitiveComponent* Component); // Function FSD.FSDPhysicalMaterial.GetPhysicalMaterialFromPrimitive
};

// Class FSD.OptionalBloodPhysicalMaterial
// Size: 0x158 (Inherited: 0x150)
struct UOptionalBloodPhysicalMaterial : UFSDPhysicalMaterial {
	struct UParticleSystem* BloodlessImpactParticles; // 0x150(0x08)
};

// Class FSD.FSDPlayerCameraManager
// Size: 0x2740 (Inherited: 0x2740)
struct AFSDPlayerCameraManager : APlayerCameraManager {
};

// Class FSD.FSDPlayerControllerBase
// Size: 0x5b8 (Inherited: 0x570)
struct AFSDPlayerControllerBase : APlayerController {
	struct UMaterialParameterCollection* GlobalMaterialParameterCollection; // 0x570(0x08)
	struct FMulticastInlineDelegate OnPlayerVoiceStatusChanged; // 0x578(0x10)
	char UnknownData_588[0x3]; // 0x588(0x03)
	bool bStartWithBlackScreen; // 0x58b(0x01)
	char UnknownData_58C[0x4]; // 0x58c(0x04)
	struct UWindowManager* WindowManager; // 0x590(0x08)
	char UnknownData_598[0x20]; // 0x598(0x20)

	void ToggleAnalogCursor(bool Visible); // Function FSD.FSDPlayerControllerBase.ToggleAnalogCursor
	void StopAspectRatioAxisConstraint(); // Function FSD.FSDPlayerControllerBase.StopAspectRatioAxisConstraint
	void StartAspectRatioAxisConstraint(); // Function FSD.FSDPlayerControllerBase.StartAspectRatioAxisConstraint
	void SetHUDVisible(bool IsVisible, enum class EHUDVisibilityReason reason); // Function FSD.FSDPlayerControllerBase.SetHUDVisible
	void Server_Cheat_SwitchCharacter(struct APlayerCharacter* NewCharacter); // Function FSD.FSDPlayerControllerBase.Server_Cheat_SwitchCharacter
	void RecievePreClientTravel(); // Function FSD.FSDPlayerControllerBase.RecievePreClientTravel
	void RecieveHUDVisibilityChanged(bool IsVisible); // Function FSD.FSDPlayerControllerBase.RecieveHUDVisibilityChanged
	bool IsHUDVisibleFlagSet(enum class EHUDVisibilityReason reason); // Function FSD.FSDPlayerControllerBase.IsHUDVisibleFlagSet
	void Client_WasKicked(enum class EDisconnectReason reason); // Function FSD.FSDPlayerControllerBase.Client_WasKicked
};

// Class FSD.FSDPlayerController
// Size: 0x7a0 (Inherited: 0x5b8)
struct AFSDPlayerController : AFSDPlayerControllerBase {
	struct FMulticastInlineDelegate OnEndLevelReceived; // 0x5b8(0x10)
	struct FMulticastInlineDelegate OnReceiveVoiceChanged; // 0x5c8(0x10)
	struct FMulticastInlineDelegate OnTransmitVoiceChanged; // 0x5d8(0x10)
	struct FMulticastInlineDelegate OnLevelFinished; // 0x5e8(0x10)
	struct FMulticastInlineDelegate OnShowTutorialHint; // 0x5f8(0x10)
	struct FMulticastInlineDelegate OnShowTutorialWidget; // 0x608(0x10)
	struct FMulticastInlineDelegate OnChangeTutorialHintDuration; // 0x618(0x10)
	struct FMulticastInlineDelegate OnHideCurrentTutorialHint; // 0x628(0x10)
	struct FMulticastInlineDelegate OnPlayerCharacterPossesed; // 0x638(0x10)
	char UnknownData_648[0x10]; // 0x648(0x10)
	struct UPerkUsageComponent* PerkUsageComponent; // 0x658(0x08)
	bool IsOnSpaceRig; // 0x660(0x01)
	bool bReceivedEndLevel; // 0x661(0x01)
	char UnknownData_662[0x6]; // 0x662(0x06)
	struct TArray<struct USoundMix*> InitialSoundMixes; // 0x668(0x10)
	bool ServerTravelDone; // 0x678(0x01)
	char UnknownData_679[0x7]; // 0x679(0x07)
	struct FMulticastInlineDelegate OnChatOpened; // 0x680(0x10)
	struct UFSDWidgetEffectsComponent* WidgetEffects; // 0x690(0x08)
	struct UChromaComponent* ChromaEffects; // 0x698(0x08)
	struct USteelSeriesComponent* SteelSeriesEffects; // 0x6a0(0x08)
	enum class ESpacerigStartType SpacerigSpawnType; // 0x6a8(0x01)
	char UnknownData_6A9[0x13]; // 0x6a9(0x13)
	bool bDetectGravityChanges; // 0x6bc(0x01)
	char UnknownData_6BD[0xe3]; // 0x6bd(0xe3)

	void ToggleVoiceOn(bool Enabled); // Function FSD.FSDPlayerController.ToggleVoiceOn
	void ShowTutorialWidget(struct UTutorialContentWidget* TutorialWidget, bool ignoreQueue); // Function FSD.FSDPlayerController.ShowTutorialWidget
	void ShowTutorialHint(struct FText Text, struct FText Title, struct FText TaskText, struct UTexture2D* Image, float Duration); // Function FSD.FSDPlayerController.ShowTutorialHint
	void SetPlayerStart(struct AActor* Start); // Function FSD.FSDPlayerController.SetPlayerStart
	void SetAchievementProgressFromServer(struct UFSDAchievement* AchievementToSet, float Progress); // Function FSD.FSDPlayerController.SetAchievementProgressFromServer
	void ServerSetUserHoldToRun(bool Value); // Function FSD.FSDPlayerController.ServerSetUserHoldToRun
	void Server_TravelDone(); // Function FSD.FSDPlayerController.Server_TravelDone
	void Server_TerrainLateJoinPartReceived(); // Function FSD.FSDPlayerController.Server_TerrainLateJoinPartReceived
	void Server_SetLateJoinDone(); // Function FSD.FSDPlayerController.Server_SetLateJoinDone
	void Server_SetGenerationStatus(struct FString Status, float Fraction); // Function FSD.FSDPlayerController.Server_SetGenerationStatus
	void Server_SetGenerationFraction(float Fraction); // Function FSD.FSDPlayerController.Server_SetGenerationFraction
	void Server_SetGenerationDone(); // Function FSD.FSDPlayerController.Server_SetGenerationDone
	void Server_SetControllerReady(); // Function FSD.FSDPlayerController.Server_SetControllerReady
	void Server_ResetHUD(); // Function FSD.FSDPlayerController.Server_ResetHUD
	void Server_NewMessage(struct FString Sender, struct FString Text, enum class EChatSenderType SenderType); // Function FSD.FSDPlayerController.Server_NewMessage
	void Server_ActivateTemporaryBuff(struct UTemporaryBuff* buff); // Function FSD.FSDPlayerController.Server_ActivateTemporaryBuff
	void SendLevelUpStatistics(int32_t currentRank); // Function FSD.FSDPlayerController.SendLevelUpStatistics
	void RecievePawnDestroyed(); // Function FSD.FSDPlayerController.RecievePawnDestroyed
	void RecieveOnControllerReady(); // Function FSD.FSDPlayerController.RecieveOnControllerReady
	void RecieveClientTravelDone(); // Function FSD.FSDPlayerController.RecieveClientTravelDone
	void ReceivingVoiceSignature__DelegateSignature(bool isRecieving); // DelegateFunction FSD.FSDPlayerController.ReceivingVoiceSignature__DelegateSignature
	void ReceiveEndLevel(); // Function FSD.FSDPlayerController.ReceiveEndLevel
	void ReceivedEndLevelDelegate__DelegateSignature(); // DelegateFunction FSD.FSDPlayerController.ReceivedEndLevelDelegate__DelegateSignature
	void Receive_EndLevel_WaitForData(bool areObjectivesCompleted, int32_t numberOfPlayersInPod); // Function FSD.FSDPlayerController.Receive_EndLevel_WaitForData
	void ReadyToContinueFromEndScreen(); // Function FSD.FSDPlayerController.ReadyToContinueFromEndScreen
	void OnShowTutorialHint__DelegateSignature(struct FText Text, struct FText Title, struct FText TaskText, struct UTexture2D* Image, float Duration); // DelegateFunction FSD.FSDPlayerController.OnShowTutorialHint__DelegateSignature
	void OnSaveGamePlayerProgressChanged(int32_t Rank, int32_t Stars); // Function FSD.FSDPlayerController.OnSaveGamePlayerProgressChanged
	void OnSaveGameCreditsChanged(int32_t Credits); // Function FSD.FSDPlayerController.OnSaveGameCreditsChanged
	void OnSaveGameCharacterProgressChanged(struct APlayerCharacter* CharacterClass, int32_t Level, float Progress); // Function FSD.FSDPlayerController.OnSaveGameCharacterProgressChanged
	void OnPlayerStateSelectedCharacterChanged(struct APlayerCharacter* CharacterClass); // Function FSD.FSDPlayerController.OnPlayerStateSelectedCharacterChanged
	void OnPlayerSpawnBegin(int32_t PlayerId); // Function FSD.FSDPlayerController.OnPlayerSpawnBegin
	void OnHideTutorialHint__DelegateSignature(bool wasWatched); // DelegateFunction FSD.FSDPlayerController.OnHideTutorialHint__DelegateSignature
	void OnGenerationDone(); // Function FSD.FSDPlayerController.OnGenerationDone
	void OnChangeTutorialWidget__DelegateSignature(struct UTutorialContentWidget* TutorialWidget, bool bIgnoreQueue); // DelegateFunction FSD.FSDPlayerController.OnChangeTutorialWidget__DelegateSignature
	void OnChangeTutorialHintDuration__DelegateSignature(float NewDuration); // DelegateFunction FSD.FSDPlayerController.OnChangeTutorialHintDuration__DelegateSignature
	void LevelFinishedSignature__DelegateSignature(); // DelegateFunction FSD.FSDPlayerController.LevelFinishedSignature__DelegateSignature
	void HideTutorialHint(bool watched); // Function FSD.FSDPlayerController.HideTutorialHint
	bool HasPendingRewards(); // Function FSD.FSDPlayerController.HasPendingRewards
	bool GetUseToggleTerrainScanner(); // Function FSD.FSDPlayerController.GetUseToggleTerrainScanner
	bool GetUseToggleLaserpointer(); // Function FSD.FSDPlayerController.GetUseToggleLaserpointer
	bool GetUseHoldToRun(); // Function FSD.FSDPlayerController.GetUseHoldToRun
	struct AActor* GetPlayerStart(); // Function FSD.FSDPlayerController.GetPlayerStart
	bool GetPendingRewards(struct FPendingRewardsStats OutStats, struct FPendingRewards OutRewards); // Function FSD.FSDPlayerController.GetPendingRewards
	struct AFSDPlayerState* GetFSDPlayerState(); // Function FSD.FSDPlayerController.GetFSDPlayerState
	struct UChromaComponent* GetChromaEffectsComponent(); // Function FSD.FSDPlayerController.GetChromaEffectsComponent
	struct AActor* FindPlayerStart(struct UPlayerCharacterID* characterID); // Function FSD.FSDPlayerController.FindPlayerStart
	void EndLevel(); // Function FSD.FSDPlayerController.EndLevel
	void Client_TerrainLateJoinVisibleChunks(struct TArray<uint32_t> visibleChunks); // Function FSD.FSDPlayerController.Client_TerrainLateJoinVisibleChunks
	void Client_TerrainLateJoinPart(struct TArray<struct FGrenadeExplodeOperationData> explosions, struct TArray<struct FCarveWithColliderOperationData> colliderCarves, struct TArray<struct FCarveWithSTLMeshOperationData> meshCarves, struct TArray<struct FPickaxeDigOperationData> pickAxe, struct TArray<struct FRemoveFloatingIslandOperationData> floating, struct TArray<struct FDrillOperationData> drills, struct TArray<struct FMeltOperationData> melts, struct TArray<struct FSplineSegmentCarveOperationData> splines); // Function FSD.FSDPlayerController.Client_TerrainLateJoinPart
	void Client_TerrainLateJoinDone(); // Function FSD.FSDPlayerController.Client_TerrainLateJoinDone
	void Client_TerrainLateJoinDebris(struct TArray<int32_t> instanceComponentPairs); // Function FSD.FSDPlayerController.Client_TerrainLateJoinDebris
	void Client_PlayCue(struct USoundCue* SoundCue); // Function FSD.FSDPlayerController.Client_PlayCue
	void Client_EndLevel_WaitForData(bool areObjectivesCompleted, int32_t numberOfPlayersInPod); // Function FSD.FSDPlayerController.Client_EndLevel_WaitForData
	void Client_DeductResource(struct UResourceData* Resource, int32_t amount); // Function FSD.FSDPlayerController.Client_DeductResource
	void Client_CollectVanityItem(struct UTreasureRewarder* rewarder, struct UVanityItem* targetItem, struct UPlayerCharacterID* targetCharacter); // Function FSD.FSDPlayerController.Client_CollectVanityItem
	void Client_CollectTreasureVictoryPose(struct UTreasureRewarder* rewarder, struct UVictoryPose* targetPose, struct UPlayerCharacterID* targetCharacter); // Function FSD.FSDPlayerController.Client_CollectTreasureVictoryPose
	void Client_CollectTreasureSkin(struct UTreasureRewarder* rewarder, struct UItemSkin* targetSkin, struct UItemID* targetItem); // Function FSD.FSDPlayerController.Client_CollectTreasureSkin
	void Client_CollectTreasureDrink(struct UTreasureRewarder* rewarder, struct UDrinkableDataAsset* Drinkable); // Function FSD.FSDPlayerController.Client_CollectTreasureDrink
	void Client_CollectPickaxePart(struct UTreasureRewarder* rewarder, struct UPickaxePart* targetPart); // Function FSD.FSDPlayerController.Client_CollectPickaxePart
	void ApplyPendingRewards(); // Function FSD.FSDPlayerController.ApplyPendingRewards
};

// Class FSD.FSDPlayerStart
// Size: 0x230 (Inherited: 0x220)
struct AFSDPlayerStart : AActor {
	struct UPlayerCharacterID* PrefferedClassID; // 0x220(0x08)
	struct AFSDPlayerController* usedBy; // 0x228(0x08)
};

// Class FSD.SpacerigStart
// Size: 0x280 (Inherited: 0x250)
struct ASpacerigStart : APlayerStart {
	struct FMulticastInlineDelegate OnPlayerSpawn; // 0x250(0x10)
	struct FMulticastInlineDelegate OnPlayerLeave; // 0x260(0x10)
	struct AFSDPlayerController* usedBy; // 0x270(0x08)
	enum class ESpacerigStartType StartType; // 0x278(0x01)
	char UnknownData_279[0x7]; // 0x279(0x07)
};

// Class FSD.FSDPlayerState
// Size: 0x410 (Inherited: 0x320)
struct AFSDPlayerState : APlayerState {
	struct FMulticastInlineDelegate OnPlayerCharacterSpawned; // 0x320(0x10)
	struct FMulticastInlineDelegate OnPlayerTalkingChanged; // 0x330(0x10)
	struct FMulticastInlineDelegate OnSelectedCharacterChanged; // 0x340(0x10)
	float FractionLevelGenerated; // 0x350(0x04)
	char UnknownData_354[0x4]; // 0x354(0x04)
	struct FString LevelGenerationState; // 0x358(0x10)
	struct FMulticastInlineDelegate OnSupplyStatusChangedEvent; // 0x368(0x10)
	struct FMulticastInlineDelegate OnEnemyKilledEvent; // 0x378(0x10)
	struct TArray<struct UVanityItem*> LatestEquipedVanity; // 0x388(0x10)
	struct APlayerCharacter* SelectedCharacter; // 0x398(0x08)
	bool bIsServer; // 0x3a0(0x01)
	bool ShouldCopyProperties; // 0x3a1(0x01)
	char gameOwnerStatus; // 0x3a2(0x01)
	bool IsOnSpaceRig; // 0x3a3(0x01)
	char UnknownData_3A4[0x4]; // 0x3a4(0x04)
	struct UPlayerStatsComponent* PlayerStatsComponent; // 0x3a8(0x08)
	struct UPlayerRejoinState* RejoinState; // 0x3b0(0x08)
	struct USaveGameStateComponent* SaveGameStateComponent; // 0x3b8(0x08)
	struct APlayerCharacter* PlayerCharacter; // 0x3c0(0x08)
	bool IsInMission; // 0x3c8(0x01)
	bool IsTalking; // 0x3c9(0x01)
	bool HasGeneratedLevel; // 0x3ca(0x01)
	bool HasSelectedCharacter; // 0x3cb(0x01)
	int32_t PlayerSortId; // 0x3cc(0x04)
	struct FMulticastInlineDelegate OnPlayerNameChanged; // 0x3d0(0x10)
	struct FMulticastInlineDelegate OnFractionLevelGenerated; // 0x3e0(0x10)
	struct FMulticastInlineDelegate OnLevelGenerationStateChanged; // 0x3f0(0x10)
	struct UPlayerResourceComponent* PlayerResources; // 0x400(0x08)
	char SupplyAmmoStatus; // 0x408(0x01)
	char SupplyHealthStatus; // 0x409(0x01)
	char UnknownData_40A[0x6]; // 0x40a(0x06)

	void SetSelectedCharacterID(struct UPlayerCharacterID* characterID); // Function FSD.FSDPlayerState.SetSelectedCharacterID
	void SetSelectedCharacter(struct APlayerCharacter* NewCharacter); // Function FSD.FSDPlayerState.SetSelectedCharacter
	void SetCanOnlySpectate(bool canOnlySpectate); // Function FSD.FSDPlayerState.SetCanOnlySpectate
	void ServerSetSelectedCharacter(struct APlayerCharacter* NewCharacter); // Function FSD.FSDPlayerState.ServerSetSelectedCharacter
	void Server_SetSupplyStatus(char StatusHealth, char StatusAmmo); // Function FSD.FSDPlayerState.Server_SetSupplyStatus
	void Server_SetGameOwnerStatus(int32_t gameOwnerStatus); // Function FSD.FSDPlayerState.Server_SetGameOwnerStatus
	void OnRep_SupplyHealthStatus(); // Function FSD.FSDPlayerState.OnRep_SupplyHealthStatus
	void OnRep_SupplyAmmoStatus(); // Function FSD.FSDPlayerState.OnRep_SupplyAmmoStatus
	void OnRep_SelectedCharacter(); // Function FSD.FSDPlayerState.OnRep_SelectedCharacter
	void OnRep_PlayerCharacter(); // Function FSD.FSDPlayerState.OnRep_PlayerCharacter
	void OnRep_LevelGenerationState(); // Function FSD.FSDPlayerState.OnRep_LevelGenerationState
	void OnRep_GameOwnerStatus(); // Function FSD.FSDPlayerState.OnRep_GameOwnerStatus
	void OnRep_FractionLevelGenerated(); // Function FSD.FSDPlayerState.OnRep_FractionLevelGenerated
	void OnLateJoinFinished(); // Function FSD.FSDPlayerState.OnLateJoinFinished
	bool HasNormalOwnerStatus(); // Function FSD.FSDPlayerState.HasNormalOwnerStatus
	int32_t GetXPRewardsSum(); // Function FSD.FSDPlayerState.GetXPRewardsSum
	struct TArray<struct FXPReward> GetXPRewardsCustom(struct TMap<struct UResourceData*, float> Resources, int32_t EnemiesKilled, bool FailPrimaryObjectiveCompleted, bool FailSecondaryObjectiveCompleted); // Function FSD.FSDPlayerState.GetXPRewardsCustom
	struct TArray<struct FXPReward> GetXPRewards(); // Function FSD.FSDPlayerState.GetXPRewards
	struct TArray<struct FXPReward> GetXPRewardDeepDive(int32_t StagesCompleted); // Function FSD.FSDPlayerState.GetXPRewardDeepDive
	int32_t GetUIPing(); // Function FSD.FSDPlayerState.GetUIPing
	float GetSupplyHealthStatus(); // Function FSD.FSDPlayerState.GetSupplyHealthStatus
	float GetSupplyAmmoStatus(); // Function FSD.FSDPlayerState.GetSupplyAmmoStatus
	int32_t GetSelectedCharacterLevel(); // Function FSD.FSDPlayerState.GetSelectedCharacterLevel
	struct UPlayerCharacterID* GetSelectedCharacterID(); // Function FSD.FSDPlayerState.GetSelectedCharacterID
	struct APlayerCharacter* GetSelectedCharacter(); // Function FSD.FSDPlayerState.GetSelectedCharacter
	struct FCharacterProgress GetSelectCharacterProgress(); // Function FSD.FSDPlayerState.GetSelectCharacterProgress
	struct UPlayerResourceComponent* GetPlayerResourceComponent(); // Function FSD.FSDPlayerState.GetPlayerResourceComponent
	int32_t GetPlayerRank(); // Function FSD.FSDPlayerState.GetPlayerRank
	struct AFSDPlayerController* GetPlayerController(); // Function FSD.FSDPlayerState.GetPlayerController
	bool GetGameOwnerStatus(enum class EGameOwnerStatus Status); // Function FSD.FSDPlayerState.GetGameOwnerStatus
	struct TArray<struct FCreditsReward> GetDeepDiveCreditsReward(int32_t StagesCompleted, int32_t goldCollected); // Function FSD.FSDPlayerState.GetDeepDiveCreditsReward
	enum class EChatSenderType GetChatSenderType(); // Function FSD.FSDPlayerState.GetChatSenderType
	struct FCharacterProgress GetCharacterProgress(struct UPlayerCharacterID* characterID); // Function FSD.FSDPlayerState.GetCharacterProgress
	int32_t GetCharacterLevel(struct UPlayerCharacterID* characterID); // Function FSD.FSDPlayerState.GetCharacterLevel
	void CharacterSelected(); // Function FSD.FSDPlayerState.CharacterSelected
};

// Class FSD.FSDPostProcessingActor
// Size: 0x240 (Inherited: 0x220)
struct AFSDPostProcessingActor : AActor {
	enum class EPostProcessingType PostProcessingType; // 0x220(0x01)
	char UnknownData_221[0x7]; // 0x221(0x07)
	struct UPostProcessComponent* PostProcessComponent; // 0x228(0x08)
	struct FWeightedBlendables InitialBlendables; // 0x230(0x10)

	void UnapplyPostProcessingBlendablesByType(struct UObject* WorldContext, enum class EPostProcessingType Type); // Function FSD.FSDPostProcessingActor.UnapplyPostProcessingBlendablesByType
	void UnapplyPostProcessingBlendablesByID(struct UObject* WorldContext, struct FName InID); // Function FSD.FSDPostProcessingActor.UnapplyPostProcessingBlendablesByID
	void UnapplyPostProcessingBlendable(struct UObject* WorldContext, enum class EPostProcessingType Type, struct TScriptInterface<None> InBlendableObject); // Function FSD.FSDPostProcessingActor.UnapplyPostProcessingBlendable
	void UnapplyAllPostProcessingBlendables(struct UObject* WorldContext); // Function FSD.FSDPostProcessingActor.UnapplyAllPostProcessingBlendables
	void SetPostProcessManager(struct APostProcessingManager* InManager); // Function FSD.FSDPostProcessingActor.SetPostProcessManager
	struct UMaterialInstanceDynamic* GetPostProcessingMaterialInstance(struct UObject* WorldContext, struct UMaterialInterface* Material); // Function FSD.FSDPostProcessingActor.GetPostProcessingMaterialInstance
	struct UMaterialInstanceDynamic* ApplyPostProcessingMaterial(struct UObject* WorldContext, enum class EPostProcessingType Type, struct UMaterialInterface* Material, float InWeight, struct FName InID); // Function FSD.FSDPostProcessingActor.ApplyPostProcessingMaterial
	void ApplyPostProcessingBlendable(struct UObject* WorldContext, enum class EPostProcessingType Type, struct TScriptInterface<None> InBlendableObject, float InWeight, struct FName InID); // Function FSD.FSDPostProcessingActor.ApplyPostProcessingBlendable
};

// Class FSD.FSDRefinery
// Size: 0x398 (Inherited: 0x290)
struct AFSDRefinery : ADropPod {
	struct FMulticastInlineDelegate OnRefineryStateChanged; // 0x290(0x10)
	struct FMulticastInlineDelegate OnRefineryProgressChanged; // 0x2a0(0x10)
	struct FMulticastInlineDelegate OnPipelineRegistered; // 0x2b0(0x10)
	struct FMulticastInlineDelegate OnPipelineSegmentPlaced; // 0x2c0(0x10)
	struct FMulticastInlineDelegate OnExtractorPodSpawned; // 0x2d0(0x10)
	struct USingleUsableComponent* UsableStartRefining; // 0x2e0(0x08)
	struct USingleUsableComponent* UsableLaunchRocket; // 0x2e8(0x08)
	struct TMap<float, struct UDialogDataAsset*> ProgressMissionShouts; // 0x2f0(0x50)
	struct UDialogDataAsset* LaunchRocketButtonPressedShout; // 0x340(0x08)
	struct ATrackBuilderItem* BuilderItem; // 0x348(0x08)
	float RefiningTotalDuration; // 0x350(0x04)
	struct FFloatRange PipelineBreakCoolDown; // 0x354(0x10)
	float PipelineBreakTimePenaltyPerAdditionalPlayers; // 0x364(0x04)
	struct FInt32Range MaxSegmentBreakDowns; // 0x368(0x10)
	int32_t SegmentBreakDownPenaltyPerAdditionalPlayers; // 0x378(0x04)
	char UnknownData_37C[0x8]; // 0x37c(0x08)
	enum class ERefineryState RefineryState; // 0x384(0x01)
	enum class ERefineryState PreviousRefineryState; // 0x385(0x01)
	char RefiningProgressReplicated; // 0x386(0x01)
	char UnknownData_387[0x1]; // 0x387(0x01)
	struct TArray<struct APipelineStart*> PipelineStarts; // 0x388(0x10)

	void SetRefineryState(enum class ERefineryState InState); // Function FSD.FSDRefinery.SetRefineryState
	void RefineryStateDelegate__DelegateSignature(enum class ERefineryState InRefineryState); // DelegateFunction FSD.FSDRefinery.RefineryStateDelegate__DelegateSignature
	void RefineryProgressDelegate__DelegateSignature(float InProgress01); // DelegateFunction FSD.FSDRefinery.RefineryProgressDelegate__DelegateSignature
	void RefineryPipelineSegmentDelegate__DelegateSignature(struct APipelineSegment* InSegment); // DelegateFunction FSD.FSDRefinery.RefineryPipelineSegmentDelegate__DelegateSignature
	void RefineryPipelineDelegate__DelegateSignature(struct APipelineStart* InPipelineStart); // DelegateFunction FSD.FSDRefinery.RefineryPipelineDelegate__DelegateSignature
	void RefineryExtractPodDelegate__DelegateSignature(struct APipelineExtractorPod* InExtractorPod); // DelegateFunction FSD.FSDRefinery.RefineryExtractPodDelegate__DelegateSignature
	void ReceiveRefineryStateChanged(enum class ERefineryState InState); // Function FSD.FSDRefinery.ReceiveRefineryStateChanged
	void ReceivePipelineStateChanged(struct APipelineStart* InPipeline, enum class EPipelineBuildState InState); // Function FSD.FSDRefinery.ReceivePipelineStateChanged
	void ReceivePipelineStartReady(struct APipelineStart* InPipelineStart); // Function FSD.FSDRefinery.ReceivePipelineStartReady
	void OnStartRefiningPressed(struct APlayerCharacter* InCharacter); // Function FSD.FSDRefinery.OnStartRefiningPressed
	void OnRep_RefineryState(enum class ERefineryState InOldState); // Function FSD.FSDRefinery.OnRep_RefineryState
	void OnPlayerCharacterRegistered(struct APlayerCharacter* InCharacter); // Function FSD.FSDRefinery.OnPlayerCharacterRegistered
	void OnPipelineStateChanged(struct APipelineStart* InPipelineStart, enum class EPipelineBuildState InPipelineState); // Function FSD.FSDRefinery.OnPipelineStateChanged
	void OnObjectivesChanged(); // Function FSD.FSDRefinery.OnObjectivesChanged
	void OnLaunchRocketPressed(struct APlayerCharacter* InCharacter); // Function FSD.FSDRefinery.OnLaunchRocketPressed
	float GetRefiningProgress(); // Function FSD.FSDRefinery.GetRefiningProgress
};

// Class FSD.FSDRefineryAnimInstance
// Size: 0x270 (Inherited: 0x270)
struct UFSDRefineryAnimInstance : UAnimInstance {
	enum class ERefineryState RefineryState; // 0x268(0x01)
};

// Class FSD.TutorialComponent
// Size: 0x100 (Inherited: 0xb0)
struct UTutorialComponent : UActorComponent {
	bool bTutorialEnabled; // 0xb0(0x01)
	char UnknownData_B1[0x3]; // 0xb1(0x03)
	int32_t Priority; // 0xb4(0x04)
	float MaxDuration; // 0xb8(0x04)
	int32_t MaxViewCount; // 0xbc(0x04)
	bool ShowInTutorialLevel; // 0xc0(0x01)
	bool bAutoRegisterWithManager; // 0xc1(0x01)
	bool bDebugAlwaysShow; // 0xc2(0x01)
	bool ManuallyMarkViews; // 0xc3(0x01)
	struct FWeakObjectPtr<struct APlayerCharacter> PlayerCharacter; // 0xc4(0x08)
	struct FWeakObjectPtr<struct AFSDPlayerState> PlayerState; // 0xcc(0x08)
	struct FWeakObjectPtr<struct AFSDPlayerController> PlayerController; // 0xd4(0x08)
	struct FWeakObjectPtr<struct UFSDSaveGame> SaveGame; // 0xdc(0x08)
	struct FWeakObjectPtr<struct ATutorialManager> TutorialManager; // 0xe4(0x08)
	bool bTutorialInitialized; // 0xec(0x01)
	bool bTutorialReady; // 0xed(0x01)
	bool bTutorialVisible; // 0xee(0x01)
	bool bTutorialActive; // 0xef(0x01)
	char UnknownData_F0[0x10]; // 0xf0(0x10)

	void RegisterTutorial(); // Function FSD.TutorialComponent.RegisterTutorial
	void ReceiveOnShown(); // Function FSD.TutorialComponent.ReceiveOnShown
	void ReceiveOnInitialized(); // Function FSD.TutorialComponent.ReceiveOnInitialized
	void ReceiveOnHidden(); // Function FSD.TutorialComponent.ReceiveOnHidden
	void OnTutorialsReset(); // Function FSD.TutorialComponent.OnTutorialsReset
	void OnManagerReady(struct ATutorialManager* Manager); // Function FSD.TutorialComponent.OnManagerReady
	void MarkTutorialWatched(); // Function FSD.TutorialComponent.MarkTutorialWatched
	void MarkTutorialReadyNow(); // Function FSD.TutorialComponent.MarkTutorialReadyNow
	void MarkTutorialReadyInSeconds(float Delay); // Function FSD.TutorialComponent.MarkTutorialReadyInSeconds
	bool HasTutorialBeenShown(); // Function FSD.TutorialComponent.HasTutorialBeenShown
	struct FString GetTutorialName(); // Function FSD.TutorialComponent.GetTutorialName
	void CancelTutorial(bool CountAsViewed); // Function FSD.TutorialComponent.CancelTutorial
};

// Class FSD.TutorialHintComponent
// Size: 0x170 (Inherited: 0x100)
struct UTutorialHintComponent : UTutorialComponent {
	struct FTutorialHint Hint; // 0x100(0x70)

	void SetRemainingVisibleTime(float remainingTime); // Function FSD.TutorialHintComponent.SetRemainingVisibleTime
	bool IsSingleplayer(struct UObject* WorldContext); // Function FSD.TutorialHintComponent.IsSingleplayer
	void ChangeHint(struct FTutorialHint NewHint); // Function FSD.TutorialHintComponent.ChangeHint
};

// Class FSD.RefineryHintComponent
// Size: 0x178 (Inherited: 0x170)
struct URefineryHintComponent : UTutorialHintComponent {
	struct FWeakObjectPtr<struct AFSDRefinery> Refinery; // 0x170(0x08)

	void ReceiveRefinerySpawned(struct AFSDRefinery* InRefinery); // Function FSD.RefineryHintComponent.ReceiveRefinerySpawned
	void ReceivePipelineSegmentPlaced(struct APipelineSegment* InSegment); // Function FSD.RefineryHintComponent.ReceivePipelineSegmentPlaced
	void ReceiveExtractorPodSpawned(struct APipelineExtractorPod* InExtractorPod); // Function FSD.RefineryHintComponent.ReceiveExtractorPodSpawned
	void OnRefinerySpawned(struct AFSDRefinery* InRefinery); // Function FSD.RefineryHintComponent.OnRefinerySpawned
};

// Class FSD.FSDSaveGame
// Size: 0xb30 (Inherited: 0x28)
struct UFSDSaveGame : USaveGame {
	struct FMulticastInlineDelegate OnCreditsChanged; // 0x28(0x10)
	struct FMulticastInlineDelegate OnCharacterSaveChanged; // 0x38(0x10)
	struct FMulticastInlineDelegate OnCharacterCanRetire; // 0x48(0x10)
	struct FMulticastInlineDelegate OnCharacterRetired; // 0x58(0x10)
	struct FMulticastInlineDelegate OnPlayerProgressChanged; // 0x68(0x10)
	struct FMulticastInlineDelegate OnTutorialsReset; // 0x78(0x10)
	struct FMulticastInlineDelegate OnPersonalMetricsChanged; // 0x88(0x10)
	struct FMulticastInlineDelegate OnAnonymousMetricsChanged; // 0x98(0x10)
	struct FMulticastInlineDelegate OnItemUnlocked; // 0xa8(0x10)
	struct FMulticastInlineDelegate OnItemPurchased; // 0xb8(0x10)
	struct FMulticastInlineDelegate OnItemUINotificationChange; // 0xc8(0x10)
	int32_t VersionNumber; // 0xd8(0x04)
	bool bMilestoneResetShown; // 0xdc(0x01)
	bool bYearTwoGiftClaimed; // 0xdd(0x01)
	char UnknownData_DE[0x2]; // 0xde(0x02)
	struct FMulticastInlineDelegate OnForgingXPChanged; // 0xe0(0x10)
	struct FMulticastInlineDelegate OnResourceAmountChanged; // 0xf0(0x10)
	struct FMulticastInlineDelegate OnSkinUnlocked; // 0x100(0x10)
	char UnknownData_110[0x10]; // 0x110(0x10)
	struct FDateTime SaveSlotTimeStamp; // 0x120(0x08)
	struct FMulticastInlineDelegate OnPerkPointsChanged; // 0x128(0x10)
	struct FMissionStatSave MissionStatsSave; // 0x138(0x18)
	struct FMilestoneSave Milestones; // 0x150(0x10)
	struct FPerkClaimsSave OwnedPerks; // 0x160(0x18)
	struct FCharacterPerksSave EquippedPerks; // 0x178(0x10)
	struct FAchievementSave AchievementSave; // 0x188(0x20)
	struct TArray<struct FCharacterPerksSave> EquippedPerkLoadouts; // 0x1a8(0x10)
	char UnknownData_1B8[0x8]; // 0x1b8(0x08)
	struct FSchematicSave SchematicSave; // 0x1c0(0x38)
	struct FPromotionRewardsSave PromotionRewardsSave; // 0x1f8(0x50)
	struct FFSDEventRewardsSave FSDEventRewardsSave; // 0x248(0x50)
	struct FGameDLCSave GameDLCSave; // 0x298(0x50)
	int32_t SaveCreatedInPatch; // 0x2e8(0x04)
	char UnknownData_2EC[0x4]; // 0x2ec(0x04)
	struct FString AnonymousID; // 0x2f0(0x10)
	int32_t PerkPoints; // 0x300(0x04)
	bool HasRecievedDiscordReward; // 0x304(0x01)
	enum class EFSDFaction Faction; // 0x305(0x01)
	char UnknownData_306[0x2]; // 0x306(0x02)
	struct TArray<struct FGuid> UnLockedMissions; // 0x308(0x10)
	struct TMap<struct FGuid, struct FUnLockedMissionParameters> UnLockedMissionParameters; // 0x318(0x50)
	struct TArray<struct FGuid> UnLockedPlanetZones; // 0x368(0x10)
	struct FCampaignSave CampaignSave; // 0x378(0x48)
	struct FDeepDiveSave DeepDiveSave; // 0x3c0(0x70)
	struct TArray<struct FCharacterSave> CharacterSaves; // 0x430(0x10)
	int32_t Credits; // 0x440(0x04)
	int32_t LastBoughtDailyDealSeed; // 0x444(0x04)
	struct FForgingSave Forging; // 0x448(0x08)
	struct FDrinkSave Drinks; // 0x450(0x58)
	struct TMap<struct FGuid, struct FItemUpgradeSelection> ItemUpgradeSelections; // 0x4a8(0x50)
	struct TArray<struct FUpgradeLoadout> ItemUpgradeLoadouts; // 0x4f8(0x10)
	struct TArray<struct FGuid> PurchasedItemUpgrades; // 0x508(0x10)
	struct TArray<struct FGuid> UnLockedItemUpgrades; // 0x518(0x10)
	struct TArray<struct FGuid> UnlockedItems; // 0x528(0x10)
	struct TArray<struct FGuid> OwnedItems; // 0x538(0x10)
	struct TMap<struct FGuid, int32_t> EnemiesKilled; // 0x548(0x50)
	struct TMap<struct FGuid, struct FItemNotificationInfo> ItemsWithNotification; // 0x598(0x50)
	struct TSet<struct FGuid> SkinnableItems; // 0x5e8(0x50)
	struct TMap<struct FGuid, struct FSkinList> UnlockedItemSkins; // 0x638(0x50)
	struct TSet<struct FGuid> UnlockedPickaxeParts; // 0x688(0x50)
	struct TArray<struct UVanityItem*> UnLockedVanityItems; // 0x6d8(0x10)
	struct TArray<struct FGuid> UnLockedVanityItemIDs; // 0x6e8(0x10)
	struct TArray<struct FGuid> HiddenUICategories; // 0x6f8(0x10)
	int32_t LastCollectedCommunityRewardPeriodID; // 0x708(0x04)
	char UnknownData_70C[0x4]; // 0x70c(0x04)
	struct TSet<struct FGuid> MinersManualKnownObjects; // 0x710(0x50)
	struct FEventRewardSave EventRewardSave; // 0x760(0x50)
	struct FItemUINotifications ItemUINotifications; // 0x7b0(0x68)
	struct FString RejoinSessionId; // 0x818(0x10)
	bool FirstRejoinAttempt; // 0x828(0x01)
	bool HaveSkinsBeenReset; // 0x829(0x01)
	bool bHasOpenedDeepDiveTerminal; // 0x82a(0x01)
	char UnknownData_82B[0x5]; // 0x82b(0x05)
	struct FResourcesSave Resources; // 0x830(0xa0)
	bool FirstSession; // 0x8d0(0x01)
	char UnknownData_8D1[0x7]; // 0x8d1(0x07)
	struct TArray<struct FWatchedTutorial> WatchedTutorials; // 0x8d8(0x10)
	struct FConsoleOptionsInSaveGame ConsoleOptions; // 0x8e8(0x110)
	struct FGDKWinOptionsInSaveGame WinGDKOptions; // 0x9f8(0x70)
	struct FOptionsInSaveGame WindowsOptions; // 0xa68(0x08)
	bool HasCompletedTutorial; // 0xa70(0x01)
	bool HasPlayedTutorial; // 0xa71(0x01)
	bool ShowHowToRestartTutorialPrompt; // 0xa72(0x01)
	bool HasPlayedIntroMessage; // 0xa73(0x01)
	bool HasSentSteamInfo; // 0xa74(0x01)
	bool HasClaimedSteamGroupLoot; // 0xa75(0x01)
	bool IsBoscoAllowed; // 0xa76(0x01)
	bool HasRefundedUpgradeCostDifference; // 0xa77(0x01)
	bool HasJoinedXboxClub; // 0xa78(0x01)
	bool HasSeenAnalyticsPopUp; // 0xa79(0x01)
	bool AllowAnalyticsTracking; // 0xa7a(0x01)
	bool AllowPersonalAnalyticsTracking; // 0xa7b(0x01)
	bool IsModded; // 0xa7c(0x01)
	char UnknownData_A7D[0x3]; // 0xa7d(0x03)
	int32_t Index; // 0xa80(0x04)
	char UnknownData_A84[0x4]; // 0xa84(0x04)
	struct FString Name; // 0xa88(0x10)
	float TotalPlayTimeSeconds; // 0xa98(0x04)
	char UnknownData_A9C[0x4]; // 0xa9c(0x04)
	struct TMap<struct FGuid, int32_t> SelectedLoadout; // 0xaa0(0x50)
	uint32_t userIdx; // 0xaf0(0x04)
	uint32_t CurrLoadoutIdx; // 0xaf4(0x04)
	uint32_t SaveToDiskCounter; // 0xaf8(0x04)
	uint32_t BackupSaveIndex; // 0xafc(0x04)
	uint32_t ExternalBackupSaveIndex; // 0xb00(0x04)
	int32_t NumberOfGamesPlayed; // 0xb04(0x04)
	struct UPlayerCharacterID* LastPlayedCharacter; // 0xb08(0x08)
	bool ShowInfoScreen; // 0xb10(0x01)
	char UnknownData_B11[0x7]; // 0xb11(0x07)
	struct FString LastShownVersion; // 0xb18(0x10)
	struct UFSDGameInstance* FSDGameInstance; // 0xb28(0x08)

	void TutorialsResetDelegate__DelegateSignature(); // DelegateFunction FSD.FSDSaveGame.TutorialsResetDelegate__DelegateSignature
	bool TrySellResource(struct UResourceData* Resource, int32_t amount, int32_t Price); // Function FSD.FSDSaveGame.TrySellResource
	bool TryDeductResources(struct TMap<struct UResourceData*, int32_t> Resources); // Function FSD.FSDSaveGame.TryDeductResources
	bool TryDeductCredits(int32_t amount); // Function FSD.FSDSaveGame.TryDeductCredits
	bool TryBuyResource(struct UResourceData* Resource, int32_t amount, int32_t Price); // Function FSD.FSDSaveGame.TryBuyResource
	void SkinSignature__DelegateSignature(struct UItemSkin* Skin, struct UItemID* ItemID); // DelegateFunction FSD.FSDSaveGame.SkinSignature__DelegateSignature
	bool ShouldDisplayFirstSchematicMessage(); // Function FSD.FSDSaveGame.ShouldDisplayFirstSchematicMessage
	bool SetPersonalAnalytics(bool State); // Function FSD.FSDSaveGame.SetPersonalAnalytics
	void SetIsModded(bool modded); // Function FSD.FSDSaveGame.SetIsModded
	void SetIndexAndName(int32_t Index, struct FString Name); // Function FSD.FSDSaveGame.SetIndexAndName
	void SetHasSentSteamInfo(); // Function FSD.FSDSaveGame.SetHasSentSteamInfo
	void SetHasJoinedXboxClub(); // Function FSD.FSDSaveGame.SetHasJoinedXboxClub
	void SetHasClaimSteamGroupLoot(); // Function FSD.FSDSaveGame.SetHasClaimSteamGroupLoot
	void SetFaction(enum class EFSDFaction newFaction, bool Reasign); // Function FSD.FSDSaveGame.SetFaction
	void SetEquippedItem(enum class EItemCategory Category, struct UPlayerCharacterID* PlayerId, struct AActor* Item); // Function FSD.FSDSaveGame.SetEquippedItem
	void SetDiscordReward(bool State); // Function FSD.FSDSaveGame.SetDiscordReward
	void SetCharacterLoadout(struct UPlayerCharacterID* characterID, int32_t loadoutNumber); // Function FSD.FSDSaveGame.SetCharacterLoadout
	void SetBoscoAllowed(bool aIsBoscoAllowed); // Function FSD.FSDSaveGame.SetBoscoAllowed
	bool SetAnonymousAnalytics(bool State); // Function FSD.FSDSaveGame.SetAnonymousAnalytics
	void SaveToDisk(); // Function FSD.FSDSaveGame.SaveToDisk
	bool SaveSlotToDisk(struct UFSDSaveGame* SaveSlot, struct FString slotName, int32_t userIdx); // Function FSD.FSDSaveGame.SaveSlotToDisk
	void RetirementSignature__DelegateSignature(struct APlayerCharacter* CharacterClass, int32_t RetirementCount); // DelegateFunction FSD.FSDSaveGame.RetirementSignature__DelegateSignature
	int32_t RetireCharacter(struct UPlayerCharacterID* characterID); // Function FSD.FSDSaveGame.RetireCharacter
	void ResourceAmountChangedDelegate__DelegateSignature(struct UResourceData* Resource, float currentAmount); // DelegateFunction FSD.FSDSaveGame.ResourceAmountChangedDelegate__DelegateSignature
	void ResetTutorials(); // Function FSD.FSDSaveGame.ResetTutorials
	void ResetRejoinSessionId(); // Function FSD.FSDSaveGame.ResetRejoinSessionId
	void RejoinAttempted(); // Function FSD.FSDSaveGame.RejoinAttempted
	void RefreshLoadoutFromCharacter(struct UPlayerCharacterID* characterID); // Function FSD.FSDSaveGame.RefreshLoadoutFromCharacter
	bool RecievedDiscordReward(); // Function FSD.FSDSaveGame.RecievedDiscordReward
	struct FString PromotedClassesString(); // Function FSD.FSDSaveGame.PromotedClassesString
	void PlayerProgressChangedSignature__DelegateSignature(int32_t Rank, int32_t Stars); // DelegateFunction FSD.FSDSaveGame.PlayerProgressChangedSignature__DelegateSignature
	void PersonalMatricsChangedSignature__DelegateSignature(bool AllowPersonalMetrics); // DelegateFunction FSD.FSDSaveGame.PersonalMatricsChangedSignature__DelegateSignature
	void PerkPointsChangedSignature__DelegateSignature(int32_t PerkPoints, int32_t Change); // DelegateFunction FSD.FSDSaveGame.PerkPointsChangedSignature__DelegateSignature
	void MarkRetirementRewardScreenSeen(struct UPlayerCharacterID* characterID); // Function FSD.FSDSaveGame.MarkRetirementRewardScreenSeen
	void MarkFirstSchematicMessageSeen(); // Function FSD.FSDSaveGame.MarkFirstSchematicMessageSeen
	void ItemUnlockedDelegate__DelegateSignature(); // DelegateFunction FSD.FSDSaveGame.ItemUnlockedDelegate__DelegateSignature
	void ItemUINotificationDelegate__DelegateSignature(); // DelegateFunction FSD.FSDSaveGame.ItemUINotificationDelegate__DelegateSignature
	bool IsObsolete(); // Function FSD.FSDSaveGame.IsObsolete
	bool IsInMinersManual(struct FGuid ObjectID); // Function FSD.FSDSaveGame.IsInMinersManual
	bool IsFirstRejoinAttempt(); // Function FSD.FSDSaveGame.IsFirstRejoinAttempt
	bool HasSeenRetirementRewardScreen(); // Function FSD.FSDSaveGame.HasSeenRetirementRewardScreen
	bool HasModdedSavesOnDisk(struct UFSDGameInstance* GameInstance); // Function FSD.FSDSaveGame.HasModdedSavesOnDisk
	bool HasCharacterRetired(struct UPlayerCharacterID* characterID); // Function FSD.FSDSaveGame.HasCharacterRetired
	bool HasCharacterCompletedRetirementCampaign(struct UPlayerCharacterID* characterID); // Function FSD.FSDSaveGame.HasCharacterCompletedRetirementCampaign
	bool HasBackupWithMoreProgress(struct UFSDGameInstance* GameInstance); // Function FSD.FSDSaveGame.HasBackupWithMoreProgress
	bool HasAnyCharacterRetired(); // Function FSD.FSDSaveGame.HasAnyCharacterRetired
	int32_t GetTotalGamesPlayed(); // Function FSD.FSDSaveGame.GetTotalGamesPlayed
	int32_t GetTotalCharacterXP(); // Function FSD.FSDSaveGame.GetTotalCharacterXP
	struct FDateTime GetSlotTimeStamp(); // Function FSD.FSDSaveGame.GetSlotTimeStamp
	struct FString GetSlotLoadedFrom(); // Function FSD.FSDSaveGame.GetSlotLoadedFrom
	int32_t GetSelectedLoadoutIndex(struct UPlayerCharacterID* characterID); // Function FSD.FSDSaveGame.GetSelectedLoadoutIndex
	int32_t GetResourceSellingPrice(struct UResourceData* Resource, int32_t amount); // Function FSD.FSDSaveGame.GetResourceSellingPrice
	int32_t GetResourceBuyingPrice(struct UResourceData* Resource, int32_t amount); // Function FSD.FSDSaveGame.GetResourceBuyingPrice
	float GetResourceAmount(struct UResourceData* Resource); // Function FSD.FSDSaveGame.GetResourceAmount
	int32_t GetRequiredXPForLevel(int32_t Level); // Function FSD.FSDSaveGame.GetRequiredXPForLevel
	struct FString GetRejoinSessionId(); // Function FSD.FSDSaveGame.GetRejoinSessionId
	int32_t GetPurchasableItemCount(); // Function FSD.FSDSaveGame.GetPurchasableItemCount
	int32_t GetPlayerRetirementRank(); // Function FSD.FSDSaveGame.GetPlayerRetirementRank
	int32_t GetPlayerRank(); // Function FSD.FSDSaveGame.GetPlayerRank
	int32_t GetPerkPoints(); // Function FSD.FSDSaveGame.GetPerkPoints
	struct FString GetName(); // Function FSD.FSDSaveGame.GetName
	int32_t GetMaxSaveSlots(); // Function FSD.FSDSaveGame.GetMaxSaveSlots
	bool GetIsModded(); // Function FSD.FSDSaveGame.GetIsModded
	int32_t GetIndex(); // Function FSD.FSDSaveGame.GetIndex
	bool GetHasSentSteamInfo(); // Function FSD.FSDSaveGame.GetHasSentSteamInfo
	bool GetHasClaimedSteamGroupLoot(); // Function FSD.FSDSaveGame.GetHasClaimedSteamGroupLoot
	enum class EFSDFaction GetFaction(); // Function FSD.FSDSaveGame.GetFaction
	struct UItemID* GetEquippedItemID(enum class EItemCategory Category, struct UPlayerCharacterID* PlayerId); // Function FSD.FSDSaveGame.GetEquippedItemID
	struct AActor* GetEquippedItem(enum class EItemCategory Category, struct UPlayerCharacterID* PlayerId); // Function FSD.FSDSaveGame.GetEquippedItem
	int32_t GetCredits(); // Function FSD.FSDSaveGame.GetCredits
	int32_t GetClassXP(struct UPlayerCharacterID* characterID); // Function FSD.FSDSaveGame.GetClassXP
	int32_t GetClassLevel(struct UPlayerCharacterID* characterID); // Function FSD.FSDSaveGame.GetClassLevel
	int32_t GetCharacterRetirementCount(struct FGuid PlayerId); // Function FSD.FSDSaveGame.GetCharacterRetirementCount
	bool GetBoscoAllowed(); // Function FSD.FSDSaveGame.GetBoscoAllowed
	int32_t GetAvailableUserSlotIndex(struct UFSDGameInstance* GameInstance); // Function FSD.FSDSaveGame.GetAvailableUserSlotIndex
	struct TArray<struct UFSDSaveGame*> GetAllSavesFromDisk(struct UFSDGameInstance* GameInstance); // Function FSD.FSDSaveGame.GetAllSavesFromDisk
	void ForgingXPDelegate__DelegateSignature(float XP); // DelegateFunction FSD.FSDSaveGame.ForgingXPDelegate__DelegateSignature
	bool DeleteFromDisk(struct UFSDGameInstance* GameInstance, struct FString slotName, int32_t userIdx); // Function FSD.FSDSaveGame.DeleteFromDisk
	bool DeductPerkPoints(int32_t amount); // Function FSD.FSDSaveGame.DeductPerkPoints
	void CreditsChangedSignature__DelegateSignature(int32_t Credits); // DelegateFunction FSD.FSDSaveGame.CreditsChangedSignature__DelegateSignature
	void CheckPromotionAchievementProgress(struct UObject* WorldContext); // Function FSD.FSDSaveGame.CheckPromotionAchievementProgress
	void CharacterSignature__DelegateSignature(struct APlayerCharacter* CharacterClass); // DelegateFunction FSD.FSDSaveGame.CharacterSignature__DelegateSignature
	void CharacterProgressChangedSignature__DelegateSignature(struct APlayerCharacter* CharacterClass, int32_t Level, float Progress); // DelegateFunction FSD.FSDSaveGame.CharacterProgressChangedSignature__DelegateSignature
	bool CanAfford(struct TMap<struct UResourceData*, int32_t> Resources); // Function FSD.FSDSaveGame.CanAfford
	void AnonymousMatricsChangedSignature__DelegateSignature(bool AllowAnonymousMetrics); // DelegateFunction FSD.FSDSaveGame.AnonymousMatricsChangedSignature__DelegateSignature
	void AddPerkPoints(int32_t amount); // Function FSD.FSDSaveGame.AddPerkPoints
	void AddGamePlayed(); // Function FSD.FSDSaveGame.AddGamePlayed
	int32_t AddCredits(int32_t amount); // Function FSD.FSDSaveGame.AddCredits
};

// Class FSD.OptionalUICategory
// Size: 0x68 (Inherited: 0x30)
struct UOptionalUICategory : UDataAsset {
	struct FMulticastInlineDelegate OnVisibilityChanged; // 0x30(0x10)
	struct FGuid Guid; // 0x40(0x10)
	struct FText Description; // 0x50(0x18)

	void VisibilityChanged__DelegateSignature(struct UOptionalUICategory* Category, bool IsVisible); // DelegateFunction FSD.OptionalUICategory.VisibilityChanged__DelegateSignature
	void SetVisible(struct UObject* WorldContext, bool IsCategoryVisible); // Function FSD.OptionalUICategory.SetVisible
	bool IsVisible(struct UObject* WorldContext); // Function FSD.OptionalUICategory.IsVisible
};

// Class FSD.ItemRefundList
// Size: 0x98 (Inherited: 0x30)
struct UItemRefundList : UDataAsset {
	bool ResetListOnSave; // 0x30(0x01)
	char UnknownData_31[0x7]; // 0x31(0x07)
	struct TArray<struct TSoftObjectPtr<struct UObject>> Items; // 0x38(0x10)
	struct TMap<struct FGuid, struct FItemRefundListItem> ItemsToRefund; // 0x48(0x50)
};

// Class FSD.FSDSendToURL
// Size: 0x40 (Inherited: 0x28)
struct UFSDSendToURL : UObject {
	char UnknownData_28[0x18]; // 0x28(0x18)
};

// Class FSD.FSDSessionUpdater
// Size: 0x80 (Inherited: 0x28)
struct UFSDSessionUpdater : UObject {
	struct FMulticastInlineDelegate OnNewFSDSessionID; // 0x28(0x10)
	char UnknownData_38[0x48]; // 0x38(0x48)
};

// Class FSD.FSDFindSteamSessions
// Size: 0x40 (Inherited: 0x28)
struct UFSDFindSteamSessions : UObject {
	struct FMulticastInlineDelegate OnFindResult; // 0x28(0x10)
	char UnknownData_38[0x8]; // 0x38(0x08)
};

// Class FSD.FSDLookupSessionId
// Size: 0x88 (Inherited: 0x30)
struct UFSDLookupSessionId : UOnlineBlueprintCallProxyBase {
	struct FMulticastInlineDelegate OnSuccess; // 0x30(0x10)
	struct FMulticastInlineDelegate OnFailure; // 0x40(0x10)
	char UnknownData_50[0x38]; // 0x50(0x38)

	struct UFSDLookupSessionId* FSDLookupSessionId(struct UObject* WorldContextObject, struct FString sessionKey); // Function FSD.FSDLookupSessionId.FSDLookupSessionId
};

// Class FSD.FSDSkeletalMeshComponent
// Size: 0xac0 (Inherited: 0xac0)
struct UFSDSkeletalMeshComponent : USkeletalMeshComponent {
};

// Class FSD.FSDSplineLibrary
// Size: 0x28 (Inherited: 0x28)
struct UFSDSplineLibrary : UBlueprintFunctionLibrary {

	bool SplineComponentSphereTrace(struct USplineComponent* SplineComponent, float Radius, char TraceType, float StepSize, struct TArray<struct AActor*> IgnoreActors, struct FHitResult OutHitResult, struct FVector Offset); // Function FSD.FSDSplineLibrary.SplineComponentSphereTrace
	struct TArray<struct FTransform> GetSplineComponentTransforms(struct USplineComponent* SplineComponent, float StepSize, char Space); // Function FSD.FSDSplineLibrary.GetSplineComponentTransforms
	void GetLocationAndTangentsAtSplinePoint(struct USplineComponent* Spline, int32_t PointIndex, struct FVector Location, struct FVector ArriveTangent, struct FVector LeaveTangent, char CoordinateSpace); // Function FSD.FSDSplineLibrary.GetLocationAndTangentsAtSplinePoint
	void ConvertSplineDistanceToInputKey(struct USplineComponent* SplineComponent, struct USplineComponent* OptionalTargetSpline); // Function FSD.FSDSplineLibrary.ConvertSplineDistanceToInputKey
	struct TArray<struct FSplineSegment> CalculateSplineSegments(struct USplineComponent* Spline, char Space, float MaxSegmentDistance, int32_t StartIndex, int32_t EndIndex); // Function FSD.FSDSplineLibrary.CalculateSplineSegments
	float ApproximateSplineDistanceAtWorldLocation(struct USplineComponent* Spline, struct FVector WorldLocation); // Function FSD.FSDSplineLibrary.ApproximateSplineDistanceAtWorldLocation
	struct FTransform AppendSplineSegmentWithStartTangent(struct USplineComponent* SplineComponent, struct FVector StartTangent, struct FVector EndLocation, char Space, char SegmentType, bool bUpdateSpline); // Function FSD.FSDSplineLibrary.AppendSplineSegmentWithStartTangent
	struct FTransform AppendSplineSegmentWithStartAndEndTangent(struct USplineComponent* SplineComponent, struct FVector StartTangent, struct FVector EndLocation, struct FVector EndTangent, char Space, char SegmentType, bool bUpdateSpline); // Function FSD.FSDSplineLibrary.AppendSplineSegmentWithStartAndEndTangent
	struct FTransform AppendSplineSegmentWithEndTangent(struct USplineComponent* SplineComponent, struct FVector EndLocation, struct FVector EndTangent, char Space, char SegmentType, bool bUpdateSpline); // Function FSD.FSDSplineLibrary.AppendSplineSegmentWithEndTangent
	struct FTransform AppendSplineSegment(struct USplineComponent* SplineComponent, struct FVector EndLocation, char Space, char SegmentType, bool bUpdateSpline); // Function FSD.FSDSplineLibrary.AppendSplineSegment
};

// Class FSD.FSDSteamUserStats
// Size: 0xc0 (Inherited: 0xb0)
struct UFSDSteamUserStats : UActorComponent {
	char UnknownData_B0[0x10]; // 0xb0(0x10)
};

// Class FSD.FSDSteamUtils
// Size: 0x28 (Inherited: 0x28)
struct UFSDSteamUtils : UBlueprintFunctionLibrary {

	bool PlayerIsFollowingUsOnSteam(); // Function FSD.FSDSteamUtils.PlayerIsFollowingUsOnSteam
	void OpenURLInSteamBrowser(struct FString URL); // Function FSD.FSDSteamUtils.OpenURLInSteamBrowser
	bool IsTextFilteringInitialized(); // Function FSD.FSDSteamUtils.IsTextFilteringInitialized
	bool IsSteamLoaded(); // Function FSD.FSDSteamUtils.IsSteamLoaded
	bool IsDev(struct APlayerState* PlayerState); // Function FSD.FSDSteamUtils.IsDev
	bool InitializeFilterText(); // Function FSD.FSDSteamUtils.InitializeFilterText
	bool HasSupporterUpgrade(); // Function FSD.FSDSteamUtils.HasSupporterUpgrade
	bool HasDeluxeEdition(); // Function FSD.FSDSteamUtils.HasDeluxeEdition
	bool HasContentCreatorEdition(); // Function FSD.FSDSteamUtils.HasContentCreatorEdition
	struct FString GetSteamRegion(); // Function FSD.FSDSteamUtils.GetSteamRegion
	struct FString GetSteamLanguage(); // Function FSD.FSDSteamUtils.GetSteamLanguage
	struct FString GetSteamBranchString(); // Function FSD.FSDSteamUtils.GetSteamBranchString
	enum class ESteamBranch GetSteamBranch(); // Function FSD.FSDSteamUtils.GetSteamBranch
	struct FString GetPlayerSteamName(); // Function FSD.FSDSteamUtils.GetPlayerSteamName
	struct FString GetPlayerSteamID(); // Function FSD.FSDSteamUtils.GetPlayerSteamID
	struct FString FilterProfanityText(struct FString inputMessage); // Function FSD.FSDSteamUtils.FilterProfanityText
};

// Class FSD.FSDXboxUtils
// Size: 0x28 (Inherited: 0x28)
struct UFSDXboxUtils : UBlueprintFunctionLibrary {

	void ShowStoreUIForStoreItem(struct UObject* WorldContextObject, struct FString storeItemName); // Function FSD.FSDXboxUtils.ShowStoreUIForStoreItem
	void ShowStoreUI(struct UObject* WorldContextObject); // Function FSD.FSDXboxUtils.ShowStoreUI
	bool ShowCheatTerminal(); // Function FSD.FSDXboxUtils.ShowCheatTerminal
	bool IsXboxInsiderBuild(); // Function FSD.FSDXboxUtils.IsXboxInsiderBuild
	bool IsDCLCheckComplete(struct UObject* WorldContextObject); // Function FSD.FSDXboxUtils.IsDCLCheckComplete
};

// Class FSD.FSDPFPUtils
// Size: 0x28 (Inherited: 0x28)
struct UFSDPFPUtils : UBlueprintFunctionLibrary {

	bool IsPlayfabLoaded(); // Function FSD.FSDPFPUtils.IsPlayfabLoaded
	struct FString GetPlayfabUserId(); // Function FSD.FSDPFPUtils.GetPlayfabUserId
};

// Class FSD.FSDPS4Utils
// Size: 0x28 (Inherited: 0x28)
struct UFSDPS4Utils : UBlueprintFunctionLibrary {

	void SetUGCAllowed(bool bAllowed); // Function FSD.FSDPS4Utils.SetUGCAllowed
	bool IsUGCAllowed(); // Function FSD.FSDPS4Utils.IsUGCAllowed
	bool IsPS4SystemLoaded(); // Function FSD.FSDPS4Utils.IsPS4SystemLoaded
};

// Class FSD.FSDTutorialSettings
// Size: 0x50 (Inherited: 0x30)
struct UFSDTutorialSettings : UDataAsset {
	int32_t RequiredCPTreasures; // 0x30(0x04)
	int32_t RequiredCPMachineEvents; // 0x34(0x04)
	int32_t RequiredCPVeterans; // 0x38(0x04)
	char UnknownData_3C[0x4]; // 0x3c(0x04)
	struct TArray<struct FNewPlayerMutator> FirstMissionsMutators; // 0x40(0x10)
};

// Class FSD.FSDLevelLoadingPersistentWidget
// Size: 0x230 (Inherited: 0x230)
struct UFSDLevelLoadingPersistentWidget : UUserWidget {

	void SetFadeProgress(float Fade, bool ToSpaceRig, struct UTexture* loadingImage); // Function FSD.FSDLevelLoadingPersistentWidget.SetFadeProgress
};

// Class FSD.FSDLabelWidget
// Size: 0x2a0 (Inherited: 0x2a0)
struct UFSDLabelWidget : UTextBlock {

	void SetWrapTextAt(float WrapAt); // Function FSD.FSDLabelWidget.SetWrapTextAt
	void SetWrappingPolicy(enum class ETextWrappingPolicy Policy); // Function FSD.FSDLabelWidget.SetWrappingPolicy
	void SetMargin(struct FMargin NewMargin); // Function FSD.FSDLabelWidget.SetMargin
	void SetLineHeightPercentage(float percentage); // Function FSD.FSDLabelWidget.SetLineHeightPercentage
	void SetFontSize(int32_t Size); // Function FSD.FSDLabelWidget.SetFontSize
	int32_t GetFontSize(); // Function FSD.FSDLabelWidget.GetFontSize
};

// Class FSD.FSDWidgetBlueprintLibrary
// Size: 0x28 (Inherited: 0x28)
struct UFSDWidgetBlueprintLibrary : UBlueprintFunctionLibrary {

	void WidgetDelegate__DelegateSignature(struct UUserWidget* Widget); // DelegateFunction FSD.FSDWidgetBlueprintLibrary.WidgetDelegate__DelegateSignature
	void WidgetCreatedOrReusedDelegate__DelegateSignature(bool WasCreated, struct UUserWidget* Widget, int32_t ActiveIndex); // DelegateFunction FSD.FSDWidgetBlueprintLibrary.WidgetCreatedOrReusedDelegate__DelegateSignature
	bool TextSmallerThan(struct FText Text1, struct FText Text2); // Function FSD.FSDWidgetBlueprintLibrary.TextSmallerThan
	bool TextGreaterThan(struct FText Text1, struct FText Text2); // Function FSD.FSDWidgetBlueprintLibrary.TextGreaterThan
	void SimpleBox(struct FPaintContext Context, struct FVector2D Position, struct FVector2D Size, struct FLinearColor Tint); // Function FSD.FSDWidgetBlueprintLibrary.SimpleBox
	struct FTimerHandle SetTimerForNextTick(struct UObject* WorldContext, struct FDelegate TimerDelegate); // Function FSD.FSDWidgetBlueprintLibrary.SetTimerForNextTick
	void SetMousePosition(struct UObject* WorldContextObject, int32_t X, int32_t Y); // Function FSD.FSDWidgetBlueprintLibrary.SetMousePosition
	void SetChildrenVisibility(struct UPanelWidget* Panel, enum class ESlateVisibility Visibility, int32_t StartIndex, struct UUserWidget* OptionalClassFilter); // Function FSD.FSDWidgetBlueprintLibrary.SetChildrenVisibility
	void ScaleTextBlockToHeight(struct UTextBlock* TextBlock, float TargetHeight, bool SetMinimimumWidth); // Function FSD.FSDWidgetBlueprintLibrary.ScaleTextBlockToHeight
	void ScaleImageToHeight(struct UImage* Image, float TargetHeight); // Function FSD.FSDWidgetBlueprintLibrary.ScaleImageToHeight
	void PrintStrings(struct UObject* WorldContextObject, struct TArray<struct FString> InStrings, bool bPrintToScreen, bool bPrintToLog, struct FLinearColor TextColor, float Duration); // Function FSD.FSDWidgetBlueprintLibrary.PrintStrings
	struct FString MidIgnoringWhiteSpace(struct FString Source, int32_t Index, int32_t count); // Function FSD.FSDWidgetBlueprintLibrary.MidIgnoringWhiteSpace
	struct FVector2D MeasureTextSize(struct FText Text, struct FSlateFontInfo Font); // Function FSD.FSDWidgetBlueprintLibrary.MeasureTextSize
	struct FVector2D MeasureTextBlockSize(struct UTextBlock* TextBlock); // Function FSD.FSDWidgetBlueprintLibrary.MeasureTextBlockSize
	void Line(struct FPaintContext Context, struct FVector2D Pos1, struct FVector2D Pos2, struct FLinearColor Tint); // Function FSD.FSDWidgetBlueprintLibrary.Line
	struct FLinearColor LerpColors(struct TArray<struct FLinearColor> Colors, struct FLinearColor EndColor, float Progress01); // Function FSD.FSDWidgetBlueprintLibrary.LerpColors
	int32_t LengthIgnoringWhitespace(struct FString Source); // Function FSD.FSDWidgetBlueprintLibrary.LengthIgnoringWhitespace
	bool IsWindowsPlatform(struct UObject* WorldContextObject); // Function FSD.FSDWidgetBlueprintLibrary.IsWindowsPlatform
	bool IsWhiteSpaceAt(struct FString Source, int32_t Index); // Function FSD.FSDWidgetBlueprintLibrary.IsWhiteSpaceAt
	bool IsWhiteSpace(struct FString Source); // Function FSD.FSDWidgetBlueprintLibrary.IsWhiteSpace
	bool IsHUDVisible(struct UObject* WorldContextObject); // Function FSD.FSDWidgetBlueprintLibrary.IsHUDVisible
	struct FString IntToRomanNumeral(int32_t Value); // Function FSD.FSDWidgetBlueprintLibrary.IntToRomanNumeral
	bool HasAnyVisibleChildren(struct UPanelWidget* Panel, int32_t StartIndex, struct UUserWidget* OptionalClassFilter); // Function FSD.FSDWidgetBlueprintLibrary.HasAnyVisibleChildren
	struct FString GetShortTimeString(int32_t TotalSeconds, bool BlinkDelimiter); // Function FSD.FSDWidgetBlueprintLibrary.GetShortTimeString
	struct UWindowWidget* GetParentWindowWidget(struct UUserWidget* InWidget); // Function FSD.FSDWidgetBlueprintLibrary.GetParentWindowWidget
	struct UUserWidget* GetParentUserWidget(struct UUserWidget* InWidget); // Function FSD.FSDWidgetBlueprintLibrary.GetParentUserWidget
	struct AFSDPlayerState* GetOwningFSDPlayerState(struct UWidget* Target); // Function FSD.FSDWidgetBlueprintLibrary.GetOwningFSDPlayerState
	struct FText GetKeyName(struct FKey Key); // Function FSD.FSDWidgetBlueprintLibrary.GetKeyName
	float GetFontMaxHeight(struct FSlateFontInfo Font); // Function FSD.FSDWidgetBlueprintLibrary.GetFontMaxHeight
	float GetFontBaseline(struct FSlateFontInfo Font); // Function FSD.FSDWidgetBlueprintLibrary.GetFontBaseline
	struct UWidget* GetFocusedWidget(struct UObject* WorldContextObject, struct APlayerController* Controller); // Function FSD.FSDWidgetBlueprintLibrary.GetFocusedWidget
	struct UUserWidget* GetFocusableParentUserWidget(struct UUserWidget* InWidget); // Function FSD.FSDWidgetBlueprintLibrary.GetFocusableParentUserWidget
	struct FVector2D GetDrawSize(struct FPaintContext InContext); // Function FSD.FSDWidgetBlueprintLibrary.GetDrawSize
	struct UFSDCheatManager* GetCheatManager(struct UObject* WorldContextObject); // Function FSD.FSDWidgetBlueprintLibrary.GetCheatManager
	struct UWidget* FindChildWidget(struct UPanelWidget* ParentWidget, struct UUserWidget* WidgetClass, bool SearchChildren); // Function FSD.FSDWidgetBlueprintLibrary.FindChildWidget
	struct UVerticalBox* CreateVerticalBox(struct UObject* WorldContext); // Function FSD.FSDWidgetBlueprintLibrary.CreateVerticalBox
	struct UTextBlock* CreateTextBlock(struct UObject* WorldContext, struct FText Text, struct FSlateFontInfo Font, char Justification, struct FLinearColor Color, bool WrapText); // Function FSD.FSDWidgetBlueprintLibrary.CreateTextBlock
	struct USpacer* CreateSpacer(struct UObject* WorldContext, struct FVector2D Size); // Function FSD.FSDWidgetBlueprintLibrary.CreateSpacer
	struct TArray<struct UUserWidget*> CreateOrReuseChildrenWithCallbackEx(struct UPanelWidget* Panel, int32_t count, struct UUserWidget* WidgetClass, struct FDelegate OnCreatedOrReused, struct FDelegate OnCollapsed); // Function FSD.FSDWidgetBlueprintLibrary.CreateOrReuseChildrenWithCallbackEx
	struct TArray<struct UUserWidget*> CreateOrReuseChildrenWithCallback(struct UPanelWidget* Panel, int32_t count, struct UUserWidget* WidgetClass, struct FDelegate OnCreatedOrReused); // Function FSD.FSDWidgetBlueprintLibrary.CreateOrReuseChildrenWithCallback
	struct TArray<struct UUserWidget*> CreateOrReuseChildren(struct UPanelWidget* Panel, int32_t count, struct UUserWidget* WidgetClass); // Function FSD.FSDWidgetBlueprintLibrary.CreateOrReuseChildren
	struct UImage* CreateImageSized(struct UObject* WorldContext, struct UTexture2D* Texture, struct FLinearColor Tint, struct FVector2D Size); // Function FSD.FSDWidgetBlueprintLibrary.CreateImageSized
	struct UImage* CreateImage(struct UObject* WorldContext, struct UTexture2D* Texture, struct FLinearColor Tint, bool AutoSize); // Function FSD.FSDWidgetBlueprintLibrary.CreateImage
	struct UHorizontalBox* CreateHorizontalBox(struct UObject* WorldContext); // Function FSD.FSDWidgetBlueprintLibrary.CreateHorizontalBox
	void Box(struct FPaintContext Context, struct FVector2D Position, struct FVector2D Size, struct FSlateBrush Brush, struct FLinearColor Tint); // Function FSD.FSDWidgetBlueprintLibrary.Box
	struct UWidget* AddWidgetToRow(struct UVerticalBox* VerticalBox, struct UWidget* Widget, int32_t MaxWidgetsPerRow, float WidgetSpacing, float RowSpacing, struct UHorizontalBoxSlot* OutSlot, struct UHorizontalBox* OutRow); // Function FSD.FSDWidgetBlueprintLibrary.AddWidgetToRow
	struct UWidget* AddChildToVerticalBoxEx(struct UVerticalBox* VerticalBox, struct UWidget* Widget, char HorizontalAlignment, char VerticalAlignment, float Size, struct FMargin Padding, struct UVerticalBoxSlot* OutSlot, struct UVerticalBox* OutVerticalBox); // Function FSD.FSDWidgetBlueprintLibrary.AddChildToVerticalBoxEx
	struct UWidget* AddChildToUniformGridEx(struct UUniformGridPanel* GridPanel, struct UWidget* Widget, char HorizontalAlignment, char VerticalAlignment, int32_t Column, int32_t Row, struct UUniformGridSlot* OutSlot, struct UUniformGridPanel* OutGridPanel); // Function FSD.FSDWidgetBlueprintLibrary.AddChildToUniformGridEx
	struct UWidget* AddChildToHorizontalBoxEx(struct UHorizontalBox* HorizontalBox, struct UWidget* Widget, char HorizontalAlignment, char VerticalAlignment, float Size, struct FMargin Padding, struct UHorizontalBoxSlot* OutSlot, struct UHorizontalBox* OutHorizontalBox); // Function FSD.FSDWidgetBlueprintLibrary.AddChildToHorizontalBoxEx
};

// Class FSD.FSDWidgetEffectsComponent
// Size: 0x100 (Inherited: 0xb0)
struct UFSDWidgetEffectsComponent : UActorComponent {
	struct TArray<struct FWidgetPing> WidgetPings; // 0xb0(0x10)
	struct TArray<struct FWidgetFade> WidgetFades; // 0xc0(0x10)
	struct TArray<struct FWidgetTextCounter> WidgetTextCounters; // 0xd0(0x10)
	struct TArray<struct FCustomCounter> CustomCounters; // 0xe0(0x10)
	struct TArray<struct FWidgetMover> WidgetMovers; // 0xf0(0x10)

	void StartTextCounter(struct UObject* WorldContext, struct UTextBlock* Widget, float Start, float End, float Duration, int32_t MaxDigits, float StartDelay); // Function FSD.FSDWidgetEffectsComponent.StartTextCounter
	void StartCounter(struct UObject* WorldContext, struct UObject* Owner, float Start, float End, float Duration, struct FDelegate OnCount, float StartDelay); // Function FSD.FSDWidgetEffectsComponent.StartCounter
	void PingWidget(struct UObject* WorldContext, struct UWidget* Widget, float amount, float Duration, enum class EPingType PingType, float StartDelay); // Function FSD.FSDWidgetEffectsComponent.PingWidget
	void MoveWidget(struct UObject* WorldContext, struct UUserWidget* Widget, struct FVector2D Start, struct FVector2D End, float Duration, enum class EMoveType MoveType, float StartDelay); // Function FSD.FSDWidgetEffectsComponent.MoveWidget
	void MoveOutWidget(struct UObject* WorldContext, struct UUserWidget* Widget, struct FVector2D MoveToOffset, float Duration, float StartDelay); // Function FSD.FSDWidgetEffectsComponent.MoveOutWidget
	void MoveInWidget(struct UObject* WorldContext, struct UUserWidget* Widget, struct FVector2D MoveFromOffset, float Duration, float StartDelay); // Function FSD.FSDWidgetEffectsComponent.MoveInWidget
	void FadeWidget(struct UObject* WorldContext, struct UUserWidget* Widget, float StartFade, float EndFade, float Duration, float StartDelay); // Function FSD.FSDWidgetEffectsComponent.FadeWidget
	void FadeOutWidget(struct UObject* WorldContext, struct UUserWidget* Widget, float Duration, float StartDelay); // Function FSD.FSDWidgetEffectsComponent.FadeOutWidget
	void FadeInWidget(struct UObject* WorldContext, struct UUserWidget* Widget, float Duration, float StartDelay); // Function FSD.FSDWidgetEffectsComponent.FadeInWidget
};

// Class FSD.TrackBuilderItem
// Size: 0x3c0 (Inherited: 0x368)
struct ATrackBuilderItem : AAnimatedItem {
	char UnknownData_368[0x8]; // 0x368(0x08)
	struct UCrosshairAggregator* CrosshairAggregator; // 0x370(0x08)
	enum class EPlaceableObstructionType ObstructionType; // 0x378(0x01)
	char UnknownData_379[0x3]; // 0x379(0x03)
	struct FVector ObstructionLocation; // 0x37c(0x0c)
	struct FVector GroundNormal; // 0x388(0x0c)
	char UnknownData_394[0x14]; // 0x394(0x14)
	struct ATrackBuilderSegment* DefaultSegmentType; // 0x3a8(0x08)
	struct ATrackBuilderSegment* NextSegment; // 0x3b0(0x08)
	bool bIsPlacingSegment; // 0x3b8(0x01)
	char UnknownData_3B9[0x7]; // 0x3b9(0x07)

	void UpdatePlacement(struct FTransform InTransform, struct UTrackBuilderConnectPoint* InConnectPoint, bool bPlacementValid, bool InUpdateServer); // Function FSD.TrackBuilderItem.UpdatePlacement
	void ServerUpdatePlacement(struct FTransform InTransform, bool bPlacementValid, struct UTrackBuilderConnectPoint* InConnectPoint); // Function FSD.TrackBuilderItem.ServerUpdatePlacement
	void ServerFinishPlacement(struct FTransform FinalLocation, struct UTrackBuilderConnectPoint* ConnectPoint); // Function FSD.TrackBuilderItem.ServerFinishPlacement
	void ServerCancelPlacement(); // Function FSD.TrackBuilderItem.ServerCancelPlacement
	void ServerBeginPlaceSegment(struct UTrackBuilderUsable* InUsable); // Function FSD.TrackBuilderItem.ServerBeginPlaceSegment
	void ReceiveBeginPlaceSegment(); // Function FSD.TrackBuilderItem.ReceiveBeginPlaceSegment
	void OnRep_NextSegment(); // Function FSD.TrackBuilderItem.OnRep_NextSegment
	struct ATrackBuilderSegment* GetSegmentType(); // Function FSD.TrackBuilderItem.GetSegmentType
	void FinishPlacement(struct FTransform FinalLocation, struct UTrackBuilderConnectPoint* ConnectPoint); // Function FSD.TrackBuilderItem.FinishPlacement
	void CancelPlacement(); // Function FSD.TrackBuilderItem.CancelPlacement
	struct FVector AdjustInitialLocation(struct FVector Location); // Function FSD.TrackBuilderItem.AdjustInitialLocation
};

// Class FSD.FuelLineBuilderItem
// Size: 0x3d0 (Inherited: 0x3c0)
struct AFuelLineBuilderItem : ATrackBuilderItem {
	struct UItemPlacerAggregator* SegmentPlacer; // 0x3c0(0x08)
	char UnknownData_3C8[0x8]; // 0x3c8(0x08)

	void ReceivePlacementUpdated(bool InCanPlace, bool InConnecting, float InDistanceProgress); // Function FSD.FuelLineBuilderItem.ReceivePlacementUpdated
};

// Class FSD.FuelLineEndPoint
// Size: 0x230 (Inherited: 0x220)
struct AFuelLineEndPoint : AActor {
	struct UFuelLineConnectPoint* ConnectPoint; // 0x220(0x08)
	struct UStaticMeshComponent* StaticMesh; // 0x228(0x08)

	void ReceivePing(bool InValidPlacement); // Function FSD.FuelLineEndPoint.ReceivePing
	void CallbackConnectedWithSegment(struct UTrackBuilderConnectPoint* InConnectPoint, struct ATrackBuilderSegment* InSegment); // Function FSD.FuelLineEndPoint.CallbackConnectedWithSegment
};

// Class FSD.TrackBuilderConnectPoint
// Size: 0x450 (Inherited: 0x410)
struct UTrackBuilderConnectPoint : USphereComponent {
	struct FMulticastInlineDelegate OnConnectedWithSegment; // 0x410(0x10)
	struct ATrackBuilderSegment* ConnectType; // 0x420(0x08)
	struct FWeakObjectPtr<struct ATrackBuilderSegment> ConnectedSegment; // 0x428(0x08)
	float MaxConnectRadius; // 0x430(0x04)
	float ConnectDistance; // 0x434(0x04)
	struct FVector MaxAngles; // 0x438(0x0c)
	char UnknownData_444[0xc]; // 0x444(0x0c)

	void OnRep_ConnectedSegment(); // Function FSD.TrackBuilderConnectPoint.OnRep_ConnectedSegment
	struct FTransform GetConnectTransform(struct FTransform FromWorldTransform); // Function FSD.TrackBuilderConnectPoint.GetConnectTransform
	bool Disconnect(struct ATrackBuilderSegment* InSegment); // Function FSD.TrackBuilderConnectPoint.Disconnect
	void ConnectionDelegate__DelegateSignature(struct UTrackBuilderConnectPoint* InConnectPoint, struct ATrackBuilderSegment* InSegment); // DelegateFunction FSD.TrackBuilderConnectPoint.ConnectionDelegate__DelegateSignature
	bool Connect(struct ATrackBuilderSegment* InSegment); // Function FSD.TrackBuilderConnectPoint.Connect
	bool CanConnectWith(struct ATrackBuilderSegment* InSegment, struct FTransform FromWorldTransform); // Function FSD.TrackBuilderConnectPoint.CanConnectWith
};

// Class FSD.FuelLineConnectPoint
// Size: 0x450 (Inherited: 0x450)
struct UFuelLineConnectPoint : UTrackBuilderConnectPoint {
};

// Class FSD.TrackBuilderSegment
// Size: 0x290 (Inherited: 0x220)
struct ATrackBuilderSegment : AActor {
	struct UTrackBuilderUsable* NextSegmentUsable; // 0x220(0x08)
	struct FWeakObjectPtr<struct APlayerCharacter> BuiltByCharacter; // 0x228(0x08)
	struct FWeakObjectPtr<struct UTrackBuilderUsable> BuiltFromUsable; // 0x230(0x08)
	struct FTrackBuilderPoint SegmentEndTransform; // 0x238(0x28)
	struct FTrackBuilderPoint ServerSegmentEndTransform; // 0x260(0x28)
	char UnknownData_288[0x8]; // 0x288(0x08)

	bool UpdatePlacement(struct FTransform InTransform, struct UTrackBuilderConnectPoint* InConnectPoint, bool InPlacementValid, struct AItem* PlaceableItem); // Function FSD.TrackBuilderSegment.UpdatePlacement
	void ReceivPlacementValidChanged(bool InIsValid); // Function FSD.TrackBuilderSegment.ReceivPlacementValidChanged
	void ReceivePlacementStateChanged(enum class ETrackBuildPlacementState NewState); // Function FSD.TrackBuilderSegment.ReceivePlacementStateChanged
	void ReceivePlacementChangedEnd(struct FTransform NewEndTransform, struct UTrackBuilderConnectPoint* InConnectPoint); // Function FSD.TrackBuilderSegment.ReceivePlacementChangedEnd
	void ReceivePlacementChangedBegin(struct FTransform NewEndTransform, struct UTrackBuilderConnectPoint* InConnectPoint); // Function FSD.TrackBuilderSegment.ReceivePlacementChangedBegin
	bool ReceiveCanPlaceAt(struct FTransform InCandidateTransform, struct UTrackBuilderConnectPoint* InConnectPoint); // Function FSD.TrackBuilderSegment.ReceiveCanPlaceAt
	void OnRep_SegmentEndTransform(); // Function FSD.TrackBuilderSegment.OnRep_SegmentEndTransform
	struct UTrackBuilderUsable* GetTrackStartUsable(); // Function FSD.TrackBuilderSegment.GetTrackStartUsable
	struct AActor* GetTrackStartActor(); // Function FSD.TrackBuilderSegment.GetTrackStartActor
	struct FTransform GetStartTransform(); // Function FSD.TrackBuilderSegment.GetStartTransform
	struct FTransform GetSegmentEndTransform(); // Function FSD.TrackBuilderSegment.GetSegmentEndTransform
	enum class ETrackBuildPlacementState GetPlacementState(); // Function FSD.TrackBuilderSegment.GetPlacementState
	struct ATrackBuilderSegment* GetNextSegment(bool bForward); // Function FSD.TrackBuilderSegment.GetNextSegment
	bool GetIsSegmentEndTransformValid(); // Function FSD.TrackBuilderSegment.GetIsSegmentEndTransformValid
	struct UTrackBuilderConnectPoint* GetConnectPoint(); // Function FSD.TrackBuilderSegment.GetConnectPoint
	bool CanPlaceAt(struct FTransform InCandidateTransform, struct UTrackBuilderConnectPoint* InConnectPoint, struct AItem* PlaceableItem); // Function FSD.TrackBuilderSegment.CanPlaceAt
};

// Class FSD.FuelLineSegment
// Size: 0x2c8 (Inherited: 0x290)
struct AFuelLineSegment : ATrackBuilderSegment {
	struct USplineMeshComponent* FuelLineSplineMesh; // 0x290(0x08)
	struct USplineComponent* FuelLineSplineComponent; // 0x298(0x08)
	struct UStaticMeshComponent* FuelLineEndPostMesh; // 0x2a0(0x08)
	struct USimpleHealthComponent* DeconstructHealthComponent; // 0x2a8(0x08)
	struct USceneComponent* PreviewEndPostLocation; // 0x2b0(0x08)
	float EndPostHeightOffset; // 0x2b8(0x04)
	float MaxLength; // 0x2bc(0x04)
	bool bHasMaxTurnAngle; // 0x2c0(0x01)
	char UnknownData_2C1[0x3]; // 0x2c1(0x03)
	float MaxTurnAngle; // 0x2c4(0x04)

	void ClientUpdateStartTransform(struct FVector NewStartLocation); // Function FSD.FuelLineSegment.ClientUpdateStartTransform
	void ChangeStartTransform(struct FTransform ChangedStartLocation); // Function FSD.FuelLineSegment.ChangeStartTransform
	void CallbackOnDeath(struct UHealthComponentBase* InHealthComponent); // Function FSD.FuelLineSegment.CallbackOnDeath
	void CallbackCanStartNextSegmentChanged(bool InCanStart); // Function FSD.FuelLineSegment.CallbackCanStartNextSegmentChanged
};

// Class FSD.FuelLineStart
// Size: 0x258 (Inherited: 0x220)
struct AFuelLineStart : AActor {
	struct FMulticastInlineDelegate OnFuelLineConnected; // 0x220(0x10)
	struct UStaticMeshComponent* StaticMesh; // 0x230(0x08)
	struct UOutlineComponent* OutlineComponent; // 0x238(0x08)
	struct USimpleObjectInfoComponent* ObjectInfoComponent; // 0x240(0x08)
	struct UFuelLineStartUsable* UsableStartFuelLine; // 0x248(0x08)
	bool bFuelLineConnected; // 0x250(0x01)
	char UnknownData_251[0x7]; // 0x251(0x07)

	void ReceiveFuelLineConnected(); // Function FSD.FuelLineStart.ReceiveFuelLineConnected
	void OnRep_FuelLineConnected(); // Function FSD.FuelLineStart.OnRep_FuelLineConnected
	void FuelLineStartDelegate__DelegateSignature(struct AFuelLineStart* InFuelLineStart); // DelegateFunction FSD.FuelLineStart.FuelLineStartDelegate__DelegateSignature
	void CallbackNextSegmentChanged(struct UTrackBuilderUsable* InUsable, struct ATrackBuilderSegment* InSegment); // Function FSD.FuelLineStart.CallbackNextSegmentChanged
};

// Class FSD.TrackBuilderUsable
// Size: 0x178 (Inherited: 0x138)
struct UTrackBuilderUsable : UInstantUsable {
	struct FMulticastInlineDelegate OnNextSegmentChanged; // 0x138(0x10)
	struct ATrackBuilderItem* BuilderItemType; // 0x148(0x08)
	struct FString ColliderName; // 0x150(0x10)
	struct USceneComponent* TrackStartComponent; // 0x160(0x08)
	struct ATrackBuilderSegment* NextSegment; // 0x168(0x08)
	struct FWeakObjectPtr<struct APlayerCharacter> InUseBy; // 0x170(0x08)

	void SegmentDelegate__DelegateSignature(struct UTrackBuilderUsable* InUsable, struct ATrackBuilderSegment* InSegment); // DelegateFunction FSD.TrackBuilderUsable.SegmentDelegate__DelegateSignature
	void OnRep_NextSegment(); // Function FSD.TrackBuilderUsable.OnRep_NextSegment
	void OnNextSegmentDestroyed(struct AActor* InActor); // Function FSD.TrackBuilderUsable.OnNextSegmentDestroyed
	struct FTransform GetStartTransform(); // Function FSD.TrackBuilderUsable.GetStartTransform
	void FinishUse(struct APlayerCharacter* User, struct ATrackBuilderSegment* InSegment); // Function FSD.TrackBuilderUsable.FinishUse
};

// Class FSD.FuelLineStartUsable
// Size: 0x178 (Inherited: 0x178)
struct UFuelLineStartUsable : UTrackBuilderUsable {
};

// Class FSD.StatusEffectSettings
// Size: 0x38 (Inherited: 0x30)
struct UStatusEffectSettings : UDataAsset {
	struct UStatusEffect* Frozen; // 0x30(0x08)
};

// Class FSD.GameAnimationSettings
// Size: 0x30 (Inherited: 0x30)
struct UGameAnimationSettings : UDataAsset {
};

// Class FSD.UpgradeSettings
// Size: 0x140 (Inherited: 0x30)
struct UUpgradeSettings : UDataAsset {
	struct TArray<struct TSoftObjectPtr<struct UItemUpgrade>> UpgradesToCostRefund; // 0x30(0x10)
	struct TArray<int32_t> ClassAUpgradeCosts; // 0x40(0x10)
	struct TArray<int32_t> ClassBUpgradeCosts; // 0x50(0x10)
	struct TArray<int32_t> GearAUpgradeCosts; // 0x60(0x10)
	struct TArray<int32_t> GearBUpgradeCosts; // 0x70(0x10)
	struct TArray<int32_t> ArmorUpgradeCosts; // 0x80(0x10)
	struct TArray<int32_t> PickaxeUpgradeCosts; // 0x90(0x10)
	struct TArray<int32_t> ClassBoscoUpgradeCosts; // 0xa0(0x10)
	struct TArray<struct FUpgradeCostItem> ClassAResourceCosts; // 0xb0(0x10)
	struct TArray<struct FUpgradeCostItem> ClassBResourceCosts; // 0xc0(0x10)
	struct TArray<struct FUpgradeCostItem> GearAResourceCosts; // 0xd0(0x10)
	struct TArray<struct FUpgradeCostItem> GearBResourceCosts; // 0xe0(0x10)
	struct TArray<struct FUpgradeCostItem> ArmorResourceCosts; // 0xf0(0x10)
	struct TArray<struct FUpgradeCostItem> PickaxeResourceCosts; // 0x100(0x10)
	struct TArray<struct FUpgradeCostItem> ClassBoscoResourceCosts; // 0x110(0x10)
	struct TArray<struct FUpgradeCostItem> OldClassAResourceCosts; // 0x120(0x10)
	struct TArray<struct FUpgradeCostItem> OldClassBResourceCosts; // 0x130(0x10)

	void AddUpgradesFromItems(struct TArray<struct AActor*> Items); // Function FSD.UpgradeSettings.AddUpgradesFromItems
};

// Class FSD.AfflictionSettings
// Size: 0xf8 (Inherited: 0x30)
struct UAfflictionSettings : UDataAsset {
	struct TArray<struct FRuntimeFloatCurve> IceScalers; // 0x30(0x10)
	struct TArray<struct UStaticMesh*> IceMeshes; // 0x40(0x10)
	struct FRandRange ScaleDelay; // 0x50(0x08)
	struct USoundCue* FreezeSound; // 0x58(0x08)
	struct USoundCue* IceBreakSound; // 0x60(0x08)
	struct USoundCue* BurningSound; // 0x68(0x08)
	struct USoundCue* EletrocutedSound; // 0x70(0x08)
	float HeavyStaggerMinTime; // 0x78(0x04)
	float MediumStaggerMinTime; // 0x7c(0x04)
	struct UPawnAffliction* HeavyStaggerAffliction; // 0x80(0x08)
	struct UPawnAffliction* MediumStaggerAffliction; // 0x88(0x08)
	struct UPawnAffliction* ShortStaggerAffliction; // 0x90(0x08)
	struct TArray<struct UParticleSystem*> FreezeParticles; // 0x98(0x10)
	struct TArray<struct UParticleSystem*> IceBreakParticles; // 0xa8(0x10)
	struct TArray<struct UParticleSystem*> BurningParticles; // 0xb8(0x10)
	struct TArray<struct UParticleSystem*> EletrocutedParticles; // 0xc8(0x10)
	struct TArray<struct UParticleSystem*> ExplodingParticles; // 0xd8(0x10)
	struct TArray<struct USoundCue*> ExplodingSounds; // 0xe8(0x10)
};

// Class FSD.CommunityGoalSettings
// Size: 0x58 (Inherited: 0x30)
struct UCommunityGoalSettings : UDataAsset {
	struct TArray<struct UCommunityGoalFaction*> ActiveCommunityFactions; // 0x30(0x10)
	struct TArray<struct UCommunityGoal*> ActiveCommunityGoals; // 0x40(0x10)
	struct UCommunityGoal* DSMUGoal; // 0x50(0x08)

	struct UCommunityGoal* GetGoal(enum class ECommunityGoalIndex Goal); // Function FSD.CommunityGoalSettings.GetGoal
	struct UCommunityGoal* FindGoal(struct FString Goal); // Function FSD.CommunityGoalSettings.FindGoal
};

// Class FSD.GameData
// Size: 0x9e8 (Inherited: 0x28)
struct UGameData : UObject {
	SoftClassProperty BarrelClass; // 0x28(0x28)
	struct FGVisibilityGroups VisibilityGroups; // 0x50(0x58)
	struct UNiagaraParameterCollection* NiagaraParameterCollection; // 0xa8(0x08)
	struct UDLCBase* AlwaysLockedDLC; // 0xb0(0x08)
	struct UPromotionRewardsSettings* PromotionRewardsSettings; // 0xb8(0x08)
	struct UFSDEventCollection* FsdEventsSettings; // 0xc0(0x08)
	struct UDanceSettings* DanceSettings; // 0xc8(0x08)
	struct UGameAnimationSettings* AnimationSettings; // 0xd0(0x08)
	struct UEnemySettings* EnemySettings; // 0xd8(0x08)
	struct UDamageSettings* DamageSettings; // 0xe0(0x08)
	struct UPlanetZoneSetup* ZoneSettings; // 0xe8(0x08)
	struct UTreasureSettings* TreasureSettings; // 0xf0(0x08)
	struct UDrinkSettings* DrinkSettings; // 0xf8(0x08)
	struct UUpgradeSettings* UpgradeSettings; // 0x100(0x08)
	struct USpawnSettings* SpawnSettings; // 0x108(0x08)
	struct UKeyBindingSettings* KeyBindingSettings; // 0x110(0x08)
	struct UDeepDiveSettings* DeepDiveSettings; // 0x118(0x08)
	struct UEncounterSettings* EncounterSettings; // 0x120(0x08)
	struct UForginSettings* ForgingSettings; // 0x128(0x08)
	struct USchematicSettings* SchematicSettings; // 0x130(0x08)
	struct UItemSkinSettings* SkinSettings; // 0x138(0x08)
	struct USpecialEventSettings* SpecialEventSettings; // 0x140(0x08)
	struct UProceduralSettings* ProceduralSettings; // 0x148(0x08)
	struct UPickaxeSettings* PickaxeSettings; // 0x150(0x08)
	struct UFSDTagSettings* TagSettings; // 0x158(0x08)
	struct UShowroomSettings* ShowroomSettings; // 0x160(0x08)
	struct UVictoryPoseSettings* VictoryPoseSettings; // 0x168(0x08)
	struct UFSDTutorialSettings* TutorialSettings; // 0x170(0x08)
	struct UAfflictionSettings* AfflictionSettings; // 0x178(0x08)
	struct UCommunityGoalSettings* CommunityGoalSettings; // 0x180(0x08)
	struct UDailyDealSettings* DailyDealSettings; // 0x188(0x08)
	struct FGDMissionStats MissionStats; // 0x190(0xf8)
	struct FGDMilestones Milestones; // 0x288(0x10)
	struct FGDPerks perks; // 0x298(0x90)
	struct FGDItemCategoryIDs ItemCategoryIDs; // 0x328(0x38)
	struct TArray<struct UTexture2D*> LoadoutIconList; // 0x360(0x10)
	struct UMinersManual* MinersManual; // 0x370(0x08)
	struct FGDDamageClasses DamageClasses; // 0x378(0x40)
	struct FGDStats Stats; // 0x3b8(0x128)
	struct FGDResources Resources; // 0x4e0(0xe0)
	struct FGDTerrainTypes TerrainTypes; // 0x5c0(0x10)
	struct FGDGameStatsTracking GameStatsTracking; // 0x5d0(0x20)
	struct FGDAudio Audio; // 0x5f0(0x50)
	struct FGDDifficulty Difficulty; // 0x640(0x10)
	struct UStatusEffectSettings* StatusEffects; // 0x650(0x08)
	struct FGDCharacterRetirement Retirement; // 0x658(0xc0)
	struct FGDPlayerAndCharacterProgression PlayerAndCharacterProgression; // 0x718(0xa0)
	struct UCharacterSettings* CharacterSettings; // 0x7b8(0x08)
	struct UAchievementList* Achievements; // 0x7c0(0x08)
	struct UDataTable* SchematicGATable; // 0x7c8(0x08)
	struct TArray<struct UMissionTemplate*> TestMissions; // 0x7d0(0x10)
	struct TSoftObjectPtr<struct UBiome> TestBiome; // 0x7e0(0x28)
	struct UGlobalMissionSetup* MissionSetup; // 0x808(0x08)
	SoftClassProperty CampaignManagerClass; // 0x810(0x28)
	struct UPlayerCharacterID* BoscoID; // 0x838(0x08)
	struct TMap<struct UPlayerCharacterID*, struct UInventoryList*> InventoryLists; // 0x840(0x50)
	struct UBiome* DefaultBiome; // 0x890(0x08)
	struct TArray<struct FText> GenericBiomeQuotes; // 0x898(0x10)
	struct UMissionTemplate* DefaultMission; // 0x8a8(0x08)
	struct AProceduralSetup* CaveGeneratorPLSClass; // 0x8b0(0x08)
	struct TArray<struct UItemRefundList*> ItemRefunds; // 0x8b8(0x10)
	struct TArray<struct USubsystem*> BlueprintSubSystems; // 0x8c8(0x10)
	struct UPlayerCharacterID* DefaultCharacterID; // 0x8d8(0x08)
	struct UPlayerCharacterID* DefaultEditorCharacterID; // 0x8e0(0x08)
	struct FGameplayTag XBoxExcludeRoomTag; // 0x8e8(0x08)
	char UnknownData_8F0[0xf8]; // 0x8f0(0xf8)

	void UnloadPreloadedAssets(); // Function FSD.GameData.UnloadPreloadedAssets
	bool IsPerkTierUnLocked(struct UObject* WorldContext, int32_t Tier); // Function FSD.GameData.IsPerkTierUnLocked
	bool IsCheatConsolesEnabled(); // Function FSD.GameData.IsCheatConsolesEnabled
	int32_t GetRequiredPerkClaimsForTier(int32_t Tier); // Function FSD.GameData.GetRequiredPerkClaimsForTier
	struct TArray<struct UPlayerCharacterID*> GetRankedHeroIDs(); // Function FSD.GameData.GetRankedHeroIDs
	struct TArray<struct APlayerCharacter*> GetRankedHeroClasses(); // Function FSD.GameData.GetRankedHeroClasses
	struct FText GetPlayerRankName(int32_t Rank); // Function FSD.GameData.GetPlayerRankName
	struct APlayerCharacter* GetPlayerClassFromID(struct UPlayerCharacterID* ID); // Function FSD.GameData.GetPlayerClassFromID
	struct UPlayerCharacterID* GetPlayerCharacterID(struct FGuid ID); // Function FSD.GameData.GetPlayerCharacterID
	void GetPerkTierState(struct UObject* WorldContext, int32_t Tier, bool TierUnLocked, int32_t NextRequiredCount, int32_t NextProgressCount); // Function FSD.GameData.GetPerkTierState
	struct UInventoryList* GetInventoryList(struct UPlayerCharacterID* characterID); // Function FSD.GameData.GetInventoryList
	int32_t GetHighestPerkTier(); // Function FSD.GameData.GetHighestPerkTier
	struct UDifficultySetting* GetDifficultySetting(int32_t Index); // Function FSD.GameData.GetDifficultySetting
	int32_t GetDifficultyIndex(struct UDifficultySetting* Difficulty); // Function FSD.GameData.GetDifficultyIndex
	struct APlayerCharacter* GetDefaultEditorCharacter(); // Function FSD.GameData.GetDefaultEditorCharacter
	struct APlayerCharacter* GetDefaultCharacter(); // Function FSD.GameData.GetDefaultCharacter
	struct FRetirementCostItem GetCharacterRetirementCost(struct UObject* WorldContext, struct UPlayerCharacterID* ID); // Function FSD.GameData.GetCharacterRetirementCost
	struct TArray<struct UPerkAsset*> GetCharacterNonEquippedPerks(struct UObject* WorldContext, struct UPlayerCharacterID* characterID); // Function FSD.GameData.GetCharacterNonEquippedPerks
	struct TArray<struct UPerkAsset*> GetCharacterEquippedPerks(struct UObject* WorldContext, struct UPlayerCharacterID* characterID); // Function FSD.GameData.GetCharacterEquippedPerks
	struct TArray<struct UPerkAsset*> GetAvailablePerks(); // Function FSD.GameData.GetAvailablePerks
	int32_t GetAmountOfPurchasedPerks(struct UObject* WorldContext); // Function FSD.GameData.GetAmountOfPurchasedPerks
	struct TArray<struct UHUDVisibilityGroup*> GetAllVisibilityGroups(); // Function FSD.GameData.GetAllVisibilityGroups
	struct TArray<struct UMissionStat*> GetAllMissionStats(); // Function FSD.GameData.GetAllMissionStats
	struct TArray<struct UMissionStat*> GetAllInfirmaryStats(); // Function FSD.GameData.GetAllInfirmaryStats
	int32_t CalculateClaimablePerkPoints(struct UObject* WorldContext); // Function FSD.GameData.CalculateClaimablePerkPoints
};

// Class FSD.DLCBase
// Size: 0x30 (Inherited: 0x30)
struct UDLCBase : UDataAsset {

	bool IsUnlocked(); // Function FSD.DLCBase.IsUnlocked
	bool IsDLCUnLocked(struct UDLCBase* dlc); // Function FSD.DLCBase.IsDLCUnLocked
};

// Class FSD.GameDLC
// Size: 0xf0 (Inherited: 0x30)
struct UGameDLC : UDLCBase {
	char UnknownData_30[0x8]; // 0x30(0x08)
	int32_t SteamID; // 0x38(0x04)
	char UnknownData_3C[0x4]; // 0x3c(0x04)
	struct FString OddishID; // 0x40(0x10)
	struct FString XBoxDLCName; // 0x50(0x10)
	struct FString PS4AdditionalContentLabel; // 0x60(0x10)
	struct FString UWPStoreID; // 0x70(0x10)
	struct TSoftObjectPtr<struct UTexture2D> Banner; // 0x80(0x28)
	SoftClassProperty AnnouncementWidget; // 0xa8(0x28)
	struct FGuid SavegameID; // 0xd0(0x10)
	char UnknownData_E0[0x10]; // 0xe0(0x10)

	bool ShouldBeAnnounced(struct UObject* WorldContext); // Function FSD.GameDLC.ShouldBeAnnounced
	void MarkAnnounced(struct UObject* WorldContext); // Function FSD.GameDLC.MarkAnnounced
	struct UTexture2D* GetBanner(); // Function FSD.GameDLC.GetBanner
};

// Class FSD.GameDLCSettings
// Size: 0x80 (Inherited: 0x30)
struct UGameDLCSettings : UDataAsset {
	struct TSet<struct UGameDLC*> AnnounceDLCs; // 0x30(0x50)

	struct TArray<struct UGameDLC*> GetAnnouncableDLCs(struct UObject* WorldContext); // Function FSD.GameDLCSettings.GetAnnouncableDLCs
};

// Class FSD.TimedDLC
// Size: 0x40 (Inherited: 0x30)
struct UTimedDLC : UDLCBase {
	struct FDateTime StartDate; // 0x30(0x08)
	struct FDateTime EndDate; // 0x38(0x08)
};

// Class FSD.AlwaysLockedDLC
// Size: 0x30 (Inherited: 0x30)
struct UAlwaysLockedDLC : UDLCBase {
};

// Class FSD.PlatformExclusiveDLC
// Size: 0x38 (Inherited: 0x30)
struct UPlatformExclusiveDLC : UDLCBase {
	enum class EFSDTargetPlatform Platform; // 0x30(0x01)
	char UnknownData_31[0x7]; // 0x31(0x07)
};

// Class FSD.AndDLC
// Size: 0x40 (Inherited: 0x30)
struct UAndDLC : UDLCBase {
	struct TArray<struct UDLCBase*> DLCs; // 0x30(0x10)
};

// Class FSD.OrDLC
// Size: 0x40 (Inherited: 0x30)
struct UOrDLC : UDLCBase {
	struct TArray<struct UDLCBase*> DLCs; // 0x30(0x10)
};

// Class FSD.NotDLC
// Size: 0x38 (Inherited: 0x30)
struct UNotDLC : UDLCBase {
	struct UDLCBase* dlc; // 0x30(0x08)
};

// Class FSD.EventRewardFrame
// Size: 0x250 (Inherited: 0x220)
struct AEventRewardFrame : AActor {
	struct USpecialEventUsableComponent* EventUsable; // 0x220(0x08)
	struct TArray<struct AEventRewardDispenser*> Dispensers; // 0x228(0x10)
	bool keyInserted; // 0x238(0x01)
	char UnknownData_239[0x7]; // 0x239(0x07)
	struct TArray<struct FString> EventPlayerIDs; // 0x240(0x10)

	void TurnOff(); // Function FSD.EventRewardFrame.TurnOff
	void SetKeyInserted(bool keyInserted); // Function FSD.EventRewardFrame.SetKeyInserted
	void SetDispenseRewards(bool dispensRewards); // Function FSD.EventRewardFrame.SetDispenseRewards
	void RegisterDispenser(struct AEventRewardDispenser* Dispenser); // Function FSD.EventRewardFrame.RegisterDispenser
	bool GetDispensRewards(); // Function FSD.EventRewardFrame.GetDispensRewards
};

// Class FSD.EventRewardDispenser
// Size: 0x260 (Inherited: 0x220)
struct AEventRewardDispenser : AActor {
	struct FUniqueNetIdRepl PlayerId; // 0x220(0x28)
	struct AEventRewardFrame* DispenserFrame; // 0x248(0x08)
	bool PoweredUp; // 0x250(0x01)
	bool IsActivated; // 0x251(0x01)
	char UnknownData_252[0x6]; // 0x252(0x06)
	struct USchematic* SelectedReward; // 0x258(0x08)

	void SetSelectedReward(struct USchematic* InReward); // Function FSD.EventRewardDispenser.SetSelectedReward
	bool PowerUp(struct APlayerCharacter* InPlayerCharacter); // Function FSD.EventRewardDispenser.PowerUp
	void OnRewardSelected(); // Function FSD.EventRewardDispenser.OnRewardSelected
	void OnRep_SelectedReward(); // Function FSD.EventRewardDispenser.OnRep_SelectedReward
	void OnRep_PoweredUp(); // Function FSD.EventRewardDispenser.OnRep_PoweredUp
	void OnRep_PlayerId(); // Function FSD.EventRewardDispenser.OnRep_PlayerId
	void OnRep_IsActivated(); // Function FSD.EventRewardDispenser.OnRep_IsActivated
	void OnPoweredUp(); // Function FSD.EventRewardDispenser.OnPoweredUp
	void OnOwnerAssigned(); // Function FSD.EventRewardDispenser.OnOwnerAssigned
	void OnOpenDispenser(); // Function FSD.EventRewardDispenser.OnOpenDispenser
	bool IsOwningPlayer(struct APlayerCharacter* PlayerCharacter); // Function FSD.EventRewardDispenser.IsOwningPlayer
	struct APlayerCharacter* GetPlayerCharacter(); // Function FSD.EventRewardDispenser.GetPlayerCharacter
	struct AFSDPlayerState* GetPlayer(); // Function FSD.EventRewardDispenser.GetPlayer
};

// Class FSD.EventRewardType
// Size: 0xc8 (Inherited: 0x30)
struct UEventRewardType : UDataAsset {
	struct FText Title; // 0x30(0x18)
	struct TSoftObjectPtr<struct UTexture2D> IconFront; // 0x48(0x28)
	struct TSoftObjectPtr<struct UTexture2D> IconBack; // 0x70(0x28)
	struct FLinearColor IconFrontTint; // 0x98(0x10)
	struct FLinearColor IconBackTint; // 0xa8(0x10)
	struct FLinearColor BackgroundTint; // 0xb8(0x10)
};

// Class FSD.EventStarterButton
// Size: 0x248 (Inherited: 0x220)
struct AEventStarterButton : AActor {
	struct USceneComponent* Root; // 0x220(0x08)
	struct USingleUsableComponent* Usable; // 0x228(0x08)
	struct FMulticastInlineDelegate OnBootupEvent; // 0x230(0x10)
	char UnknownData_240[0x4]; // 0x240(0x04)
	bool Booted; // 0x244(0x01)
	bool IsOpenForUse; // 0x245(0x01)
	bool IsEventActive; // 0x246(0x01)
	char UnknownData_247[0x1]; // 0x247(0x01)

	void SetIsEventActive(bool IsEventActive); // Function FSD.EventStarterButton.SetIsEventActive
	void OnUseProgress(float Progress); // Function FSD.EventStarterButton.OnUseProgress
	void OnRep_OpenForUse(); // Function FSD.EventStarterButton.OnRep_OpenForUse
	void OnRep_Booted(); // Function FSD.EventStarterButton.OnRep_Booted
	void OnOpenedForUse(bool wasOpened); // Function FSD.EventStarterButton.OnOpenedForUse
	void OnBooted(); // Function FSD.EventStarterButton.OnBooted
	void CloseForUse(struct APlayerCharacter* User); // Function FSD.EventStarterButton.CloseForUse
	void BootUpEvent(); // Function FSD.EventStarterButton.BootUpEvent
};

// Class FSD.GameEventAnimInstance
// Size: 0x270 (Inherited: 0x270)
struct UGameEventAnimInstance : UAnimInstance {
	float StageProgress; // 0x268(0x04)
	bool IsEventActive; // 0x26c(0x01)
	bool AreEventStartersActive; // 0x26d(0x01)
	bool EventFailed; // 0x26e(0x01)
};

// Class FSD.EventStarterAnimInstance
// Size: 0x270 (Inherited: 0x270)
struct UEventStarterAnimInstance : UAnimInstance {
	float UseProgress; // 0x268(0x04)
	bool IsOpenForUse; // 0x26c(0x01)
	bool IsBooted; // 0x26d(0x01)
	bool IsEventActive; // 0x26e(0x01)
};

// Class FSD.CoreInfuserAnimInstance
// Size: 0x270 (Inherited: 0x270)
struct UCoreInfuserAnimInstance : UAnimInstance {
	bool PoweredUp; // 0x268(0x01)
	bool IsOpen; // 0x269(0x01)
	bool IsRewardSelected; // 0x26a(0x01)

	void OnRewardSelected(); // Function FSD.CoreInfuserAnimInstance.OnRewardSelected
};

// Class FSD.CoreInfuserPlatformAnimInstance
// Size: 0x270 (Inherited: 0x270)
struct UCoreInfuserPlatformAnimInstance : UAnimInstance {
	bool keyInserted; // 0x268(0x01)
	bool dispensRewards; // 0x269(0x01)
};

// Class FSD.EventParticipant
// Size: 0x28 (Inherited: 0x28)
struct UEventParticipant : UInterface {

	bool SetupEvent(struct AGameEvent* GameEvent); // Function FSD.EventParticipant.SetupEvent
	void OnEventTriggered(); // Function FSD.EventParticipant.OnEventTriggered
	void OnEventProgress(float Progress); // Function FSD.EventParticipant.OnEventProgress
	void OnEventOpened(); // Function FSD.EventParticipant.OnEventOpened
	void OnEventFinished(bool eventSuccess); // Function FSD.EventParticipant.OnEventFinished
	bool AdvanceOneObjective(); // Function FSD.EventParticipant.AdvanceOneObjective
	bool AddEventProgress(float Progress); // Function FSD.EventParticipant.AddEventProgress
};

// Class FSD.GameFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct UGameFunctionLibrary : UBlueprintFunctionLibrary {

	void SpawnOrUpdateAudio2D(struct UObject* WorldContext, struct UAudioComponent* AudioComponent, struct USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, struct FName FloatParamName, float FloatParam); // Function FSD.GameFunctionLibrary.SpawnOrUpdateAudio2D
	void SetUsePushToTalk(bool enable); // Function FSD.GameFunctionLibrary.SetUsePushToTalk
	void SetGlobalGravityZ(struct UObject* WorldContextObject, float GravityZ); // Function FSD.GameFunctionLibrary.SetGlobalGravityZ
	void SetGlobalGravityScale(struct UObject* WorldContextObject, float GravityScale); // Function FSD.GameFunctionLibrary.SetGlobalGravityScale
	bool IsWorldTickEnabled(struct UObject* WorldContextObject); // Function FSD.GameFunctionLibrary.IsWorldTickEnabled
	void IsTearingDown(struct UObject* caller, bool IsTearingDown); // Function FSD.GameFunctionLibrary.IsTearingDown
	bool IsPlayingOffline(struct UObject* WorldContextObject); // Function FSD.GameFunctionLibrary.IsPlayingOffline
	bool IsPlayInEditor(struct UObject* WorldContextObject); // Function FSD.GameFunctionLibrary.IsPlayInEditor
	struct UWindowManager* GetWindowManager(struct UObject* WorldContextObject); // Function FSD.GameFunctionLibrary.GetWindowManager
	bool GetUsePushToTalk(); // Function FSD.GameFunctionLibrary.GetUsePushToTalk
	struct UWindowWidget* GetTopWindow(struct UObject* WorldContextObject); // Function FSD.GameFunctionLibrary.GetTopWindow
	struct FString GetProjectVersion(); // Function FSD.GameFunctionLibrary.GetProjectVersion
	int32_t GetNumPlayers(struct UObject* WorldContext); // Function FSD.GameFunctionLibrary.GetNumPlayers
	int32_t GetNumAdditionalPlayers(struct UObject* WorldContext); // Function FSD.GameFunctionLibrary.GetNumAdditionalPlayers
	struct FString GetMajorProjectVersion(); // Function FSD.GameFunctionLibrary.GetMajorProjectVersion
	struct APlayerCharacter* GetLocalPlayerCharacter(struct UObject* WorldContext); // Function FSD.GameFunctionLibrary.GetLocalPlayerCharacter
	struct UGoogleAnalyticsWrapper* GetGoogleAnalyticsWrapper(struct UObject* WorldContextObject); // Function FSD.GameFunctionLibrary.GetGoogleAnalyticsWrapper
	float GetGlobalGravityZ(struct UObject* WorldContextObject); // Function FSD.GameFunctionLibrary.GetGlobalGravityZ
	struct AFSDGameModeSpaceRig* GetFSDSRGameMode(struct UObject* WorldContextObject); // Function FSD.GameFunctionLibrary.GetFSDSRGameMode
	struct UFSDSaveGame* GetFSDSaveGame(struct UObject* WorldContextObject); // Function FSD.GameFunctionLibrary.GetFSDSaveGame
	struct AFSDGameState* GetFSDGameState(struct UObject* WorldContextObject); // Function FSD.GameFunctionLibrary.GetFSDGameState
	struct AFSDGameMode* GetFSDGameMode(struct UObject* WorldContextObject); // Function FSD.GameFunctionLibrary.GetFSDGameMode
	struct UFSDGameInstance* GetFSDGameInstance(struct UObject* WorldContextObject); // Function FSD.GameFunctionLibrary.GetFSDGameInstance
	struct UGameData* GetFSDGameData(); // Function FSD.GameFunctionLibrary.GetFSDGameData
	struct UDiscordWrapper* GetDiscordWrapper(struct UObject* WorldContextObject); // Function FSD.GameFunctionLibrary.GetDiscordWrapper
	struct UDeepDiveManager* GetDeepDiveManager(struct UObject* WorldContextObject); // Function FSD.GameFunctionLibrary.GetDeepDiveManager
	struct ADeepCSGWorld* GetCSGWorld(struct UObject* WorldContextObject); // Function FSD.GameFunctionLibrary.GetCSGWorld
	struct UCommunityGoalWrapper* GetCommunityGoalWrapper(struct UObject* WorldContextObject); // Function FSD.GameFunctionLibrary.GetCommunityGoalWrapper
	int32_t GetChangelist(); // Function FSD.GameFunctionLibrary.GetChangelist
	struct UCampaignManager* GetCampaingManager(struct UObject* WorldContextObject); // Function FSD.GameFunctionLibrary.GetCampaingManager
	struct UAsyncManager* GetAsyncManager(struct UObject* WorldContextObject); // Function FSD.GameFunctionLibrary.GetAsyncManager
};

// Class FSD.ResourceBasedObjective
// Size: 0x150 (Inherited: 0x150)
struct UResourceBasedObjective : UObjective {
};

// Class FSD.GatherGemsObjective
// Size: 0x168 (Inherited: 0x150)
struct UGatherGemsObjective : UResourceBasedObjective {
	int32_t GemsRequired; // 0x150(0x04)
	float GemsSpawnedModifier; // 0x154(0x04)
	int32_t GemsCollected; // 0x158(0x04)
	char UnknownData_15C[0x4]; // 0x15c(0x04)
	struct UGemResourceData* GemResource; // 0x160(0x08)

	void OnResourceChanged(struct UCappedResource* CappedResource, float amount); // Function FSD.GatherGemsObjective.OnResourceChanged
	void OnRep_GemsCollected(int32_t prevAmount); // Function FSD.GatherGemsObjective.OnRep_GemsCollected
};

// Class FSD.GatheItemsObjective
// Size: 0x168 (Inherited: 0x150)
struct UGatheItemsObjective : UResourceBasedObjective {
	int32_t ItemsRequired; // 0x150(0x04)
	float ItemsSpawnedModifier; // 0x154(0x04)
	int32_t ItemsCollected; // 0x158(0x04)
	char UnknownData_15C[0x4]; // 0x15c(0x04)
	struct UCollectableResourceData* ItemResource; // 0x160(0x08)

	void OnResourceChanged(struct UCappedResource* CappedResource, float amount); // Function FSD.GatheItemsObjective.OnResourceChanged
	void OnRep_ItemsCollected(int32_t prevAmount); // Function FSD.GatheItemsObjective.OnRep_ItemsCollected
};

// Class FSD.Gem
// Size: 0x260 (Inherited: 0x248)
struct AGem : ACarriableItem {
	struct UCarriableInstantUsable* Usable; // 0x248(0x08)
	struct UResourceData* ResourceType; // 0x250(0x08)
	float ResourceAmount; // 0x258(0x04)
	bool hasBeenReleased; // 0x25c(0x01)
	char UnknownData_25D[0x3]; // 0x25d(0x03)

	void SetHasBeenReleased(bool hasBeenReleased); // Function FSD.Gem.SetHasBeenReleased
	bool GetHasBeenReleased(); // Function FSD.Gem.GetHasBeenReleased
};

// Class FSD.ResourcePouch
// Size: 0x270 (Inherited: 0x248)
struct AResourcePouch : ACarriableItem {
	struct UCarriableInstantUsable* Usable; // 0x248(0x08)
	struct USoundCue* ImpactGroundSound; // 0x250(0x08)
	char UnknownData_258[0x18]; // 0x258(0x18)

	void ActorWasHit(struct AActor* SelfActor, struct AActor* OtherActor, struct FVector NormalImpulse, struct FHitResult Hit); // Function FSD.ResourcePouch.ActorWasHit
};

// Class FSD.GemTracker
// Size: 0xb8 (Inherited: 0xb0)
struct UGemTracker : UActorComponent {
	struct FName TrackName; // 0xb0(0x08)
};

// Class FSD.GemProximityTracker
// Size: 0xd0 (Inherited: 0xb0)
struct UGemProximityTracker : UActorComponent {
	struct TArray<struct FWeakObjectPtr<struct UGemTracker>> Trackers; // 0xb0(0x10)
	struct TArray<struct FTrackPositionList> TrackerLists; // 0xc0(0x10)
};

// Class FSD.GemResourceData
// Size: 0x158 (Inherited: 0xf0)
struct UGemResourceData : UResourceData {
	struct UDebrisPositioning* DebrisPositioning; // 0xf0(0x08)
	bool CheckIfCompletelyCoveredByTerrain; // 0xf8(0x01)
	char UnknownData_F9[0x3]; // 0xf9(0x03)
	struct FIRandRange GemValue; // 0xfc(0x08)
	char UnknownData_104[0x4]; // 0x104(0x04)
	struct UGemResourceCreator* ResourceCreator; // 0x108(0x08)
	float InfluencerRange; // 0x110(0x04)
	char UnknownData_114[0x4]; // 0x114(0x04)
	struct TArray<struct TSoftObjectPtr<struct UDebrisBase>> Debris; // 0x118(0x10)
	struct TArray<SoftClassProperty> GemClasses; // 0x128(0x10)
	struct TArray<struct AGem*> GemClassesLoaded; // 0x138(0x10)
	struct TArray<struct UDebrisBase*> DebrisLoaded; // 0x148(0x10)

	int32_t GetCollectedGemsCreditValue(struct AFSDGameState* GameState); // Function FSD.GemResourceData.GetCollectedGemsCreditValue
	int32_t GetCollectedGemsAmount(struct AFSDGameState* GameState); // Function FSD.GemResourceData.GetCollectedGemsAmount
};

// Class FSD.GemResourceCreator
// Size: 0x40 (Inherited: 0x30)
struct UGemResourceCreator : UDataAsset {
	struct UGemResourceData* ResourceData; // 0x30(0x08)
	bool CheckIfFreeSpaceAbove; // 0x38(0x01)
	char UnknownData_39[0x3]; // 0x39(0x03)
	int32_t SearchSize; // 0x3c(0x04)
};

// Class FSD.RandomGemResourceCreator
// Size: 0x48 (Inherited: 0x40)
struct URandomGemResourceCreator : UGemResourceCreator {
	struct UCurveFloat* PlacementDistanceProbabilityCurve; // 0x40(0x08)
};

// Class FSD.DistributedGemResourceCreator
// Size: 0x48 (Inherited: 0x40)
struct UDistributedGemResourceCreator : UGemResourceCreator {
	struct UCurveFloat* PlacementDistanceProbabilityCurve; // 0x40(0x08)
};

// Class FSD.GeneratedMission
// Size: 0x118 (Inherited: 0x28)
struct UGeneratedMission : UObject {
	struct UBiome* Biome; // 0x28(0x08)
	int32_t Seed; // 0x30(0x04)
	int32_t GlobalSeed; // 0x34(0x04)
	struct UMissionTemplate* Template; // 0x38(0x08)
	struct FText MissionName; // 0x40(0x18)
	struct UObjective* PrimaryObjective; // 0x58(0x08)
	struct UObjective* SecondaryObjective; // 0x60(0x08)
	struct TMap<struct UMutator*, struct FGMMutatorItem> Mutators; // 0x68(0x50)
	struct TArray<struct UMissionWarning*> MissionWarnings; // 0xb8(0x10)
	struct UMissionMutator* MissionMutator; // 0xc8(0x08)
	struct UMissionComplexity* ComplexityLimit; // 0xd0(0x08)
	struct UMissionDuration* DurationLimit; // 0xd8(0x08)
	struct UMissionDNA* MissionDNA; // 0xe0(0x08)
	enum class EMissionStructure MissionStructure; // 0xe8(0x01)
	char UnknownData_E9[0x7]; // 0xe9(0x07)
	struct TSoftObjectPtr<struct ULevelSequence> LoaderLevelSequence; // 0xf0(0x28)

	void Recieve_SetupPLS(struct AProceduralSetup* pls); // Function FSD.GeneratedMission.Recieve_SetupPLS
	bool IsSingleMission(); // Function FSD.GeneratedMission.IsSingleMission
	bool IsLocked(struct AFSDPlayerController* Player); // Function FSD.GeneratedMission.IsLocked
	bool IsDeepDive(); // Function FSD.GeneratedMission.IsDeepDive
	struct AProceduralSetup* GetPLS(); // Function FSD.GeneratedMission.GetPLS
	struct TArray<struct UMutator*> GetMutators(struct UMutator* mutatorClass); // Function FSD.GeneratedMission.GetMutators
	float GetMissionScale(); // Function FSD.GeneratedMission.GetMissionScale
	struct UMissionDNA* GetMissionDNA(); // Function FSD.GeneratedMission.GetMissionDNA
	struct AProceduralSetup* CreatePLS(int32_t Seed); // Function FSD.GeneratedMission.CreatePLS
	bool AreMissionsEqual(struct UGeneratedMission* Other); // Function FSD.GeneratedMission.AreMissionsEqual
};

// Class FSD.RoomGenerationItem
// Size: 0x228 (Inherited: 0x228)
struct ARoomGenerationItem : AGenerationItem {
};

// Class FSD.GetFriendsListBlueprintCallProxy
// Size: 0x78 (Inherited: 0x30)
struct UGetFriendsListBlueprintCallProxy : UOnlineBlueprintCallProxyBase {
	struct FMulticastInlineDelegate OnSuccess; // 0x30(0x10)
	struct FMulticastInlineDelegate OnFailure; // 0x40(0x10)
	struct UObject* WorldContextObject; // 0x50(0x08)
	char UnknownData_58[0x20]; // 0x58(0x20)

	struct UGetFriendsListBlueprintCallProxy* GetFriendsList(struct UObject* WorldContextObject, struct FString ListName); // Function FSD.GetFriendsListBlueprintCallProxy.GetFriendsList
};

// Class FSD.GlobalMissionSetup
// Size: 0x110 (Inherited: 0x30)
struct UGlobalMissionSetup : UDataAsset {
	struct FIRandRange ExtraBiomes; // 0x30(0x08)
	struct FIRandRange AdditionalMissionsForExtraBiomes; // 0x38(0x08)
	struct FIRandRange MissionsPerZone; // 0x40(0x08)
	struct TArray<struct FMissionBiomeItem> Biomes; // 0x48(0x10)
	struct TArray<struct FMissionTemplateItem> AvailableMissions; // 0x58(0x10)
	struct UMissionNameBank* MissionNames; // 0x68(0x08)
	struct FIRandRange MutatorWarningCount; // 0x70(0x08)
	float DoubleWarningChance; // 0x78(0x04)
	char UnknownData_7C[0x4]; // 0x7c(0x04)
	struct TArray<struct UMissionMutator*> Mutators; // 0x80(0x10)
	struct TArray<struct UMissionWarning*> Warnings; // 0x90(0x10)
	struct TMap<struct UMissionWarning*, struct UMissionWarning*> IncompatibleWarnings; // 0xa0(0x50)
	struct TArray<struct UPlanetZone*> PlanetZones; // 0xf0(0x10)
	struct TArray<struct FRequiredMissionItem> GlobalRequiredMissions; // 0x100(0x10)
};

// Class FSD.GlowPlant
// Size: 0x290 (Inherited: 0x220)
struct AGlowPlant : AActor {
	struct UStaticMeshComponent* TrunkMesh; // 0x220(0x08)
	char UnknownData_228[0x20]; // 0x228(0x20)
	struct UPointLightComponent* MainLight; // 0x248(0x08)
	char UnknownData_250[0x4]; // 0x250(0x04)
	float IntensityBase; // 0x254(0x04)
	float RadiusBase; // 0x258(0x04)
	float IntensityPerPart; // 0x25c(0x04)
	float RadiusPerPart; // 0x260(0x04)
	float IntensityAllParts; // 0x264(0x04)
	float RadiusAllParts; // 0x268(0x04)
	float MaxIntensity; // 0x26c(0x04)
	float MinIntensity; // 0x270(0x04)
	float TimeOnMaxLight; // 0x274(0x04)
	float IntensityFadeInTime; // 0x278(0x04)
	float IntensityFadeOutTime; // 0x27c(0x04)
	float MaxEmissive; // 0x280(0x04)
	float MinEmissive; // 0x284(0x04)
	float EmissiveFadeInTime; // 0x288(0x04)
	float EmissiveFadeOutTime; // 0x28c(0x04)

	void OnDeath(); // Function FSD.GlowPlant.OnDeath
	void OnDamage(struct UPrimitiveComponent* hitSphere); // Function FSD.GlowPlant.OnDamage
};

// Class FSD.GoogleAnalyticsWrapper
// Size: 0x150 (Inherited: 0x28)
struct UGoogleAnalyticsWrapper : UObject {
	char UnknownData_28[0x8]; // 0x28(0x08)
	struct FString LastUnlockedWeapons; // 0x30(0x10)
	struct FString LastKnownClass; // 0x40(0x10)
	struct FString BoscoLoadOut; // 0x50(0x10)
	bool WasCampaign; // 0x60(0x01)
	char UnknownData_61[0x7]; // 0x61(0x07)
	struct FString LastCampaignName; // 0x68(0x10)
	int32_t LastCampaignProgress; // 0x78(0x04)
	bool WasLastCampaignMission; // 0x7c(0x01)
	char UnknownData_7D[0x3]; // 0x7d(0x03)
	int32_t LastCampaignSize; // 0x80(0x04)
	char UnknownData_84[0x4]; // 0x84(0x04)
	struct FString LastWeaponsLoadout; // 0x88(0x10)
	struct FString LastUpgradesLoadout; // 0x98(0x10)
	struct FString SchematicInformation; // 0xa8(0x10)
	struct FPartyAnalyticsInformation PartyInfo; // 0xb8(0x14)
	struct FDeepDiveAnalyticsInformation DeepDiveInfo; // 0xcc(0x0c)
	struct FString DiscordCommunityTrackingID; // 0xd8(0x10)
	struct FString CommunityGoalsTrackingID; // 0xe8(0x10)
	char UnknownData_F8[0x54]; // 0xf8(0x54)
	bool ShouldUpdateSchematicTrackingInformation; // 0x14c(0x01)
	char UnknownData_14D[0x3]; // 0x14d(0x03)

	void StartMissionPartyInfo(struct AFSDGameState* GameState); // Function FSD.GoogleAnalyticsWrapper.StartMissionPartyInfo
	void SetShouldUpdateSchematicInformation(); // Function FSD.GoogleAnalyticsWrapper.SetShouldUpdateSchematicInformation
	void ResetBoscoLoadout(); // Function FSD.GoogleAnalyticsWrapper.ResetBoscoLoadout
	void RecordTotalTimeHit(struct FString Key, struct FString Campaign, bool Rank, int32_t Time); // Function FSD.GoogleAnalyticsWrapper.RecordTotalTimeHit
	void RecordOpenScreen(struct FString Key, bool Rank); // Function FSD.GoogleAnalyticsWrapper.RecordOpenScreen
	void RecordMachineEventEnd(struct FString EventName, bool WasCompleted, float completionTime); // Function FSD.GoogleAnalyticsWrapper.RecordMachineEventEnd
	void RecordKickPlayer(struct FString reason, struct APlayerController* KickedPlayer); // Function FSD.GoogleAnalyticsWrapper.RecordKickPlayer
	void RecordGAUserTiming(struct FString TimingCategory, int32_t TimingValue, struct FString TimingName); // Function FSD.GoogleAnalyticsWrapper.RecordGAUserTiming
	void RecordGAMissionTotalTimeHit(struct FString Key, struct FString Campaign, bool Rank, int32_t totalTime, int32_t Progress, int32_t XP, int32_t Credits); // Function FSD.GoogleAnalyticsWrapper.RecordGAMissionTotalTimeHit
	void RecordGAMissionTimeEvent(int32_t Time); // Function FSD.GoogleAnalyticsWrapper.RecordGAMissionTimeEvent
	void RecordGAEvent(struct FString EventCategory, struct FString EventAction, struct FString EventLabel, int32_t EventValue, enum class EFSDGoogleAnalyticsProperties Property); // Function FSD.GoogleAnalyticsWrapper.RecordGAEvent
	void RecordGADeepDiveStageHit(struct FString Key, bool Rank, int32_t stageTime, int32_t timeSinceStartOfDive, int32_t totalTime, int32_t nitraLeft); // Function FSD.GoogleAnalyticsWrapper.RecordGADeepDiveStageHit
	void RecordExtraFailInfo(struct FString MissionName, struct FString Stage, struct FString ExtraText); // Function FSD.GoogleAnalyticsWrapper.RecordExtraFailInfo
	void RecordCustomGAEvent(struct FString EventCategory, struct FString EventAction, struct FString EventLabel, int32_t EventValue, struct FString TrackingId); // Function FSD.GoogleAnalyticsWrapper.RecordCustomGAEvent
	void RecordContinuousDamage(struct AActor* DamageCauser); // Function FSD.GoogleAnalyticsWrapper.RecordContinuousDamage
	void RecordBossFightEnd(struct FString BossName, bool WasBossKilled, int32_t BossKills); // Function FSD.GoogleAnalyticsWrapper.RecordBossFightEnd
	struct FString ProcessCampaignName(struct UObject* Campaign); // Function FSD.GoogleAnalyticsWrapper.ProcessCampaignName
	void PlayerLatejoin(); // Function FSD.GoogleAnalyticsWrapper.PlayerLatejoin
	void PlayerDropout(); // Function FSD.GoogleAnalyticsWrapper.PlayerDropout
	void OnPlayerLeaveBind(struct AFSDPlayerState* PlayerState); // Function FSD.GoogleAnalyticsWrapper.OnPlayerLeaveBind
	void OnPlayerJoinBind(struct AFSDPlayerState* PlayerState); // Function FSD.GoogleAnalyticsWrapper.OnPlayerJoinBind
	void HandleMatchStarted(); // Function FSD.GoogleAnalyticsWrapper.HandleMatchStarted
	struct FString GetAnalyticsFText(struct FText Text); // Function FSD.GoogleAnalyticsWrapper.GetAnalyticsFText
	void EndMissionPartyInfo(); // Function FSD.GoogleAnalyticsWrapper.EndMissionPartyInfo
};

// Class FSD.GrabbedStateComponent
// Size: 0x118 (Inherited: 0xf8)
struct UGrabbedStateComponent : UCharacterStateComponent {
	char UnknownData_F8[0xc]; // 0xf8(0x0c)
	struct FWeakObjectPtr<struct UGrabberComponent> CurrentGrabber; // 0x104(0x08)
	char UnknownData_10C[0xc]; // 0x10c(0x0c)

	void OnRep_Grabber(); // Function FSD.GrabbedStateComponent.OnRep_Grabber
};

// Class FSD.FlyingLifter
// Size: 0x538 (Inherited: 0x478)
struct AFlyingLifter : AAFlyingBug {
	struct UGrabberComponent* GrabberComp; // 0x478(0x08)
	struct UCapsuleComponent* GrabCapsule; // 0x480(0x08)
	struct UAudioComponent* GrabStart; // 0x488(0x08)
	struct UAudioComponent* GrabEnd; // 0x490(0x08)
	struct UAudioComponent* GrabbedIdleLoop; // 0x498(0x08)
	struct UInDangerComponent* InDanger; // 0x4a0(0x08)
	struct UAudioComponent* ScreamComponent; // 0x4a8(0x08)
	char UnknownData_4B0[0x8]; // 0x4b0(0x08)
	struct FMulticastInlineDelegate OnGrabSuccess; // 0x4b8(0x10)
	float PreventGrabAfterSpawn; // 0x4c8(0x04)
	char UnknownData_4CC[0x5]; // 0x4cc(0x05)
	bool ShouldScream; // 0x4d1(0x01)
	enum class EGrabberState GrabberState; // 0x4d2(0x01)
	char UnknownData_4D3[0x1]; // 0x4d3(0x01)
	float WanderingSpeed; // 0x4d4(0x04)
	float WanderingAcceleration; // 0x4d8(0x04)
	float ChaseSpeed; // 0x4dc(0x04)
	float ChaseAcceleration; // 0x4e0(0x04)
	float CarrySpeed; // 0x4e4(0x04)
	float CarryAcceleration; // 0x4e8(0x04)
	float FleeSpeed; // 0x4ec(0x04)
	float FleeAcceleration; // 0x4f0(0x04)
	char UnknownData_4F4[0x4]; // 0x4f4(0x04)
	float CarryCooldown; // 0x4f8(0x04)
	char UnknownData_4FC[0x4]; // 0x4fc(0x04)
	struct USoundBase* ScreamSound; // 0x500(0x08)
	struct USoundBase* FleeSound; // 0x508(0x08)
	struct UAnimSequenceBase* FleeAnimation; // 0x510(0x08)
	struct UCapsuleComponent* GrabberCollider; // 0x518(0x08)
	bool ParalyzeOnGrab; // 0x520(0x01)
	char UnknownData_521[0x3]; // 0x521(0x03)
	float ExtraUpForce; // 0x524(0x04)
	float ScreamDistance; // 0x528(0x04)
	char UnknownData_52C[0x4]; // 0x52c(0x04)
	struct UPointLightComponent* GrabLight; // 0x530(0x08)

	void SetLight(struct UPointLightComponent* ALight); // Function FSD.FlyingLifter.SetLight
	bool SelectAnotherTarget(); // Function FSD.FlyingLifter.SelectAnotherTarget
	void OnStateBroke(struct AActor* aReleasedPlayer); // Function FSD.FlyingLifter.OnStateBroke
	void OnRep_State(); // Function FSD.FlyingLifter.OnRep_State
	void OnRep_ShouldScream(); // Function FSD.FlyingLifter.OnRep_ShouldScream
	void OnInDanger(); // Function FSD.FlyingLifter.OnInDanger
	void OnActorLeftGrabZone(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function FSD.FlyingLifter.OnActorLeftGrabZone
	void OnActorEnterGrabZone(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult SweepResult); // Function FSD.FlyingLifter.OnActorEnterGrabZone
	bool GetJustGrabbed(); // Function FSD.FlyingLifter.GetJustGrabbed
	void DropTarget(); // Function FSD.FlyingLifter.DropTarget
	void ChangeState(enum class EGrabberState aGrabberState); // Function FSD.FlyingLifter.ChangeState
};

// Class FSD.FlyingLifterAnimInstance
// Size: 0x2f0 (Inherited: 0x2f0)
struct UFlyingLifterAnimInstance : USimpleMovingEnemyAnimInstance {
	bool HasGrabbedPlayer; // 0x2e8(0x01)
	bool ToChaseLock; // 0x2e9(0x01)
	bool ChaseToWanderLock; // 0x2ea(0x01)
	bool ToCarryLock; // 0x2eb(0x01)
	enum class EGrabberState GrabberState; // 0x2ec(0x01)
};

// Class FSD.GrabberComponent
// Size: 0x168 (Inherited: 0xb0)
struct UGrabberComponent : UActorComponent {
	struct FMulticastInlineDelegate OnGrabbedActor; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnReleasedActor; // 0xc0(0x10)
	char UnknownData_D0[0x18]; // 0xd0(0x18)
	struct FWeakObjectPtr<struct AActor> GrabbedActor; // 0xe8(0x08)
	struct FWeakObjectPtr<struct ADeepPathfinderCharacter> PathfinderOwner; // 0xf0(0x08)
	struct FWeakObjectPtr<struct USkeletalMeshComponent> OwnerMesh; // 0xf8(0x08)
	struct TArray<struct UPrimitiveComponent*> TargetClippingWith; // 0x100(0x10)
	struct USoundCue* BeginGrabedSound; // 0x110(0x08)
	struct USoundCue* GrabedLoopSound; // 0x118(0x08)
	struct USoundCue* EndGrabedSound; // 0x120(0x08)
	struct UDialogDataAsset* BeginGrabbedShout; // 0x128(0x08)
	struct UDialogDataAsset* EndGrabbedShout; // 0x130(0x08)
	struct UDialogDataAsset* AttentionGrabbedShout; // 0x138(0x08)
	struct AActor* CurrentlyGrabbed; // 0x140(0x08)
	enum class EUseRestriction UseRestriction; // 0x148(0x01)
	char UnknownData_149[0x3]; // 0x149(0x03)
	struct FName GrabAttachName; // 0x14c(0x08)
	float GrabTime; // 0x154(0x04)
	float CarryCooldown; // 0x158(0x04)
	enum class EOutline PlayerOutlineOnGrab; // 0x15c(0x01)
	enum class EGrabbedStateCameraMode CameraMode; // 0x15d(0x01)
	bool TrackPlayerCollision; // 0x15e(0x01)
	bool ManualGrabTime; // 0x15f(0x01)
	bool CanPlayerShoot; // 0x160(0x01)
	char UnknownData_161[0x2]; // 0x161(0x02)
	bool NeedsPathToTarget; // 0x163(0x01)
	char UnknownData_164[0x4]; // 0x164(0x04)

	void SetPlayerReleased(); // Function FSD.GrabberComponent.SetPlayerReleased
	bool SetPlayerGrabbed(); // Function FSD.GrabberComponent.SetPlayerGrabbed
	void ReleaseTarget(); // Function FSD.GrabberComponent.ReleaseTarget
	void OnRep_CurrentlyGrabbed(); // Function FSD.GrabberComponent.OnRep_CurrentlyGrabbed
	void OnPrimWake(struct UPrimitiveComponent* WakingComponent, struct FName BoneName); // Function FSD.GrabberComponent.OnPrimWake
	void OnParentDestroyed(struct AActor* Actor); // Function FSD.GrabberComponent.OnParentDestroyed
	bool IsGrabbedTargetValid(); // Function FSD.GrabberComponent.IsGrabbedTargetValid
	bool HasGrabbed(); // Function FSD.GrabberComponent.HasGrabbed
	bool GrabTarget(struct AActor* aGrabTarget); // Function FSD.GrabberComponent.GrabTarget
	bool CanGrabTarget(struct AActor* aTarget); // Function FSD.GrabberComponent.CanGrabTarget
};

// Class FSD.FakePhysGrabberComponent
// Size: 0x190 (Inherited: 0x168)
struct UFakePhysGrabberComponent : UGrabberComponent {
	struct TArray<struct FGrabAvoidClassEntry> ActorTypesToAvoid; // 0x168(0x10)
	char UnknownData_178[0x8]; // 0x178(0x08)
	struct TArray<struct FAvoidActorEntry> ActorsToAvoid; // 0x180(0x10)
};

// Class FSD.GrapplingHookGun
// Size: 0x3b8 (Inherited: 0x368)
struct AGrapplingHookGun : AAnimatedItem {
	char UnknownData_368[0x8]; // 0x368(0x08)
	struct UCoolDownItemAggregator* CoolDownAggregator; // 0x370(0x08)
	bool AutoFire; // 0x378(0x01)
	char UnknownData_379[0x3]; // 0x379(0x03)
	float MaxDistance; // 0x37c(0x04)
	struct UAnimMontage* FPReloadAnim; // 0x380(0x08)
	struct UAnimMontage* TPReloadAnim; // 0x388(0x08)
	struct UAnimMontage* FPGunslingAnim; // 0x390(0x08)
	struct UAnimMontage* TPGunslingAnim; // 0x398(0x08)
	char UnknownData_3A0[0x10]; // 0x3a0(0x10)
	float MaxSpeed; // 0x3b0(0x04)
	float WindUpTime; // 0x3b4(0x04)

	void OnReleaseHook(); // Function FSD.GrapplingHookGun.OnReleaseHook
	float GetCooldownDuration(struct AGrapplingHookGun* GrapplingHookGun); // Function FSD.GrapplingHookGun.GetCooldownDuration
};

// Class FSD.GravityChangedComponent
// Size: 0xc8 (Inherited: 0xb0)
struct UGravityChangedComponent : UActorComponent {
	bool bAwakeOnGravityChanged; // 0xb0(0x01)
	char UnknownData_B1[0x7]; // 0xb1(0x07)
	struct TArray<struct UPrimitiveComponent*> PrimitiveComponents; // 0xb8(0x10)

	void OnGravityChanged(float Gravity, float Change); // Function FSD.GravityChangedComponent.OnGravityChanged
};

// Class FSD.GrenadeAnimationSet
// Size: 0x50 (Inherited: 0x30)
struct UGrenadeAnimationSet : UDataAsset {
	struct UAnimMontage* FP_EquipAnimation; // 0x30(0x08)
	struct UAnimMontage* TP_EquipAnimation; // 0x38(0x08)
	struct UAnimMontage* FP_ThrowAnimation; // 0x40(0x08)
	struct UAnimMontage* TP_ThrowAnimation; // 0x48(0x08)
};

// Class FSD.Grenade
// Size: 0x2a8 (Inherited: 0x220)
struct AGrenade : AActor {
	char UnknownData_220[0x18]; // 0x220(0x18)
	struct UProjectileMovementComponent* Movement; // 0x238(0x08)
	float Duration; // 0x240(0x04)
	float ExplosionDelay; // 0x244(0x04)
	bool ExplodeOnImpact; // 0x248(0x01)
	char UnknownData_249[0x3]; // 0x249(0x03)
	int32_t MaxGrenades; // 0x24c(0x04)
	bool HasExploded; // 0x250(0x01)
	bool EnableDangerousSaveGameIDEditing; // 0x251(0x01)
	char UnknownData_252[0x2]; // 0x252(0x02)
	struct FGuid SavegameID; // 0x254(0x10)
	char UnknownData_264[0x4]; // 0x264(0x04)
	struct UItemID* ItemID; // 0x268(0x08)
	struct AActor* WeaponPreviewClass; // 0x270(0x08)
	struct ALoadoutItemProxy* LoadoutProxy; // 0x278(0x08)
	struct UStaticMesh* HandAttachMesh; // 0x280(0x08)
	struct USoundCue* ImpactGroundSound; // 0x288(0x08)
	struct UParticleSystem* ImpactGroundParticles; // 0x290(0x08)
	struct UGrenadeAnimationSet* GrenadeAnimationSetOverride; // 0x298(0x08)
	char UnknownData_2A0[0x8]; // 0x2a0(0x08)

	void OnRep_HasExploded(); // Function FSD.Grenade.OnRep_HasExploded
	void OnExploded(); // Function FSD.Grenade.OnExploded
	bool IsNonFriendlyPawn(struct AActor* Actor); // Function FSD.Grenade.IsNonFriendlyPawn
	bool IsNonFriendly(struct AActor* Actor); // Function FSD.Grenade.IsNonFriendly
	struct AActor* GetWeaponViewClass(); // Function FSD.Grenade.GetWeaponViewClass
	struct AGrenade* GetGrenadeDefaultObject(struct AGrenade* GrenadeClass); // Function FSD.Grenade.GetGrenadeDefaultObject
	void ActorWasHit(struct AActor* SelfActor, struct AActor* OtherActor, struct FVector NormalImpulse, struct FHitResult Hit); // Function FSD.Grenade.ActorWasHit
};

// Class FSD.MolotovComponent
// Size: 0xc8 (Inherited: 0xb0)
struct UMolotovComponent : UActorComponent {
	struct UDebrisPositioning* Positioning; // 0xb0(0x08)
	struct AActor* BurningFlamesClass; // 0xb8(0x08)
	float Radius; // 0xc0(0x04)
	char UnknownData_C4[0x4]; // 0xc4(0x04)

	void Trigger(); // Function FSD.MolotovComponent.Trigger
};

// Class FSD.AreaSpawnerComponent
// Size: 0xc0 (Inherited: 0xb0)
struct UAreaSpawnerComponent : UActorComponent {
	struct AActor* ActorToSpawn; // 0xb0(0x08)
	enum class DeepPathFinderSize PathfinderSize; // 0xb8(0x01)
	char UnknownData_B9[0x3]; // 0xb9(0x03)
	float ChanceToSpawn; // 0xbc(0x04)

	void SpawnInArea(struct FVector Origin, float Radius, float maxVerticalDistance, struct APawn* Instigator); // Function FSD.AreaSpawnerComponent.SpawnInArea
};

// Class FSD.HugeExplosionComponent
// Size: 0xd8 (Inherited: 0xb0)
struct UHugeExplosionComponent : UActorComponent {
	struct UParticleSystem* ExplosionEffect; // 0xb0(0x08)
	float ExplosionSpeed; // 0xb8(0x04)
	float ExplosionSize; // 0xbc(0x04)
	char UnknownData_C0[0x18]; // 0xc0(0x18)

	void TriggerExplosion(struct FVector Location); // Function FSD.HugeExplosionComponent.TriggerExplosion
};

// Class FSD.GroundLeechEnemy
// Size: 0x3a0 (Inherited: 0x338)
struct AGroundLeechEnemy : AEnemyPawn {
	struct FMulticastInlineDelegate OnTargetChanged; // 0x338(0x10)
	struct FMulticastInlineDelegate OnStateChanged; // 0x348(0x10)
	float MaxAttackDistance; // 0x358(0x04)
	float TrackingSpeed; // 0x35c(0x04)
	float PullingSpeed; // 0x360(0x04)
	float RetractingSpeed; // 0x364(0x04)
	struct USplineMeshComponent* TentacleSpline; // 0x368(0x08)
	enum class EGroundLeechState State; // 0x370(0x01)
	char UnknownData_371[0x3]; // 0x371(0x03)
	struct FWeakObjectPtr<struct AActor> Target; // 0x374(0x08)
	struct FWeakObjectPtr<struct UHealthComponent> TargetHealth; // 0x37c(0x08)
	struct FVector_NetQuantize TentacleLocation; // 0x384(0x0c)
	struct FVector_NetQuantize TentacleVelocity; // 0x390(0x0c)
	float StateTime; // 0x39c(0x04)

	void ReceiveMoved(); // Function FSD.GroundLeechEnemy.ReceiveMoved
	void OnRep_Target(); // Function FSD.GroundLeechEnemy.OnRep_Target
	void OnRep_State(); // Function FSD.GroundLeechEnemy.OnRep_State
	bool HasTarget(); // Function FSD.GroundLeechEnemy.HasTarget
	struct USplineMeshComponent* GetSplineComponent(); // Function FSD.GroundLeechEnemy.GetSplineComponent
	struct FVector GetMouthLocation(); // Function FSD.GroundLeechEnemy.GetMouthLocation
};

// Class FSD.GroundToAirComponent
// Size: 0x128 (Inherited: 0xb0)
struct UGroundToAirComponent : UActorComponent {
	struct FMulticastInlineDelegate OnChangedPathfinderState; // 0xb0(0x10)
	struct UDeepPathfinderMovement* CurrentMove; // 0xc0(0x08)
	float WalkTime; // 0xc8(0x04)
	float WalkTimeMaxRandomOffset; // 0xcc(0x04)
	float WalkTimeMinRandomOffset; // 0xd0(0x04)
	bool WalkUseTimer; // 0xd4(0x01)
	char UnknownData_D5[0x3]; // 0xd5(0x03)
	struct FStateStats WalkStats; // 0xd8(0x14)
	float FlyTime; // 0xec(0x04)
	float FlyTimeMaxRandomOffset; // 0xf0(0x04)
	float FlyTimeMinRandomOffset; // 0xf4(0x04)
	bool FlyUseTimer; // 0xf8(0x01)
	char UnknownData_F9[0x3]; // 0xf9(0x03)
	struct FStateStats FlyStats; // 0xfc(0x14)
	bool IsFlying; // 0x110(0x01)
	char UnknownData_111[0x3]; // 0x111(0x03)
	struct FWeakObjectPtr<struct ADeepPathfinderCharacter> OwningPathfinder; // 0x114(0x08)
	char UnknownData_11C[0xc]; // 0x11c(0x0c)

	void SetIsFlying(bool aIsFlying); // Function FSD.GroundToAirComponent.SetIsFlying
	void SetAllowedToChangeState(bool aIsAllowed); // Function FSD.GroundToAirComponent.SetAllowedToChangeState
	void OnRep_StateChange(); // Function FSD.GroundToAirComponent.OnRep_StateChange
	bool GetIsWalking(); // Function FSD.GroundToAirComponent.GetIsWalking
	bool GetIsFlying(); // Function FSD.GroundToAirComponent.GetIsFlying
	void Engage(); // Function FSD.GroundToAirComponent.Engage
};

// Class FSD.GrowthComponent
// Size: 0x148 (Inherited: 0xb0)
struct UGrowthComponent : UActorComponent {
	struct USceneComponent* ScaleComponent; // 0xb0(0x08)
	struct FRuntimeFloatCurve CurrentGrowthCurve; // 0xb8(0x88)
	char UnknownData_140[0x8]; // 0x140(0x08)

	void StopGrow(); // Function FSD.GrowthComponent.StopGrow
	void StartGrow(struct USceneComponent* aComponentToScale, struct FRuntimeFloatCurve aCurve); // Function FSD.GrowthComponent.StartGrow
};

// Class FSD.GuntowerActivationPlatform
// Size: 0x290 (Inherited: 0x220)
struct AGuntowerActivationPlatform : AActor {
	struct USceneComponent* Root; // 0x220(0x08)
	struct USkeletalMeshComponent* SKMesh; // 0x228(0x08)
	struct UCapsuleComponent* Trigger; // 0x230(0x08)
	struct FMulticastInlineDelegate OnProgressUpdatedDelegate; // 0x238(0x10)
	struct FMulticastInlineDelegate OnPlayersInsideChangedDelegate; // 0x248(0x10)
	struct FMulticastInlineDelegate OnProgressFilled; // 0x258(0x10)
	char UnknownData_268[0x8]; // 0x268(0x08)
	struct AGuntowerModule* AssignedModule; // 0x270(0x08)
	float DoneAt; // 0x278(0x04)
	char UnknownData_27C[0x4]; // 0x27c(0x04)
	float DisabledTime; // 0x280(0x04)
	int32_t PlayersInside; // 0x284(0x04)
	bool Disabled; // 0x288(0x01)
	bool IsShutDown; // 0x289(0x01)
	char UnknownData_28A[0x6]; // 0x28a(0x06)

	void ShutDown(); // Function FSD.GuntowerActivationPlatform.ShutDown
	void SetPlatformActive(bool IsActive); // Function FSD.GuntowerActivationPlatform.SetPlatformActive
	void ReEnable(); // Function FSD.GuntowerActivationPlatform.ReEnable
	void OnShutDown(); // Function FSD.GuntowerActivationPlatform.OnShutDown
	void OnRep_PlayersInside(); // Function FSD.GuntowerActivationPlatform.OnRep_PlayersInside
	void OnRep_IsShutDown(); // Function FSD.GuntowerActivationPlatform.OnRep_IsShutDown
	void OnRep_Disabled(); // Function FSD.GuntowerActivationPlatform.OnRep_Disabled
	void OnPlayersInsideChanged(int32_t PlayersInside); // Function FSD.GuntowerActivationPlatform.OnPlayersInsideChanged
	void OnOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult SweepResult); // Function FSD.GuntowerActivationPlatform.OnOverlap
	void OnFinished(); // Function FSD.GuntowerActivationPlatform.OnFinished
	void OnDisabledChanged(bool IsDisabled); // Function FSD.GuntowerActivationPlatform.OnDisabledChanged
	void ModuleDestroyed(struct UHealthComponentBase* Health); // Function FSD.GuntowerActivationPlatform.ModuleDestroyed
	struct AGuntowerModule* GetAssignedModule(); // Function FSD.GuntowerActivationPlatform.GetAssignedModule
	void EndOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function FSD.GuntowerActivationPlatform.EndOverlap
	bool CanWidgetAppear(); // Function FSD.GuntowerActivationPlatform.CanWidgetAppear
	void AssignModule(struct AGuntowerModule* towerModule); // Function FSD.GuntowerActivationPlatform.AssignModule
};

// Class FSD.GuntowerEvent
// Size: 0x390 (Inherited: 0x358)
struct AGuntowerEvent : AGameEvent {
	struct UDamageComponent* EndExplosionDamage; // 0x358(0x08)
	char UnknownData_360[0x10]; // 0x360(0x10)
	float TowerExplodeDelay; // 0x370(0x04)
	float DelayBetweenExplosions; // 0x374(0x04)
	struct TArray<struct AGuntowerModule*> TowerModules; // 0x378(0x10)
	int32_t ActiveHostileModules; // 0x388(0x04)
	char UnknownData_38C[0x4]; // 0x38c(0x04)

	void OnRep_ModuleActive(); // Function FSD.GuntowerEvent.OnRep_ModuleActive
	void OnModuleExploded(struct AGuntowerModule* explodedModule); // Function FSD.GuntowerEvent.OnModuleExploded
};

// Class FSD.GuntowerModule
// Size: 0x3b8 (Inherited: 0x2e8)
struct AGuntowerModule : AFSDPawn {
	char UnknownData_2E8[0x8]; // 0x2e8(0x08)
	struct USoundCue* ExposeWeakpointSound; // 0x2f0(0x08)
	struct USoundCue* deathSound; // 0x2f8(0x08)
	struct UParticleSystem* deathParticles; // 0x300(0x08)
	struct TArray<struct AActor*> WeakpointActors; // 0x308(0x10)
	struct FName BodyBone; // 0x318(0x08)
	struct FName TopConnectionPointName; // 0x320(0x08)
	struct FRotator CurrentTurretRotation; // 0x328(0x0c)
	char UnknownData_334[0x4]; // 0x334(0x04)
	struct UAnimSequenceBase* IntroductionAnimation; // 0x338(0x08)
	struct UStaticMeshComponent* ArmorPiece1; // 0x340(0x08)
	struct UStaticMeshComponent* ArmorPiece2; // 0x348(0x08)
	struct UStaticMeshComponent* ArmorPiece3; // 0x350(0x08)
	struct USkeletalMeshComponent* ModuleMesh; // 0x358(0x08)
	struct UGunTowerHealthComponent* GuntowerModuleHealth; // 0x360(0x08)
	struct TArray<struct AGuntowerModule*> PossibleChildModules; // 0x368(0x10)
	struct AGuntowerEvent* OwningEvent; // 0x378(0x08)
	struct AGuntowerModule* ChildModule; // 0x380(0x08)
	float WeakpointsExposedTime; // 0x388(0x04)
	float WeakpointsExposedTimeSolo; // 0x38c(0x04)
	char UnknownData_390[0x4]; // 0x390(0x04)
	float HideArmorTime; // 0x394(0x04)
	float ArmorShootoutDelay; // 0x398(0x04)
	float ArmorLaunchPower; // 0x39c(0x04)
	int32_t ModuleID; // 0x3a0(0x04)
	char UnknownData_3A4[0x4]; // 0x3a4(0x04)
	bool IsPassiveModule; // 0x3a8(0x01)
	bool ModuleIsActive; // 0x3a9(0x01)
	bool AreWeakpointsExposed; // 0x3aa(0x01)
	bool AreWeaponsExposed; // 0x3ab(0x01)
	bool ConstantRotation; // 0x3ac(0x01)
	bool IsArmorOff; // 0x3ad(0x01)
	bool Exploded; // 0x3ae(0x01)
	char UnknownData_3AF[0x9]; // 0x3af(0x09)

	void SpawnNewChildModule(int32_t modulesLeftToSpawn, struct TArray<struct AGuntowerActivationPlatform*> activationPlatforms); // Function FSD.GuntowerModule.SpawnNewChildModule
	void ShootOutArmor(); // Function FSD.GuntowerModule.ShootOutArmor
	void SetModuleActive(); // Function FSD.GuntowerModule.SetModuleActive
	void OnTearArmor(); // Function FSD.GuntowerModule.OnTearArmor
	void OnRep_IsModuleActive(); // Function FSD.GuntowerModule.OnRep_IsModuleActive
	void OnRep_IsArmorOff(); // Function FSD.GuntowerModule.OnRep_IsArmorOff
	void OnRep_Exploded(); // Function FSD.GuntowerModule.OnRep_Exploded
	void OnRep_AreWeakpointExposed(); // Function FSD.GuntowerModule.OnRep_AreWeakpointExposed
	void OnActivationChanged(bool IsActivated); // Function FSD.GuntowerModule.OnActivationChanged
	void Introduce(); // Function FSD.GuntowerModule.Introduce
	void HideWeakpoints(); // Function FSD.GuntowerModule.HideWeakpoints
	void HideArmor(); // Function FSD.GuntowerModule.HideArmor
	int32_t GetModuleID(); // Function FSD.GuntowerModule.GetModuleID
	void DoExplosion(); // Function FSD.GuntowerModule.DoExplosion
	void DeactivateTowerModule(); // Function FSD.GuntowerModule.DeactivateTowerModule
	void All_PlayIntroductionAnim(); // Function FSD.GuntowerModule.All_PlayIntroductionAnim
	void ActivateTowerModule(); // Function FSD.GuntowerModule.ActivateTowerModule
};

// Class FSD.HostileGuntowerModule
// Size: 0x3e8 (Inherited: 0x3b8)
struct AHostileGuntowerModule : AGuntowerModule {
	char UnknownData_3B8[0x8]; // 0x3b8(0x08)
	struct USkeletalMeshComponent* DestroyedMesh; // 0x3c0(0x08)
	struct UParticleSystemComponent* DestroyedSmoke; // 0x3c8(0x08)
	struct UEnemyComponent* EnemyComponent; // 0x3d0(0x08)
	float ModuleMaxHealth; // 0x3d8(0x04)
	struct FRotator CurrentAimRotation; // 0x3dc(0x0c)

	void OnWeakpointDied(struct UHealthComponentBase* Health); // Function FSD.HostileGuntowerModule.OnWeakpointDied
	void OnRep_ModuleMaxHealth(); // Function FSD.HostileGuntowerModule.OnRep_ModuleMaxHealth
	void OnModuleDied(struct UHealthComponentBase* Health); // Function FSD.HostileGuntowerModule.OnModuleDied
};

// Class FSD.HostileTargetingGuntowerModule
// Size: 0x428 (Inherited: 0x3e8)
struct AHostileTargetingGuntowerModule : AHostileGuntowerModule {
	struct TArray<struct AActor*> SensedTargets; // 0x3e8(0x10)
	char UnknownData_3F8[0xc]; // 0x3f8(0x0c)
	float TurretRotationSpeed; // 0x404(0x04)
	struct AActor* TargetedActor; // 0x408(0x08)
	float TargetingRotationSpeed; // 0x410(0x04)
	struct FName TargetingFromBone; // 0x414(0x08)
	float TimeUntilForgetTarget; // 0x41c(0x04)
	char UnknownData_420[0x4]; // 0x420(0x04)
	bool AlwaysUpdateAimRotation; // 0x424(0x01)
	char UnknownData_425[0x3]; // 0x425(0x03)

	void OnPerceptionUpdated(struct AActor* sensedActor, struct FAIStimulus Stimulus); // Function FSD.HostileTargetingGuntowerModule.OnPerceptionUpdated
};

// Class FSD.LMGGuntoweModule
// Size: 0x4b0 (Inherited: 0x428)
struct ALMGGuntoweModule : AHostileTargetingGuntowerModule {
	struct UHitscanComponent* HitScanComp; // 0x428(0x08)
	struct UDamageComponent* DamageComp; // 0x430(0x08)
	struct USceneComponent* AimAtWhenNoTarget; // 0x438(0x08)
	struct UAudioComponent* FireAudio; // 0x440(0x08)
	char UnknownData_448[0x10]; // 0x448(0x10)
	struct UParticleSystem* TracerEffect; // 0x458(0x08)
	struct UParticleSystem* MuzzleEffect; // 0x460(0x08)
	struct USoundCue* ShootTailSound; // 0x468(0x08)
	char UnknownData_470[0x8]; // 0x470(0x08)
	int32_t BurstSize; // 0x478(0x04)
	char UnknownData_47C[0xc]; // 0x47c(0x0c)
	float MaxAimOffset; // 0x488(0x04)
	float IdleAimRotationSpeed; // 0x48c(0x04)
	char UnknownData_490[0x10]; // 0x490(0x10)
	float TimeBetweenShots; // 0x4a0(0x04)
	float TimeBetweenBursts; // 0x4a4(0x04)
	float AimSpeed; // 0x4a8(0x04)
	char UnknownData_4AC[0x1]; // 0x4ac(0x01)
	bool IsFiresoundPlaying; // 0x4ad(0x01)
	char UnknownData_4AE[0x2]; // 0x4ae(0x02)

	void ShowShot(struct FVector Location); // Function FSD.LMGGuntoweModule.ShowShot
	void OnRep_IsFiresoundPlaying(); // Function FSD.LMGGuntoweModule.OnRep_IsFiresoundPlaying
};

// Class FSD.RandomFiringGuntowerModule
// Size: 0x568 (Inherited: 0x3e8)
struct ARandomFiringGuntowerModule : AHostileGuntowerModule {
	struct UStaticMeshComponent* LaserFrontTop; // 0x3e8(0x08)
	struct UStaticMeshComponent* LaserFrontBottom; // 0x3f0(0x08)
	struct UStaticMeshComponent* LaserBackTop; // 0x3f8(0x08)
	struct UStaticMeshComponent* LaserBackBottom; // 0x400(0x08)
	struct UParticleSystemComponent* FrontTopLaserMuzzle; // 0x408(0x08)
	struct UParticleSystemComponent* FrontBottomLaserMuzzle; // 0x410(0x08)
	struct UParticleSystemComponent* BackTopLaserMuzzle; // 0x418(0x08)
	struct UParticleSystemComponent* BackBottomLaserMuzzle; // 0x420(0x08)
	char UnknownData_428[0xc4]; // 0x428(0xc4)
	struct FRotator OtherCurrentRotation; // 0x4ec(0x0c)
	char UnknownData_4F8[0x10]; // 0x4f8(0x10)
	struct UParticleSystem* LaserImpact; // 0x508(0x08)
	struct UAudioComponent* LaserSound; // 0x510(0x08)
	struct UDamageComponent* Damage; // 0x518(0x08)
	float BoneSpaceTurretMaxYaw; // 0x520(0x04)
	float BoneSpaceTurretMaxPitch; // 0x524(0x04)
	float TimeBetweenAttacks; // 0x528(0x04)
	float TimeUntilNextAttack; // 0x52c(0x04)
	float ModuleRotationSpeed; // 0x530(0x04)
	float TurretAimSpeed; // 0x534(0x04)
	float LaserLeghtRatio; // 0x538(0x04)
	float TimeBetweenHits; // 0x53c(0x04)
	char UnknownData_540[0x4]; // 0x540(0x04)
	float ChanceToInvert; // 0x544(0x04)
	float PlatformDissolveRadius; // 0x548(0x04)
	float PlatformDissolveSqueeze; // 0x54c(0x04)
	char UnknownData_550[0x10]; // 0x550(0x10)
	bool IsAttacking; // 0x560(0x01)
	char UnknownData_561[0x7]; // 0x561(0x07)
};

// Class FSD.RadialFireModule
// Size: 0x430 (Inherited: 0x3e8)
struct ARadialFireModule : AHostileGuntowerModule {
	struct AProjectile* projectileClass; // 0x3e8(0x08)
	struct FRotator AttackEndRotation; // 0x3f0(0x0c)
	float RotationSpeedTurret; // 0x3fc(0x04)
	char UnknownData_400[0x4]; // 0x400(0x04)
	float DelayBetweenShots; // 0x404(0x04)
	char UnknownData_408[0x4]; // 0x408(0x04)
	bool IsAttacking; // 0x40c(0x01)
	char UnknownData_40D[0x3]; // 0x40d(0x03)
	struct FName LeftFireSocket; // 0x410(0x08)
	struct FName RightFireSocket; // 0x418(0x08)
	struct FName FrontFireSocket; // 0x420(0x08)
	struct FName BackFireSocket; // 0x428(0x08)

	void OnFire(); // Function FSD.RadialFireModule.OnFire
};

// Class FSD.HomingFireModule
// Size: 0x440 (Inherited: 0x428)
struct AHomingFireModule : AHostileTargetingGuntowerModule {
	struct FName ShootDroneSocket; // 0x428(0x08)
	struct AProjectile* HomingProjectileClass; // 0x430(0x08)
	float TimeBetweenShots; // 0x438(0x04)
	char UnknownData_43C[0x4]; // 0x43c(0x04)
};

// Class FSD.HomingDroneBomb
// Size: 0x340 (Inherited: 0x2f0)
struct AHomingDroneBomb : AProjectile {
	char UnknownData_2F0[0x8]; // 0x2f0(0x08)
	struct UEnemyHealthComponent* Health; // 0x2f8(0x08)
	struct USoundCue* ArmingSound; // 0x300(0x08)
	float HomingUpdateInterval; // 0x308(0x04)
	float TargetSearchInterval; // 0x30c(0x04)
	float ArmTime; // 0x310(0x04)
	char UnknownData_314[0x4]; // 0x314(0x04)
	struct FGameplayTagContainer GameplayTags; // 0x318(0x20)
	float HomingAccelerationMagnitude; // 0x338(0x04)
	char UnknownData_33C[0x4]; // 0x33c(0x04)

	void UpdateHomingSpeed(); // Function FSD.HomingDroneBomb.UpdateHomingSpeed
	void SearchForTarget(); // Function FSD.HomingDroneBomb.SearchForTarget
	void OnRep_HomingAccelerationMagnitude(); // Function FSD.HomingDroneBomb.OnRep_HomingAccelerationMagnitude
};

// Class FSD.GunTowerModuleAnimInstance
// Size: 0x290 (Inherited: 0x270)
struct UGunTowerModuleAnimInstance : UAnimInstance {
	struct FRotator CurrentModuleRotation; // 0x268(0x0c)
	struct FRotator CurrentLookAtRotation; // 0x274(0x0c)
	bool IsModuleActive; // 0x280(0x01)
	bool AreWeakpointsExposed; // 0x281(0x01)
	char UnknownData_28A[0x6]; // 0x28a(0x06)
};

// Class FSD.RandomFireModuleAnimInstance
// Size: 0x2a0 (Inherited: 0x290)
struct URandomFireModuleAnimInstance : UGunTowerModuleAnimInstance {
	struct FRotator OtherLookatRotation; // 0x288(0x0c)
	char UnknownData_29C[0x4]; // 0x29c(0x04)
};

// Class FSD.GuntowerWeakPoint
// Size: 0x330 (Inherited: 0x2e8)
struct AGuntowerWeakPoint : AFSDPawn {
	struct USceneComponent* Root; // 0x2e8(0x08)
	struct UEnemyHealthComponent* Health; // 0x2f0(0x08)
	struct UStaticMeshComponent* Mesh; // 0x2f8(0x08)
	struct UWeakpointGlowComponent* HitGlow; // 0x300(0x08)
	struct FWeakObjectPtr<struct UEnemyHealthComponent> ParentHealth; // 0x308(0x08)
	struct UDamageClass* DamageToParent; // 0x310(0x08)
	struct UParticleSystem* deathParticles; // 0x318(0x08)
	struct USoundCue* deathSound; // 0x320(0x08)
	char UnknownData_328[0x8]; // 0x328(0x08)

	void OnExposedChanged(bool isExposed); // Function FSD.GuntowerWeakPoint.OnExposedChanged
	void OnDeath(struct UHealthComponentBase* HealthComponent); // Function FSD.GuntowerWeakPoint.OnDeath
	void DamageParent(float ammount); // Function FSD.GuntowerWeakPoint.DamageParent
};

// Class FSD.GunTowerHealthComponent
// Size: 0x288 (Inherited: 0x288)
struct UGunTowerHealthComponent : UEnemyHealthComponent {
};

// Class FSD.WidgetComponentCustomMaterial
// Size: 0x540 (Inherited: 0x540)
struct UWidgetComponentCustomMaterial : UWidgetComponent {
	struct UMaterialInterface* CustomMaterial; // 0x538(0x08)
};

// Class FSD.HealthBarComponent
// Size: 0x540 (Inherited: 0x540)
struct UHealthBarComponent : UWidgetComponentCustomMaterial {
};

// Class FSD.HealthDamageTracker
// Size: 0xd0 (Inherited: 0xb0)
struct UHealthDamageTracker : UActorComponent {
	struct FMulticastInlineDelegate OnTrackedPercentageReachedEvent; // 0xb0(0x10)
	float TiggerOnPercentage; // 0xc0(0x04)
	char UnknownData_C4[0x4]; // 0xc4(0x04)
	struct UHealthComponentBase* Health; // 0xc8(0x08)

	void ResetTrackedDamage(); // Function FSD.HealthDamageTracker.ResetTrackedDamage
	void OnDamageTaken(float amount); // Function FSD.HealthDamageTracker.OnDamageTaken
};

// Class FSD.HitscanBaseComponent
// Size: 0x238 (Inherited: 0x110)
struct UHitscanBaseComponent : UWeaponFireComponent {
	struct FMulticastInlineDelegate OnSpreadChanged; // 0x110(0x10)
	struct FMulticastInlineDelegate OnFireComplete; // 0x120(0x10)
	float SpreadPerShot; // 0x130(0x04)
	char UnknownData_134[0x4]; // 0x134(0x04)
	struct UDamageComponent* DamageComponent; // 0x138(0x08)
	char UnknownData_140[0x4]; // 0x140(0x04)
	float Damage; // 0x144(0x04)
	float ArmorDamageMultiplier; // 0x148(0x04)
	char UnknownData_14C[0x4]; // 0x14c(0x04)
	struct UDamageClass* DamageClass; // 0x150(0x08)
	float WeakpointDamageMultiplier; // 0x158(0x04)
	int32_t MaxPenetrations; // 0x15c(0x04)
	enum class EImpactDecalSize ImpactDecalSize; // 0x160(0x01)
	char UnknownData_161[0x3]; // 0x161(0x03)
	float friendlyFireModifier; // 0x164(0x04)
	bool UseDynamicSpread; // 0x168(0x01)
	char UnknownData_169[0x3]; // 0x169(0x03)
	float MinSpread; // 0x16c(0x04)
	float MinSpreadWhenMoving; // 0x170(0x04)
	float MinSpreadWhenSprinting; // 0x174(0x04)
	float MaxSpread; // 0x178(0x04)
	char UnknownData_17C[0x4]; // 0x17c(0x04)
	struct FRuntimeFloatCurve SpreadCurve; // 0x180(0x88)
	float SpreadRecoveryPerSecond; // 0x208(0x04)
	char UnknownData_20C[0x8]; // 0x20c(0x08)
	float VerticalSpreadMultiplier; // 0x214(0x04)
	float HorizontalSpredMultiplier; // 0x218(0x04)
	float MaxVerticalSpread; // 0x21c(0x04)
	float MaxHorizontalSpread; // 0x220(0x04)
	char UnknownData_224[0x4]; // 0x224(0x04)
	enum class ERicochetBehavior RicochetBehavior; // 0x228(0x01)
	char UnknownData_229[0x3]; // 0x229(0x03)
	float RicochetChance; // 0x22c(0x04)
	bool RicochetOnWeakspotOnly; // 0x230(0x01)
	char UnknownData_231[0x3]; // 0x231(0x03)
	float RicochetMaxRange; // 0x234(0x04)

	void Server_StopFire(); // Function FSD.HitscanBaseComponent.Server_StopFire
	void Server_RemoveDebris(int32_t instance, int32_t Component); // Function FSD.HitscanBaseComponent.Server_RemoveDebris
	float GetCurrentVerticalSpread(); // Function FSD.HitscanBaseComponent.GetCurrentVerticalSpread
	float GetCurrentHorizontalSpread(); // Function FSD.HitscanBaseComponent.GetCurrentHorizontalSpread
};

// Class FSD.HitscanComponent
// Size: 0x2f0 (Inherited: 0x238)
struct UHitscanComponent : UHitscanBaseComponent {
	struct FMulticastInlineDelegate OnHit; // 0x238(0x10)
	bool BulletsCanCarve; // 0x248(0x01)
	char UnknownData_249[0x3]; // 0x249(0x03)
	struct FIRandRange NormalBulletsPerCarvingOne; // 0x24c(0x08)
	char UnknownData_254[0x4]; // 0x254(0x04)
	float CarveDiameter; // 0x258(0x04)
	float CarveNoise; // 0x25c(0x04)
	float CarveDebrisSize; // 0x260(0x04)
	float GeneralImpactAudioVolume; // 0x264(0x04)
	float ImpactDelay; // 0x268(0x04)
	bool OnlyUseImpactEffects; // 0x26c(0x01)
	char UnknownData_26D[0x3]; // 0x26d(0x03)
	struct UFXSystemAsset* ImpactParticles; // 0x270(0x08)
	struct USoundCue* ImpactSound; // 0x278(0x08)
	bool IgnoreAlwaysPenetrate; // 0x280(0x01)
	char UnknownData_281[0x7]; // 0x281(0x07)
	struct TArray<struct AActor*> DamagedActorCache; // 0x288(0x10)
	char UnknownData_298[0x58]; // 0x298(0x58)

	void Server_RegisterRicochetHit_Terrain(struct FVector_NetQuantize Origin, struct FVector_NetQuantize Location, struct FVector_NetQuantizeNormal Normal, struct UFSDPhysicalMaterial* PhysMaterial); // Function FSD.HitscanComponent.Server_RegisterRicochetHit_Terrain
	void Server_RegisterRicochetHit_Destructable(struct FVector_NetQuantize Origin, struct FVector_NetQuantize Location, struct FVector_NetQuantizeNormal Normal, struct UPrimitiveComponent* Target, struct UFSDPhysicalMaterial* PhysMaterial, char BoneIndex); // Function FSD.HitscanComponent.Server_RegisterRicochetHit_Destructable
	void Server_RegisterRicochetHit(struct FVector_NetQuantize Origin, struct FVector_NetQuantize Location, struct FVector_NetQuantizeNormal Normal, struct UPrimitiveComponent* Target, struct UFSDPhysicalMaterial* PhysMaterial); // Function FSD.HitscanComponent.Server_RegisterRicochetHit
	void Server_RegisterHit_Terrain(struct FVector_NetQuantize Location, struct FVector_NetQuantizeNormal Normal, struct UFSDPhysicalMaterial* PhysMaterial); // Function FSD.HitscanComponent.Server_RegisterHit_Terrain
	void Server_RegisterHit_Destructable(struct FVector_NetQuantize Location, struct FVector_NetQuantizeNormal Normal, struct UPrimitiveComponent* Target, struct UFSDPhysicalMaterial* PhysMaterial, char BoneIndex); // Function FSD.HitscanComponent.Server_RegisterHit_Destructable
	void Server_RegisterHit(struct FVector_NetQuantize Location, struct FVector_NetQuantizeNormal Normal, struct UPrimitiveComponent* Target, struct UFSDPhysicalMaterial* PhysMaterial); // Function FSD.HitscanComponent.Server_RegisterHit
	void All_ShowRicochetHit_Terrain(struct FVector_NetQuantize Origin, struct FVector_NetQuantize Location, struct FVector_NetQuantizeNormal Normal, char MaterialID, struct UFSDPhysicalMaterial* PhysMaterial); // Function FSD.HitscanComponent.All_ShowRicochetHit_Terrain
	void All_ShowRicochetHit_Destructable(struct FVector_NetQuantize Origin, struct FVector_NetQuantize Location, struct FVector_NetQuantizeNormal Normal, struct UPrimitiveComponent* Target, struct UFSDPhysicalMaterial* PhysMaterial, char BoneIndex); // Function FSD.HitscanComponent.All_ShowRicochetHit_Destructable
	void All_ShowRicochetHit(struct FVector_NetQuantize Origin, struct FVector_NetQuantize Location, struct FVector_NetQuantizeNormal Normal, bool SpawnDecal, struct UFSDPhysicalMaterial* PhysMaterial); // Function FSD.HitscanComponent.All_ShowRicochetHit
	void All_ShowHit_Terrain(struct FVector_NetQuantize Location, struct FVector_NetQuantizeNormal Normal, char MaterialID, struct UFSDPhysicalMaterial* PhysMaterial); // Function FSD.HitscanComponent.All_ShowHit_Terrain
	void All_ShowHit_Destructable(struct FVector_NetQuantize Location, struct FVector_NetQuantizeNormal Normal, struct UPrimitiveComponent* Target, struct UFSDPhysicalMaterial* PhysMaterial, char BoneIndex); // Function FSD.HitscanComponent.All_ShowHit_Destructable
	void All_ShowHit(struct FVector_NetQuantize Location, struct FVector_NetQuantizeNormal Normal, bool SpawnDecal, struct UFSDPhysicalMaterial* PhysMaterial); // Function FSD.HitscanComponent.All_ShowHit
};

// Class FSD.HostileGuntowerModuleController
// Size: 0x368 (Inherited: 0x358)
struct AHostileGuntowerModuleController : AFSDAIController {
	struct UAIPerceptionComponent* Perception; // 0x358(0x08)
	char UnknownData_360[0x8]; // 0x360(0x08)

	void OnPerceptionUpdated(struct AActor* sensedActor, struct FAIStimulus Stimulus); // Function FSD.HostileGuntowerModuleController.OnPerceptionUpdated
};

// Class FSD.HUDHealthBar
// Size: 0x320 (Inherited: 0x250)
struct UHUDHealthBar : UFSDUserWidget {
	struct FMulticastInlineDelegate OnOwnerDead; // 0x250(0x10)
	struct FLinearColor BackgroundColor; // 0x260(0x10)
	struct FLinearColor HealthColor; // 0x270(0x10)
	struct FLinearColor DamageColor; // 0x280(0x10)
	struct TMap<enum class EHealthbarType, struct FHealthBarLooks> HealthBarLooks; // 0x290(0x50)
	struct FLinearColor OutlineColor; // 0x2e0(0x10)
	int32_t OutlineThickness; // 0x2f0(0x04)
	float HealthAnimationFactor; // 0x2f4(0x04)
	float HealthPerCell; // 0x2f8(0x04)
	int32_t MinHealthCells; // 0x2fc(0x04)
	int32_t MaxHealthCells; // 0x300(0x04)
	char UnknownData_304[0x4]; // 0x304(0x04)
	struct TScriptInterface<None> TargetHealth; // 0x308(0x10)
	float AnimatedHealth; // 0x318(0x04)
	float MaxHealth; // 0x31c(0x04)

	void SetHealthComponent(struct TScriptInterface<None> Health, float Damage); // Function FSD.HUDHealthBar.SetHealthComponent
	float GetCurrentHealth(); // Function FSD.HUDHealthBar.GetCurrentHealth
};

// Class FSD.HUDVisibilityGroup
// Size: 0x98 (Inherited: 0x30)
struct UHUDVisibilityGroup : UDataAsset {
	struct FMulticastInlineDelegate OnModeChanged; // 0x30(0x10)
	struct FMulticastInlineDelegate OnVisibilityChanged; // 0x40(0x10)
	enum class EHUDVisibilityGroups GroupID; // 0x50(0x01)
	char UnknownData_51[0x7]; // 0x51(0x07)
	struct FText Title; // 0x58(0x18)
	bool AllowDynamicMode; // 0x70(0x01)
	bool AllowHiddenMode; // 0x71(0x01)
	char UnknownData_72[0x6]; // 0x72(0x06)
	bool bDynamicallyVisible; // 0x78(0x01)
	char UnknownData_79[0x7]; // 0x79(0x07)
	struct TArray<struct FHUDVisibilityRegisteredWidget> RegisteredWidgets; // 0x80(0x10)
	enum class EHUDVisibilityMode RecommendedMode; // 0x90(0x01)
	enum class EHUDVisibilityMode MinimalMode; // 0x91(0x01)
	char UnknownData_92[0x6]; // 0x92(0x06)

	void VisibilityDelegate__DelegateSignature(struct UHUDVisibilityGroup* Group, bool IsVisible); // DelegateFunction FSD.HUDVisibilityGroup.VisibilityDelegate__DelegateSignature
	void SetModeFromPreset(enum class EHUDVisibilityPresets Preset); // Function FSD.HUDVisibilityGroup.SetModeFromPreset
	void SetMode(enum class EHUDVisibilityMode InMode); // Function FSD.HUDVisibilityGroup.SetMode
	void SetHudGroupDynamicallyVisible(struct UHUDVisibilityGroup* Group, bool IsVisible); // Function FSD.HUDVisibilityGroup.SetHudGroupDynamicallyVisible
	void SetGroupDynamicallyVisible(bool IsVisible); // Function FSD.HUDVisibilityGroup.SetGroupDynamicallyVisible
	void RegisterWidgetWithVisibilityGroup(struct UWidget* Widget, struct UHUDVisibilityGroup* Group, enum class ESlateVisibility VisibleMode, enum class ESlateVisibility HiddenMode); // Function FSD.HUDVisibilityGroup.RegisterWidgetWithVisibilityGroup
	void RegisterMultipleWidgetsWithVisibilityGroup(struct TArray<struct UWidget*> Widgets, struct UHUDVisibilityGroup* Group, enum class ESlateVisibility VisibleMode, enum class ESlateVisibility HiddenMode); // Function FSD.HUDVisibilityGroup.RegisterMultipleWidgetsWithVisibilityGroup
	void ModeDelegate__DelegateSignature(struct UHUDVisibilityGroup* Group, enum class EHUDVisibilityMode Mode); // DelegateFunction FSD.HUDVisibilityGroup.ModeDelegate__DelegateSignature
	bool IsModeAllowed(enum class EHUDVisibilityMode InMode); // Function FSD.HUDVisibilityGroup.IsModeAllowed
	bool IsInDynamicMode(); // Function FSD.HUDVisibilityGroup.IsInDynamicMode
	bool IsHudGroupVisible(struct UHUDVisibilityGroup* Group); // Function FSD.HUDVisibilityGroup.IsHudGroupVisible
	bool IsGroupVisible(); // Function FSD.HUDVisibilityGroup.IsGroupVisible
	enum class EHUDVisibilityMode GetMode(); // Function FSD.HUDVisibilityGroup.GetMode
	struct TArray<enum class EHUDVisibilityMode> GetAllowedModes(); // Function FSD.HUDVisibilityGroup.GetAllowedModes
};

// Class FSD.HUDWarningWidget
// Size: 0x250 (Inherited: 0x250)
struct UHUDWarningWidget : UFSDUserWidget {

	void SetData(struct UTexture2D* Texture, struct USoundBase* PingSound); // Function FSD.HUDWarningWidget.SetData
	void Ping(bool DestroyAfterPing); // Function FSD.HUDWarningWidget.Ping
};

// Class FSD.HydraHead
// Size: 0x4f0 (Inherited: 0x338)
struct AHydraHead : AEnemyPawn {
	struct USplineMeshComponent* NeckSplineMesh; // 0x338(0x08)
	struct USplineComponent* SplineComponent; // 0x340(0x08)
	struct AActor* HydraBody; // 0x348(0x08)
	struct FTransform RestTransform; // 0x350(0x30)
	struct FTransform LastTransform; // 0x380(0x30)
	struct FTransform DesiredTransform; // 0x3b0(0x30)
	struct FHydraHeadTarget DesiredTarget; // 0x3e0(0x18)
	char UnknownData_3F8[0x98]; // 0x3f8(0x98)
	struct FVector TargetLocation; // 0x490(0x0c)
	float MovementAlpha; // 0x49c(0x04)
	float HeadMovementDuration; // 0x4a0(0x04)
	float CanSwayCooldown; // 0x4a4(0x04)
	struct FVector2D SwayRange; // 0x4a8(0x08)
	float NeckBaseTangentLength; // 0x4b0(0x04)
	struct FVector NeckBasePositionOffset; // 0x4b4(0x0c)
	struct FVector NeckBaseTangentOffset; // 0x4c0(0x0c)
	float NeckTopTangentLength; // 0x4cc(0x04)
	struct FVector NeckTopPositionOffset; // 0x4d0(0x0c)
	struct FVector NeckTopTangentOffset; // 0x4dc(0x0c)
	struct AActor* lookAtTargetActor; // 0x4e8(0x08)

	void UpdateSpline(); // Function FSD.HydraHead.UpdateSpline
	void OnRep_HydraBody(); // Function FSD.HydraHead.OnRep_HydraBody
	void OnRep_DesiredTarget(); // Function FSD.HydraHead.OnRep_DesiredTarget
	void MoveHydraHead(struct FTransform newDesiredTransform, float newCanSwayCooldown, float newHeadMovementDuration); // Function FSD.HydraHead.MoveHydraHead
	void LookAtActor(struct AActor* TargetActor); // Function FSD.HydraHead.LookAtActor
};

// Class FSD.HydraWeedCore
// Size: 0x338 (Inherited: 0x338)
struct AHydraWeedCore : AEnemyPawn {

	void WakupCore(); // Function FSD.HydraWeedCore.WakupCore
	void OnShooterKilled(struct AHydraWeedShooter* shooter); // Function FSD.HydraWeedCore.OnShooterKilled
	void OnHealerKilled(struct AHydraWeedHealer* healer); // Function FSD.HydraWeedCore.OnHealerKilled
};

// Class FSD.ShootingPlant
// Size: 0x348 (Inherited: 0x338)
struct AShootingPlant : AEnemyPawn {
	bool IsVisible; // 0x338(0x01)
	char UnknownData_339[0x7]; // 0x339(0x07)
	struct AActor* Target; // 0x340(0x08)

	void SetTarget(struct AActor* Target); // Function FSD.ShootingPlant.SetTarget
	void OnRep_Target(); // Function FSD.ShootingPlant.OnRep_Target
};

// Class FSD.HydraWeedShooter
// Size: 0x350 (Inherited: 0x348)
struct AHydraWeedShooter : AShootingPlant {
	struct AHydraWeedCore* Core; // 0x348(0x08)
};

// Class FSD.HydraWeedHealer
// Size: 0x340 (Inherited: 0x338)
struct AHydraWeedHealer : AEnemyPawn {
	struct AHydraWeedCore* Core; // 0x338(0x08)
};

// Class FSD.HydraWeedSpawnProjectile
// Size: 0x300 (Inherited: 0x2f0)
struct AHydraWeedSpawnProjectile : AProjectile {
	struct FVector TargetLocation; // 0x2f0(0x0c)
	char UnknownData_2FC[0x4]; // 0x2fc(0x04)
};

// Class FSD.TriggerAI
// Size: 0x28 (Inherited: 0x28)
struct UTriggerAI : UInterface {

	bool OnTriggerAI(struct FName TriggerName); // Function FSD.TriggerAI.OnTriggerAI
	void OnMessageAI(struct FName TriggerName); // Function FSD.TriggerAI.OnMessageAI
};

// Class FSD.Craftable
// Size: 0x28 (Inherited: 0x28)
struct UCraftable : UInterface {

	void PreviewItem(struct AFSDPlayerState* PlayerState, bool Show); // Function FSD.Craftable.PreviewItem
	bool IsOwned(struct UObject* WorldContextObject, struct UPlayerCharacterID* characterID); // Function FSD.Craftable.IsOwned
	struct TArray<struct FCraftingCost> GetResourceCost(); // Function FSD.Craftable.GetResourceCost
	int32_t GetRequiredPlayerRank(); // Function FSD.Craftable.GetRequiredPlayerRank
	int32_t GetCraftingCreditsCost(); // Function FSD.Craftable.GetCraftingCreditsCost
	struct FText GetCraftableName(); // Function FSD.Craftable.GetCraftableName
	struct UTexture2D* GetCraftableIcon(); // Function FSD.Craftable.GetCraftableIcon
	struct FText GetCraftableDescription(); // Function FSD.Craftable.GetCraftableDescription
	void CraftItem(struct UObject* WorldContextObject, struct UPlayerCharacterID* characterID); // Function FSD.Craftable.CraftItem
	bool CanCraft(struct UObject* WorldContextObject); // Function FSD.Craftable.CanCraft
};

// Class FSD.FootStepNotifyTarget
// Size: 0x28 (Inherited: 0x28)
struct UFootStepNotifyTarget : UInterface {
};

// Class FSD.Health
// Size: 0x28 (Inherited: 0x28)
struct UHealth : UInterface {

	bool IsDead(); // Function FSD.Health.IsDead
	bool IsAlive(); // Function FSD.Health.IsAlive
	struct AActor* GetOwner(); // Function FSD.Health.GetOwner
	float GetMaxHealth(); // Function FSD.Health.GetMaxHealth
	enum class EHealthbarType GetHealthbarType(); // Function FSD.Health.GetHealthbarType
	float GetHealth(); // Function FSD.Health.GetHealth
};

// Class FSD.ImpactComponent
// Size: 0x120 (Inherited: 0xb0)
struct UImpactComponent : UActorComponent {
	struct FMulticastInlineDelegate OnImpactedEvent; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnHighAcceleration; // 0xc0(0x10)
	bool DebugText; // 0xd0(0x01)
	char UnknownData_D1[0x2b]; // 0xd1(0x2b)
	bool TrackAcceleration; // 0xfc(0x01)
	bool TrackVelocity; // 0xfd(0x01)
	char UnknownData_FE[0x6]; // 0xfe(0x06)
	float TriggerHighAccelAt; // 0x104(0x04)
	char UnknownData_108[0x8]; // 0x108(0x08)
	float TriggerAtVelocityDifference; // 0x110(0x04)
	char UnknownData_114[0xc]; // 0x114(0x0c)

	void SetCheckVelocity(bool aCheckVelocity); // Function FSD.ImpactComponent.SetCheckVelocity
	void SetCheckAcceleration(bool aCheckAcceleration); // Function FSD.ImpactComponent.SetCheckAcceleration
	void EnableImpactCheckhing(struct USceneComponent* cmp); // Function FSD.ImpactComponent.EnableImpactCheckhing
	void DisableImpactChecking(); // Function FSD.ImpactComponent.DisableImpactChecking
};

// Class FSD.WeaponImpactComponent
// Size: 0x128 (Inherited: 0xb0)
struct UWeaponImpactComponent : UActorComponent {
	struct FMulticastInlineDelegate OnImpactedEvent; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnHighAcceleration; // 0xc0(0x10)
	bool DebugText; // 0xd0(0x01)
	char UnknownData_D1[0x3]; // 0xd1(0x03)
	struct FName ImpactSocketName; // 0xd4(0x08)
	char UnknownData_DC[0x4]; // 0xdc(0x04)
	struct USkeletalMeshComponent* ActiveMesh; // 0xe0(0x08)
	char UnknownData_E8[0x28]; // 0xe8(0x28)
	bool TrackAcceleration; // 0x110(0x01)
	bool TrackVelocity; // 0x111(0x01)
	char UnknownData_112[0x6]; // 0x112(0x06)
	float TriggerHighAccelAt; // 0x118(0x04)
	char UnknownData_11C[0x8]; // 0x11c(0x08)
	float TriggerAtVelocityDifference; // 0x124(0x04)

	void EnableImpactCheckhing(struct USkeletalMeshComponent* cmp); // Function FSD.WeaponImpactComponent.EnableImpactCheckhing
	void DisableImpactChecking(); // Function FSD.WeaponImpactComponent.DisableImpactChecking
};

// Class FSD.ImpactAudioComponent
// Size: 0x800 (Inherited: 0x7d0)
struct UImpactAudioComponent : UAudioComponent {
	struct FName AudioParameterSpeed; // 0x7d0(0x08)
	char UnknownData_7D8[0x14]; // 0x7d8(0x14)
	float DecelerationThreshold; // 0x7ec(0x04)
	char UnknownData_7F0[0x4]; // 0x7f0(0x04)
	bool ListenForDeath; // 0x7f4(0x01)
	char UnknownData_7F5[0xb]; // 0x7f5(0x0b)

	void OnOwnerDeath(struct UHealthComponentBase* HealthComponent); // Function FSD.ImpactAudioComponent.OnOwnerDeath
	struct UImpactAudioComponent* AddImpactAudioToActor(struct AActor* Actor, struct USceneComponent* AttachToComponent, struct UImpactAudioComponent* ComponentClass); // Function FSD.ImpactAudioComponent.AddImpactAudioToActor
};

// Class FSD.FSDReverbVolume
// Size: 0x238 (Inherited: 0x220)
struct AFSDReverbVolume : AActor {
	struct USphereComponent* Collision; // 0x220(0x08)
	struct UReverbEffect* Reverb; // 0x228(0x08)
	float Priority; // 0x230(0x04)
	char UnknownData_234[0x4]; // 0x234(0x04)
};

// Class FSD.InDangerComponent
// Size: 0xe8 (Inherited: 0xb0)
struct UInDangerComponent : UActorComponent {
	struct FMulticastInlineDelegate OnInDanger; // 0xb0(0x10)
	struct FWeakObjectPtr<struct UHealthComponentBase> ParentHealthComponent; // 0xc0(0x08)
	float DamageTimeLimit; // 0xc8(0x04)
	float DamageThreshold; // 0xcc(0x04)
	bool RunsOnClients; // 0xd0(0x01)
	char UnknownData_D1[0x17]; // 0xd1(0x17)

	void SetIsActive(bool aFlag); // Function FSD.InDangerComponent.SetIsActive
	void OnDamage(float amount); // Function FSD.InDangerComponent.OnDamage
	bool GetIsActive(); // Function FSD.InDangerComponent.GetIsActive
};

// Class FSD.NetMontageAble
// Size: 0x28 (Inherited: 0x28)
struct UNetMontageAble : UInterface {

	float QueueMontage(struct UAnimMontage* Montage); // Function FSD.NetMontageAble.QueueMontage
	struct USkeletalMeshComponent* GetSkeletalMesh(); // Function FSD.NetMontageAble.GetSkeletalMesh
	struct UAnimInstance* GetAnimInstance(); // Function FSD.NetMontageAble.GetAnimInstance
};

// Class FSD.NotifyMessageReceiver
// Size: 0x28 (Inherited: 0x28)
struct UNotifyMessageReceiver : UInterface {

	bool OnNotifyMessageReceived(struct FName TriggerName); // Function FSD.NotifyMessageReceiver.OnNotifyMessageReceived
};

// Class FSD.InputCaptureWidget
// Size: 0x270 (Inherited: 0x230)
struct UInputCaptureWidget : UUserWidget {
	struct FCustomKeySetting Settings; // 0x230(0x38)
	enum class EKeyBindingSlot InputSlot; // 0x268(0x01)
	bool bIsGamepadKey; // 0x269(0x01)
	bool bCapturing; // 0x26a(0x01)
	char UnknownData_26B[0x5]; // 0x26b(0x05)

	void SetData(struct FCustomKeySetting InSettings, enum class EKeyBindingSlot InInputSlot, bool InIsGamepadKey); // Function FSD.InputCaptureWidget.SetData
	void SetCurrentBinding(struct FKey InKey); // Function FSD.InputCaptureWidget.SetCurrentBinding
	void ReceiveKeyChanged(struct FKey InKey); // Function FSD.InputCaptureWidget.ReceiveKeyChanged
	void ReceiveKeyCaptured(struct FKey InKey); // Function FSD.InputCaptureWidget.ReceiveKeyCaptured
	void ReceiveCapturingChanged(bool InCapturing); // Function FSD.InputCaptureWidget.ReceiveCapturingChanged
	struct FKey GetCurrentBinding(); // Function FSD.InputCaptureWidget.GetCurrentBinding
	bool FindCurrentSettingsForKey(struct FKey InKey, struct FCustomKeySetting OutSettings); // Function FSD.InputCaptureWidget.FindCurrentSettingsForKey
	void ClearCurrentBinding(); // Function FSD.InputCaptureWidget.ClearCurrentBinding
	void BindActionToKey(struct FCustomKeySetting InAction, struct FKey InKey, enum class EKeyBindingSlot InSlot, bool SaveToDisk); // Function FSD.InputCaptureWidget.BindActionToKey
};

// Class FSD.InputFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct UInputFunctionLibrary : UBlueprintFunctionLibrary {

	void SetMouseSmoothingOn(bool smoothingOn); // Function FSD.InputFunctionLibrary.SetMouseSmoothingOn
	bool IsMouseSmoothingOn(); // Function FSD.InputFunctionLibrary.IsMouseSmoothingOn
	bool IsMouseEventAction(struct FPointerEvent MouseEvent, struct FName ActionName, bool IgnoreCustomBindings); // Function FSD.InputFunctionLibrary.IsMouseEventAction
	bool IsKeyEventAction(struct FKeyEvent KeyEvent, struct FName ActionName, bool IgnoreCustomBindings); // Function FSD.InputFunctionLibrary.IsKeyEventAction
	bool IsAxisMappedToDirectional(struct FName InActionName, struct FKey Key, int32_t Direction, bool IgnoreCustomBindings); // Function FSD.InputFunctionLibrary.IsAxisMappedToDirectional
	bool IsActionMappedTo(struct FName InActionName, struct FKey Key, bool IgnoreCustomBindings); // Function FSD.InputFunctionLibrary.IsActionMappedTo
	struct TArray<struct FKey> GetInputKeysBoundToAction(struct FName ActionName, enum class EKeyBindingAxis Axis, bool IsGamePadKey); // Function FSD.InputFunctionLibrary.GetInputKeysBoundToAction
	bool GetAxisMapping(struct FName InActionName, int32_t Axis, bool InGamepadKeys, struct FInputAxisKeyMapping OutResult); // Function FSD.InputFunctionLibrary.GetAxisMapping
	bool GetActionMapping(struct FName InActionName, bool InGamepadKeys, struct FInputActionKeyMapping OutResult); // Function FSD.InputFunctionLibrary.GetActionMapping
	bool FindInputDisplay(struct APlayerController* PlayerController, struct FName InputName, enum class EFSDInputSource InputSource, int32_t LayoutIndex, struct FInputDisplay OutInputDisplay); // Function FSD.InputFunctionLibrary.FindInputDisplay
};

// Class FSD.InsectSwarmEnemy
// Size: 0x3a0 (Inherited: 0x398)
struct AInsectSwarmEnemy : AEnemyDeepPathfinderCharacter {
	struct UParticleSystemComponent* SwarmParticles; // 0x398(0x08)
};

// Class FSD.InsectSwarmSpawner
// Size: 0x358 (Inherited: 0x338)
struct AInsectSwarmSpawner : AEnemyPawn {
	struct AInsectSwarmEnemy* SwarmType; // 0x338(0x08)
	float SpawnHeightOffset; // 0x340(0x04)
	float AlertDistance; // 0x344(0x04)
	float RespawnDelay; // 0x348(0x04)
	struct FWeakObjectPtr<struct AInsectSwarmEnemy> SwarmInstance; // 0x34c(0x08)
	char UnknownData_354[0x4]; // 0x354(0x04)

	struct UStaticMeshComponent* Receive_GetStaticMesh(); // Function FSD.InsectSwarmSpawner.Receive_GetStaticMesh
	void OnSwarmSpawned(struct AInsectSwarmEnemy* Swarm); // Function FSD.InsectSwarmSpawner.OnSwarmSpawned
	void OnSwarmDestroyed(struct AActor* DestroyedActor); // Function FSD.InsectSwarmSpawner.OnSwarmDestroyed
};

// Class FSD.InstancedMeshOnSpline
// Size: 0x560 (Inherited: 0x530)
struct UInstancedMeshOnSpline : UInstancedStaticMeshComponent {
	struct USplineComponent* Spline; // 0x528(0x08)
	int32_t NumInstances; // 0x530(0x04)
	float Speed; // 0x534(0x04)
	float VerticalOffset; // 0x538(0x04)
	struct FVector Scale; // 0x53c(0x0c)
	struct TArray<struct FTransform> NewInstancesTransforms; // 0x548(0x10)
	float Phase; // 0x558(0x04)

	void SetSpeed(float newSpeed); // Function FSD.InstancedMeshOnSpline.SetSpeed
};

// Class FSD.InventoryComponent
// Size: 0x270 (Inherited: 0xb0)
struct UInventoryComponent : UActorComponent {
	struct FMulticastInlineDelegate OnItemsLoaded; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnItemClicked; // 0xc0(0x10)
	struct FMulticastInlineDelegate OnItemEquipped; // 0xd0(0x10)
	struct FMulticastInlineDelegate OnItemUnequipped; // 0xe0(0x10)
	struct FMulticastInlineDelegate OnGrenadeCountChanged; // 0xf0(0x10)
	struct FMulticastInlineDelegate OnFlareCountChanged; // 0x100(0x10)
	struct FMulticastInlineDelegate OnMaxFlareCountChanged; // 0x110(0x10)
	struct FMulticastInlineDelegate OnFlareProduction; // 0x120(0x10)
	struct FMulticastInlineDelegate OnResuppliedEvent; // 0x130(0x10)
	struct FMulticastInlineDelegate OnCarriableChangedEvent; // 0x140(0x10)
	bool bItemsLoaded; // 0x150(0x01)
	char UnknownData_151[0xf]; // 0x151(0x0f)
	struct UInventoryList* InventoryList; // 0x160(0x08)
	struct AThrownGrenadeItem* ThrownGrenadeClass; // 0x168(0x08)
	struct TArray<struct AItem*> Items; // 0x170(0x10)
	struct TArray<struct AItem*> UnlistedItems; // 0x180(0x10)
	struct APickaxeItem* MiningItem; // 0x190(0x08)
	struct AThrownGrenadeItem* GrenadeItem; // 0x198(0x08)
	struct ALaserPointerItem* LaserPointerItem; // 0x1a0(0x08)
	struct ATerrainScannerItem* TerrainScannerItem; // 0x1a8(0x08)
	struct ARecallableSentryGunItem* RecallableSentryGunItem; // 0x1b0(0x08)
	struct AItem* PickedUpItem; // 0x1b8(0x08)
	struct ARessuplyPodItem* ResupplyItem; // 0x1c0(0x08)
	struct AItem* PreviousItem; // 0x1c8(0x08)
	struct TArray<struct AItem*> EquipHistory; // 0x1d0(0x10)
	char UnknownData_1E0[0x8]; // 0x1e0(0x08)
	struct FCarriedItemState CarriedItem; // 0x1e8(0x10)
	struct FVector FlareOffset; // 0x1f8(0x0c)
	char UnknownData_204[0x4]; // 0x204(0x04)
	struct USoundCue* OutOfFlaresSound; // 0x208(0x08)
	struct UDialogDataAsset* OutOfFlaresShout; // 0x210(0x08)
	char UnknownData_218[0x4]; // 0x218(0x04)
	float FlareAngle; // 0x21c(0x04)
	float FlareCooldown; // 0x220(0x04)
	float FlareProductionTime; // 0x224(0x04)
	struct FLinearColor FlareChromaColor; // 0x228(0x10)
	float FlareProductionTimeLeft; // 0x238(0x04)
	int32_t MaxFlares; // 0x23c(0x04)
	int32_t Flares; // 0x240(0x04)
	float FlareCooldownRemaining; // 0x244(0x04)
	struct AFlare* flareClass; // 0x248(0x08)
	struct TArray<struct UItemUpgrade*> FlareUpgrades; // 0x250(0x10)
	struct AItem* EquippedItem; // 0x260(0x08)
	char UnknownData_268[0x8]; // 0x268(0x08)

	void StartGrenadeThrow(); // Function FSD.InventoryComponent.StartGrenadeThrow
	void Server_ThrowFlare(); // Function FSD.InventoryComponent.Server_ThrowFlare
	void Server_Equip(struct AItem* Item); // Function FSD.InventoryComponent.Server_Equip
	void Server_DropCarriedItem(); // Function FSD.InventoryComponent.Server_DropCarriedItem
	void Resupply(float percentage); // Function FSD.InventoryComponent.Resupply
	void PickupItemInstance(struct AItem* Item); // Function FSD.InventoryComponent.PickupItemInstance
	struct AItem* PickupItem(struct AItem* itemClass); // Function FSD.InventoryComponent.PickupItem
	void OnRep_PickedUpItem(); // Function FSD.InventoryComponent.OnRep_PickedUpItem
	void OnRep_Items(); // Function FSD.InventoryComponent.OnRep_Items
	void OnRep_EquippedItem(struct AItem* oldItem); // Function FSD.InventoryComponent.OnRep_EquippedItem
	void OnRep_CarriedItem(struct FCarriedItemState LastCarriedItem); // Function FSD.InventoryComponent.OnRep_CarriedItem
	void OnCharacterStateChanged(enum class ECharacterState NewState); // Function FSD.InventoryComponent.OnCharacterStateChanged
	bool IsTerrainScannerEquipped(); // Function FSD.InventoryComponent.IsTerrainScannerEquipped
	bool HasPickedUpItem(); // Function FSD.InventoryComponent.HasPickedUpItem
	bool HasDrink(); // Function FSD.InventoryComponent.HasDrink
	int32_t GetTotalAmmoLeft(); // Function FSD.InventoryComponent.GetTotalAmmoLeft
	struct ARecallableSentryGunItem* GetRecallableSentryGunItem(); // Function FSD.InventoryComponent.GetRecallableSentryGunItem
	struct AItem* GetItem(enum class EItemCategory Category); // Function FSD.InventoryComponent.GetItem
	struct AActor* GetCarriedItem(); // Function FSD.InventoryComponent.GetCarriedItem
	struct TArray<struct AItem*> GetAllItems(); // Function FSD.InventoryComponent.GetAllItems
	void EquipLastItem(bool ignoreUsing); // Function FSD.InventoryComponent.EquipLastItem
	bool EquipCategory(enum class EItemCategory Category); // Function FSD.InventoryComponent.EquipCategory
	void EquipAtIndex(int32_t Index, bool ignoreUsing); // Function FSD.InventoryComponent.EquipAtIndex
	void Equip(struct AItem* Item, bool ignoreIsUsing); // Function FSD.InventoryComponent.Equip
	void EndGrenadeThrow(); // Function FSD.InventoryComponent.EndGrenadeThrow
	void DropPickedupItem(); // Function FSD.InventoryComponent.DropPickedupItem
	void CreateStartingEquipmentWhenItemsLoaded(); // Function FSD.InventoryComponent.CreateStartingEquipmentWhenItemsLoaded
	void Client_Resupply(float percentage); // Function FSD.InventoryComponent.Client_Resupply
	void Client_DropPickedUpItem(); // Function FSD.InventoryComponent.Client_DropPickedUpItem
	void AnimationNotify2(); // Function FSD.InventoryComponent.AnimationNotify2
	void AnimationNotify1(); // Function FSD.InventoryComponent.AnimationNotify1
};

// Class FSD.InventoryList
// Size: 0x198 (Inherited: 0x30)
struct UInventoryList : UDataAsset {
	struct TSoftObjectPtr<struct UTexture2D> IconWeaponSetOutline; // 0x30(0x28)
	struct TSoftObjectPtr<struct UTexture2D> IconWeaponSetFill; // 0x58(0x28)
	struct TSoftObjectPtr<struct UMaterialInterface> LaserpointerMarkerMaterial; // 0x80(0x28)
	struct TSoftObjectPtr<struct UMaterialInterface> LaserpointerBeamMaterial; // 0xa8(0x28)
	struct UItemID* LaserPointerItem; // 0xd0(0x08)
	struct UItemID* TerrainScannerItem; // 0xd8(0x08)
	struct UItemID* ResupplyItem; // 0xe0(0x08)
	struct TArray<struct UItemID*> PrimaryWeapons; // 0xe8(0x10)
	struct TArray<struct UItemID*> SecondaryWeapons; // 0xf8(0x10)
	struct TArray<struct UItemID*> TraversalTools; // 0x108(0x10)
	struct TArray<struct UItemID*> ClassTools; // 0x118(0x10)
	struct TArray<struct UItemID*> Armors; // 0x128(0x10)
	struct TArray<struct UItemID*> Flares; // 0x138(0x10)
	struct TArray<struct UItemID*> Grenades; // 0x148(0x10)
	struct TArray<struct UItemID*> MiningTools; // 0x158(0x10)
	char UnknownData_168[0x30]; // 0x168(0x30)

	struct UItemID* GetPreviousUnlockedItem(struct UObject* WorldContextObject, enum class EItemCategory Category, struct UItemID* currentItem, struct UPlayerCharacterID* ItemOwner); // Function FSD.InventoryList.GetPreviousUnlockedItem
	struct UItemID* GetPreviousItem(enum class EItemCategory Category, struct UItemID* currentItem); // Function FSD.InventoryList.GetPreviousItem
	int32_t GetNumberOfItems(enum class EItemCategory Category); // Function FSD.InventoryList.GetNumberOfItems
	struct UItemID* GetNextUnlockedItem(struct UObject* WorldContextObject, enum class EItemCategory Category, struct UItemID* currentItem, struct UPlayerCharacterID* ItemOwner); // Function FSD.InventoryList.GetNextUnlockedItem
	struct UItemID* GetNextItem(enum class EItemCategory Category, struct UItemID* currentItem); // Function FSD.InventoryList.GetNextItem
	struct TArray<struct AActor*> GetLoadedItemListFiltered(enum class EItemCategory Category, struct FDelegate Filter); // Function FSD.InventoryList.GetLoadedItemListFiltered
	struct TArray<struct AActor*> GetLoadedItemList(enum class EItemCategory Category); // Function FSD.InventoryList.GetLoadedItemList
	struct TArray<struct UItemID*> GetItemList(enum class EItemCategory Category); // Function FSD.InventoryList.GetItemList
	int32_t GetItemIndex(enum class EItemCategory Category, struct UItemID* Item); // Function FSD.InventoryList.GetItemIndex
	struct TArray<struct UItemID*> GetAllItemsList(); // Function FSD.InventoryList.GetAllItemsList
	void CheckForInventoryAchievements(struct UObject* WorldContextObject); // Function FSD.InventoryList.CheckForInventoryAchievements
};

// Class FSD.RejoinListener
// Size: 0x28 (Inherited: 0x28)
struct URejoinListener : UInterface {
};

// Class FSD.Targetable
// Size: 0x28 (Inherited: 0x28)
struct UTargetable : UInterface {

	void ShowDamageEffects(struct UParticleSystem* Particles, struct FVector Location, struct FRotator Orientation); // Function FSD.Targetable.ShowDamageEffects
	struct UHealthComponentBase* GetTargetHealthComponent(); // Function FSD.Targetable.GetTargetHealthComponent
	struct FVector GetTargetCenterMass(); // Function FSD.Targetable.GetTargetCenterMass
	bool GetIsTargetable(); // Function FSD.Targetable.GetIsTargetable
};

// Class FSD.AnimNotify_CycleItemComplete
// Size: 0x38 (Inherited: 0x38)
struct UAnimNotify_CycleItemComplete : UAnimNotify {
};

// Class FSD.HeatMaterialComponent
// Size: 0xc8 (Inherited: 0xb0)
struct UHeatMaterialComponent : UActorComponent {
	struct FName ParameterName; // 0xb0(0x08)
	struct TArray<struct UMaterialInstanceDynamic*> MaterialIntances; // 0xb8(0x10)

	void OnTemperatureChanged(float Temperature, bool Overheated); // Function FSD.HeatMaterialComponent.OnTemperatureChanged
	void AddHeatMaterial(struct UMaterialInstanceDynamic* MaterialInstance); // Function FSD.HeatMaterialComponent.AddHeatMaterial
};

// Class FSD.ItemAquisitionSource
// Size: 0x58 (Inherited: 0x58)
struct UItemAquisitionSource : USavableDataAsset {
};

// Class FSD.ItemCharacterAnimationSet
// Size: 0x1a0 (Inherited: 0x30)
struct UItemCharacterAnimationSet : UDataAsset {
	struct UAnimSequence* FP_Idle; // 0x30(0x08)
	struct UAnimMontage* FP_InspectWeapon; // 0x38(0x08)
	struct UAnimSequence* FP_Walk; // 0x40(0x08)
	struct UAnimSequence* FP_Sprint; // 0x48(0x08)
	struct UAnimMontage* FP_JumpStart_Montage; // 0x50(0x08)
	struct UAnimSequence* FP_JumpStart; // 0x58(0x08)
	struct UAnimSequence* FP_JumpLoop; // 0x60(0x08)
	struct UAnimSequence* FP_JumpLand; // 0x68(0x08)
	struct UAnimSequence* FP_JumpLand_Aim; // 0x70(0x08)
	struct UAnimSequence* FP_Downed; // 0x78(0x08)
	enum class ECharacterAnimSet AnimationSetType; // 0x80(0x01)
	char UnknownData_81[0x7]; // 0x81(0x07)
	struct UBlendSpace1D* TP_LookUpDown; // 0x88(0x08)
	struct UBlendSpace1D* TP_LookUpDown_Aim; // 0x90(0x08)
	struct UAnimSequence* TP_Sprint; // 0x98(0x08)
	struct UAnimSequence* TP_Idle; // 0xa0(0x08)
	struct UAnimSequence* TP_Idle_Aim; // 0xa8(0x08)
	struct UAnimSequence* TP_LookForward; // 0xb0(0x08)
	struct UAnimSequence* TP_LookForward_Aim; // 0xb8(0x08)
	struct UAnimSequence* TP_JumpStart; // 0xc0(0x08)
	struct UAnimSequence* TP_JumpStart_Aim; // 0xc8(0x08)
	struct UAnimSequence* TP_JumpLoop; // 0xd0(0x08)
	struct UAnimSequence* TP_JumpLoop_Aim; // 0xd8(0x08)
	struct UAnimMontage* TP_JumpLand; // 0xe0(0x08)
	struct UAnimSequence* TP_Walk_Forward; // 0xe8(0x08)
	struct UAnimSequence* TP_Walk_Forward_Aim; // 0xf0(0x08)
	struct UAnimSequence* TP_Run_Forward; // 0xf8(0x08)
	struct UAnimSequence* TP_Run_Forward_Aim; // 0x100(0x08)
	struct UAnimSequence* TP_Walk_Right; // 0x108(0x08)
	struct UAnimSequence* TP_Walk_Right_Aim; // 0x110(0x08)
	struct UAnimSequence* TP_Run_Right; // 0x118(0x08)
	struct UAnimSequence* TP_Run_Right_Aim; // 0x120(0x08)
	struct UAnimSequence* TP_Walk_Left; // 0x128(0x08)
	struct UAnimSequence* TP_Walk_Left_Aim; // 0x130(0x08)
	struct UAnimSequence* TP_Run_Left; // 0x138(0x08)
	struct UAnimSequence* TP_Run_Left_Aim; // 0x140(0x08)
	struct UAnimSequence* TP_Walk_Back; // 0x148(0x08)
	struct UAnimSequence* TP_Walk_Back_Aim; // 0x150(0x08)
	struct UAnimSequence* TP_Run_Back; // 0x158(0x08)
	struct UAnimSequence* TP_Run_Back_Aim; // 0x160(0x08)
	struct UAnimSequence* TP_Revived; // 0x168(0x08)
	struct UAnimSequence* TP_Downed; // 0x170(0x08)
	struct UAnimSequence* TP_Downed_Loop; // 0x178(0x08)
	struct FItemLoadoutAnimations LoadoutAnimations; // 0x180(0x18)
	float CameraOffset; // 0x198(0x04)
	char UnknownData_19C[0x4]; // 0x19c(0x04)
};

// Class FSD.ItemMarker
// Size: 0x228 (Inherited: 0x220)
struct AItemMarker : AActor {
	bool bMarkerValid; // 0x220(0x01)
	bool bMarkerVisible; // 0x221(0x01)
	char UnknownData_222[0x6]; // 0x222(0x06)

	void OnMarkerVisibilityChanged(bool Visible); // Function FSD.ItemMarker.OnMarkerVisibilityChanged
	void OnMarkerValidChanged(bool Valid); // Function FSD.ItemMarker.OnMarkerValidChanged
};

// Class FSD.ItemPlacerAggregator
// Size: 0x1d0 (Inherited: 0xc8)
struct UItemPlacerAggregator : UItemAggregator {
	struct TArray<struct FWeakObjectPtr<struct AActor>> IgnoreActors; // 0xc8(0x10)
	struct FMulticastInlineDelegate OnMarkerSpawned; // 0xd8(0x10)
	struct FMulticastInlineDelegate OnPlacementChanged; // 0xe8(0x10)
	float PlacementDistance; // 0xf8(0x04)
	float MaxOffsetZ; // 0xfc(0x04)
	float MinOffsetZ; // 0x100(0x04)
	float ItemHeight; // 0x104(0x04)
	struct UDialogDataAsset* ShoutOnPlaced; // 0x108(0x08)
	struct AItemMarker* MarkerType; // 0x110(0x08)
	bool CanOnlyPlaceOnTerrain; // 0x118(0x01)
	char UnknownData_119[0x7]; // 0x119(0x07)
	struct FGameplayTagQuery ExcludeTags; // 0x120(0x48)
	struct AItemMarker* PlacementMarker; // 0x168(0x08)
	struct AItem* Item; // 0x170(0x08)
	bool bIsPlacementActive; // 0x178(0x01)
	bool bIsMarkerHidden; // 0x179(0x01)
	bool bIsMarkerValid; // 0x17a(0x01)
	bool bCanPlaceMarker; // 0x17b(0x01)
	char UnknownData_17C[0x4]; // 0x17c(0x04)
	struct FTransform LastPlacement; // 0x180(0x30)
	char UnknownData_1B0[0x20]; // 0x1b0(0x20)

	void ToggleValid(bool Valid); // Function FSD.ItemPlacerAggregator.ToggleValid
	void TogglePlacement(bool Inactive); // Function FSD.ItemPlacerAggregator.TogglePlacement
	void ToggleMarkerHidden(bool InHidden); // Function FSD.ItemPlacerAggregator.ToggleMarkerHidden
	void PlacementUpdatedDelegate__DelegateSignature(bool InPlacementValid, struct FTransform InPlacement); // DelegateFunction FSD.ItemPlacerAggregator.PlacementUpdatedDelegate__DelegateSignature
	void MarkerDelegate__DelegateSignature(struct AItemMarker* Marker); // DelegateFunction FSD.ItemPlacerAggregator.MarkerDelegate__DelegateSignature
	void GetPlacementEx(struct FTransform Placement, bool OutValidLocation, bool OutValidMarker); // Function FSD.ItemPlacerAggregator.GetPlacementEx
	bool GetPlacement(struct FTransform Placement); // Function FSD.ItemPlacerAggregator.GetPlacement
	void ClearIgnoredActors(); // Function FSD.ItemPlacerAggregator.ClearIgnoredActors
	void AddIgnoredActor(struct AActor* InActor); // Function FSD.ItemPlacerAggregator.AddIgnoredActor
};

// Class FSD.ItemPreviewActor
// Size: 0x258 (Inherited: 0x220)
struct AItemPreviewActor : AActor {
	char UnknownData_220[0x8]; // 0x220(0x08)
	struct UItemSkin* CurrentSkinColor; // 0x228(0x08)
	struct UItemSkin* CurrentSkinMesh; // 0x230(0x08)
	char UnknownData_238[0x10]; // 0x238(0x10)
	struct AActor* itemClass; // 0x248(0x08)
	char UnknownData_250[0x8]; // 0x250(0x08)

	void UnSkinItem(struct USkinEffect* Skin); // Function FSD.ItemPreviewActor.UnSkinItem
	void SkinItem(struct USkinEffect* Skin); // Function FSD.ItemPreviewActor.SkinItem
	void SetItemClass(struct AActor* itemClass); // Function FSD.ItemPreviewActor.SetItemClass
	void OnUnSkinItem(struct USkinEffect* Skin); // Function FSD.ItemPreviewActor.OnUnSkinItem
	void OnSkinPreviewChanged(struct UItemSkin* PreviewSkin); // Function FSD.ItemPreviewActor.OnSkinPreviewChanged
	void OnSkinItem(struct USkinEffect* Skin); // Function FSD.ItemPreviewActor.OnSkinItem
	void OnSkinChanged(); // Function FSD.ItemPreviewActor.OnSkinChanged
	void ChangeSkin(struct UItemSkin* skinMesh, struct UItemSkin* skinColor, bool isPreview); // Function FSD.ItemPreviewActor.ChangeSkin
};

// Class FSD.ItemsBarIcon
// Size: 0x258 (Inherited: 0x230)
struct UItemsBarIcon : UUserWidget {
	bool Selected; // 0x230(0x01)
	char UnknownData_231[0x7]; // 0x231(0x07)
	struct UItemsBar* ItemBar; // 0x238(0x08)
	struct APlayerCharacter* Character; // 0x240(0x08)
	struct AItem* Item; // 0x248(0x08)
	int32_t Index; // 0x250(0x04)
	char UnknownData_254[0x4]; // 0x254(0x04)

	void OnUnselect(); // Function FSD.ItemsBarIcon.OnUnselect
	void OnSelect(); // Function FSD.ItemsBarIcon.OnSelect
	void OnInit(); // Function FSD.ItemsBarIcon.OnInit
};

// Class FSD.ItemsBar
// Size: 0x288 (Inherited: 0x250)
struct UItemsBar : UFSDUserWidget {
	struct UItemsBarIcon* DefaultItemWidget; // 0x250(0x08)
	bool bShowSupplyItem; // 0x258(0x01)
	char UnknownData_259[0x7]; // 0x259(0x07)
	struct TArray<struct UItemsBarIcon*> ItemIcons; // 0x260(0x10)
	struct UItemsBarIcon* SupplyIcon; // 0x270(0x08)
	struct UItemsBarIcon* SelectedIcon; // 0x278(0x08)
	char UnknownData_280[0x8]; // 0x280(0x08)

	void OnSupplyItemUnequipped(struct UItemsBarIcon* ItemIcon); // Function FSD.ItemsBar.OnSupplyItemUnequipped
	void OnSupplyItemEquipped(struct UItemsBarIcon* ItemIcon); // Function FSD.ItemsBar.OnSupplyItemEquipped
	void OnSupplyItemAdded(struct UItemsBarIcon* ItemIcon); // Function FSD.ItemsBar.OnSupplyItemAdded
	void OnItemUnequipped(struct UItemsBarIcon* ItemIcon); // Function FSD.ItemsBar.OnItemUnequipped
	void OnItemsLoaded(); // Function FSD.ItemsBar.OnItemsLoaded
	void OnItemEquipped(struct UItemsBarIcon* ItemIcon); // Function FSD.ItemsBar.OnItemEquipped
	void OnItemClicked(); // Function FSD.ItemsBar.OnItemClicked
	void OnItemAdded(struct UItemsBarIcon* ItemIcon); // Function FSD.ItemsBar.OnItemAdded
	void OnClear(); // Function FSD.ItemsBar.OnClear
	void ItemEquipped(struct AItem* NewItem); // Function FSD.ItemsBar.ItemEquipped
	void ItemClicked(struct AItem* NewItem); // Function FSD.ItemsBar.ItemClicked
};

// Class FSD.SkinBank
// Size: 0x68 (Inherited: 0x30)
struct USkinBank : UDataAsset {
	struct UItemID* ItemID; // 0x30(0x08)
	struct TArray<struct USkinBank*> SubBanks; // 0x38(0x10)
	struct TArray<struct UItemSkin*> Skins; // 0x48(0x10)
	struct TArray<struct UItemSkin*> AllSkins; // 0x58(0x10)

	void AddSkins(struct TArray<struct UItemSkin*> skinsToAdd); // Function FSD.SkinBank.AddSkins
};

// Class FSD.ItemSkinSet
// Size: 0x38 (Inherited: 0x30)
struct UItemSkinSet : UDataAsset {
	bool ColorIsLockedToSet; // 0x30(0x01)
	char UnknownData_31[0x7]; // 0x31(0x07)
};

// Class FSD.SavablePrimaryDataAsset
// Size: 0x60 (Inherited: 0x30)
struct USavablePrimaryDataAsset : UPrimaryDataAsset {
	char UnknownData_30[0x8]; // 0x30(0x08)
	int32_t BuildRestrictions; // 0x38(0x04)
	int32_t PlatformRestrictions; // 0x3c(0x04)
	bool EnableDangerousSaveGameIDEditing; // 0x40(0x01)
	char UnknownData_41[0x3]; // 0x41(0x03)
	struct FGuid SavegameID; // 0x44(0x10)
	char UnknownData_54[0x4]; // 0x54(0x04)
	struct UBuildRestriction* BuildRestriction; // 0x58(0x08)
};

// Class FSD.ItemSkin
// Size: 0xf8 (Inherited: 0x60)
struct UItemSkin : USavablePrimaryDataAsset {
	struct FMulticastInlineDelegate OnSkinUnlocked; // 0x60(0x10)
	struct FMulticastInlineDelegate OnSkinEquipped; // 0x70(0x10)
	struct FMulticastInlineDelegate OnSkinUnequipped; // 0x80(0x10)
	bool UnlockedFromStart; // 0x90(0x01)
	char UnknownData_91[0x7]; // 0x91(0x07)
	struct UDLCBase* RequiredDLC; // 0x98(0x08)
	enum class EItemSkinType SkinType; // 0xa0(0x01)
	char UnknownData_A1[0x3]; // 0xa1(0x03)
	int32_t SortPriority; // 0xa4(0x04)
	struct FText SkinName; // 0xa8(0x18)
	struct UItemSkinSet* SkinSet; // 0xc0(0x08)
	struct UMaterialInterface* SkinIconMaterial; // 0xc8(0x08)
	struct TArray<struct USkinEffect*> SkinEffects; // 0xd0(0x10)
	bool KeepOutOfBuild; // 0xe0(0x01)
	char UnknownData_E1[0x7]; // 0xe1(0x07)
	struct UItemID* OwningItem; // 0xe8(0x08)
	struct UPlayerCharacterID* OwningCharacter; // 0xf0(0x08)

	bool Unlock(struct UObject* WorldContext, struct UItemID* ItemID, bool broadcast); // Function FSD.ItemSkin.Unlock
	void Receive_SkinItem(struct UObject* Skinnable); // Function FSD.ItemSkin.Receive_SkinItem
	void ItemSkinSignature__DelegateSignature(struct UItemSkin* Skin); // DelegateFunction FSD.ItemSkin.ItemSkinSignature__DelegateSignature
	void ItemSkinEquipSignature__DelegateSignature(struct UItemSkin* Skin); // DelegateFunction FSD.ItemSkin.ItemSkinEquipSignature__DelegateSignature
	bool IsLocked(struct UObject* WorldContext, struct UItemID* skinnableID); // Function FSD.ItemSkin.IsLocked
	bool IsEquippedOnItem(struct UItemID* ItemID, struct AFSDPlayerState* PlayerState); // Function FSD.ItemSkin.IsEquippedOnItem
	struct UItemID* GetOwningItem(); // Function FSD.ItemSkin.GetOwningItem
	struct UPlayerCharacterID* GetOwningCharacter(); // Function FSD.ItemSkin.GetOwningCharacter
};

// Class FSD.SkinEffect
// Size: 0x28 (Inherited: 0x28)
struct USkinEffect : UObject {

	void Receive_RemoveFromItem(struct UMeshComponent* Mesh, struct AActor* Skinnable, bool IsFirstPerson); // Function FSD.SkinEffect.Receive_RemoveFromItem
	void Receive_AddToItem(struct UMeshComponent* Mesh, struct AActor* Skinnable, bool IsFirstPerson); // Function FSD.SkinEffect.Receive_AddToItem
};

// Class FSD.MaterialSkinEffect
// Size: 0x38 (Inherited: 0x28)
struct UMaterialSkinEffect : USkinEffect {
	struct TArray<struct TSoftObjectPtr<struct UMaterialInterface>> Materials; // 0x28(0x10)
};

// Class FSD.SkeletalMeshSkinEffect
// Size: 0x50 (Inherited: 0x28)
struct USkeletalMeshSkinEffect : USkinEffect {
	struct TSoftObjectPtr<struct USkeletalMesh> Mesh; // 0x28(0x28)
};

// Class FSD.ItemSkinSettings
// Size: 0xb8 (Inherited: 0x30)
struct UItemSkinSettings : UDataAsset {
	struct TArray<struct USkinBank*> SkinBanks; // 0x30(0x10)
	struct TMap<struct UItemSkin*, struct FItemSkinOwners> ItemSkins; // 0x40(0x50)
	struct UItemSkinSet* StockSet; // 0x90(0x08)
	struct TArray<struct UItemSkin*> LoadedSkins; // 0x98(0x10)
	char UnknownData_A8[0x10]; // 0xa8(0x10)
};

// Class FSD.ItemSkinFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct UItemSkinFunctionLibrary : UBlueprintFunctionLibrary {
};

// Class FSD.ItemSkinSchematicCollection
// Size: 0x68 (Inherited: 0x30)
struct UItemSkinSchematicCollection : UDataAsset {
	struct UItemSkin* Skin; // 0x30(0x08)
	struct USchematicCategory* Category; // 0x38(0x08)
	struct USchematicPricingTier* PricingTier; // 0x40(0x08)
	struct USchematicRarity* Rarity; // 0x48(0x08)
	enum class EItemSkinCollectionType CollectionType; // 0x50(0x01)
	enum class EItemSkinCollectionType LastGeneratedCollectionType; // 0x51(0x01)
	char UnknownData_52[0x6]; // 0x52(0x06)
	struct TArray<struct USchematic*> Schematics; // 0x58(0x10)
};

// Class FSD.ItemUpgrade
// Size: 0x150 (Inherited: 0x58)
struct UItemUpgrade : USavableDataAsset {
	char UnknownData_58[0x8]; // 0x58(0x08)
	struct FMulticastInlineDelegate OnCrafted; // 0x60(0x10)
	struct FMulticastInlineDelegate OnEquipped; // 0x70(0x10)
	struct FMulticastInlineDelegate OnUnequipped; // 0x80(0x10)
	struct FText Name; // 0x90(0x18)
	struct FText Description; // 0xa8(0x18)
	int32_t Cost; // 0xc0(0x04)
	bool UseOldCost; // 0xc4(0x01)
	enum class EUpgradeTiers UpgradeTier; // 0xc5(0x01)
	enum class EUpgradeClass upgradeClass; // 0xc6(0x01)
	char UnknownData_C7[0x1]; // 0xc7(0x01)
	struct UItemUpgradeCategory* Category; // 0xc8(0x08)
	struct TMap<struct UResourceData*, float> UpgradeCraftingCost; // 0xd0(0x50)
	struct TArray<struct UResourceData*> ResourceCost; // 0x120(0x10)
	struct TArray<struct UItemUpgradeElement*> Elements; // 0x130(0x10)
	struct TArray<struct FItemUpgradeStatText> StatTexts; // 0x140(0x10)

	void UnequipUpgrade(struct AActor* itemClass, struct AFSDPlayerState* PlayerState); // Function FSD.ItemUpgrade.UnequipUpgrade
	void ItemUpgradeSignature__DelegateSignature(struct UItemUpgrade* Upgrade); // DelegateFunction FSD.ItemUpgrade.ItemUpgradeSignature__DelegateSignature
	struct TArray<struct FItemUpgradeStatText> GetUpgradeStatTexts(); // Function FSD.ItemUpgrade.GetUpgradeStatTexts
	struct FText GetUpgradeName(struct UItemUpgrade* Upgrade); // Function FSD.ItemUpgrade.GetUpgradeName
	struct TArray<struct FCraftingCost> GetUpgradeCost(); // Function FSD.ItemUpgrade.GetUpgradeCost
	struct FString GetSourceName(); // Function FSD.ItemUpgrade.GetSourceName
	struct FUpgradeValues GetGenericUpgradedValue(struct AActor* Item, struct AFSDPlayerState* Player, struct UItemUpgrade* upgradeClass); // Function FSD.ItemUpgrade.GetGenericUpgradedValue
	float GetCreditsCost(); // Function FSD.ItemUpgrade.GetCreditsCost
	void EquipUpgrade(struct AActor* itemClass, struct AFSDPlayerState* PlayerState); // Function FSD.ItemUpgrade.EquipUpgrade
	void CraftItem(struct UItemID* ItemID, struct AFSDPlayerController* PlayerController, struct APlayerCharacter* previewedCharacter); // Function FSD.ItemUpgrade.CraftItem
};

// Class FSD.CombinedUpgrade
// Size: 0x170 (Inherited: 0x150)
struct UCombinedUpgrade : UItemUpgrade {
	struct TArray<struct TSoftObjectPtr<struct UItemUpgrade>> CombinedUpgrades; // 0x150(0x10)
	struct TArray<struct UItemUpgrade*> LoadedUpgrades; // 0x160(0x10)

	struct TArray<struct UItemUpgrade*> GetUpgrades(); // Function FSD.CombinedUpgrade.GetUpgrades
};

// Class FSD.OverclockUpgrade
// Size: 0x178 (Inherited: 0x170)
struct UOverclockUpgrade : UCombinedUpgrade {
	struct USchematicCategory* SchematicCategory; // 0x170(0x08)
};

// Class FSD.ItemUpgradeCategory
// Size: 0x70 (Inherited: 0x30)
struct UItemUpgradeCategory : UDataAsset {
	struct FText CategoryName; // 0x30(0x18)
	struct FText CategoryDescription; // 0x48(0x18)
	struct UTexture2D* CategoryIcon; // 0x60(0x08)
	struct FColor CategoryTint; // 0x68(0x04)
	char UnknownData_6C[0x4]; // 0x6c(0x04)
};

// Class FSD.ItemUpgradeElement
// Size: 0x30 (Inherited: 0x30)
struct UItemUpgradeElement : UDataAsset {
};

// Class FSD.MuzzleEffectUpgradeElement
// Size: 0x40 (Inherited: 0x30)
struct UMuzzleEffectUpgradeElement : UItemUpgradeElement {
	struct UFXSystemAsset* FPMuzzleFlash; // 0x30(0x08)
	struct UFXSystemAsset* TPMuzzleFlash; // 0x38(0x08)
};

// Class FSD.FireWeaponSoundUpgradeElement
// Size: 0x38 (Inherited: 0x30)
struct UFireWeaponSoundUpgradeElement : UItemUpgradeElement {
	struct USoundCue* FireSound; // 0x30(0x08)
};

// Class FSD.TracerUpgradeElement
// Size: 0x38 (Inherited: 0x30)
struct UTracerUpgradeElement : UItemUpgradeElement {
	struct UFXSystemAsset* Tracer; // 0x30(0x08)
};

// Class FSD.HitScanImpactUpgradeElement
// Size: 0x40 (Inherited: 0x30)
struct UHitScanImpactUpgradeElement : UItemUpgradeElement {
	struct UFXSystemAsset* ImpactParticle; // 0x30(0x08)
	struct USoundCue* ImpactSound; // 0x38(0x08)
};

// Class FSD.TrailUpgradeElement
// Size: 0x38 (Inherited: 0x30)
struct UTrailUpgradeElement : UItemUpgradeElement {
	struct UFXSystemAsset* Trail; // 0x30(0x08)
};

// Class FSD.ReplaceMaterialUpgradeElement
// Size: 0x40 (Inherited: 0x30)
struct UReplaceMaterialUpgradeElement : UItemUpgradeElement {
	struct UMaterialInterface* TargetMaterial; // 0x30(0x08)
	struct UMaterialInterface* ReplaceWithMaterial; // 0x38(0x08)
};

// Class FSD.ReplaceSkeletonMeshUpgradeElement
// Size: 0x48 (Inherited: 0x30)
struct UReplaceSkeletonMeshUpgradeElement : UItemUpgradeElement {
	struct USkeletalMesh* TargetMesh; // 0x30(0x08)
	struct USkeletalMesh* ReplaceWithMesh; // 0x38(0x08)
	struct UAnimInstance* ReplaceWithAnimInstance; // 0x40(0x08)
};

// Class FSD.ItemUpgradePreviewComponent
// Size: 0xd0 (Inherited: 0xb0)
struct UItemUpgradePreviewComponent : UActorComponent {
	struct FMulticastInlineDelegate OnPreviewUpgradeChanged; // 0xb0(0x10)
	struct UItemUpgrade* PreviewUpgrade; // 0xc0(0x08)
	char UnknownData_C8[0x8]; // 0xc8(0x08)

	void SetPreviewUpgrade(struct UItemUpgrade* InUpgrade); // Function FSD.ItemUpgradePreviewComponent.SetPreviewUpgrade
	void RefreshPreviewUpgrade(); // Function FSD.ItemUpgradePreviewComponent.RefreshPreviewUpgrade
	void ItemUpgradeDelegate__DelegateSignature(struct UItemUpgrade* PreviewUpgrade); // DelegateFunction FSD.ItemUpgradePreviewComponent.ItemUpgradeDelegate__DelegateSignature
};

// Class FSD.StandardItemUpgrade
// Size: 0x158 (Inherited: 0x150)
struct UStandardItemUpgrade : UItemUpgrade {
	float amount; // 0x150(0x04)
	bool IsPercentage; // 0x154(0x01)
	char UnknownData_155[0x3]; // 0x155(0x03)
};

// Class FSD.AmmoDrivenWeaponUpgrade
// Size: 0x160 (Inherited: 0x158)
struct UAmmoDrivenWeaponUpgrade : UStandardItemUpgrade {
	enum class EAmmoDrivenWeapnUpgradeType upgradeType; // 0x158(0x01)
	char UnknownData_159[0x7]; // 0x159(0x07)

	struct FUpgradeValues GetUpgradedValue(struct AItem* Item, struct AFSDPlayerState* Player, enum class EAmmoDrivenWeapnUpgradeType upgradeType); // Function FSD.AmmoDrivenWeaponUpgrade.GetUpgradedValue
};

// Class FSD.WeaponHitCounterUpgrade
// Size: 0x158 (Inherited: 0x150)
struct UWeaponHitCounterUpgrade : UItemUpgrade {
	struct UWeaponHitCounterComponent* ComponentClass; // 0x150(0x08)

	struct FUpgradeValues GetUpgradedValue(struct AFSDPlayerState* Player, struct AActor* Item, struct UWeaponHitCounterComponent* ComponentClass); // Function FSD.WeaponHitCounterUpgrade.GetUpgradedValue
};

// Class FSD.BeltDrivenWeaponUpgrade
// Size: 0x160 (Inherited: 0x158)
struct UBeltDrivenWeaponUpgrade : UStandardItemUpgrade {
	enum class EBeltDrivenWeaponUpgrade upgradeType; // 0x158(0x01)
	char UnknownData_159[0x7]; // 0x159(0x07)

	struct FUpgradeValues GetUpgradedValue(struct AItem* Item, struct AFSDPlayerState* Player, enum class EBeltDrivenWeaponUpgrade upgradeType); // Function FSD.BeltDrivenWeaponUpgrade.GetUpgradedValue
};

// Class FSD.GatlingGunUpgrade
// Size: 0x158 (Inherited: 0x150)
struct UGatlingGunUpgrade : UItemUpgrade {
	enum class EGatlingGunUpgrade upgradeType; // 0x150(0x01)
	char UnknownData_151[0x3]; // 0x151(0x03)
	float amount; // 0x154(0x04)

	struct FUpgradeValues GetUpgradedValue(struct AItem* Item, struct AFSDPlayerState* Player, enum class EGatlingGunUpgrade upgradeType); // Function FSD.GatlingGunUpgrade.GetUpgradedValue
};

// Class FSD.AssaultRifleUpgrade
// Size: 0x158 (Inherited: 0x150)
struct UAssaultRifleUpgrade : UItemUpgrade {
	enum class EAssaultRifleUpgrade upgradeType; // 0x150(0x01)
	char UnknownData_151[0x3]; // 0x151(0x03)
	float amount; // 0x154(0x04)

	struct FUpgradeValues GetUpgradedValue(struct AItem* Item, struct AFSDPlayerState* Player, enum class EAssaultRifleUpgrade upgradeType); // Function FSD.AssaultRifleUpgrade.GetUpgradedValue
};

// Class FSD.BoltActionRifleUpgrade
// Size: 0x160 (Inherited: 0x158)
struct UBoltActionRifleUpgrade : UStandardItemUpgrade {
	enum class EBoltActionRifleUpgrades upgradeType; // 0x158(0x01)
	char UnknownData_159[0x7]; // 0x159(0x07)

	struct FUpgradeValues GetUpgradedValue(struct AItem* Item, struct AFSDPlayerState* Player, enum class EBoltActionRifleUpgrades upgradeType); // Function FSD.BoltActionRifleUpgrade.GetUpgradedValue
};

// Class FSD.DualMachinePistolsUpgrade
// Size: 0x158 (Inherited: 0x150)
struct UDualMachinePistolsUpgrade : UItemUpgrade {
	enum class EDualMachinePistolsUpgrades upgradeType; // 0x150(0x01)
	char UnknownData_151[0x3]; // 0x151(0x03)
	float amount; // 0x154(0x04)

	struct FUpgradeValues GetUpgradedValue(struct AItem* Item, struct AFSDPlayerState* Player, enum class EDualMachinePistolsUpgrades upgradeType); // Function FSD.DualMachinePistolsUpgrade.GetUpgradedValue
};

// Class FSD.ChargedWeaponUpgrade
// Size: 0x160 (Inherited: 0x158)
struct UChargedWeaponUpgrade : UStandardItemUpgrade {
	enum class EChargedWeaponUpgrades upgradeType; // 0x158(0x01)
	char UnknownData_159[0x7]; // 0x159(0x07)

	struct FUpgradeValues GetUpgradedValue(struct AItem* Item, struct AFSDPlayerState* Player, enum class EChargedWeaponUpgrades upgradeType); // Function FSD.ChargedWeaponUpgrade.GetUpgradedValue
};

// Class FSD.AutoCannonUpgrade
// Size: 0x160 (Inherited: 0x158)
struct UAutoCannonUpgrade : UStandardItemUpgrade {
	enum class EAutoCannonUpgrades upgradeType; // 0x158(0x01)
	char UnknownData_159[0x7]; // 0x159(0x07)

	struct FUpgradeValues GetUpgradedValue(struct AItem* Item, struct AFSDPlayerState* Player, enum class EAutoCannonUpgrades upgradeType); // Function FSD.AutoCannonUpgrade.GetUpgradedValue
};

// Class FSD.SawedOffShotgunUpgrade
// Size: 0x158 (Inherited: 0x150)
struct USawedOffShotgunUpgrade : UItemUpgrade {
	enum class ESawedOffShotgunUpgrades upgradeType; // 0x150(0x01)
	char UnknownData_151[0x3]; // 0x151(0x03)
	float amount; // 0x154(0x04)

	struct FUpgradeValues GetUpgradedValue(struct AItem* Item, struct AFSDPlayerState* Player, enum class ESawedOffShotgunUpgrades upgradeType); // Function FSD.SawedOffShotgunUpgrade.GetUpgradedValue
};

// Class FSD.BurstWeaponUpgrade
// Size: 0x158 (Inherited: 0x150)
struct UBurstWeaponUpgrade : UItemUpgrade {
	enum class EBurstWeaponUpgrades upgradeType; // 0x150(0x01)
	char UnknownData_151[0x3]; // 0x151(0x03)
	float amount; // 0x154(0x04)

	struct FUpgradeValues GetUpgradedValue(struct AItem* Item, struct AFSDPlayerState* Player, enum class EBurstWeaponUpgrades upgradeType); // Function FSD.BurstWeaponUpgrade.GetUpgradedValue
};

// Class FSD.AutoShotgunUpgrade
// Size: 0x158 (Inherited: 0x150)
struct UAutoShotgunUpgrade : UItemUpgrade {
	enum class EAutoShotgunUpgrades upgradeType; // 0x150(0x01)
	char UnknownData_151[0x3]; // 0x151(0x03)
	float amount; // 0x154(0x04)

	struct FUpgradeValues GetUpgradedValue(struct AItem* Item, struct AFSDPlayerState* Player, enum class EAutoShotgunUpgrades upgradeType); // Function FSD.AutoShotgunUpgrade.GetUpgradedValue
};

// Class FSD.BasicPistolUpgrade
// Size: 0x158 (Inherited: 0x150)
struct UBasicPistolUpgrade : UItemUpgrade {
	enum class EBasicPistol upgradeType; // 0x150(0x01)
	char UnknownData_151[0x3]; // 0x151(0x03)
	float amount; // 0x154(0x04)

	struct FUpgradeValues GetUpgradedValue(struct AItem* Item, struct AFSDPlayerState* Player, enum class EBasicPistol upgradeType); // Function FSD.BasicPistolUpgrade.GetUpgradedValue
};

// Class FSD.RevolverUpgrade
// Size: 0x158 (Inherited: 0x150)
struct URevolverUpgrade : UItemUpgrade {
	enum class ERevolerUpgrades upgradeType; // 0x150(0x01)
	char UnknownData_151[0x3]; // 0x151(0x03)
	float amount; // 0x154(0x04)

	struct FUpgradeValues GetUpgradedValue(struct AItem* Item, struct AFSDPlayerState* Player, enum class ERevolerUpgrades upgradeType); // Function FSD.RevolverUpgrade.GetUpgradedValue
};

// Class FSD.CryoSprayUpgrade
// Size: 0x160 (Inherited: 0x158)
struct UCryoSprayUpgrade : UStandardItemUpgrade {
	enum class ECryoSprayUpgrades upgradeType; // 0x158(0x01)
	char UnknownData_159[0x7]; // 0x159(0x07)

	struct FUpgradeValues GetUpgradedValue(struct AItem* Item, struct AFSDPlayerState* Player, enum class ECryoSprayUpgrades upgradeType); // Function FSD.CryoSprayUpgrade.GetUpgradedValue
};

// Class FSD.CryoSprayProjectileUpgrade
// Size: 0x160 (Inherited: 0x150)
struct UCryoSprayProjectileUpgrade : UItemUpgrade {
	float MaxFireCost; // 0x150(0x04)
	float BaseArch; // 0x154(0x04)
	struct AProjectile* projectileClass; // 0x158(0x08)

	struct FUpgradeValues GetUpgradedValue(struct AItem* Item, struct AFSDPlayerState* Player, struct AProjectile* projectileClass); // Function FSD.CryoSprayProjectileUpgrade.GetUpgradedValue
};

// Class FSD.PickaxeUpgrade
// Size: 0x158 (Inherited: 0x150)
struct UPickaxeUpgrade : UItemUpgrade {
	enum class EPickaxeUpgradeType upgradeType; // 0x150(0x01)
	char UnknownData_151[0x3]; // 0x151(0x03)
	float amount; // 0x154(0x04)

	struct FUpgradeValues GetUpgradedValue(struct AItem* Item, struct AFSDPlayerState* Player, enum class EPickaxeUpgradeType upgradeType); // Function FSD.PickaxeUpgrade.GetUpgradedValue
};

// Class FSD.FlameThrowerUpgrade
// Size: 0x158 (Inherited: 0x150)
struct UFlameThrowerUpgrade : UItemUpgrade {
	enum class EFlameThrowerUpgradeType upgradeType; // 0x150(0x01)
	char UnknownData_151[0x3]; // 0x151(0x03)
	float amount; // 0x154(0x04)

	struct FUpgradeValues GetUpgradedValue(struct AItem* Item, struct AFSDPlayerState* Player, enum class EFlameThrowerUpgradeType upgradeType); // Function FSD.FlameThrowerUpgrade.GetUpgradedValue
};

// Class FSD.StickyFlameStatusEffectUpgrade
// Size: 0x158 (Inherited: 0x150)
struct UStickyFlameStatusEffectUpgrade : UItemUpgrade {
	struct UStatusEffect* StatusEffect; // 0x150(0x08)

	struct FUpgradeValues GetUpgradedValue(struct AActor* Item, struct AFSDPlayerState* Player, struct UStatusEffect* StatusEffect); // Function FSD.StickyFlameStatusEffectUpgrade.GetUpgradedValue
};

// Class FSD.DoubleDrillUpgrade
// Size: 0x158 (Inherited: 0x150)
struct UDoubleDrillUpgrade : UItemUpgrade {
	enum class EDoubleDrillUpgradeType upgradeType; // 0x150(0x01)
	char UnknownData_151[0x3]; // 0x151(0x03)
	float amount; // 0x154(0x04)

	struct FUpgradeValues GetUpgradedValue(struct AItem* Item, struct AFSDPlayerState* Player, enum class EDoubleDrillUpgradeType upgradeType); // Function FSD.DoubleDrillUpgrade.GetUpgradedValue
};

// Class FSD.InventoryItemUpgrade
// Size: 0x160 (Inherited: 0x158)
struct UInventoryItemUpgrade : UStandardItemUpgrade {
	enum class EInventoryItemUpgradeType upgradeType; // 0x158(0x01)
	char UnknownData_159[0x7]; // 0x159(0x07)

	struct FUpgradeValues GetUpgradedValue(struct AItem* Item, struct AFSDPlayerState* Player, enum class EInventoryItemUpgradeType upgradeType); // Function FSD.InventoryItemUpgrade.GetUpgradedValue
};

// Class FSD.CapacityUpgrade
// Size: 0x158 (Inherited: 0x150)
struct UCapacityUpgrade : UItemUpgrade {
	float amount; // 0x150(0x04)
	char UnknownData_154[0x4]; // 0x154(0x04)

	struct FUpgradeValues GetUpgradedValue(struct AActor* Item, struct AFSDPlayerState* Player); // Function FSD.CapacityUpgrade.GetUpgradedValue
};

// Class FSD.CooldownUpgrade
// Size: 0x158 (Inherited: 0x150)
struct UCooldownUpgrade : UItemUpgrade {
	float amount; // 0x150(0x04)
	char UnknownData_154[0x4]; // 0x154(0x04)

	struct FUpgradeValues GetUpgradedValue(struct AActor* Item, struct AFSDPlayerState* Player); // Function FSD.CooldownUpgrade.GetUpgradedValue
};

// Class FSD.MultiHitscanUpgrade
// Size: 0x158 (Inherited: 0x150)
struct UMultiHitscanUpgrade : UItemUpgrade {
	enum class EMultiHitscanUpgradeType upgradeType; // 0x150(0x01)
	char UnknownData_151[0x3]; // 0x151(0x03)
	float amount; // 0x154(0x04)

	float GetUpgradedValue(struct AItem* Item, struct AFSDPlayerState* Player, enum class EMultiHitscanUpgradeType upgradeType, float outBaseValue, float outUpgradeValue, enum class EItemPreviewStatus outPreviewStatus, bool includePreview); // Function FSD.MultiHitscanUpgrade.GetUpgradedValue
};

// Class FSD.HitscanBaseUpgrade
// Size: 0x160 (Inherited: 0x158)
struct UHitscanBaseUpgrade : UStandardItemUpgrade {
	enum class EHitScanBaseUpgradeType upgradeType; // 0x158(0x01)
	char UnknownData_159[0x7]; // 0x159(0x07)

	struct FUpgradeValues GetUpgradedValue(struct AItem* Item, struct AFSDPlayerState* Player, enum class EHitScanBaseUpgradeType upgradeType); // Function FSD.HitscanBaseUpgrade.GetUpgradedValue
};

// Class FSD.DamageUpgrade
// Size: 0x168 (Inherited: 0x158)
struct UDamageUpgrade : UStandardItemUpgrade {
	enum class EDamageUpgrade upgradeType; // 0x158(0x01)
	enum class EDamageComponentType DamageComponentType; // 0x159(0x01)
	char UnknownData_15A[0x6]; // 0x15a(0x06)
	struct AActor* RequiredClass; // 0x160(0x08)

	struct FUpgradeValues GetUpgradedValue(struct AActor* Item, struct AActor* upgradedItem, struct AFSDPlayerState* Player, enum class EDamageUpgrade upgradeType, enum class EDamageComponentType DamageComponentType); // Function FSD.DamageUpgrade.GetUpgradedValue
};

// Class FSD.FlatDamageUpgrade
// Size: 0x168 (Inherited: 0x150)
struct UFlatDamageUpgrade : UItemUpgrade {
	float Damage; // 0x150(0x04)
	char UnknownData_154[0x4]; // 0x154(0x04)
	struct UDamageClass* DamageClass; // 0x158(0x08)
	struct AActor* RequiredClass; // 0x160(0x08)

	float GetUpgradedValue(struct AActor* Item, struct AFSDPlayerState* Player, struct UDamageClass* DamageClass, float outBaseValue, float outUpgradeValue, enum class EItemPreviewStatus outPreviewStatus, bool includePreview); // Function FSD.FlatDamageUpgrade.GetUpgradedValue
};

// Class FSD.RandomDamageUpgrade
// Size: 0x158 (Inherited: 0x150)
struct URandomDamageUpgrade : UItemUpgrade {
	struct FRandRange DamageRange; // 0x150(0x08)

	struct FUpgradeValues GetUpgradedValue(struct AActor* Item, struct AFSDPlayerState* Player); // Function FSD.RandomDamageUpgrade.GetUpgradedValue
};

// Class FSD.DamageConversionUpgrade
// Size: 0x168 (Inherited: 0x150)
struct UDamageConversionUpgrade : UItemUpgrade {
	struct UDamageClass* DamageClass; // 0x150(0x08)
	float ConversionPercentage; // 0x158(0x04)
	bool DamageIsAdded; // 0x15c(0x01)
	char UnknownData_15D[0x3]; // 0x15d(0x03)
	struct AActor* RequiredClass; // 0x160(0x08)

	struct FUpgradeValues GetUpgradedValue(struct AActor* Item, struct AActor* upgradedItem, struct AFSDPlayerState* Player, struct UDamageClass* DamageClass); // Function FSD.DamageConversionUpgrade.GetUpgradedValue
};

// Class FSD.GatlingHotShellsBonusUpgrade
// Size: 0x168 (Inherited: 0x150)
struct UGatlingHotShellsBonusUpgrade : UItemUpgrade {
	struct UDamageClass* DamageClass; // 0x150(0x08)
	float ConversionPercentage; // 0x158(0x04)
	bool DamageIsAdded; // 0x15c(0x01)
	char UnknownData_15D[0x3]; // 0x15d(0x03)
	float TemperatureRequired; // 0x160(0x04)
	char UnknownData_164[0x4]; // 0x164(0x04)

	struct FUpgradeValues GetUpgradedValue(struct AActor* Item, struct AFSDPlayerState* Player, struct UDamageClass* DamageClass); // Function FSD.GatlingHotShellsBonusUpgrade.GetUpgradedValue
};

// Class FSD.TargetSpecificDamageBonusUpgrade
// Size: 0x1a8 (Inherited: 0x150)
struct UTargetSpecificDamageBonusUpgrade : UItemUpgrade {
	float Bonus; // 0x150(0x04)
	char UnknownData_154[0x4]; // 0x154(0x04)
	struct FGameplayTagQuery tagQuery; // 0x158(0x48)
	struct FName Key; // 0x1a0(0x08)

	float GetUpgradedValue(struct AActor* Item, struct AFSDPlayerState* Player, struct FName Key, float outBaseValue, float outUpgradeValue, enum class EItemPreviewStatus outPreviewStatus, bool includePreview); // Function FSD.TargetSpecificDamageBonusUpgrade.GetUpgradedValue
};

// Class FSD.TargetStateDamageBonusUpgrade
// Size: 0x160 (Inherited: 0x150)
struct UTargetStateDamageBonusUpgrade : UItemUpgrade {
	enum class ETargetStateDamageBonusType TargetState; // 0x150(0x01)
	char UnknownData_151[0x3]; // 0x151(0x03)
	float Bonus; // 0x154(0x04)
	struct UDamageClass* DamageClass; // 0x158(0x08)

	struct FUpgradeValues GetUpgradedValue(struct AActor* Item, struct AFSDPlayerState* Player, enum class ETargetStateDamageBonusType TargetState); // Function FSD.TargetStateDamageBonusUpgrade.GetUpgradedValue
};

// Class FSD.StatusDamageBonusUpgrade
// Size: 0x170 (Inherited: 0x150)
struct UStatusDamageBonusUpgrade : UItemUpgrade {
	struct TArray<struct UStatusEffect*> StatusEffects; // 0x150(0x10)
	float Bonus; // 0x160(0x04)
	char UnknownData_164[0x4]; // 0x164(0x04)
	struct UDamageClass* DamageClass; // 0x168(0x08)

	float GetUpgradedValue(struct AActor* Item, struct AFSDPlayerState* Player, struct UStatusEffect* StatusEffect, float outBaseValue, float outUpgradeValue, enum class EItemPreviewStatus outPreviewStatus, bool includePreview); // Function FSD.StatusDamageBonusUpgrade.GetUpgradedValue
};

// Class FSD.StatusAndStateDamageBonusUpgrade
// Size: 0x180 (Inherited: 0x150)
struct UStatusAndStateDamageBonusUpgrade : UItemUpgrade {
	struct TArray<struct UStatusEffect*> StatusEffects; // 0x150(0x10)
	struct TArray<enum class ETargetStateDamageBonusType> TargetStates; // 0x160(0x10)
	float Bonus; // 0x170(0x04)
	char UnknownData_174[0x4]; // 0x174(0x04)
	struct UDamageClass* DamageClass; // 0x178(0x08)
};

// Class FSD.PushSatusEffectDamageBonusUpgrade
// Size: 0x160 (Inherited: 0x150)
struct UPushSatusEffectDamageBonusUpgrade : UItemUpgrade {
	struct UStatusEffect* StatusEffect; // 0x150(0x08)
	float Chance; // 0x158(0x04)
	char UnknownData_15C[0x4]; // 0x15c(0x04)

	float GetUpgradedValue(struct AActor* Item, struct AFSDPlayerState* Player, struct UStatusEffect* StatusEffect, float outBaseValue, float outUpgradeValue, enum class EItemPreviewStatus outPreviewStatus, bool includePreview); // Function FSD.PushSatusEffectDamageBonusUpgrade.GetUpgradedValue
};

// Class FSD.FearAoEBonusUpgrade
// Size: 0x158 (Inherited: 0x150)
struct UFearAoEBonusUpgrade : UItemUpgrade {
	float FearFactor; // 0x150(0x04)
	float Range; // 0x154(0x04)

	struct FUpgradeValues GetUpgradedValue(struct AActor* Item, struct AFSDPlayerState* Player); // Function FSD.FearAoEBonusUpgrade.GetUpgradedValue
};

// Class FSD.ExplosionUpgrade
// Size: 0x158 (Inherited: 0x150)
struct UExplosionUpgrade : UItemUpgrade {
	enum class EExplosionUpgrade upgradeType; // 0x150(0x01)
	char UnknownData_151[0x3]; // 0x151(0x03)
	float amount; // 0x154(0x04)

	float GetUpgradedValue(struct AActor* upgradedItem, struct AActor* componentItem, struct AFSDPlayerState* Player, enum class EExplosionUpgrade upgradeType, float outBaseValue, float outUpgradeValue, bool includePreview); // Function FSD.ExplosionUpgrade.GetUpgradedValue
};

// Class FSD.SingleUsableUpgrade
// Size: 0x158 (Inherited: 0x150)
struct USingleUsableUpgrade : UItemUpgrade {
	enum class ESingleUsableUpgradeType upgradeType; // 0x150(0x01)
	char UnknownData_151[0x3]; // 0x151(0x03)
	float amount; // 0x154(0x04)

	struct FUpgradeValues GetUpgradedValue(struct AActor* Item, struct AActor* subItem, struct AFSDPlayerState* Player, enum class ESingleUsableUpgradeType upgradeType); // Function FSD.SingleUsableUpgrade.GetUpgradedValue
};

// Class FSD.FlareUpgrade
// Size: 0x158 (Inherited: 0x150)
struct UFlareUpgrade : UItemUpgrade {
	enum class EFlareUpgradeType upgradeType; // 0x150(0x01)
	char UnknownData_151[0x3]; // 0x151(0x03)
	float amount; // 0x154(0x04)

	struct FUpgradeValues GetUpgradedValue(struct AFSDPlayerState* Player, struct AActor* flareClass, enum class EFlareUpgradeType upgradeType); // Function FSD.FlareUpgrade.GetUpgradedValue
};

// Class FSD.GrenadeUpgrade
// Size: 0x158 (Inherited: 0x150)
struct UGrenadeUpgrade : UItemUpgrade {
	enum class EGrenadeUpgradeType upgradeType; // 0x150(0x01)
	char UnknownData_151[0x3]; // 0x151(0x03)
	float amount; // 0x154(0x04)

	struct FUpgradeValues GetUpgradedValue(struct AFSDPlayerState* Player, struct AGrenade* flareClass, enum class EGrenadeUpgradeType upgradeType); // Function FSD.GrenadeUpgrade.GetUpgradedValue
};

// Class FSD.LineCutterUpgrade
// Size: 0x158 (Inherited: 0x150)
struct ULineCutterUpgrade : UItemUpgrade {
	enum class ELineCutterUpgradeType upgradeType; // 0x150(0x01)
	char UnknownData_151[0x3]; // 0x151(0x03)
	float amount; // 0x154(0x04)

	struct FUpgradeValues GetUpgradedValue(struct AFSDPlayerState* Player, struct AActor* Item, enum class ELineCutterUpgradeType upgradeType); // Function FSD.LineCutterUpgrade.GetUpgradedValue
};

// Class FSD.LineCutterProjectileUpgrade
// Size: 0x158 (Inherited: 0x150)
struct ULineCutterProjectileUpgrade : UItemUpgrade {
	enum class ELineCutterProjectileUpgradeType upgradeType; // 0x150(0x01)
	char UnknownData_151[0x3]; // 0x151(0x03)
	float amount; // 0x154(0x04)

	struct FUpgradeValues GetUpgradedValue(struct AFSDPlayerState* Player, struct AActor* Item, enum class ELineCutterProjectileUpgradeType upgradeType); // Function FSD.LineCutterProjectileUpgrade.GetUpgradedValue
};

// Class FSD.ProjectileUpgrade
// Size: 0x168 (Inherited: 0x158)
struct UProjectileUpgrade : UStandardItemUpgrade {
	enum class EProjectileUpgrade upgradeType; // 0x158(0x01)
	char UnknownData_159[0x7]; // 0x159(0x07)
	struct AActor* projectileClass; // 0x160(0x08)

	struct FUpgradeValues GetUpgradedValue(struct AActor* Item, struct AActor* upgradedItem, struct AFSDPlayerState* Player, enum class EProjectileUpgrade upgradeType); // Function FSD.ProjectileUpgrade.GetUpgradedValue
};

// Class FSD.FlareGunUpgrade
// Size: 0x158 (Inherited: 0x150)
struct UFlareGunUpgrade : UItemUpgrade {
	enum class EFlaregunUpgrades upgradeType; // 0x150(0x01)
	char UnknownData_151[0x3]; // 0x151(0x03)
	float amount; // 0x154(0x04)

	struct FUpgradeValues GetUpgradedValue(struct AActor* Item, struct AFSDPlayerState* Player, enum class EFlaregunUpgrades upgradeType); // Function FSD.FlareGunUpgrade.GetUpgradedValue
};

// Class FSD.FlaregunProjectileUpgrade
// Size: 0x160 (Inherited: 0x150)
struct UFlaregunProjectileUpgrade : UItemUpgrade {
	enum class EFlaregunProjectileUpgrades upgradeType; // 0x150(0x01)
	char UnknownData_151[0x3]; // 0x151(0x03)
	float amount; // 0x154(0x04)
	struct AActor* projectileClass; // 0x158(0x08)

	struct FUpgradeValues GetUpgradedValue(struct AActor* Item, struct AActor* upgradedItem, struct AFSDPlayerState* Player, enum class EFlaregunProjectileUpgrades upgradeType); // Function FSD.FlaregunProjectileUpgrade.GetUpgradedValue
};

// Class FSD.ChargedProjectileUpgrade
// Size: 0x160 (Inherited: 0x150)
struct UChargedProjectileUpgrade : UItemUpgrade {
	enum class EChargedProjectileUpgrades upgradeType; // 0x150(0x01)
	char UnknownData_151[0x3]; // 0x151(0x03)
	float amount; // 0x154(0x04)
	struct AActor* projectileClass; // 0x158(0x08)

	struct FUpgradeValues GetUpgradedValue(struct AItem* Item, struct AActor* upgradedActor, struct AFSDPlayerState* Player, enum class EChargedProjectileUpgrades upgradeType); // Function FSD.ChargedProjectileUpgrade.GetUpgradedValue
};

// Class FSD.ElectricalSMGUpgrade
// Size: 0x158 (Inherited: 0x150)
struct UElectricalSMGUpgrade : UItemUpgrade {
	enum class EElectricalSMGUpgrades upgradeType; // 0x150(0x01)
	char UnknownData_151[0x3]; // 0x151(0x03)
	float amount; // 0x154(0x04)

	struct FUpgradeValues GetUpgradedValue(struct AFSDPlayerState* Player, struct AActor* Item, enum class EElectricalSMGUpgrades upgradeType); // Function FSD.ElectricalSMGUpgrade.GetUpgradedValue
};

// Class FSD.ZiplineGunUpgrade
// Size: 0x160 (Inherited: 0x150)
struct UZiplineGunUpgrade : UItemUpgrade {
	enum class EZiplineGunUpgrades upgradeType; // 0x150(0x01)
	char UnknownData_151[0x3]; // 0x151(0x03)
	float amount; // 0x154(0x04)
	struct AZipLineProjectile* projectileClass; // 0x158(0x08)

	struct FUpgradeValues GetUpgradedValue(struct AFSDPlayerState* Player, struct AActor* Item, enum class EZiplineGunUpgrades upgradeType); // Function FSD.ZiplineGunUpgrade.GetUpgradedValue
};

// Class FSD.GrapplingHookUpgrade
// Size: 0x158 (Inherited: 0x150)
struct UGrapplingHookUpgrade : UItemUpgrade {
	enum class EGrapplingHookUpgrade upgradeType; // 0x150(0x01)
	char UnknownData_151[0x3]; // 0x151(0x03)
	float amount; // 0x154(0x04)

	struct FUpgradeValues GetUpgradedValue(struct AFSDPlayerState* Player, struct AActor* Item, enum class EGrapplingHookUpgrade upgradeType); // Function FSD.GrapplingHookUpgrade.GetUpgradedValue
};

// Class FSD.SentryGunUpgrade
// Size: 0x158 (Inherited: 0x150)
struct USentryGunUpgrade : UItemUpgrade {
	enum class ESentryGunUpgradeType upgradeType; // 0x150(0x01)
	char UnknownData_151[0x3]; // 0x151(0x03)
	float amount; // 0x154(0x04)

	struct FUpgradeValues GetUpgradedValue(struct AItem* Item, struct AFSDPlayerState* Player, enum class ESentryGunUpgradeType upgradeType); // Function FSD.SentryGunUpgrade.GetUpgradedValue
};

// Class FSD.SentryGunTypeUpgrade
// Size: 0x160 (Inherited: 0x150)
struct USentryGunTypeUpgrade : UItemUpgrade {
	struct ARecallableSentryGun* SentryGunType; // 0x150(0x08)
	struct AItemMarker* MarkerType; // 0x158(0x08)
};

// Class FSD.ArmorRegeneratorUpgrade
// Size: 0x158 (Inherited: 0x150)
struct UArmorRegeneratorUpgrade : UItemUpgrade {
	enum class EArmorRegeneratorUpgrades upgradeType; // 0x150(0x01)
	char UnknownData_151[0x3]; // 0x151(0x03)
	float amount; // 0x154(0x04)

	float GetUpgradedValue(struct AItem* Item, struct AFSDPlayerState* Player, enum class EArmorRegeneratorUpgrades upgradeType, float outBaseValue, float outUpgradeValue, enum class EItemPreviewStatus outPreviewStatus, bool includePreview); // Function FSD.ArmorRegeneratorUpgrade.GetUpgradedValue
};

// Class FSD.AddComponentUpgrade
// Size: 0x160 (Inherited: 0x150)
struct UAddComponentUpgrade : UItemUpgrade {
	struct UActorComponent* ComponentClass; // 0x150(0x08)
	bool ServerOnly; // 0x158(0x01)
	char UnknownData_159[0x7]; // 0x159(0x07)

	bool GetUpgradedValue(struct AItem* Item, struct AFSDPlayerState* Player, struct UActorComponent* ComponentClass, bool includePreview); // Function FSD.AddComponentUpgrade.GetUpgradedValue
};

// Class FSD.TriggeredStatusEffectUpgrade
// Size: 0x178 (Inherited: 0x150)
struct UTriggeredStatusEffectUpgrade : UItemUpgrade {
	char UnknownData_150[0x10]; // 0x150(0x10)
	struct UStatusEffect* StatusEffect; // 0x160(0x08)
	enum class ETriggeredStatusEffectType upgradeType; // 0x168(0x01)
	char UnknownData_169[0x3]; // 0x169(0x03)
	float AoERange; // 0x16c(0x04)
	struct UStatusEffect* OwnerEffect; // 0x170(0x08)

	struct FUpgradeValues GetUpgradedValue(struct AFSDPlayerState* Player, struct AActor* Item, struct UStatusEffect* StatusEffect, enum class ETriggeredStatusEffectType aUpgradeType); // Function FSD.TriggeredStatusEffectUpgrade.GetUpgradedValue
};

// Class FSD.ArmorUpgrade
// Size: 0x158 (Inherited: 0x150)
struct UArmorUpgrade : UItemUpgrade {
	enum class EArmorUpgradeType upgradeType; // 0x150(0x01)
	char UnknownData_151[0x3]; // 0x151(0x03)
	float amount; // 0x154(0x04)

	struct FUpgradeValues GetUpgradedValue(struct AFSDPlayerState* Player, struct AActor* armorClass, enum class EArmorUpgradeType aUpgradeType); // Function FSD.ArmorUpgrade.GetUpgradedValue
	struct FUpgradeValues GetUpgradedStatValue(struct AFSDPlayerState* Player, struct AActor* armorClass, struct UPawnStat* Stat); // Function FSD.ArmorUpgrade.GetUpgradedStatValue
};

// Class FSD.ArmorStatUpgrade
// Size: 0x160 (Inherited: 0x150)
struct UArmorStatUpgrade : UItemUpgrade {
	struct UPawnStat* Stat; // 0x150(0x08)
	float amount; // 0x158(0x04)
	char UnknownData_15C[0x4]; // 0x15c(0x04)
};

// Class FSD.BoscoUpgrade
// Size: 0x158 (Inherited: 0x150)
struct UBoscoUpgrade : UItemUpgrade {
	enum class EBoscoUpgrades upgradeType; // 0x150(0x01)
	char UnknownData_151[0x3]; // 0x151(0x03)
	float amount; // 0x154(0x04)

	struct FUpgradeValues GetUpgradedValue(struct AFSDPlayerState* Player, struct AActor* Item, enum class EBoscoUpgrades upgradeType); // Function FSD.BoscoUpgrade.GetUpgradedValue
};

// Class FSD.PlatformGunUpgrade
// Size: 0x158 (Inherited: 0x150)
struct UPlatformGunUpgrade : UItemUpgrade {
	enum class EPlatformGunUpgrades myUpgradeType; // 0x150(0x01)
	char UnknownData_151[0x7]; // 0x151(0x07)

	struct FUpgradeValues GetUpgradedValue(struct AFSDPlayerState* Player, struct AActor* Item, enum class EPlatformGunUpgrades aUpgradeType); // Function FSD.PlatformGunUpgrade.GetUpgradedValue
};

// Class FSD.DetPackUpgrade
// Size: 0x158 (Inherited: 0x150)
struct UDetPackUpgrade : UItemUpgrade {
	float amount; // 0x150(0x04)
	enum class EDetPackUpgrades upgradeType; // 0x154(0x01)
	char UnknownData_155[0x3]; // 0x155(0x03)

	struct FUpgradeValues GetUpgradedValue(struct AActor* Item, struct AFSDPlayerState* Player, enum class EDetPackUpgrades upgradeType); // Function FSD.DetPackUpgrade.GetUpgradedValue
};

// Class FSD.BonusDamageUpgrade
// Size: 0x158 (Inherited: 0x150)
struct UBonusDamageUpgrade : UItemUpgrade {
	struct UDamageBonusBase* DamageBonus; // 0x150(0x08)
};

// Class FSD.ProjectileLauncherBaseUpgrade
// Size: 0x160 (Inherited: 0x158)
struct UProjectileLauncherBaseUpgrade : UStandardItemUpgrade {
	enum class EProjectileLauncherBaseUpgradeType upgradeType; // 0x158(0x01)
	char UnknownData_159[0x7]; // 0x159(0x07)

	struct FUpgradeValues GetUpgradedValue(struct AItem* Item, struct AFSDPlayerState* Player, enum class EProjectileLauncherBaseUpgradeType upgradeType); // Function FSD.ProjectileLauncherBaseUpgrade.GetUpgradedValue
};

// Class FSD.Upgradable
// Size: 0x28 (Inherited: 0x28)
struct UUpgradable : UInterface {

	void Upgraded(struct TArray<struct UItemUpgrade*> Upgrades); // Function FSD.Upgradable.Upgraded
};

// Class FSD.UpgradableGear
// Size: 0x28 (Inherited: 0x28)
struct UUpgradableGear : UInterface {

	void GetGearStatEntry(struct AFSDPlayerState* PlayerState, struct TArray<struct FGearStatEntry> Stats); // Function FSD.UpgradableGear.GetGearStatEntry
};

// Class FSD.JellyBreeder
// Size: 0x510 (Inherited: 0x478)
struct AJellyBreeder : AAFlyingBug {
	struct UAnimSequenceBase* EggSpawnAnimation; // 0x478(0x08)
	struct UParticleSystem* EggParticles; // 0x480(0x08)
	struct USoundBase* EggSound; // 0x488(0x08)
	struct UEnemyDescriptor* EnemyToSpawn; // 0x490(0x08)
	struct AProjectile* EggClass; // 0x498(0x08)
	float TimeBetweenBursts; // 0x4a0(0x04)
	float TimeBetweenEggs; // 0x4a4(0x04)
	float CloseToSpawnEggTime; // 0x4a8(0x04)
	char UnknownData_4AC[0xc]; // 0x4ac(0x0c)
	float EmissionInterpInSpeed; // 0x4b8(0x04)
	float EmissionInterpOutSpeed; // 0x4bc(0x04)
	float EmissionInAlpha; // 0x4c0(0x04)
	float EmissionOutAlpha; // 0x4c4(0x04)
	float MaxEmission; // 0x4c8(0x04)
	char UnknownData_4CC[0x4]; // 0x4cc(0x04)
	struct UMaterialInterface* mat; // 0x4d0(0x08)
	struct UMaterialInstanceDynamic* Mid; // 0x4d8(0x08)
	int32_t EggBurstSize; // 0x4e0(0x04)
	char UnknownData_4E4[0x4]; // 0x4e4(0x04)
	int32_t MaxJellies; // 0x4e8(0x04)
	char UnknownData_4EC[0x4]; // 0x4ec(0x04)
	int32_t MatIndex; // 0x4f0(0x04)
	float MultiplierOnHighPlayerCount; // 0x4f4(0x04)
	struct UPhysicalMaterial* WeakPointMaterial; // 0x4f8(0x08)
	struct UPhysicalMaterial* UnWeakPointMaterial; // 0x500(0x08)
	bool IsInBreedMode; // 0x508(0x01)
	char UnknownData_509[0x7]; // 0x509(0x07)

	void SpawnEnemies(struct AProjectile* aEgg, int32_t aAmountToSpawn); // Function FSD.JellyBreeder.SpawnEnemies
	void PlaySpawnEggAnim(); // Function FSD.JellyBreeder.PlaySpawnEggAnim
	void OnRep_BreedMode(); // Function FSD.JellyBreeder.OnRep_BreedMode
	void OnJellyDestroyed(struct AActor* AActor); // Function FSD.JellyBreeder.OnJellyDestroyed
	void BreedModeFlipped(bool aIsLayingEggs); // Function FSD.JellyBreeder.BreedModeFlipped
};

// Class FSD.JellyBreederAnimInstance
// Size: 0x300 (Inherited: 0x2f0)
struct UJellyBreederAnimInstance : UFlyingBugAnimInstance {
	bool ReadyToSpawnEggs; // 0x2f0(0x01)
	char UnknownData_2F1[0xf]; // 0x2f1(0x0f)
};

// Class FSD.JellyEggAnimInstance
// Size: 0x280 (Inherited: 0x270)
struct UJellyEggAnimInstance : UAnimInstance {
	struct FVector force; // 0x268(0x0c)
	char UnknownData_27C[0x4]; // 0x27c(0x04)
};

// Class FSD.JetPackItem
// Size: 0x3a0 (Inherited: 0x368)
struct AJetPackItem : AAnimatedItem {
	char UnknownData_368[0x4]; // 0x368(0x04)
	float ActiveTime; // 0x36c(0x04)
	struct UCurveFloat* VerticalAccelerationCurve; // 0x370(0x08)
	float VerticalAcceleration; // 0x378(0x04)
	float MaxVerticalSpeed; // 0x37c(0x04)
	float MaxHorizontalSpeed; // 0x380(0x04)
	float MaxHorizontalDrift; // 0x384(0x04)
	float BurnDuration; // 0x388(0x04)
	float RechargeDuration; // 0x38c(0x04)
	float Fuel; // 0x390(0x04)
	bool Active; // 0x394(0x01)
	char UnknownData_395[0x3]; // 0x395(0x03)
	struct UPlayerMovementComponent* CharacterMovement; // 0x398(0x08)

	void Server_StopThruster(); // Function FSD.JetPackItem.Server_StopThruster
	void Server_StartThruster(); // Function FSD.JetPackItem.Server_StartThruster
	void OnRep_Fuel(float OldFuel); // Function FSD.JetPackItem.OnRep_Fuel
	void OnRep_Active(); // Function FSD.JetPackItem.OnRep_Active
	void OnFuelChanged(float Value, float Delta); // Function FSD.JetPackItem.OnFuelChanged
};

// Class FSD.KeepInsideWorld
// Size: 0xc8 (Inherited: 0xb0)
struct UKeepInsideWorld : UActorComponent {
	struct TArray<struct FWeakObjectPtr<struct AActor>> ActorsToKeepInsideWorld; // 0xb0(0x10)
	int32_t IteratorIndex; // 0xc0(0x04)
	char UnknownData_C4[0x4]; // 0xc4(0x04)

	void UnregisterForKeepInsideWorld(struct UObject* WorldContextObject, struct AActor* Actor); // Function FSD.KeepInsideWorld.UnregisterForKeepInsideWorld
	void RegisterForKeepInsideWorld(struct UObject* WorldContextObject, struct AActor* Actor); // Function FSD.KeepInsideWorld.RegisterForKeepInsideWorld
};

// Class FSD.KillEnemiesObjective
// Size: 0x170 (Inherited: 0x150)
struct UKillEnemiesObjective : UObjective {
	int32_t EnemyCount; // 0x150(0x04)
	int32_t ExtraEnemies; // 0x154(0x04)
	struct UDebrisPositioning* Positioning; // 0x158(0x08)
	struct UEnemyDescriptor* EnemyTarget; // 0x160(0x08)
	int32_t EnemiesKilled; // 0x168(0x04)
	int32_t EnemiesToKill; // 0x16c(0x04)

	void RegisterTargetSpawned(struct APawn* Target); // Function FSD.KillEnemiesObjective.RegisterTargetSpawned
	void ReceiveTargetKilled(struct UHealthComponentBase* Health); // Function FSD.KillEnemiesObjective.ReceiveTargetKilled
	void OnTargetKilled(struct UHealthComponentBase* Health); // Function FSD.KillEnemiesObjective.OnTargetKilled
	void OnRep_EnemiesToKill(int32_t prevAmount); // Function FSD.KillEnemiesObjective.OnRep_EnemiesToKill
	void OnRep_EnemiesKilled(int32_t prevAmount); // Function FSD.KillEnemiesObjective.OnRep_EnemiesKilled
};

// Class FSD.LaserPointerMarker
// Size: 0x258 (Inherited: 0x220)
struct ALaserPointerMarker : AActor {
	struct FText LookAtName; // 0x220(0x18)
	struct FLinearColor LookAtColor; // 0x238(0x10)
	struct AActor* LookAtTarget; // 0x248(0x08)
	struct UTexture2D* LookAtIcon; // 0x250(0x08)
};

// Class FSD.LaserPointerWaypoint
// Size: 0x240 (Inherited: 0x220)
struct ALaserPointerWaypoint : AActor {
	struct FWeakObjectPtr<struct APlayerCharacter> Character; // 0x220(0x08)
	struct FWeakObjectPtr<struct ALaserPointerItem> LaserPointer; // 0x228(0x08)
	struct FVector Normal; // 0x230(0x0c)
	int32_t Index; // 0x23c(0x04)

	void OnShow(); // Function FSD.LaserPointerWaypoint.OnShow
	void OnHide(); // Function FSD.LaserPointerWaypoint.OnHide
};

// Class FSD.LaserPointerItem
// Size: 0x518 (Inherited: 0x368)
struct ALaserPointerItem : AAnimatedItem {
	struct FMulticastInlineDelegate OnMarkerPlaced; // 0x368(0x10)
	struct ALaserPointerMarker* MarkerType; // 0x378(0x08)
	struct ALaserPointerMarker* SecondaryMarkerType; // 0x380(0x08)
	struct FWeakObjectPtr<struct ALaserPointerMarker> ActiveMarker; // 0x388(0x08)
	struct ALaserPointerWaypoint* WaypointType; // 0x390(0x08)
	int32_t MaxWaypoints; // 0x398(0x04)
	char UnknownData_39C[0x4]; // 0x39c(0x04)
	struct TArray<struct ALaserPointerWaypoint*> Waypoints; // 0x3a0(0x10)
	int32_t NextWaypointIndex; // 0x3b0(0x04)
	char UnknownData_3B4[0x4]; // 0x3b4(0x04)
	float MarkerLifeTime; // 0x3b8(0x04)
	struct FLinearColor ColorMinerals; // 0x3bc(0x10)
	struct FLinearColor ColorEnemy; // 0x3cc(0x10)
	struct FLinearColor ColorOther; // 0x3dc(0x10)
	char UnknownData_3EC[0x4]; // 0x3ec(0x04)
	struct UDialogDataAsset* DefaultLookAtShout; // 0x3f0(0x08)
	struct UDialogDataAsset* DefaultEnemyShout; // 0x3f8(0x08)
	struct USceneComponent* PointerComponent; // 0x400(0x08)
	struct FHitResult LookAtHit; // 0x408(0x88)
	struct FWeakObjectPtr<struct UObjectInfoComponent> LookAtInfo; // 0x490(0x08)
	struct FText LookAtName; // 0x498(0x18)
	struct FText LookAtDescription; // 0x4b0(0x18)
	struct FLinearColor LookAtColor; // 0x4c8(0x10)
	float LookAtDistance; // 0x4d8(0x04)
	char UnknownData_4DC[0x4]; // 0x4dc(0x04)
	struct UTexture2D* LookAtIcon; // 0x4e0(0x08)
	enum class ELaserPointerTargetType TargetType; // 0x4e8(0x01)
	char UnknownData_4E9[0x3]; // 0x4e9(0x03)
	struct FGuid LookAtSaveGameID; // 0x4ec(0x10)
	char UnknownData_4FC[0x4]; // 0x4fc(0x04)
	struct AActor* ExtraActor; // 0x500(0x08)
	struct UDialogDataAsset* LookAtShout; // 0x508(0x08)
	struct AFSDGameState* GameState; // 0x510(0x08)

	void UnlockToMinersManual(struct UObject* WorldContextObject, struct FGuid ObjectID); // Function FSD.LaserPointerItem.UnlockToMinersManual
	void ToggleLaserVisible(bool aVisible); // Function FSD.LaserPointerItem.ToggleLaserVisible
	void ServerPlaceMarker(struct FVector Location, struct FText Name, struct FLinearColor Color, struct AActor* Target, enum class ELaserPointerTargetType TypeOfTarget, struct UTexture2D* Icon, struct ALaserPointerMarker* aMarkerType); // Function FSD.LaserPointerItem.ServerPlaceMarker
	void Server_SecondaryUse(); // Function FSD.LaserPointerItem.Server_SecondaryUse
	void OnPointOfInterest(struct AActor* TargetActor, struct FVector TargetLocation, struct UTexture2D* TargetIcon); // Function FSD.LaserPointerItem.OnPointOfInterest
	void OnDeath(struct UHealthComponentBase* Health); // Function FSD.LaserPointerItem.OnDeath
	void GetPointTransform(struct FTransform PointTransform); // Function FSD.LaserPointerItem.GetPointTransform
};

// Class FSD.LevelGenerationDebris
// Size: 0xc8 (Inherited: 0xb0)
struct ULevelGenerationDebris : UActorComponent {
	struct UDebrisBase* Debris; // 0xb0(0x08)
	struct UObject* Influencer; // 0xb8(0x08)
	float Range; // 0xc0(0x04)
	bool SelfActivate; // 0xc4(0x01)
	char UnknownData_C5[0x3]; // 0xc5(0x03)
};

// Class FSD.LineSegmentCarverComponent
// Size: 0x430 (Inherited: 0x3f0)
struct ULineSegmentCarverComponent : UGenerationComponent {
	struct TArray<struct FLineSegmentCarverPoint> LinePoints; // 0x3f0(0x10)
	bool Visible; // 0x400(0x01)
	char UnknownData_401[0x3]; // 0x401(0x03)
	int32_t Layer; // 0x404(0x04)
	float Cielingheight; // 0x408(0x04)
	float FloorDepth; // 0x40c(0x04)
	struct UFloodFillSettings* CeilingNoiseOverride; // 0x410(0x08)
	struct UFloodFillSettings* WallNoiseOverride; // 0x418(0x08)
	struct UFloodFillSettings* FloorNoiseOverride; // 0x420(0x08)
	bool UseDetailNoise; // 0x428(0x01)
	char UnknownData_429[0x7]; // 0x429(0x07)
};

// Class FSD.LineSegmentCarver
// Size: 0x240 (Inherited: 0x228)
struct ALineSegmentCarver : AGenerationItem {
	struct ULineSegmentCarverComponent* LineComponent; // 0x228(0x08)
	char UnknownData_230[0x10]; // 0x230(0x10)
};

// Class FSD.LineCutterProjectile
// Size: 0x4e0 (Inherited: 0x2f0)
struct ALineCutterProjectile : AProjectile {
	struct FScaledEffect EletricHitEffect; // 0x2f0(0x10)
	struct FScaledEffect ProjectileDisappearEffect; // 0x300(0x10)
	float SwipeRadius; // 0x310(0x04)
	float DoubleLineDistanceMultiplier; // 0x314(0x04)
	float OverlapRadius; // 0x318(0x04)
	bool DestroyOnTerrainCollision; // 0x31c(0x01)
	bool IsDead; // 0x31d(0x01)
	bool bHasReversedDirection; // 0x31e(0x01)
	char UnknownData_31F[0x55]; // 0x31f(0x55)
	float FlyStraighTime; // 0x374(0x04)
	enum class EImpactDecalSize EletricDecalSize; // 0x378(0x01)
	enum class EImpactDecalSize ImpactDecalSize; // 0x379(0x01)
	char UnknownData_37A[0x46]; // 0x37a(0x46)
	struct FMulticastInlineDelegate OnLineDestroy; // 0x3c0(0x10)
	struct FMulticastInlineDelegate OnLineLifespanEnd; // 0x3d0(0x10)
	struct FMulticastInlineDelegate OnPerformHit; // 0x3e0(0x10)
	struct FMulticastInlineDelegate OnLineEffectHide; // 0x3f0(0x10)
	struct FVector LeftLastPosition; // 0x400(0x0c)
	struct FVector RightLastPosition; // 0x40c(0x0c)
	struct USceneComponent* LineRoot; // 0x418(0x08)
	struct USceneComponent* LeftSphere; // 0x420(0x08)
	struct USceneComponent* RightSphere; // 0x428(0x08)
	struct USceneComponent* LeftSphere2; // 0x430(0x08)
	struct USceneComponent* RightSphere2; // 0x438(0x08)
	struct USceneComponent* LeftSphere3; // 0x440(0x08)
	struct USceneComponent* RightSphere3; // 0x448(0x08)
	struct UParticleSystemComponent* BeamParticle; // 0x450(0x08)
	struct UParticleSystemComponent* BeamParticle2; // 0x458(0x08)
	struct UParticleSystemComponent* BeamParticle3; // 0x460(0x08)
	struct UParticleSystemComponent* LeftHitParticles; // 0x468(0x08)
	struct UParticleSystemComponent* RightHitParticles; // 0x470(0x08)
	float RotationSpeed; // 0x478(0x04)
	struct FRotator LineRotation; // 0x47c(0x0c)
	enum class ELineRotation RotationMode; // 0x488(0x01)
	bool ShouldExplode; // 0x489(0x01)
	bool OnlyOne; // 0x48a(0x01)
	bool IsDoubleLine; // 0x48b(0x01)
	bool HasPlasmaTrail; // 0x48c(0x01)
	char UnknownData_48D[0x3]; // 0x48d(0x03)
	float LineMaxSize; // 0x490(0x04)
	float LineExpansionDelay; // 0x494(0x04)
	float TimeToLineExpansion; // 0x498(0x04)
	float FireRate; // 0x49c(0x04)
	struct UDamageComponent* DamageComponent; // 0x4a0(0x08)
	struct UDamageComponent* InitialDamageComponent; // 0x4a8(0x08)
	int32_t InitialHitDamageMultiplier; // 0x4b0(0x04)
	float InhibitImpactDecalsTime; // 0x4b4(0x04)
	float MinTimeBetweenImpactDecals; // 0x4b8(0x04)
	char UnknownData_4BC[0x24]; // 0x4bc(0x24)

	void UpdateBeamLocations(); // Function FSD.LineCutterProjectile.UpdateBeamLocations
	void TerrainSweep(struct FVector Left, struct FVector Right); // Function FSD.LineCutterProjectile.TerrainSweep
	void StartSpawningTrail(); // Function FSD.LineCutterProjectile.StartSpawningTrail
	void SpawnDecal(struct FHitResult Result); // Function FSD.LineCutterProjectile.SpawnDecal
	void SetExtraBeamVisibility(bool IsVisible); // Function FSD.LineCutterProjectile.SetExtraBeamVisibility
	void Server_RemoveDebris(int32_t instance, int32_t Component); // Function FSD.LineCutterProjectile.Server_RemoveDebris
	void PerformHit__DelegateSignature(struct FHitResult Result); // DelegateFunction FSD.LineCutterProjectile.PerformHit__DelegateSignature
	void OnRep_LineRotation(); // Function FSD.LineCutterProjectile.OnRep_LineRotation
	void LineLifeSpanDestroy__DelegateSignature(); // DelegateFunction FSD.LineCutterProjectile.LineLifeSpanDestroy__DelegateSignature
	void LineEffectHide__DelegateSignature(); // DelegateFunction FSD.LineCutterProjectile.LineEffectHide__DelegateSignature
	void LineDestroy__DelegateSignature(struct FHitResult Result); // DelegateFunction FSD.LineCutterProjectile.LineDestroy__DelegateSignature
	void Fire(struct FVector Origin, struct FVector Direction, float Distance); // Function FSD.LineCutterProjectile.Fire
};

// Class FSD.GuntowerLineProjectile
// Size: 0x360 (Inherited: 0x2f0)
struct AGuntowerLineProjectile : AProjectile {
	struct FMulticastInlineDelegate OnLineDestroy; // 0x2f0(0x10)
	struct USceneComponent* LeftLinePoint; // 0x300(0x08)
	struct USceneComponent* RightLinePoint; // 0x308(0x08)
	struct UDamageComponent* DamageComponent; // 0x310(0x08)
	struct UParticleSystemComponent* BeamParticles; // 0x318(0x08)
	float PlatformDissolveRadius; // 0x320(0x04)
	float PlatformDissolveSqueeze; // 0x324(0x04)
	struct UParticleSystemComponent* HitParticles; // 0x328(0x08)
	char UnknownData_330[0x20]; // 0x330(0x20)
	float TimeBetweenLineChecks; // 0x350(0x04)
	char UnknownData_354[0xc]; // 0x354(0x0c)

	void TurnOffParticles(); // Function FSD.GuntowerLineProjectile.TurnOffParticles
	void LineDestroy__DelegateSignature(struct FHitResult Result); // DelegateFunction FSD.GuntowerLineProjectile.LineDestroy__DelegateSignature
	void Fire(struct FVector Origin, struct FVector Direction, float Distance); // Function FSD.GuntowerLineProjectile.Fire
};

// Class FSD.LineSegmentFillerComponent
// Size: 0x430 (Inherited: 0x3f0)
struct ULineSegmentFillerComponent : UGenerationComponent {
	struct TArray<struct FLineSegmentFillerPoint> LinePoints; // 0x3f0(0x10)
	bool Visible; // 0x400(0x01)
	char UnknownData_401[0x7]; // 0x401(0x07)
	struct UFloodFillSettings* NoiseOverride; // 0x408(0x08)
	struct FRandRange RangeScale; // 0x410(0x08)
	struct FRandRange NoiseRangeScale; // 0x418(0x08)
	char UnknownData_420[0x10]; // 0x420(0x10)
};

// Class FSD.LineSegmentFiller
// Size: 0x240 (Inherited: 0x228)
struct ALineSegmentFiller : AGenerationItem {
	struct ULineSegmentFillerComponent* LineComponent; // 0x228(0x08)
	char UnknownData_230[0x10]; // 0x230(0x10)
};

// Class FSD.LoadoutItem
// Size: 0x28 (Inherited: 0x28)
struct ULoadoutItem : UInterface {

	struct AItem* GetLoadoutItemClass(); // Function FSD.LoadoutItem.GetLoadoutItemClass
};

// Class FSD.LoadoutItemProxy
// Size: 0x338 (Inherited: 0x318)
struct ALoadoutItemProxy : AItem {
	struct UItemCharacterAnimationSet* AnimationSet; // 0x318(0x08)
	struct FItemLoadoutAnimations LoadoutAnimations; // 0x320(0x18)

	struct AItem* GetLoadoutItemFromClass(struct AActor* ActorClass); // Function FSD.LoadoutItemProxy.GetLoadoutItemFromClass
};

// Class FSD.LocalizationFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct ULocalizationFunctionLibrary : UBlueprintFunctionLibrary {

	struct TArray<struct FLocalizedLanguageInfo> GetLocalizedLanguages(); // Function FSD.LocalizationFunctionLibrary.GetLocalizedLanguages
};

// Class FSD.FSDLocalizationSettings
// Size: 0x48 (Inherited: 0x38)
struct UFSDLocalizationSettings : UDeveloperSettings {
	struct TArray<struct FFSDTranslationProgress> CommunityTranslationProgress; // 0x38(0x10)
};

// Class FSD.LockOnWeapon
// Size: 0x828 (Inherited: 0x7a8)
struct ALockOnWeapon : ABoltActionWeapon {
	struct AActor* AimTarget; // 0x7a8(0x08)
	int32_t ShotsPerTarget; // 0x7b0(0x04)
	int32_t MaxTargets; // 0x7b4(0x04)
	float TimeBetweenLockedShots; // 0x7b8(0x04)
	float LockonTime; // 0x7bc(0x04)
	float MaxLockOnDegree; // 0x7c0(0x04)
	float LoseLockOnDegree; // 0x7c4(0x04)
	struct UActorTrackingWidget* TrackingWidgetClass; // 0x7c8(0x08)
	char UnknownData_7D0[0x58]; // 0x7d0(0x58)

	void SetMuzzleDirection(struct FVector TargetLocation); // Function FSD.LockOnWeapon.SetMuzzleDirection
	void Server_SetAimTarget(struct AActor* Target); // Function FSD.LockOnWeapon.Server_SetAimTarget
	void OnRep_AimTarget(); // Function FSD.LockOnWeapon.OnRep_AimTarget
	void OnAsyncFireComplete(); // Function FSD.LockOnWeapon.OnAsyncFireComplete
	void MuzzleLerpToTarget(struct FVector TargetLocation); // Function FSD.LockOnWeapon.MuzzleLerpToTarget
};

// Class FSD.LoginBlueprintCallProxy
// Size: 0x70 (Inherited: 0x30)
struct ULoginBlueprintCallProxy : UOnlineBlueprintCallProxyBase {
	struct FMulticastInlineDelegate OnSuccess; // 0x30(0x10)
	struct FMulticastInlineDelegate OnFailure; // 0x40(0x10)
	struct UObject* WorldContextObject; // 0x50(0x08)
	char UnknownData_58[0x18]; // 0x58(0x18)

	struct ULoginBlueprintCallProxy* Login(struct UObject* WorldContextObject); // Function FSD.LoginBlueprintCallProxy.Login
};

// Class FSD.LookingAtWidget
// Size: 0x278 (Inherited: 0x230)
struct ULookingAtWidget : UUserWidget {
	float TargetSelectDuration; // 0x230(0x04)
	float TargetLostDuration; // 0x234(0x04)
	struct FWeakObjectPtr<struct APlayerCharacter> Character; // 0x238(0x08)
	struct FWeakObjectPtr<struct UCharacterSightComponent> CharacterSight; // 0x240(0x08)
	struct FWeakObjectPtr<struct AActor> CurrentTarget; // 0x248(0x08)
	struct FWeakObjectPtr<struct UPawnAfflictionComponent> CurrentTargetAfflictions; // 0x250(0x08)
	struct TScriptInterface<None> CurrentTargetHealth; // 0x258(0x10)
	bool CanCurrentTargetTakeDamage; // 0x268(0x01)
	char UnknownData_269[0x3]; // 0x269(0x03)
	float TargetLostTime; // 0x26c(0x04)
	bool bTargetSet; // 0x270(0x01)
	char UnknownData_271[0x7]; // 0x271(0x07)

	void SetCurrentTarget(struct AActor* NewActor, struct TScriptInterface<None> HealthComponent, float OverrideTargetLostTime); // Function FSD.LookingAtWidget.SetCurrentTarget
	void ResetCurrentTarget(); // Function FSD.LookingAtWidget.ResetCurrentTarget
	void ReceiveUpdateTarget(struct AActor* InCurrentTarget, float DeltaTime); // Function FSD.LookingAtWidget.ReceiveUpdateTarget
	void ReceiveTargetLost(); // Function FSD.LookingAtWidget.ReceiveTargetLost
	void ReceiveNewTarget(struct AActor* InCurrentTarget); // Function FSD.LookingAtWidget.ReceiveNewTarget
	bool IsValidTarget(struct AActor* TargetActor, struct TScriptInterface<None> TargetHealth); // Function FSD.LookingAtWidget.IsValidTarget
	bool IsBossFight(struct TScriptInterface<None> Health); // Function FSD.LookingAtWidget.IsBossFight
	struct UHealthComponentBase* GetLookingAtHealth(); // Function FSD.LookingAtWidget.GetLookingAtHealth
	struct AActor* GetLookingAtActor(); // Function FSD.LookingAtWidget.GetLookingAtActor
	bool GetCharacterTemperatureEffect(float TemperatureEffect); // Function FSD.LookingAtWidget.GetCharacterTemperatureEffect
};

// Class FSD.LookingAtContentWidget
// Size: 0x260 (Inherited: 0x230)
struct ULookingAtContentWidget : UUserWidget {
	struct FWeakObjectPtr<struct AActor> CurrentTarget; // 0x230(0x08)
	struct FWeakObjectPtr<struct UPawnAfflictionComponent> CurrentTargetAfflictions; // 0x238(0x08)
	struct FWeakObjectPtr<struct USimpleObjectInfoComponent> CurrentTargetInfo; // 0x240(0x08)
	struct TScriptInterface<None> CurrentTargetHealth; // 0x248(0x10)
	bool bWeakPointHit; // 0x258(0x01)
	char UnknownData_259[0x7]; // 0x259(0x07)

	void UpdateCurrentTarget(float DeltaSeconds, struct AActor* InTargetActor, struct TScriptInterface<None> InTargetHealthComponent); // Function FSD.LookingAtContentWidget.UpdateCurrentTarget
	void RegisterWeakPointHit(); // Function FSD.LookingAtContentWidget.RegisterWeakPointHit
	void ReceiveUpdateTarget(struct AActor* InCurrentTarget, float DeltaTime); // Function FSD.LookingAtContentWidget.ReceiveUpdateTarget
	void ReceiveNewTarget(struct AActor* InCurrentTarget); // Function FSD.LookingAtContentWidget.ReceiveNewTarget
	struct FText GetTargetName(); // Function FSD.LookingAtContentWidget.GetTargetName
	float GetTargetHealthPct(); // Function FSD.LookingAtContentWidget.GetTargetHealthPct
};

// Class FSD.TreasureBeacon
// Size: 0x298 (Inherited: 0x220)
struct ATreasureBeacon : AActor {
	struct USceneComponent* RootComp; // 0x220(0x08)
	struct UTerrainPlacementComponent* terrainPlacement; // 0x228(0x08)
	struct UDebrisPositioning* TreasurePositioning; // 0x230(0x08)
	struct UDebrisPositioning* DebrisPartsPositioning; // 0x238(0x08)
	struct UCurveFloat* avoidCostCurve; // 0x240(0x08)
	struct UCurveFloat* AvoidCostCurveDebris; // 0x248(0x08)
	float MaxRange; // 0x250(0x04)
	float MinRange; // 0x254(0x04)
	float DebrisSpawnRange; // 0x258(0x04)
	char UnknownData_25C[0x4]; // 0x25c(0x04)
	struct AActor* DebrisPartClass; // 0x260(0x08)
	int32_t DebrisPartsToSpawn; // 0x268(0x04)
	int32_t MaxSpawnLocationTries; // 0x26c(0x04)
	char UnknownData_270[0x18]; // 0x270(0x18)
	struct ATreasureContainer* TreasureClass; // 0x288(0x08)
	struct ATreasureContainer* TreasureInstance; // 0x290(0x08)

	void SpawnDebreeParts(); // Function FSD.TreasureBeacon.SpawnDebreeParts
	void ActivateTreasure(); // Function FSD.TreasureBeacon.ActivateTreasure
};

// Class FSD.TreasureContainer
// Size: 0x288 (Inherited: 0x220)
struct ATreasureContainer : AActor {
	struct USceneComponent* Root; // 0x220(0x08)
	struct UOncePerPlayerUsableComponent* CollectUsable; // 0x228(0x08)
	char UnknownData_230[0x8]; // 0x230(0x08)
	struct UItemAquisitionSource* AquisitionSource; // 0x238(0x08)
	struct TArray<struct APlayerCharacter*> Collectors; // 0x240(0x10)
	struct APlayerCharacter* LastJoiner; // 0x250(0x08)
	struct TArray<struct FTreasureWeight> PossibleRewarders; // 0x258(0x10)
	struct UTreasureRewarder* TreasureRewarder; // 0x268(0x08)
	char UnknownData_270[0x12]; // 0x270(0x12)
	bool PreventLatejoiners; // 0x282(0x01)
	char UnknownData_283[0x5]; // 0x283(0x05)

	void TestAwardTreasure(); // Function FSD.TreasureContainer.TestAwardTreasure
	void SetPreventFurtherLatejoiners(bool prevent); // Function FSD.TreasureContainer.SetPreventFurtherLatejoiners
	void SetCanCollectTreasure(bool canCollect); // Function FSD.TreasureContainer.SetCanCollectTreasure
	void OnRep_LastJoiner(); // Function FSD.TreasureContainer.OnRep_LastJoiner
	void OnRep_Collectors(); // Function FSD.TreasureContainer.OnRep_Collectors
	void OnPlayerLatejoined(struct APlayerCharacter* joiner); // Function FSD.TreasureContainer.OnPlayerLatejoined
	void OnPlayerCollectedTreasure(struct APlayerCharacter* collector); // Function FSD.TreasureContainer.OnPlayerCollectedTreasure
	void OnLocalPlayerCollectedTreasure(struct APlayerCharacter* Player); // Function FSD.TreasureContainer.OnLocalPlayerCollectedTreasure
	void OnDisableChestLocally(); // Function FSD.TreasureContainer.OnDisableChestLocally
	void OnContainerActivated(); // Function FSD.TreasureContainer.OnContainerActivated
	bool GetPreventFurtherLatejoiners(); // Function FSD.TreasureContainer.GetPreventFurtherLatejoiners
};

// Class FSD.LostPack
// Size: 0x220 (Inherited: 0x220)
struct ALostPack : AActor {
};

// Class FSD.MasteryIconWidget
// Size: 0x230 (Inherited: 0x230)
struct UMasteryIconWidget : UUserWidget {

	void ReceiveUnlocked(); // Function FSD.MasteryIconWidget.ReceiveUnlocked
};

// Class FSD.MeleeAttackComponent
// Size: 0x160 (Inherited: 0xf8)
struct UMeleeAttackComponent : UDamageAttackComponent {
	struct TArray<struct UAnimMontage*> Montages; // 0xf8(0x10)
	char UnknownData_108[0x8]; // 0x108(0x08)
	bool CenterOnTarget; // 0x110(0x01)
	char UnknownData_111[0x7]; // 0x111(0x07)
	struct TArray<struct UAttackEffect*> AttackEffects; // 0x118(0x10)
	char UnknownData_128[0x8]; // 0x128(0x08)
	struct FMulticastInlineDelegate OnAttackStartedEvent; // 0x130(0x10)
	struct FMulticastInlineDelegate OnDamageAppliedEvent; // 0x140(0x10)
	struct FMulticastInlineDelegate OnAttackEndedEvent; // 0x150(0x10)

	struct UAnimMontage* SelectMontage(); // Function FSD.MeleeAttackComponent.SelectMontage
	void OnPerformAttack(struct FName Name); // Function FSD.MeleeAttackComponent.OnPerformAttack
	void OnMontageEnded(struct UAnimMontage* Montage, bool interrupted); // Function FSD.MeleeAttackComponent.OnMontageEnded
};

// Class FSD.MeshCarveAttackEffect
// Size: 0x60 (Inherited: 0x28)
struct UMeshCarveAttackEffect : UAttackEffect {
	float ExpensiveNoise; // 0x28(0x04)
	char UnknownData_2C[0x4]; // 0x2c(0x04)
	struct UStaticMesh* CarveMesh; // 0x30(0x08)
	float CarverOffset; // 0x38(0x04)
	struct FRotator CarverOrientation; // 0x3c(0x0c)
	struct FVector CarverScale; // 0x48(0x0c)
	struct FName Socket; // 0x54(0x08)
	char UnknownData_5C[0x4]; // 0x5c(0x04)
};

// Class FSD.MessagingSubSystem
// Size: 0x1308 (Inherited: 0x30)
struct UMessagingSubSystem : UGameInstanceSubsystem {
	struct FMulticastInlineDelegate OnNewMessage; // 0x30(0x10)
	char UnknownData_40[0x12c8]; // 0x40(0x12c8)

	float MessageAge(struct FFSDChatMessage Msg); // Function FSD.MessagingSubSystem.MessageAge
	void LatestMessages(int32_t Num, bool resetAge, struct TArray<struct FFSDChatMessage> OutMessages); // Function FSD.MessagingSubSystem.LatestMessages
	void ClearMessages(); // Function FSD.MessagingSubSystem.ClearMessages
};

// Class FSD.MilestoneAsset
// Size: 0xc0 (Inherited: 0x30)
struct UMilestoneAsset : UDataAsset {
	struct FMulticastInlineDelegate OnMilestoneClaimed; // 0x30(0x10)
	struct FMulticastInlineDelegate OnMilestoneReached; // 0x40(0x10)
	struct FGuid SavegameID; // 0x50(0x10)
	struct UTexture2D* LargeImage; // 0x60(0x08)
	struct FText FormattedTitle; // 0x68(0x18)
	int32_t FormattedValueOffset; // 0x80(0x04)
	bool CountValueAsTotal; // 0x84(0x01)
	char UnknownData_85[0x3]; // 0x85(0x03)
	struct UMissionStat* TrackingStat; // 0x88(0x08)
	struct UPlayerCharacterID* TrackingCharacterID; // 0x90(0x08)
	struct TArray<struct FMilestoneTier> Tiers; // 0x98(0x10)
	struct UFSDGameInstance* GameInstance; // 0xa8(0x08)
	int32_t LastTierReached; // 0xb0(0x04)
	bool bPendingMilestoneReached; // 0xb4(0x01)
	char UnknownData_B5[0xb]; // 0xb5(0x0b)

	struct TArray<struct UMilestoneAsset*> SortMilestonesByProgress(struct UObject* WorldContext, struct TArray<struct UMilestoneAsset*> Milestones); // Function FSD.MilestoneAsset.SortMilestonesByProgress
	void OnMissionStatChanged(struct UMissionStat* Stat, float Value); // Function FSD.MilestoneAsset.OnMissionStatChanged
	bool IsCompleted(struct UObject* WorldContext); // Function FSD.MilestoneAsset.IsCompleted
	bool IsClaimable(struct UObject* WorldContext); // Function FSD.MilestoneAsset.IsClaimable
	struct FText GetTitleForTier(int32_t Tier); // Function FSD.MilestoneAsset.GetTitleForTier
	struct FText GetTitle(struct UObject* WorldContext); // Function FSD.MilestoneAsset.GetTitle
	int32_t GetNextPerkPointsReward(struct UObject* WorldContext); // Function FSD.MilestoneAsset.GetNextPerkPointsReward
	void GetCurrentProgress(struct UObject* WorldContext, int32_t Tier, float Progress, float CurrentCount, float TargetCount); // Function FSD.MilestoneAsset.GetCurrentProgress
	int32_t GetClaimedTier(struct UObject* WorldContext); // Function FSD.MilestoneAsset.GetClaimedTier
	bool GetClaimedProgress(struct UObject* WorldContext, int32_t Tier, float Progress, float CurrentCount, float TargetCount); // Function FSD.MilestoneAsset.GetClaimedProgress
	struct UTexture2D* GetCategoryIcon(); // Function FSD.MilestoneAsset.GetCategoryIcon
	void ClearPendingMilestoneReached(); // Function FSD.MilestoneAsset.ClearPendingMilestoneReached
	int32_t ClaimNextTier(struct UObject* WorldContext); // Function FSD.MilestoneAsset.ClaimNextTier
};

// Class FSD.MineralTradeData
// Size: 0x40 (Inherited: 0x30)
struct UMineralTradeData : UDataAsset {
	struct TArray<struct FText> MineralTradeTickerTexts; // 0x30(0x10)
};

// Class FSD.MinersManualData
// Size: 0xb0 (Inherited: 0x30)
struct UMinersManualData : UDataAsset {
	struct FSoftMinersManualDescription Description; // 0x30(0x80)

	void GetText(struct FText Headline, struct FText richText); // Function FSD.MinersManualData.GetText
	struct UTexture2D* GetFrontImage(); // Function FSD.MinersManualData.GetFrontImage
	struct UTexture2D* GetBackgroundImage(); // Function FSD.MinersManualData.GetBackgroundImage
};

// Class FSD.LoreScreenMasterWidget
// Size: 0x2a8 (Inherited: 0x230)
struct ULoreScreenMasterWidget : UUserWidget {
	struct FText PageName; // 0x230(0x18)
	struct TSoftObjectPtr<struct UTexture2D> SolidImage; // 0x248(0x28)
	struct TSoftObjectPtr<struct UTexture2D> TransparentImage; // 0x270(0x28)
	struct FLinearColor BackgroundColor; // 0x298(0x10)
};

// Class FSD.MinersManual
// Size: 0x1a0 (Inherited: 0x30)
struct UMinersManual : UDataAsset {
	struct TArray<SoftClassProperty> BasicsPages; // 0x30(0x10)
	struct TMap<int32_t, struct FText> BasicsPageHeaders; // 0x40(0x50)
	struct TArray<SoftClassProperty> CombatPages; // 0x90(0x10)
	struct TArray<SoftClassProperty> ExtraMissionPages; // 0xa0(0x10)
	struct TArray<SoftClassProperty> ResourcePages; // 0xb0(0x10)
	struct TArray<struct UEnemyMinersManualData*> Enemies; // 0xc0(0x10)
	struct TArray<struct TSoftObjectPtr<struct UBiome>> BiomeReferences; // 0xd0(0x10)
	struct TArray<struct TSoftObjectPtr<struct UMissionTemplate>> MissionReferences; // 0xe0(0x10)
	struct TArray<struct FDamageTypeDescription> DamageTypeInfo; // 0xf0(0x10)
	struct TMap<int32_t, struct FMissionTypeDescription> MissionDescriptions; // 0x100(0x50)
	struct TMap<int32_t, struct FBiomeFeatures> BiomeFeatureDescriptions; // 0x150(0x50)

	bool IsObjectInMinersManual(struct UObject* WorldContext, struct UObject* Object); // Function FSD.MinersManual.IsObjectInMinersManual
	bool IsMissionUnlocked(struct UObject* WorldContext, struct UMissionTemplate* mission); // Function FSD.MinersManual.IsMissionUnlocked
	bool IsBiomeUnlocked(struct UObject* WorldContext, struct UBiome* Biome); // Function FSD.MinersManual.IsBiomeUnlocked
	struct TArray<struct FText> GetUnlockedCreatureLore(struct UObject* WorldContext, struct UEnemyMinersManualData* enemy, float completePercentage); // Function FSD.MinersManual.GetUnlockedCreatureLore
	struct TArray<struct TSoftObjectPtr<struct UMissionTemplate>> GetMissions(); // Function FSD.MinersManual.GetMissions
	void GetMissionInfo(int32_t MissionTypeIndex, struct FText InfoHeadline, struct FText InfoDescription, struct TArray<struct FMissionStepDescription> Steps); // Function FSD.MinersManual.GetMissionInfo
	int32_t GetEnemyKillCount(struct UObject* WorldContext, struct FGuid EnemyID); // Function FSD.MinersManual.GetEnemyKillCount
	struct TArray<struct UEnemyMinersManualData*> GetEnemiesSorted(); // Function FSD.MinersManual.GetEnemiesSorted
	struct TArray<struct UEnemyMinersManualData*> GetEnemies(); // Function FSD.MinersManual.GetEnemies
	void GetDamageTypeDescriptions(struct TArray<enum class EDamageType> damageTypes, struct TArray<struct FDamageTypeDescription> Icon); // Function FSD.MinersManual.GetDamageTypeDescriptions
	void GetDamageTypeDescription(enum class EDamageType damageTypes, struct FDamageTypeDescription Icon); // Function FSD.MinersManual.GetDamageTypeDescription
	struct TArray<struct TSoftObjectPtr<struct UBiome>> GetBiomes(); // Function FSD.MinersManual.GetBiomes
	struct TArray<struct UMinersManualData*> GetBiomeFeatures(int32_t BiomeIndex); // Function FSD.MinersManual.GetBiomeFeatures
	struct TArray<struct FDamageTypeDescription> GetAllDamageTypeDescriptions(); // Function FSD.MinersManual.GetAllDamageTypeDescriptions
};

// Class FSD.MiningPodCalldownLocation
// Size: 0x220 (Inherited: 0x220)
struct AMiningPodCalldownLocation : AActor {
};

// Class FSD.MiningPod
// Size: 0x368 (Inherited: 0x220)
struct AMiningPod : AActor {
	char UnknownData_220[0x8]; // 0x220(0x08)
	float DropHeight; // 0x228(0x04)
	struct FVector TargetLocation; // 0x22c(0x0c)
	char UnknownData_238[0x8]; // 0x238(0x08)
	struct UAutoCarverComponent* AutoCarver; // 0x240(0x08)
	char UnknownData_248[0x10]; // 0x248(0x10)
	struct UCurveFloat* DropCurve; // 0x258(0x08)
	struct UCurveFloat* DepartCurve; // 0x260(0x08)
	struct UCurveFloat* CarverDropCurve; // 0x268(0x08)
	float CarverRotationSpeed; // 0x270(0x04)
	struct FVector CarverScale; // 0x274(0x0c)
	struct FGameplayTagContainer GameplayTags; // 0x280(0x20)
	struct UBoxComponent* DwarfCheckerBox; // 0x2a0(0x08)
	float DepartureTime; // 0x2a8(0x04)
	char UnknownData_2AC[0x4]; // 0x2ac(0x04)
	struct FText DepartueCountdownName; // 0x2b0(0x18)
	char UnknownData_2C8[0x8]; // 0x2c8(0x08)
	struct FMiningPodDialogs Dialogs; // 0x2d0(0x50)
	enum class EMiningPodMission MissionType; // 0x320(0x01)
	bool HasLanded; // 0x321(0x01)
	char UnknownData_322[0x6]; // 0x322(0x06)
	struct UOutlineComponent* PodOutline; // 0x328(0x08)
	struct FVector StartLocation; // 0x330(0x0c)
	enum class EMiningPodState State; // 0x33c(0x01)
	enum class EMiningPodRampState rampState; // 0x33d(0x01)
	char UnknownData_33E[0x2]; // 0x33e(0x02)
	float TargetDropTime; // 0x340(0x04)
	float TargetDepartureTime; // 0x344(0x04)
	float TimeToDrop; // 0x348(0x04)
	char UnknownData_34C[0x4]; // 0x34c(0x04)
	struct UObjectivesManager* ObjectivesManager; // 0x350(0x08)
	char UnknownData_358[0x10]; // 0x358(0x10)

	struct AMiningPod* SpawnPodAtLocation(struct UObject* WorldContextObject, struct AMiningPod* podClass, struct FTransform Transform); // Function FSD.MiningPod.SpawnPodAtLocation
	void SetRampState(enum class EMiningPodRampState rampState); // Function FSD.MiningPod.SetRampState
	void SetMuleInstance(struct ADonkeyCharacter* Donkey); // Function FSD.MiningPod.SetMuleInstance
	void RecieveReturnTimerFifteenSecondWarning(); // Function FSD.MiningPod.RecieveReturnTimerFifteenSecondWarning
	void RecieveReturnTimerExpired(); // Function FSD.MiningPod.RecieveReturnTimerExpired
	void PrepForTakeOff(); // Function FSD.MiningPod.PrepForTakeOff
	void PowerUp(); // Function FSD.MiningPod.PowerUp
	void PoweredUp(); // Function FSD.MiningPod.PoweredUp
	void OnRep_State(); // Function FSD.MiningPod.OnRep_State
	void OnRep_RampState(); // Function FSD.MiningPod.OnRep_RampState
	void OnPrepForTakeOff(); // Function FSD.MiningPod.OnPrepForTakeOff
	void OnPoweringUp(); // Function FSD.MiningPod.OnPoweringUp
	void OnPoweredUp(); // Function FSD.MiningPod.OnPoweredUp
	void OnHostInsidePod(bool isInside); // Function FSD.MiningPod.OnHostInsidePod
	void OnDropStarted(); // Function FSD.MiningPod.OnDropStarted
	void OnDroppodImpact(); // Function FSD.MiningPod.OnDroppodImpact
	void OnDrillingStarted(); // Function FSD.MiningPod.OnDrillingStarted
	void OnDeparting(); // Function FSD.MiningPod.OnDeparting
	void OnCountdownFinished(); // Function FSD.MiningPod.OnCountdownFinished
	void OnCountdownChanged(int32_t newTime); // Function FSD.MiningPod.OnCountdownChanged
	void OnAllDwavesInsidePod(bool AllInside); // Function FSD.MiningPod.OnAllDwavesInsidePod
	int32_t GetTimeToDeparture(); // Function FSD.MiningPod.GetTimeToDeparture
	bool GetHasLanded(); // Function FSD.MiningPod.GetHasLanded
	struct FVector GetDonkeyReturnPickupLocation(); // Function FSD.MiningPod.GetDonkeyReturnPickupLocation
	void ForceTakeoff(); // Function FSD.MiningPod.ForceTakeoff
	void ExitSpacerig(); // Function FSD.MiningPod.ExitSpacerig
	void DropToTarget(struct UObject* WorldContextObject, struct AMiningPod* podClass, struct FTransform dropLocation, int32_t DropDelay); // Function FSD.MiningPod.DropToTarget
	struct AMiningPod* DropToMission(struct UObject* WorldContextObject, struct AMiningPod* podClass, struct FVector Location); // Function FSD.MiningPod.DropToMission
	void DepositAllPlayersMaterials(); // Function FSD.MiningPod.DepositAllPlayersMaterials
	void Depart(); // Function FSD.MiningPod.Depart
	void CorrectLocationsForSpawnedOnLocation(); // Function FSD.MiningPod.CorrectLocationsForSpawnedOnLocation
	struct FVector AdjustLandingLocationToGround(struct UObject* WorldContextObjet, struct FVector initialLocation); // Function FSD.MiningPod.AdjustLandingLocationToGround
};

// Class FSD.MiningPodAnimInstance
// Size: 0x270 (Inherited: 0x270)
struct UMiningPodAnimInstance : UAnimInstance {
	enum class EMiningPodRampState rampState; // 0x268(0x01)
	enum class EMiningPodState PodState; // 0x269(0x01)
};

// Class FSD.MissionChallenge
// Size: 0x30 (Inherited: 0x30)
struct UMissionChallenge : UDataAsset {
};

// Class FSD.MissionFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct UMissionFunctionLibrary : UBlueprintFunctionLibrary {

	int32_t GetGlobalMissionSeed(); // Function FSD.MissionFunctionLibrary.GetGlobalMissionSeed
};

// Class FSD.MissionManager
// Size: 0xc0 (Inherited: 0xb0)
struct UMissionManager : UActorComponent {
	struct TArray<struct URunningMissionBP*> RunningBlueprints; // 0xb0(0x10)

	void OnMatchStarted(); // Function FSD.MissionManager.OnMatchStarted
};

// Class FSD.MissionMutator
// Size: 0x90 (Inherited: 0x30)
struct UMissionMutator : UDataAsset {
	struct URunningMissionBP* MissionBP; // 0x30(0x08)
	struct TArray<SoftClassProperty> BannedObjectives; // 0x38(0x10)
	struct TArray<struct UMutator*> Mutators; // 0x48(0x10)
	struct FText Title; // 0x58(0x18)
	struct FText RichDescription; // 0x70(0x18)
	struct UTexture2D* Icon; // 0x88(0x08)
};

// Class FSD.Mutator
// Size: 0x30 (Inherited: 0x30)
struct UMutator : UDataAsset {
};

// Class FSD.VeinMutator
// Size: 0x40 (Inherited: 0x30)
struct UVeinMutator : UMutator {
	struct UVeinResourceData* VeinResource; // 0x30(0x08)
	float Modifier; // 0x38(0x04)
	char UnknownData_3C[0x4]; // 0x3c(0x04)
};

// Class FSD.CraftingMaterialMutator
// Size: 0x38 (Inherited: 0x30)
struct UCraftingMaterialMutator : UMutator {
	float Modifier; // 0x30(0x04)
	char UnknownData_34[0x4]; // 0x34(0x04)
};

// Class FSD.ResourceMutator
// Size: 0x48 (Inherited: 0x30)
struct UResourceMutator : UMutator {
	struct TArray<struct UResourceData*> Resources; // 0x30(0x10)
	float Modifier; // 0x40(0x04)
	char UnknownData_44[0x4]; // 0x44(0x04)
};

// Class FSD.SupplyPodMutator
// Size: 0x38 (Inherited: 0x30)
struct USupplyPodMutator : UMutator {
	float CostModifier; // 0x30(0x04)
	char UnknownData_34[0x4]; // 0x34(0x04)
};

// Class FSD.PlayerShieldsMutator
// Size: 0x38 (Inherited: 0x30)
struct UPlayerShieldsMutator : UMutator {
	float ShieldModifier; // 0x30(0x04)
	char UnknownData_34[0x4]; // 0x34(0x04)
};

// Class FSD.EnemyRarityMutator
// Size: 0x48 (Inherited: 0x30)
struct UEnemyRarityMutator : UMutator {
	float RarityMultiplier; // 0x30(0x04)
	float SpawnAmountMultiplier; // 0x34(0x04)
	float DifficultyMultiplier; // 0x38(0x04)
	char UnknownData_3C[0x4]; // 0x3c(0x04)
	struct UEnemyDescriptor* EnemyDescriptor; // 0x40(0x08)
};

// Class FSD.ForceStationaryEncounterMutator
// Size: 0x40 (Inherited: 0x30)
struct UForceStationaryEncounterMutator : UMutator {
	struct UEnemyGroupDescriptor* EnemyGroup; // 0x30(0x08)
	struct FIRandRange GroupSize; // 0x38(0x08)
};

// Class FSD.EncounterOverrideMutator
// Size: 0x38 (Inherited: 0x30)
struct UEncounterOverrideMutator : UMutator {
	float MobileEncounterScale; // 0x30(0x04)
	float StationaryEncounterScale; // 0x34(0x04)
};

// Class FSD.NoHeadlightMutator
// Size: 0x30 (Inherited: 0x30)
struct UNoHeadlightMutator : UMutator {
};

// Class FSD.DifficultyMutator
// Size: 0x60 (Inherited: 0x30)
struct UDifficultyMutator : UMutator {
	float ExtraLargeEnemyDamageResistanceMultiplier; // 0x30(0x04)
	float EnemyDamageResistanceMultiplier; // 0x34(0x04)
	float SmallEnemyDamageResistanceMultiplier; // 0x38(0x04)
	float EnemyDamageModifierMultiplier; // 0x3c(0x04)
	float EnemyCountModifierMultiplier; // 0x40(0x04)
	float WeakpointDamageMultiplier; // 0x44(0x04)
	float HazardBonus; // 0x48(0x04)
	float FriendlyFireModifierMultiplier; // 0x4c(0x04)
	float EnemyWaveIntervalModifier; // 0x50(0x04)
	float EnemyNormalWaveIntervalModifier; // 0x54(0x04)
	float EnemyNormalWaveDifficultyMultiplier; // 0x58(0x04)
	char UnknownData_5C[0x4]; // 0x5c(0x04)
};

// Class FSD.ResourceVeinMutator
// Size: 0x48 (Inherited: 0x30)
struct UResourceVeinMutator : UMutator {
	struct UResourceData* Resource; // 0x30(0x08)
	float VeinLengthMultiplier; // 0x38(0x04)
	float RangeMultiplier; // 0x3c(0x04)
	float NoiseRangeMultiplier; // 0x40(0x04)
	char UnknownData_44[0x4]; // 0x44(0x04)
};

// Class FSD.RewardMutator
// Size: 0x50 (Inherited: 0x30)
struct URewardMutator : UMutator {
	struct FText RewardText; // 0x30(0x18)
	float XPMultiplier; // 0x48(0x04)
	float CreditMultiplier; // 0x4c(0x04)
};

// Class FSD.CommunicationMutator
// Size: 0x38 (Inherited: 0x30)
struct UCommunicationMutator : UMutator {
	float PitchMultiplier; // 0x30(0x04)
	char UnknownData_34[0x4]; // 0x34(0x04)
};

// Class FSD.ExplosiveEnemiesMutator
// Size: 0x40 (Inherited: 0x30)
struct UExplosiveEnemiesMutator : UMutator {
	struct TArray<struct UDamageComponent*> DamageComponents; // 0x30(0x10)

	void ExplodeEnemy(struct AFSDPawn* enemy); // Function FSD.ExplosiveEnemiesMutator.ExplodeEnemy
};

// Class FSD.InfestedEnemiesMutator
// Size: 0x40 (Inherited: 0x30)
struct UInfestedEnemiesMutator : UMutator {
	struct TArray<struct UParticleSystem*> SpawnEffects; // 0x30(0x10)

	struct UParticleSystem* GetParticleSystem(struct AFSDPawn* enemy); // Function FSD.InfestedEnemiesMutator.GetParticleSystem
};

// Class FSD.RunningMissionBP
// Size: 0x28 (Inherited: 0x28)
struct URunningMissionBP : UObject {

	void StartLogic(); // Function FSD.RunningMissionBP.StartLogic
};

// Class FSD.StatusEffectMissionBP
// Size: 0x78 (Inherited: 0x28)
struct UStatusEffectMissionBP : URunningMissionBP {
	struct FGameplayTagQuery EnemyQuery; // 0x28(0x48)
	struct UStatusEffect* StatusEffect; // 0x70(0x08)

	void OnEnemySpawned(struct APawn* Pawn, struct UEnemyDescriptor* descriptor); // Function FSD.StatusEffectMissionBP.OnEnemySpawned
};

// Class FSD.NoOxygenMutator
// Size: 0x88 (Inherited: 0x30)
struct UNoOxygenMutator : UMutator {
	float OxygenReplenishmentRate; // 0x30(0x04)
	char UnknownData_34[0x4]; // 0x34(0x04)
	SoftClassProperty OxygenComponent; // 0x38(0x28)
	SoftClassProperty ReplenishOxygenEffect; // 0x60(0x28)
};

// Class FSD.PlayerDamageTakenMutator
// Size: 0x88 (Inherited: 0x30)
struct UPlayerDamageTakenMutator : UMutator {
	float DamageMultiplier; // 0x30(0x04)
	char UnknownData_34[0x4]; // 0x34(0x04)
	struct TSet<struct UDamageClass*> SkipDamageClasses; // 0x38(0x50)
};

// Class FSD.CaveItemsMutator
// Size: 0x38 (Inherited: 0x30)
struct UCaveItemsMutator : UMutator {
	struct UDebrisItemComponent* Item; // 0x30(0x08)
};

// Class FSD.EliteEnemiesMutator
// Size: 0x40 (Inherited: 0x30)
struct UEliteEnemiesMutator : UMutator {
	float SpawnChanceModifier; // 0x30(0x04)
	int32_t MaxElites; // 0x34(0x04)
	float EliteCooldown; // 0x38(0x04)
	char UnknownData_3C[0x4]; // 0x3c(0x04)
};

// Class FSD.MissionMutatorManager
// Size: 0xb0 (Inherited: 0xb0)
struct UMissionMutatorManager : UActorComponent {
};

// Class FSD.MissionPlayerAndCharacterWidget
// Size: 0x270 (Inherited: 0x230)
struct UMissionPlayerAndCharacterWidget : UUserWidget {
	char UnknownData_230[0x40]; // 0x230(0x40)

	void UpdateValues(int32_t PlayerRank, int32_t PlayerStars, int32_t CharacterLevel, float CharacterProgress); // Function FSD.MissionPlayerAndCharacterWidget.UpdateValues
	void StepCounter(float TimeScale, bool CounterFinished); // Function FSD.MissionPlayerAndCharacterWidget.StepCounter
	void PingPlayerRank(); // Function FSD.MissionPlayerAndCharacterWidget.PingPlayerRank
	void PingCharacterLevel(int32_t Level, int32_t Stars); // Function FSD.MissionPlayerAndCharacterWidget.PingCharacterLevel
	void InitCounter(struct FPlayerProgress PlayerProgressStart, struct FCharacterProgress CharacterProgressStart, struct FPlayerProgress PlayerProgressFinish, struct FCharacterProgress CharacterProgressFinish); // Function FSD.MissionPlayerAndCharacterWidget.InitCounter
};

// Class FSD.FSDMissionSettings
// Size: 0xf0 (Inherited: 0x38)
struct UFSDMissionSettings : UDeveloperSettings {
	struct FSoftObjectPath DefaultRoomGenerator; // 0x38(0x18)
	struct TMap<int32_t, struct FMissionHazardSetting> MissionComplexitySettings; // 0x50(0x50)
	struct TMap<int32_t, struct FMissionHazardSetting> MissionDurationSettings; // 0xa0(0x50)

	float GetTotalHazardBonus(struct UObject* WorldContextObject, struct UGeneratedMission* mission, struct UDifficultySetting* DifficultySetting); // Function FSD.FSDMissionSettings.GetTotalHazardBonus
};

// Class FSD.MissionStatCategory
// Size: 0x50 (Inherited: 0x30)
struct UMissionStatCategory : UDataAsset {
	struct FText Title; // 0x30(0x18)
	struct UTexture2D* Icon; // 0x48(0x08)
};

// Class FSD.MissionStat
// Size: 0x80 (Inherited: 0x30)
struct UMissionStat : UDataAsset {
	struct FMulticastInlineDelegate OnCountChanged; // 0x30(0x10)
	struct FGuid SavegameID; // 0x40(0x10)
	struct FText Title; // 0x50(0x18)
	struct UMissionStatCategory* Category; // 0x68(0x08)
	struct UFSDAchievement* StatAchievement; // 0x70(0x08)
	enum class EMissionStatType MissionStatType; // 0x78(0x01)
	bool DoNotShowInMissionStatView; // 0x79(0x01)
	bool ShowAllValuesCombined; // 0x7a(0x01)
	bool ShowHighestValue; // 0x7b(0x01)
	char UnknownData_7C[0x4]; // 0x7c(0x04)

	void StatCountChanged__DelegateSignature(struct UMissionStat* MissionStat, float Value); // DelegateFunction FSD.MissionStat.StatCountChanged__DelegateSignature
	struct FText MissionStatToText(enum class EMissionStatType StatType, float Value); // Function FSD.MissionStat.MissionStatToText
	void Increment(struct UObject* WorldContext, struct UMissionStat* Stat, struct APlayerCharacter* CharacterClass, float amount); // Function FSD.MissionStat.Increment
	float GetStatMinCount(struct UObject* WorldContext); // Function FSD.MissionStat.GetStatMinCount
	float GetStatMaxCount(struct UObject* WorldContext); // Function FSD.MissionStat.GetStatMaxCount
	struct FText GetStatCountTotalAsText(struct UObject* WorldContext); // Function FSD.MissionStat.GetStatCountTotalAsText
	float GetStatCountTotal(struct UObject* WorldContext); // Function FSD.MissionStat.GetStatCountTotal
	float GetStatCountPct(struct UObject* WorldContext, struct APlayerCharacter* CharacterClass); // Function FSD.MissionStat.GetStatCountPct
	struct FText GetStatCountAsText(struct UObject* WorldContext, struct UPlayerCharacterID* characterID); // Function FSD.MissionStat.GetStatCountAsText
	float GetStatCount(struct UObject* WorldContext, struct UPlayerCharacterID* characterID); // Function FSD.MissionStat.GetStatCount
	struct FString GetSourceTitle(); // Function FSD.MissionStat.GetSourceTitle
	struct FText GetLowestStatCountAsText(struct UObject* WorldContext); // Function FSD.MissionStat.GetLowestStatCountAsText
	struct UTexture2D* GetIcon(); // Function FSD.MissionStat.GetIcon
	struct FText GetHighestStatCountAsText(struct UObject* WorldContext); // Function FSD.MissionStat.GetHighestStatCountAsText
	struct FText GetCategoryTitle(); // Function FSD.MissionStat.GetCategoryTitle
};

// Class FSD.MissionStatsCollector
// Size: 0xd8 (Inherited: 0xb0)
struct UMissionStatsCollector : UActorComponent {
	char UnknownData_B0[0x8]; // 0xb0(0x08)
	struct APlayerCharacter* Character; // 0xb8(0x08)
	char UnknownData_C0[0x18]; // 0xc0(0x18)

	void OnResourceIncremented(struct UCappedResource* Resource, float amount); // Function FSD.MissionStatsCollector.OnResourceIncremented
};

// Class FSD.GlobalMissionParameters
// Size: 0x40 (Inherited: 0x30)
struct UGlobalMissionParameters : UDataAsset {
	struct TArray<struct FResourceSpawner> DefaultResources; // 0x30(0x10)
};

// Class FSD.MissionTemplate
// Size: 0x200 (Inherited: 0x58)
struct UMissionTemplate : USavableDataAsset {
	struct TArray<struct FResourceSpawner> ResourceDistribution; // 0x58(0x10)
	struct UObjective* PrimaryObjective; // 0x68(0x08)
	struct TArray<struct UObjective*> SecondaryObjectives; // 0x70(0x10)
	struct TArray<struct UObjective*> DeepDiveObjectives; // 0x80(0x10)
	struct TArray<struct UMutator*> BaseMutators; // 0x90(0x10)
	SoftClassProperty pls; // 0xa0(0x28)
	struct TSoftObjectPtr<struct UWorld> Level; // 0xc8(0x28)
	SoftClassProperty GameMode; // 0xf0(0x28)
	struct TArray<struct UMissionComplexity*> LockedComplexities; // 0x118(0x10)
	struct TArray<struct UMissionDuration*> LockedDurations; // 0x128(0x10)
	struct FText MissionName; // 0x138(0x18)
	struct TSoftObjectPtr<struct UTexture2D> MissionImageLarge; // 0x150(0x28)
	struct TSoftObjectPtr<struct UTexture2D> MissionButtonImage; // 0x178(0x28)
	struct UTexture2D* MissionIcon; // 0x1a0(0x08)
	struct FLinearColor MissionIconBorderColor; // 0x1a8(0x10)
	int32_t MissionTypeIndex; // 0x1b8(0x04)
	char UnknownData_1BC[0x4]; // 0x1bc(0x04)
	struct FString MissionTypeAnalyticsIndex; // 0x1c0(0x10)
	struct TArray<struct UMissionDNA*> DNA; // 0x1d0(0x10)
	struct TArray<SoftClassProperty> DebrisComponents; // 0x1e0(0x10)
	bool MustBeUnlocked; // 0x1f0(0x01)
	char UnknownData_1F1[0x3]; // 0x1f1(0x03)
	float RoomEncounerScale; // 0x1f4(0x04)
	float StationaryEnemyScale; // 0x1f8(0x04)
	char UnknownData_1FC[0x4]; // 0x1fc(0x04)

	void Receive_SetMissionParameters(struct UGeneratedMission* mission, struct FRandomStream Random); // Function FSD.MissionTemplate.Receive_SetMissionParameters
	bool IsLocked(struct UFSDSaveGame* SaveGame); // Function FSD.MissionTemplate.IsLocked
	struct TArray<struct UMissionDuration*> GetValidDurations(); // Function FSD.MissionTemplate.GetValidDurations
	struct TArray<struct UMissionComplexity*> GetValidComplexities(); // Function FSD.MissionTemplate.GetValidComplexities
	SoftClassProperty GetSoftReferenceToPLS(); // Function FSD.MissionTemplate.GetSoftReferenceToPLS
	struct FObjectiveMissionIcon GetPrimaryObjectiveIcon(); // Function FSD.MissionTemplate.GetPrimaryObjectiveIcon
	struct AProceduralSetup* GetPLS(); // Function FSD.MissionTemplate.GetPLS
	int32_t GetMissionTypeIndex(); // Function FSD.MissionTemplate.GetMissionTypeIndex
	struct UTexture2D* GetMissionImageLarge(); // Function FSD.MissionTemplate.GetMissionImageLarge
	struct UTexture2D* GetMissionButtonImage(); // Function FSD.MissionTemplate.GetMissionButtonImage
	struct UGeneratedMission* GenerateMission(struct UObject* WorldContextObject, struct UBiome* Biome, int32_t Seed, int32_t GlobalSeed, int32_t missionIndex, struct UMissionComplexity* limitComplexity, struct UMissionDuration* limitDuration, struct UMissionMutator* Mutator, struct TArray<struct UMissionWarning*> Warnings, struct UObjective* forceSecondary); // Function FSD.MissionTemplate.GenerateMission
};

// Class FSD.MissionNameBank
// Size: 0x50 (Inherited: 0x30)
struct UMissionNameBank : UDataAsset {
	struct TArray<struct FText> FirstNames; // 0x30(0x10)
	struct TArray<struct FText> LastNames; // 0x40(0x10)

	struct TArray<struct FText> GetRandomGeneratedNames(struct FRandomStream Random, int32_t count); // Function FSD.MissionNameBank.GetRandomGeneratedNames
};

// Class FSD.MissionComplexity
// Size: 0x60 (Inherited: 0x30)
struct UMissionComplexity : UDataAsset {
	struct FText Title; // 0x30(0x18)
	float HazardBonus; // 0x48(0x04)
	int32_t NumberOfDots; // 0x4c(0x04)
	struct FGuid SavegameID; // 0x50(0x10)
};

// Class FSD.MissionDuration
// Size: 0x60 (Inherited: 0x30)
struct UMissionDuration : UDataAsset {
	struct FText Title; // 0x30(0x18)
	float HazardBonus; // 0x48(0x04)
	int32_t NumberOfDots; // 0x4c(0x04)
	struct FGuid SavegameID; // 0x50(0x10)
};

// Class FSD.MissionDNA
// Size: 0x50 (Inherited: 0x28)
struct UMissionDNA : UObject {
	float MissionScale; // 0x28(0x04)
	float Weight; // 0x2c(0x04)
	struct UMissionComplexity* Complexity; // 0x30(0x08)
	struct UMissionDuration* Duration; // 0x38(0x08)
	struct TArray<struct FGameplayTagQuery> RoomQueries; // 0x40(0x10)

	float GetDurationHazardBonus(); // Function FSD.MissionDNA.GetDurationHazardBonus
	float GetComplexityHazardBonus(); // Function FSD.MissionDNA.GetComplexityHazardBonus
};

// Class FSD.EscortMissionDNA
// Size: 0x58 (Inherited: 0x50)
struct UEscortMissionDNA : UMissionDNA {
	int32_t RefuelLocations; // 0x50(0x04)
	char UnknownData_54[0x4]; // 0x54(0x04)
};

// Class FSD.DNATester
// Size: 0x230 (Inherited: 0x220)
struct ADNATester : AActor {
	struct UMissionDNA* DNA; // 0x220(0x08)
	struct URoomGeneratorGroup* Group; // 0x228(0x08)
};

// Class FSD.MissionWarning
// Size: 0xd0 (Inherited: 0x30)
struct UMissionWarning : UDataAsset {
	SoftClassProperty MissionBP; // 0x30(0x28)
	struct TArray<SoftClassProperty> BannedObjectives; // 0x58(0x10)
	struct TArray<struct UMissionMutator*> BannedMutators; // 0x68(0x10)
	struct TArray<struct UMutator*> Mutators; // 0x78(0x10)
	struct FText Title; // 0x88(0x18)
	struct FText RichDescription; // 0xa0(0x18)
	struct UTexture2D* Icon; // 0xb8(0x08)
	float HazardBonus; // 0xc0(0x04)
	char UnknownData_C4[0x4]; // 0xc4(0x04)
	struct UMissionStat* MissionCompletedStat; // 0xc8(0x08)
};

// Class FSD.StatusEffectEnemies
// Size: 0xf8 (Inherited: 0x28)
struct UStatusEffectEnemies : URunningMissionBP {
	struct TArray<struct UStatusEffect*> StatusEffects; // 0x28(0x10)
	struct FGameplayTagContainer AllowedFilter; // 0x38(0x20)
	struct FGameplayTagQuery AllowedQuery; // 0x58(0x48)
	float ChanceToApply; // 0xa0(0x04)
	bool OverrideReplacesDefault; // 0xa4(0x01)
	char UnknownData_A5[0x3]; // 0xa5(0x03)
	struct TMap<struct UEnemyDescriptor*, struct UStatusEffect*> Overrides; // 0xa8(0x50)

	void OnEnemySpawned(struct APawn* enemy, struct UEnemyDescriptor* descriptor); // Function FSD.StatusEffectEnemies.OnEnemySpawned
};

// Class FSD.HeroEnemies
// Size: 0xc0 (Inherited: 0x28)
struct UHeroEnemies : URunningMissionBP {
	struct FGameplayTagQuery AllowedQuery; // 0x28(0x48)
	struct TMap<struct UEnemyDescriptor*, struct FEliteEnemyEntry> Entries; // 0x70(0x50)

	void OnEnemySpawned(struct APawn* enemy, struct UEnemyDescriptor* descriptor); // Function FSD.HeroEnemies.OnEnemySpawned
};

// Class FSD.ExterminationReward
// Size: 0x58 (Inherited: 0x28)
struct UExterminationReward : URunningMissionBP {
	struct UResourceData* Resource; // 0x28(0x08)
	float AwardSize; // 0x30(0x04)
	char UnknownData_34[0x4]; // 0x34(0x04)
	struct FGameplayTagContainer AllowedFilter; // 0x38(0x20)

	void OnEnemyKilled(struct FGameplayTagContainer GameplayTags, struct AActor* killedEnemy); // Function FSD.ExterminationReward.OnEnemyKilled
};

// Class FSD.MOD_MakeEliteEnemy
// Size: 0xb0 (Inherited: 0xb0)
struct UMOD_MakeEliteEnemy : UActorComponent {
};

// Class FSD.MotionAudioController
// Size: 0x820 (Inherited: 0x7d0)
struct UMotionAudioController : UAudioComponent {
	float MaxValue; // 0x7d0(0x04)
	float IncreseSpeed; // 0x7d4(0x04)
	float DecaySpeed; // 0x7d8(0x04)
	bool DebugText; // 0x7dc(0x01)
	bool Clamp; // 0x7dd(0x01)
	bool Interp; // 0x7de(0x01)
	char UnknownData_7DF[0x1]; // 0x7df(0x01)
	float AccelerationThreshold; // 0x7e0(0x04)
	char UnknownData_7E4[0xc]; // 0x7e4(0x0c)
	float SpeedThreshold; // 0x7f0(0x04)
	float FadeInTime; // 0x7f4(0x04)
	float FadeOutTime; // 0x7f8(0x04)
	bool AutoPlayOnSpeedThreshold; // 0x7fc(0x01)
	char UnknownData_7FD[0x23]; // 0x7fd(0x23)
};

// Class FSD.MountedGun
// Size: 0x248 (Inherited: 0x220)
struct AMountedGun : AActor {
	char UnknownData_220[0x10]; // 0x220(0x10)
	struct USkeletalMeshComponent* Mesh; // 0x230(0x08)
	struct UWeaponFireComponent* WeaponFire; // 0x238(0x08)
	struct UGunLogicComponent* GunLogic; // 0x240(0x08)

	void Server_Test(); // Function FSD.MountedGun.Server_Test
};

// Class FSD.GunLogicComponent
// Size: 0xf0 (Inherited: 0xb0)
struct UGunLogicComponent : UActorComponent {
	struct UWeaponFireComponent* WeaponFire; // 0xb0(0x08)
	struct UMeshComponent* Mesh; // 0xb8(0x08)
	float RateOfFire; // 0xc0(0x04)
	char UnknownData_C4[0x4]; // 0xc4(0x04)
	struct UParticleSystem* MuzzleParticles; // 0xc8(0x08)
	struct UParticleSystem* TracerParticles; // 0xd0(0x08)
	struct USoundCue* FireSound; // 0xd8(0x08)
	float MinTracerDistance; // 0xe0(0x04)
	float TracerSpeed; // 0xe4(0x04)
	char UnknownData_E8[0x8]; // 0xe8(0x08)

	void SetMesh(struct UMeshComponent* Mesh); // Function FSD.GunLogicComponent.SetMesh
	void OnWeaponFireEnded(); // Function FSD.GunLogicComponent.OnWeaponFireEnded
	void OnWeaponFired(struct FVector Location); // Function FSD.GunLogicComponent.OnWeaponFired
};

// Class FSD.MouseCursorWidget
// Size: 0x258 (Inherited: 0x250)
struct UMouseCursorWidget : UFSDUserWidget {
	enum class EFSDInputSource TargetInput; // 0x250(0x01)
	bool bIsHovering; // 0x251(0x01)
	char UnknownData_252[0x6]; // 0x252(0x06)

	void OnUnhover(); // Function FSD.MouseCursorWidget.OnUnhover
	void OnInputSourceChanged(enum class EFSDInputSource Source); // Function FSD.MouseCursorWidget.OnInputSourceChanged
	void OnHover(); // Function FSD.MouseCursorWidget.OnHover
};

// Class FSD.MultiHitscanComponent
// Size: 0x2b8 (Inherited: 0x238)
struct UMultiHitscanComponent : UHitscanBaseComponent {
	int32_t BulletsPerShot; // 0x238(0x04)
	float MuzzleRadius; // 0x23c(0x04)
	float GeneralImpactAudioVolume; // 0x240(0x04)
	char UnknownData_244[0x4]; // 0x244(0x04)
	struct TArray<struct AActor*> DamagedActorCache; // 0x248(0x10)
	struct TArray<struct FMultiHitscanHit> Hits; // 0x258(0x10)
	struct TArray<struct AActor*> ActorsHit; // 0x268(0x10)
	char UnknownData_278[0x40]; // 0x278(0x40)

	void Server_RegisterHit(struct TArray<struct FMultiHitscanHit> hitResults); // Function FSD.MultiHitscanComponent.Server_RegisterHit
	void All_ShowHit(struct TArray<struct FMultiHitscanHit> hitResults); // Function FSD.MultiHitscanComponent.All_ShowHit
};

// Class FSD.MultiprojectileSpawner
// Size: 0x100 (Inherited: 0xb0)
struct UMultiprojectileSpawner : UActorComponent {
	struct TArray<struct FProjectileSpawnData> ProjectileData; // 0xb0(0x10)
	bool ProjectilesIgnoreEachOther; // 0xc0(0x01)
	char UnknownData_C1[0x3f]; // 0xc1(0x3f)

	bool GetIsFiring(); // Function FSD.MultiprojectileSpawner.GetIsFiring
	void Fire(struct FVector Velocity, struct FVector Origin); // Function FSD.MultiprojectileSpawner.Fire
	struct UMultiprojectileSpawner* FindMultiProjectileSpawner(struct AActor* Actor, struct UDataAsset* RangedAttack); // Function FSD.MultiprojectileSpawner.FindMultiProjectileSpawner
};

// Class FSD.MusicLibrary
// Size: 0x48 (Inherited: 0x30)
struct UMusicLibrary : UDataAsset {
	struct TArray<struct USoundCue*> MusicCues; // 0x30(0x10)
	struct UMusicCategory* Category; // 0x40(0x08)
};

// Class FSD.MusicCategory
// Size: 0x38 (Inherited: 0x30)
struct UMusicCategory : UDataAsset {
	float FadeDuration; // 0x30(0x04)
	char UnknownData_34[0x4]; // 0x34(0x04)
};

// Class FSD.MusicReplicator
// Size: 0x238 (Inherited: 0x220)
struct AMusicReplicator : AActor {
	struct TArray<struct FActiveMusicItem> ActiveMusic; // 0x220(0x10)
	char UnknownData_230[0x8]; // 0x230(0x08)

	void OnRep_ActiveMusic(); // Function FSD.MusicReplicator.OnRep_ActiveMusic
};

// Class FSD.MusicManager
// Size: 0x90 (Inherited: 0x30)
struct UMusicManager : UWorldSubsystem {
	char UnknownData_30[0x10]; // 0x30(0x10)
	struct TMap<struct FMusicHandle, struct FActiveAudioItem> ActiveAudio; // 0x40(0x50)

	void StopHandle(struct FMusicHandle Handle); // Function FSD.MusicManager.StopHandle
	void StopCategory(struct UMusicCategory* Category); // Function FSD.MusicManager.StopCategory
	struct FMusicHandle PlayLibrary(struct UMusicLibrary* library); // Function FSD.MusicManager.PlayLibrary
	struct FMusicHandle Play(struct USoundBase* Music, struct UMusicCategory* Category); // Function FSD.MusicManager.Play
};

// Class FSD.NewsTextLists
// Size: 0x70 (Inherited: 0x30)
struct UNewsTextLists : UDataAsset {
	struct TArray<struct FText> Verb; // 0x30(0x10)
	struct TArray<struct FText> Person; // 0x40(0x10)
	struct TArray<struct FText> Creature; // 0x50(0x10)
	struct TArray<struct FText> Resource; // 0x60(0x10)
};

// Class FSD.NewsTextHeadlines
// Size: 0x40 (Inherited: 0x30)
struct UNewsTextHeadlines : UDataAsset {
	struct TArray<struct FText> MineralTradeTicker; // 0x30(0x10)
};

// Class FSD.NoiseCarveAttackEffect
// Size: 0x48 (Inherited: 0x28)
struct UNoiseCarveAttackEffect : UAttackEffect {
	float ExpensiveNoise; // 0x28(0x04)
	float CarveDiameterCM; // 0x2c(0x04)
	float CarveNoiseCM; // 0x30(0x04)
	float CarveBurnThicknessCM; // 0x34(0x04)
	float CarverOffset; // 0x38(0x04)
	struct FName Socket; // 0x3c(0x08)
	char UnknownData_44[0x4]; // 0x44(0x04)
};

// Class FSD.NoiseFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct UNoiseFunctionLibrary : UBlueprintFunctionLibrary {

	void SphericalNoiseMovementComponent(struct UObject* WorldContextObject, struct USceneComponent* Component, struct FVector Center, float Radius, float Speed, float TimeOffset); // Function FSD.NoiseFunctionLibrary.SphericalNoiseMovementComponent
	void SphericalNoiseMovementActor(struct UObject* WorldContextObject, struct AActor* Actor, struct FVector Center, float Radius, float Speed, float TimeOffset); // Function FSD.NoiseFunctionLibrary.SphericalNoiseMovementActor
	struct FVector NoiseSphere3D(struct UObject* WorldContextObject, float Time, float Radius); // Function FSD.NoiseFunctionLibrary.NoiseSphere3D
	struct FVector2D NoiseSphere2D(struct UObject* WorldContextObject, float Time, float Radius); // Function FSD.NoiseFunctionLibrary.NoiseSphere2D
	float Noise3D(struct UObject* WorldContextObject, float X, float Y, float Z); // Function FSD.NoiseFunctionLibrary.Noise3D
	float Noise2D(struct UObject* WorldContextObject, float X, float Y); // Function FSD.NoiseFunctionLibrary.Noise2D
	float Noise(struct UObject* WorldContextObject, float X); // Function FSD.NoiseFunctionLibrary.Noise
};

// Class FSD.NoiseVisualizor
// Size: 0x260 (Inherited: 0x220)
struct ANoiseVisualizor : AActor {
	char UnknownData_220[0x8]; // 0x220(0x08)
	struct UFloodFillSettings* FloodFillSettings; // 0x228(0x08)
	float FreqMultiplier; // 0x230(0x04)
	float AmplitudeMultiplier; // 0x234(0x04)
	struct FVector NoiseSize; // 0x238(0x0c)
	float PointSize; // 0x244(0x04)
	float PostNoiseAmplitude; // 0x248(0x04)
	int32_t Octaves; // 0x24c(0x04)
	struct FVector Origin; // 0x250(0x0c)
	bool ShowNoise; // 0x25c(0x01)
	bool ShowTerrainNoise; // 0x25d(0x01)
	char UnknownData_25E[0x2]; // 0x25e(0x02)
};

// Class FSD.NoisyPathfinderTest
// Size: 0x2b0 (Inherited: 0x220)
struct ANoisyPathfinderTest : AActor {
	struct FVector Start; // 0x220(0x0c)
	struct FVector End; // 0x22c(0x0c)
	struct FVector StartDirection; // 0x238(0x0c)
	struct FVector EndDirection; // 0x244(0x0c)
	float DirectionDistance; // 0x250(0x04)
	float DirectionPenalty; // 0x254(0x04)
	float ZPenaltyPower; // 0x258(0x04)
	float ZPenaltyScale; // 0x25c(0x04)
	float DistancePenaltyScale; // 0x260(0x04)
	float RandomPenaltyScale; // 0x264(0x04)
	struct TArray<struct FPathObstacle> obstacles; // 0x268(0x10)
	struct UTunnelSegmentSetting* TunnelSettings; // 0x278(0x08)
	struct UTunnelParameters* TunnelParameters; // 0x280(0x08)
	int32_t StepSize; // 0x288(0x04)
	bool Realtime; // 0x28c(0x01)
	bool CarvePath; // 0x28d(0x01)
	bool CanDiagonal; // 0x28e(0x01)
	char UnknownData_28F[0x1]; // 0x28f(0x01)
	struct UFloodFillSettings* FloodFillSettings; // 0x290(0x08)
	struct ADeepCSGWorld* CSGWorld; // 0x298(0x08)
	char UnknownData_2A0[0x10]; // 0x2a0(0x10)
};

// Class FSD.NoMovementStateComponent
// Size: 0x100 (Inherited: 0xf8)
struct UNoMovementStateComponent : UCharacterStateComponent {
	bool DisableHeadLightOnEnter; // 0xf8(0x01)
	bool EnableHeadLightOnExit; // 0xf9(0x01)
	char UnknownData_FA[0x6]; // 0xfa(0x06)
};

// Class FSD.AttachedStateComponent
// Size: 0x128 (Inherited: 0xf8)
struct UAttachedStateComponent : UCharacterStateComponent {
	bool DisableHeadLightOnEnter; // 0xf8(0x01)
	bool EnableHeadLightOnExit; // 0xf9(0x01)
	char UnknownData_FA[0x2]; // 0xfa(0x02)
	float MaxPitch; // 0xfc(0x04)
	char UnknownData_100[0x28]; // 0x100(0x28)
};

// Class FSD.OxygenComponent
// Size: 0x110 (Inherited: 0xb0)
struct UOxygenComponent : UActorComponent {
	struct FMulticastInlineDelegate OnOxygenChanged; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnOxygenReplenishingEvent; // 0xc0(0x10)
	float OxygenGivenOnRevive; // 0xd0(0x04)
	float CurrentOxygen; // 0xd4(0x04)
	float OxygenReplinishmentRate; // 0xd8(0x04)
	int32_t NetworkedOxygen; // 0xdc(0x04)
	char UnknownData_E0[0x4]; // 0xe0(0x04)
	bool IsReplenishingOxygen; // 0xe4(0x01)
	char UnknownData_E5[0x3]; // 0xe5(0x03)
	float OxygenDepletionPersecond; // 0xe8(0x04)
	char UnknownData_EC[0x4]; // 0xec(0x04)
	struct TArray<struct FOxygenCallback> Callbacks; // 0xf0(0x10)
	char UnknownData_100[0x8]; // 0x100(0x08)
	struct UStatusEffect* NoOxygenStatusEffect; // 0x108(0x08)

	void RegisterOxygenEvent(struct FDelegate OxygenCallback, float oxygenLevel, bool triggerOnOxygenLoss); // Function FSD.OxygenComponent.RegisterOxygenEvent
	void OnRevived(); // Function FSD.OxygenComponent.OnRevived
	void OnRep_NetworkedOxygen(int32_t OldValue); // Function FSD.OxygenComponent.OnRep_NetworkedOxygen
	void OnRep_IsReplenishingOxygen(); // Function FSD.OxygenComponent.OnRep_IsReplenishingOxygen
	void OnDeath(struct UHealthComponentBase* HealthComponent); // Function FSD.OxygenComponent.OnDeath
};

// Class FSD.OxygenSourceComponent
// Size: 0xe8 (Inherited: 0xb0)
struct UOxygenSourceComponent : UActorComponent {
	float SourceRadius; // 0xb0(0x04)
	float CenterOffset; // 0xb4(0x04)
	struct FMulticastInlineDelegate OnOxygenActivationChanged; // 0xb8(0x10)
	struct UNoOxygenMutator* Mutator; // 0xc8(0x08)
	char UnknownData_D0[0x18]; // 0xd0(0x18)

	void OnTimerTick(); // Function FSD.OxygenSourceComponent.OnTimerTick
	void OnSourceActivated(); // Function FSD.OxygenSourceComponent.OnSourceActivated
};

// Class FSD.PlayerCharacterID
// Size: 0x88 (Inherited: 0x30)
struct UPlayerCharacterID : UDataAsset {
	char UnknownData_30[0x8]; // 0x30(0x08)
	struct FGuid SavegameID; // 0x38(0x10)
	struct FName AssetName; // 0x48(0x08)
	SoftClassProperty Character; // 0x50(0x28)
	struct FString AnalyticsID; // 0x78(0x10)

	struct APlayerCharacter* GetCharacterClass(); // Function FSD.PlayerCharacterID.GetCharacterClass
	struct APlayerCharacter* GetCharacter(); // Function FSD.PlayerCharacterID.GetCharacter
};

// Class FSD.ItemID
// Size: 0x90 (Inherited: 0x58)
struct UItemID : USavableDataAsset {
	SoftClassProperty Item; // 0x58(0x28)
	struct UPlayerCharacterID* ItemOwner; // 0x80(0x08)
	enum class EItemCategory ItemCategory; // 0x88(0x01)
	char UnknownData_89[0x7]; // 0x89(0x07)

	struct AItem* GetItemClass(); // Function FSD.ItemID.GetItemClass
	struct AItem* GetItem(); // Function FSD.ItemID.GetItem
	struct AActor* GetActorClass(); // Function FSD.ItemID.GetActorClass
	struct AActor* GetActor(); // Function FSD.ItemID.GetActor
};

// Class FSD.EnemyID
// Size: 0x58 (Inherited: 0x58)
struct UEnemyID : USavableDataAsset {
};

// Class FSD.CategoryID
// Size: 0x48 (Inherited: 0x30)
struct UCategoryID : UDataAsset {
	char UnknownData_30[0x8]; // 0x30(0x08)
	struct FGuid SavegameID; // 0x38(0x10)
};

// Class FSD.ObjectiveID
// Size: 0x58 (Inherited: 0x30)
struct UObjectiveID : UDataAsset {
	char UnknownData_30[0x28]; // 0x30(0x28)
};

// Class FSD.ActorContextWidget
// Size: 0x240 (Inherited: 0x230)
struct UActorContextWidget : UUserWidget {
	struct AActor* ContextActor; // 0x230(0x08)
	struct UPrimitiveComponent* ContextPrimitive; // 0x238(0x08)

	void Update(struct UPrimitiveComponent* InContextPrimitive); // Function FSD.ActorContextWidget.Update
	void Show(struct UPrimitiveComponent* InContextPrimitive); // Function FSD.ActorContextWidget.Show
	void ReceiveUpdate(struct UPrimitiveComponent* InContextPrimitive); // Function FSD.ActorContextWidget.ReceiveUpdate
	void ReceiveShow(struct UPrimitiveComponent* InContextPrimitive); // Function FSD.ActorContextWidget.ReceiveShow
	void ReceiveContextActorChanged(struct AActor* InContextActor); // Function FSD.ActorContextWidget.ReceiveContextActorChanged
};

// Class FSD.ObjectiveWidget
// Size: 0x290 (Inherited: 0x230)
struct UObjectiveWidget : UUserWidget {
	struct FMulticastInlineDelegate OnObjectiveWidgetUpdated; // 0x230(0x10)
	struct UObjective* MissionObjective; // 0x240(0x08)
	bool bIsPrimaryObjective; // 0x248(0x01)
	char UnknownData_249[0x7]; // 0x249(0x07)
	struct FText ObjectiveText; // 0x250(0x18)
	struct FText ObjectiveCounterText; // 0x268(0x18)
	struct UTexture2D* ObjectiveCounterIcon; // 0x280(0x08)
	bool bObjectiveCompleted; // 0x288(0x01)
	char UnknownData_289[0x7]; // 0x289(0x07)

	void SetText(struct FText InText, struct FText InCounterText, struct UTexture2D* InCounterIcon, bool InObjectiveCompleted); // Function FSD.ObjectiveWidget.SetText
	void SetSimpleText(struct FText InText, bool InObjectiveCompleted); // Function FSD.ObjectiveWidget.SetSimpleText
	void SetObjective(struct UObjective* InObjective, bool InIsPrimaryObjective); // Function FSD.ObjectiveWidget.SetObjective
	void ReceiveObjectiveUpdated(); // Function FSD.ObjectiveWidget.ReceiveObjectiveUpdated
	void ReceiveObjectiveInitialized(); // Function FSD.ObjectiveWidget.ReceiveObjectiveInitialized
	void OnObjectiveUpdated(struct UObjective* InObjective); // Function FSD.ObjectiveWidget.OnObjectiveUpdated
	void ObjectiveWidgetDelegate__DelegateSignature(struct UObjectiveWidget* InObjectiveWidget); // DelegateFunction FSD.ObjectiveWidget.ObjectiveWidgetDelegate__DelegateSignature
};

// Class FSD.OptionalObjectiveWidget
// Size: 0x240 (Inherited: 0x230)
struct UOptionalObjectiveWidget : UUserWidget {
	struct FMulticastInlineDelegate OnWidgetUpdated; // 0x230(0x10)

	void SignalWidgetUpdated(); // Function FSD.OptionalObjectiveWidget.SignalWidgetUpdated
	void SetObjective(struct UObjective* obj); // Function FSD.OptionalObjectiveWidget.SetObjective
	void OptionalObjectiveWidgetDelegate__DelegateSignature(struct UOptionalObjectiveWidget* InOptionalObjectiveWidget); // DelegateFunction FSD.OptionalObjectiveWidget.OptionalObjectiveWidgetDelegate__DelegateSignature
};

// Class FSD.ObjectivesManager
// Size: 0x100 (Inherited: 0xb0)
struct UObjectivesManager : UActorComponent {
	struct FMulticastInlineDelegate OnObjectivesCompleted; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnObjectivesChanged; // 0xc0(0x10)
	struct FMulticastInlineDelegate OnAllRequiredReturnObjectivesCompleted; // 0xd0(0x10)
	struct UObjective* Objective; // 0xe0(0x08)
	struct TArray<struct UObjective*> SecondaryObjectives; // 0xe8(0x10)
	bool ObjectivesInitialized; // 0xf8(0x01)
	bool ObjectivesStarted; // 0xf9(0x01)
	bool bCheatObjectivesCompleted; // 0xfa(0x01)
	char UnknownData_FB[0x5]; // 0xfb(0x05)

	void OnObjectiveChanged(struct UObjective* obj); // Function FSD.ObjectivesManager.OnObjectiveChanged
	struct UObjective* GetSecondaryObjective(); // Function FSD.ObjectivesManager.GetSecondaryObjective
	struct UObjective* GetPrimaryObjective(); // Function FSD.ObjectivesManager.GetPrimaryObjective
	void ExitPodDescending(); // Function FSD.ObjectivesManager.ExitPodDescending
	void ExitPodArrived(); // Function FSD.ObjectivesManager.ExitPodArrived
	void DropPodExited(); // Function FSD.ObjectivesManager.DropPodExited
};

// Class FSD.ObjectTemperatureComponent
// Size: 0x100 (Inherited: 0xc8)
struct UObjectTemperatureComponent : UTemperatureComponent {
	float TemperatureChangeScale; // 0xc8(0x04)
	float BurnTemperature; // 0xcc(0x04)
	float DouseFireTemperature; // 0xd0(0x04)
	int32_t CoolingRate; // 0xd4(0x04)
	bool IsHeatsourceWhenOnFire; // 0xd8(0x01)
	char UnknownData_D9[0x3]; // 0xd9(0x03)
	float OnFireHeatRange; // 0xdc(0x04)
	char UnknownData_E0[0x20]; // 0xe0(0x20)

	void TimerCallback(); // Function FSD.ObjectTemperatureComponent.TimerCallback
	void OnDeath(struct UHealthComponentBase* HealthComponent); // Function FSD.ObjectTemperatureComponent.OnDeath
};

// Class FSD.ObstructionChecker
// Size: 0x240 (Inherited: 0x1f0)
struct UObstructionChecker : USceneComponent {
	struct FMulticastInlineDelegate OnObstructionChangedEvent; // 0x1f0(0x10)
	float DistanceToCheck; // 0x200(0x04)
	char UnknownData_204[0x4]; // 0x204(0x04)
	float CheckInterval; // 0x208(0x04)
	char UnknownData_20C[0x4]; // 0x20c(0x04)
	struct TArray<struct FVector> RayOffsets; // 0x210(0x10)
	char UnknownData_220[0x20]; // 0x220(0x20)

	void Timer_Tick(); // Function FSD.ObstructionChecker.Timer_Tick
	void Timer_Result(); // Function FSD.ObstructionChecker.Timer_Result
	void CheckForObstructions(); // Function FSD.ObstructionChecker.CheckForObstructions
};

// Class FSD.OldZiplineSalvage
// Size: 0x238 (Inherited: 0x220)
struct AOldZiplineSalvage : AActor {
	struct AZipLineProjectile* ZiplineProjectileClass; // 0x220(0x08)
	struct FVector RelativeDestinationLocation; // 0x228(0x0c)
	char UnknownData_234[0x4]; // 0x234(0x04)

	void OnMatchStarted(); // Function FSD.OldZiplineSalvage.OnMatchStarted
};

// Class FSD.OptionalUIWidget
// Size: 0x240 (Inherited: 0x230)
struct UOptionalUIWidget : UUserWidget {
	struct UOptionalUICategory* Category; // 0x230(0x08)
	enum class ESlateVisibility VisibleFlag; // 0x238(0x01)
	enum class ESlateVisibility HiddenFlag; // 0x239(0x01)
	char UnknownData_23A[0x6]; // 0x23a(0x06)

	void OnVisibilityChanged(struct UOptionalUICategory* UICategory, bool IsVisible); // Function FSD.OptionalUIWidget.OnVisibilityChanged
};

// Class FSD.OutlineComponent
// Size: 0xf8 (Inherited: 0xb0)
struct UOutlineComponent : UActorComponent {
	struct FMulticastInlineDelegate OnOutlineChanged; // 0xb0(0x10)
	enum class EOutline DefaultOutline; // 0xc0(0x01)
	bool ActiveOnHoldTAB; // 0xc1(0x01)
	char UnknownData_C2[0x2]; // 0xc2(0x02)
	float CustomLaserPointDuration; // 0xc4(0x04)
	int32_t LockCounter; // 0xc8(0x04)
	enum class EOutline CurrentOutline; // 0xcc(0x01)
	char UnknownData_CD[0x3]; // 0xcd(0x03)
	struct TArray<struct UPrimitiveComponent*> OutlinedComponents; // 0xd0(0x10)
	struct TArray<struct UPrimitiveComponent*> ExcludedComponents; // 0xe0(0x10)
	struct FWeakObjectPtr<struct APlayerCharacter> Character; // 0xf0(0x08)

	void UnlockOutline(); // Function FSD.OutlineComponent.UnlockOutline
	void ToggleDefaultOutline(bool Visible); // Function FSD.OutlineComponent.ToggleDefaultOutline
	void SetOutline(enum class EOutline outline); // Function FSD.OutlineComponent.SetOutline
	void RemoveFromOutline(struct UPrimitiveComponent* Component); // Function FSD.OutlineComponent.RemoveFromOutline
	void OutlineChanged__DelegateSignature(enum class EOutline InOutline); // DelegateFunction FSD.OutlineComponent.OutlineChanged__DelegateSignature
	void OnToggleOutline(bool Visible); // Function FSD.OutlineComponent.OnToggleOutline
	void OnOwnerDeath(struct UHealthComponentBase* HealthComponent); // Function FSD.OutlineComponent.OnOwnerDeath
	void OnLocalPlayerSet(struct APlayerCharacter* PlayerCharacter); // Function FSD.OutlineComponent.OnLocalPlayerSet
	void OnItemUnequipped(struct AItem* Item); // Function FSD.OutlineComponent.OnItemUnequipped
	void OnItemEquipped(struct AItem* Item); // Function FSD.OutlineComponent.OnItemEquipped
	void LockOutline(); // Function FSD.OutlineComponent.LockOutline
	void EnableActivateOnHoldTab(); // Function FSD.OutlineComponent.EnableActivateOnHoldTab
	void AddToOutline(struct UPrimitiveComponent* Component); // Function FSD.OutlineComponent.AddToOutline
	void AddActorToOutline(struct AActor* Actor); // Function FSD.OutlineComponent.AddActorToOutline
};

// Class FSD.OverclockBank
// Size: 0xb8 (Inherited: 0x30)
struct UOverclockBank : UDataAsset {
	char UnknownData_30[0x8]; // 0x30(0x08)
	struct TMap<struct UOverclockUpgrade*, struct USchematic*> Overclocks; // 0x38(0x50)
	struct UPlayerCharacterID* UsedByCharacter; // 0x88(0x08)
	SoftClassProperty OwningItem; // 0x90(0x28)
};

// Class FSD.OverheatingAggregator
// Size: 0x100 (Inherited: 0xc8)
struct UOverheatingAggregator : UItemAggregator {
	struct FMulticastInlineDelegate OnOverheatingProgressChanged; // 0xc8(0x10)
	struct FMulticastInlineDelegate OnOverheatedChanged; // 0xd8(0x10)
	char UnknownData_E8[0x4]; // 0xe8(0x04)
	float HeatLossPerSecond; // 0xec(0x04)
	float OverheatedDuration; // 0xf0(0x04)
	bool bIsOverheated; // 0xf4(0x01)
	char UnknownData_F5[0x3]; // 0xf5(0x03)
	float Temperature; // 0xf8(0x04)
	char UnknownData_FC[0x4]; // 0xfc(0x04)

	void Server_SetTemperature(float NewTemperature); // Function FSD.OverheatingAggregator.Server_SetTemperature
	void Server_SetIsOverheated(bool NewOverheated); // Function FSD.OverheatingAggregator.Server_SetIsOverheated
	void OverheatingProgressChanged__DelegateSignature(float Progress); // DelegateFunction FSD.OverheatingAggregator.OverheatingProgressChanged__DelegateSignature
	void OverheatedChanged__DelegateSignature(bool Overheated); // DelegateFunction FSD.OverheatingAggregator.OverheatedChanged__DelegateSignature
	void OnRep_Temperature(); // Function FSD.OverheatingAggregator.OnRep_Temperature
	void OnRep_IsOverheated(); // Function FSD.OverheatingAggregator.OnRep_IsOverheated
	float GetTemperature(); // Function FSD.OverheatingAggregator.GetTemperature
	float GetOverheatingProgress(); // Function FSD.OverheatingAggregator.GetOverheatingProgress
	bool GetIsOverheated(); // Function FSD.OverheatingAggregator.GetIsOverheated
};

// Class FSD.ParalyzedStateComponent
// Size: 0x138 (Inherited: 0xf8)
struct UParalyzedStateComponent : UCharacterStateComponent {
	char UnknownData_F8[0x8]; // 0xf8(0x08)
	SoftClassProperty CaveLeechClass; // 0x100(0x28)
	char UnknownData_128[0x4]; // 0x128(0x04)
	float CameraArmHeightOffset; // 0x12c(0x04)
	float CameraArmSpeed; // 0x130(0x04)
	char UnknownData_134[0x4]; // 0x134(0x04)
};

// Class FSD.ParasiteEnemy
// Size: 0x390 (Inherited: 0x338)
struct AParasiteEnemy : AEnemyPawn {
	struct USceneComponent* Root; // 0x338(0x08)
	struct USkeletalMeshComponent* Mesh; // 0x340(0x08)
	struct UStaticMeshComponent* Tentacles1; // 0x348(0x08)
	struct UStaticMeshComponent* Tentacles2; // 0x350(0x08)
	struct UOutlineComponent* outline; // 0x358(0x08)
	char UnknownData_360[0x18]; // 0x360(0x18)
	struct UParticleSystem* deathParticles; // 0x378(0x08)
	struct USoundBase* deathSound; // 0x380(0x08)
	char UnknownData_388[0x8]; // 0x388(0x08)

	void OnSelfDeath(struct UHealthComponentBase* aHealthComponent); // Function FSD.ParasiteEnemy.OnSelfDeath
};

// Class FSD.PassedOutStateComponent
// Size: 0x108 (Inherited: 0xf8)
struct UPassedOutStateComponent : UCharacterStateComponent {
	struct UDialogDataAsset* ReviveShout; // 0xf8(0x08)
	bool bAllPlayersPassedOut; // 0x100(0x01)
	char UnknownData_101[0x7]; // 0x101(0x07)

	void ReceiveTeamPassedOut(); // Function FSD.PassedOutStateComponent.ReceiveTeamPassedOut
};

// Class FSD.PathfinderCollisionComponent
// Size: 0x490 (Inherited: 0x480)
struct UPathfinderCollisionComponent : UStaticMeshComponent {
	bool ActivatePFCollisionAtInit; // 0x480(0x01)
	enum class PFCollisionType PFColiType; // 0x481(0x01)
	char UnknownData_482[0xe]; // 0x482(0x0e)

	void DisablePFCollision(); // Function FSD.PathfinderCollisionComponent.DisablePFCollision
	void ActivatePFCollision(); // Function FSD.PathfinderCollisionComponent.ActivatePFCollision
};

// Class FSD.PathfinderSplineSegmentCollisionComponent
// Size: 0xc0 (Inherited: 0xb0)
struct UPathfinderSplineSegmentCollisionComponent : UActorComponent {
	float Radius; // 0xb0(0x04)
	enum class PFCollisionType CollisionType; // 0xb4(0x01)
	char UnknownData_B5[0xb]; // 0xb5(0x0b)

	void UpdateFromSpline(struct USplineComponent* SplineComponent, int32_t StartIndex); // Function FSD.PathfinderSplineSegmentCollisionComponent.UpdateFromSpline
	void Update(struct FVector SplineStart, struct FVector SplineStartTangent, struct FVector SplineEnd, struct FVector SplineEndTangent); // Function FSD.PathfinderSplineSegmentCollisionComponent.Update
	void Clear(); // Function FSD.PathfinderSplineSegmentCollisionComponent.Clear
};

// Class FSD.PathfinderDebugProbe
// Size: 0x228 (Inherited: 0x220)
struct APathfinderDebugProbe : AActor {
	struct AActor* Dest; // 0x220(0x08)
};

// Class FSD.RaycastDebugProbe
// Size: 0x228 (Inherited: 0x220)
struct ARaycastDebugProbe : AActor {
	struct UTerrainType* TerrainType; // 0x220(0x08)
};

// Class FSD.FindPointKeepingDistanceProbe
// Size: 0x238 (Inherited: 0x220)
struct AFindPointKeepingDistanceProbe : AActor {
	float MinDistance; // 0x220(0x04)
	float MaxDistance; // 0x224(0x04)
	struct AActor* Target; // 0x228(0x08)
	float IdealTargetDist; // 0x230(0x04)
	char UnknownData_234[0x4]; // 0x234(0x04)
};

// Class FSD.PathfinderFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct UPathfinderFunctionLibrary : UBlueprintFunctionLibrary {

	struct FVector SnapToGrid(struct UObject* WorldContextObject, struct FVector Origin, enum class DeepPathFinderType pathType, enum class DeepPathFinderSize pathSize, float maxSnapDistance); // Function FSD.PathfinderFunctionLibrary.SnapToGrid
	bool IsPathfinderReady(struct UObject* WorldContextObject); // Function FSD.PathfinderFunctionLibrary.IsPathfinderReady
	struct FVector FindRandomPositionOnNavmeshAtDistance(struct UObject* WorldContextObject, struct FVector Origin, float atDistance); // Function FSD.PathfinderFunctionLibrary.FindRandomPositionOnNavmeshAtDistance
	struct FVector FindRandomNearbyPositionOnNavmesh(struct UObject* WorldContextObject, struct FVector Origin, float Radius); // Function FSD.PathfinderFunctionLibrary.FindRandomNearbyPositionOnNavmesh
	struct FVector FindPointAlongPathTo(struct UObject* WorldContextObject, struct FVector Origin, struct FVector Destination, float atDistance); // Function FSD.PathfinderFunctionLibrary.FindPointAlongPathTo
};

// Class FSD.PathfinderVehicle
// Size: 0x2b0 (Inherited: 0x280)
struct APathfinderVehicle : APawn {
	char UnknownData_280[0x10]; // 0x280(0x10)
	struct UDeepPathfinderMovement* PathfinderMovement; // 0x290(0x08)
	struct USkeletalMeshComponent* Mesh; // 0x298(0x08)
	struct UHealthComponent* HealthComponent; // 0x2a0(0x08)
	float Speed; // 0x2a8(0x04)
	char UnknownData_2AC[0x4]; // 0x2ac(0x04)
};

// Class FSD.PawnAffliction
// Size: 0x88 (Inherited: 0x30)
struct UPawnAffliction : UDataAsset {
	struct UTexture2D* Icon; // 0x30(0x08)
	struct FColor IconColor; // 0x38(0x04)
	struct FColor IconColorBG; // 0x3c(0x04)
	bool bShowPlayerIcon; // 0x40(0x01)
	bool bShowOnEnemyHealthbar; // 0x41(0x01)
	char UnknownData_42[0x6]; // 0x42(0x06)
	struct UPlayerAfflictionOverlay* AfflictionOverlay; // 0x48(0x08)
	struct TArray<struct UAfflictionEffect*> EnemyEffects; // 0x50(0x10)
	struct TArray<struct UAfflictionEffect*> PlayerFirstPersonEffects; // 0x60(0x10)
	struct TArray<struct UAfflictionEffect*> PlayerThirdPersonEffects; // 0x70(0x10)
	struct UDialogDataAsset* PlayerShoutOnBegin; // 0x80(0x08)
};

// Class FSD.AfflictionFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct UAfflictionFunctionLibrary : UBlueprintFunctionLibrary {

	void PlayEnemyExplosionEffects(struct AFSDPawn* enemy); // Function FSD.AfflictionFunctionLibrary.PlayEnemyExplosionEffects
};

// Class FSD.PawnAfflictionComponent
// Size: 0x260 (Inherited: 0xb0)
struct UPawnAfflictionComponent : UActorComponent {
	struct FMulticastInlineDelegate OnAfflictionActivatedEvent; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnAfflictionDeactivatedEvent; // 0xc0(0x10)
	struct TMap<struct UPawnAffliction*, struct FPawnAfflictionItem> ActiveAfflictions; // 0xd0(0x50)
	struct FAfflictionEntriesArray NetworkedAfflictions; // 0x120(0x120)
	struct UFrozenAfflictionEffect* FrozenEffect; // 0x240(0x08)
	struct UBurningAfflictionEffect* BurningEffect; // 0x248(0x08)
	enum class EFrozenBitsSize EffectSize; // 0x250(0x01)
	char UnknownData_251[0x3]; // 0x251(0x03)
	float BaseEffectScale; // 0x254(0x04)
	bool UseDormancy; // 0x258(0x01)
	char UnknownData_259[0x7]; // 0x259(0x07)

	void PushAffliction(struct UPawnAffliction* affliction, bool onlyIfNotActive); // Function FSD.PawnAfflictionComponent.PushAffliction
	void PopAffliction(struct UPawnAffliction* affliction); // Function FSD.PawnAfflictionComponent.PopAffliction
	void OnDeath(struct UHealthComponentBase* HealthComponent); // Function FSD.PawnAfflictionComponent.OnDeath
	bool IsAfflictedBy(struct UPawnAffliction* affliction); // Function FSD.PawnAfflictionComponent.IsAfflictedBy
	struct TArray<struct UPawnAffliction*> GetActiveAfflictions(); // Function FSD.PawnAfflictionComponent.GetActiveAfflictions
};

// Class FSD.PlayerAfflictionOverlay
// Size: 0x80 (Inherited: 0x30)
struct UPlayerAfflictionOverlay : UDataAsset {
	struct UTexture2D* Texture; // 0x30(0x08)
	struct FLinearColor TextureTint; // 0x38(0x10)
	struct UPlayerAfflictionOverlayWidget* WidgetOverride; // 0x48(0x08)
	int32_t ZOrder; // 0x50(0x04)
	char UnknownData_54[0x4]; // 0x54(0x04)
	struct TSoftObjectPtr<struct USoundCue> Audio2D_OnBegin; // 0x58(0x28)
};

// Class FSD.PlayerAfflictionComponent
// Size: 0x2d8 (Inherited: 0x260)
struct UPlayerAfflictionComponent : UPawnAfflictionComponent {
	struct FMulticastInlineDelegate OnShowOverlay; // 0x260(0x10)
	struct FMulticastInlineDelegate OnHideOverlay; // 0x270(0x10)
	struct TMap<struct UPlayerAfflictionOverlay*, int32_t> ActiveOverlays; // 0x280(0x50)
	struct FWeakObjectPtr<struct APlayerCharacter> Character; // 0x2d0(0x08)

	void ShowPlayerOverlay(struct UPlayerAfflictionOverlay* Overlay); // Function FSD.PlayerAfflictionComponent.ShowPlayerOverlay
	void OverlayDelegate__DelegateSignature(struct UPlayerAfflictionOverlay* Overlay); // DelegateFunction FSD.PlayerAfflictionComponent.OverlayDelegate__DelegateSignature
	void HidePlayerOverlay(struct UPlayerAfflictionOverlay* Overlay); // Function FSD.PlayerAfflictionComponent.HidePlayerOverlay
};

// Class FSD.EnemyPawnAfflictionComponent
// Size: 0x260 (Inherited: 0x260)
struct UEnemyPawnAfflictionComponent : UPawnAfflictionComponent {
};

// Class FSD.DeepPatherFinderCharacterAfflictionComponent
// Size: 0x268 (Inherited: 0x260)
struct UDeepPatherFinderCharacterAfflictionComponent : UPawnAfflictionComponent {
	struct ADeepPathfinderCharacter* Character; // 0x260(0x08)
};

// Class FSD.StaticObjectAfflictionComponent
// Size: 0x268 (Inherited: 0x260)
struct UStaticObjectAfflictionComponent : UPawnAfflictionComponent {
	struct UStaticMeshComponent* Mesh; // 0x260(0x08)
};

// Class FSD.AnimatedObjectAfflictionComponent
// Size: 0x268 (Inherited: 0x260)
struct UAnimatedObjectAfflictionComponent : UPawnAfflictionComponent {
	struct USkeletalMeshComponent* Mesh; // 0x260(0x08)
};

// Class FSD.PlayerAfflictionOverlayWidget
// Size: 0x240 (Inherited: 0x230)
struct UPlayerAfflictionOverlayWidget : UUserWidget {
	bool bOverlayActive; // 0x230(0x01)
	char UnknownData_231[0x7]; // 0x231(0x07)
	struct UPlayerAfflictionOverlay* Overlay; // 0x238(0x08)

	void ReceiveEndOverlay(); // Function FSD.PlayerAfflictionOverlayWidget.ReceiveEndOverlay
	void ReceiveBeginOverlay(struct UTexture2D* InTexture, struct FLinearColor InTint); // Function FSD.PlayerAfflictionOverlayWidget.ReceiveBeginOverlay
	void EndOverlay(); // Function FSD.PlayerAfflictionOverlayWidget.EndOverlay
	void BeginOverlay(struct UPlayerAfflictionOverlay* InOverlay); // Function FSD.PlayerAfflictionOverlayWidget.BeginOverlay
};

// Class FSD.PawnAlertComponent
// Size: 0xd0 (Inherited: 0xb0)
struct UPawnAlertComponent : UActorComponent {
	struct FMulticastInlineDelegate OnAlertedFromDamage; // 0xb0(0x10)
	bool AutoAlertAI; // 0xc0(0x01)
	bool ShouldAlertNearby; // 0xc1(0x01)
	char UnknownData_C2[0x2]; // 0xc2(0x02)
	float AlertRadius; // 0xc4(0x04)
	char UnknownData_C8[0x8]; // 0xc8(0x08)

	void StopAutoAlerting(); // Function FSD.PawnAlertComponent.StopAutoAlerting
	void OnPawnSeen(struct APawn* Pawn); // Function FSD.PawnAlertComponent.OnPawnSeen
	void OnHit(float Damage, struct UDamageClass* DamageClass, struct AActor* DamageCauser, bool anyHealthLost); // Function FSD.PawnAlertComponent.OnHit
	void OnAlerted(); // Function FSD.PawnAlertComponent.OnAlerted
	void AleartNearby(); // Function FSD.PawnAlertComponent.AleartNearby
};

// Class FSD.PawnStat
// Size: 0x38 (Inherited: 0x30)
struct UPawnStat : UDataAsset {
	float StartingValue; // 0x30(0x04)
	enum class EPawnStatType PawnStatType; // 0x34(0x01)
	enum class EPawnStatType ValueModificationType; // 0x35(0x01)
	char UnknownData_36[0x2]; // 0x36(0x02)
};

// Class FSD.PawnStatsComponent
// Size: 0x1d8 (Inherited: 0xb0)
struct UPawnStatsComponent : UActorComponent {
	struct FPawnStatEntriesArray Stats; // 0xb0(0x120)
	bool UseDormancy; // 0x1d0(0x01)
	char UnknownData_1D1[0x7]; // 0x1d1(0x07)

	void RemoveModifier(struct UPawnStat* Stat, float Value); // Function FSD.PawnStatsComponent.RemoveModifier
	float GetStatValue(struct UPawnStat* Stat); // Function FSD.PawnStatsComponent.GetStatValue
	void ChangeModifier(struct UPawnStat* Stat, float CurrentValue, float NewValue); // Function FSD.PawnStatsComponent.ChangeModifier
	int32_t AddModifier(struct UPawnStat* Stat, float Value); // Function FSD.PawnStatsComponent.AddModifier
};

// Class FSD.PerkLogic
// Size: 0xb0 (Inherited: 0xb0)
struct UPerkLogic : UActorComponent {

	void StartLogic(int32_t Rank); // Function FSD.PerkLogic.StartLogic
	struct APlayerCharacter* GetCharacter(); // Function FSD.PerkLogic.GetCharacter
	struct FText GetAdditionalText(int32_t Rank); // Function FSD.PerkLogic.GetAdditionalText
};

// Class FSD.PerkDelegateItem
// Size: 0x78 (Inherited: 0x28)
struct UPerkDelegateItem : UObject {
	struct FMulticastInlineDelegate OnPerkClaimed; // 0x28(0x10)
	struct FMulticastInlineDelegate OnPerkEquipped; // 0x38(0x10)
	struct FMulticastInlineDelegate OnPerkUnequipped; // 0x48(0x10)
	struct FMulticastInlineDelegate OnPerkHighlighted; // 0x58(0x10)
	struct FMulticastInlineDelegate OnChargesUsedChanged; // 0x68(0x10)
};

// Class FSD.PerkSubsystem
// Size: 0x80 (Inherited: 0x30)
struct UPerkSubsystem : UWorldSubsystem {
	struct TMap<struct UPerkAsset*, struct UPerkDelegateItem*> PerkDelegates; // 0x30(0x50)

	struct UPerkDelegateItem* GetPerkDelegates(struct UPerkAsset* Perk); // Function FSD.PerkSubsystem.GetPerkDelegates
};

// Class FSD.PerkHUDWidget
// Size: 0x238 (Inherited: 0x230)
struct UPerkHUDWidget : UUserWidget {
	struct UPerkAsset* PerkAsset; // 0x230(0x08)

	void SetPerkAsset(struct UPerkAsset* InPerk); // Function FSD.PerkHUDWidget.SetPerkAsset
	void ReceivePerkAssetChanged(); // Function FSD.PerkHUDWidget.ReceivePerkAssetChanged
	struct AFSDPlayerState* GetFSDPlayerState(); // Function FSD.PerkHUDWidget.GetFSDPlayerState
	struct APlayerCharacter* GetCharacter(); // Function FSD.PerkHUDWidget.GetCharacter
};

// Class FSD.PerkHUDIconWidget
// Size: 0x240 (Inherited: 0x238)
struct UPerkHUDIconWidget : UPerkHUDWidget {
	float CoolDownProgress; // 0x238(0x04)
	char UnknownData_23C[0x4]; // 0x23c(0x04)
};

// Class FSD.PerkHUDActivationWidget
// Size: 0x240 (Inherited: 0x238)
struct UPerkHUDActivationWidget : UPerkHUDWidget {
	enum class EPerkHUDActivationLocation Location; // 0x238(0x01)
	char UnknownData_239[0x7]; // 0x239(0x07)
};

// Class FSD.PerkFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct UPerkFunctionLibrary : UBlueprintFunctionLibrary {

	void SplitPerksByUsage(struct TArray<struct UPerkAsset*> perks, struct TArray<struct UPerkAsset*> OutPassivePerks, struct TArray<struct UPerkAsset*> OutActivePerks); // Function FSD.PerkFunctionLibrary.SplitPerksByUsage
	struct TArray<struct UPerkAsset*> SortPerksByUsage(struct TArray<struct UPerkAsset*> perks); // Function FSD.PerkFunctionLibrary.SortPerksByUsage
	void GetPerkEquipSlots(struct UObject* WorldContext, enum class EPerkUsageType InType, struct APlayerCharacter* InCharacterClass, int32_t OutAvailableSlots, int32_t OutUnavailableSlots, int32_t OutPromotionLockedSlots); // Function FSD.PerkFunctionLibrary.GetPerkEquipSlots
	struct TArray<enum class EPerkSlotType> GetPerkEquipSlotLayout(struct UObject* WorldContext, enum class EPerkUsageType InType, struct APlayerCharacter* InCharacterClass); // Function FSD.PerkFunctionLibrary.GetPerkEquipSlotLayout
	struct TArray<struct UPerkAsset*> GetOwnedPerksByType(struct UObject* WorldContext, enum class EPerkUsageType InType); // Function FSD.PerkFunctionLibrary.GetOwnedPerksByType
	struct TArray<struct UPerkAsset*> GetOwnedPerks(struct UObject* WorldContext); // Function FSD.PerkFunctionLibrary.GetOwnedPerks
	struct FText FormatRichText(struct FText SourceText, bool UpperCase, struct TMap<struct FString, struct FString> CharTagMap); // Function FSD.PerkFunctionLibrary.FormatRichText
};

// Class FSD.PerkUsageComponent
// Size: 0xd8 (Inherited: 0xb0)
struct UPerkUsageComponent : UActorComponent {
	char UnknownData_B0[0x8]; // 0xb0(0x08)
	struct TArray<struct FPerkUsage> PerkUsageReplicated; // 0xb8(0x10)
	char UnknownData_C8[0x10]; // 0xc8(0x10)

	void Server_MarkPerkUsed(struct UPerkAsset* Perk); // Function FSD.PerkUsageComponent.Server_MarkPerkUsed
	void Server_CheatReset(); // Function FSD.PerkUsageComponent.Server_CheatReset
	void OnRep_PerkUsageReplicated(); // Function FSD.PerkUsageComponent.OnRep_PerkUsageReplicated
};

// Class FSD.PhotographyStateComponent
// Size: 0xf8 (Inherited: 0xf8)
struct UPhotographyStateComponent : UCharacterStateComponent {
};

// Class FSD.PickaxeFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct UPickaxeFunctionLibrary : UBlueprintFunctionLibrary {

	bool IsPickaxePartEquipped(struct UObject* WorldContextObject, enum class EPickaxePartLocation Location, struct UPickaxePart* part, struct UItemID* pickaxeID); // Function FSD.PickaxeFunctionLibrary.IsPickaxePartEquipped
	struct TArray<struct UPickaxePart*> GetUnlockedPickaxeParts(struct UObject* WorldContextObject, enum class EPickaxePartLocation Category); // Function FSD.PickaxeFunctionLibrary.GetUnlockedPickaxeParts
	struct UPickaxePart* GetEquippedPickaxePart(struct UObject* WorldContextObject, enum class EPickaxePartLocation partLocation, struct UItemID* pickaxeID); // Function FSD.PickaxeFunctionLibrary.GetEquippedPickaxePart
	void EquipPickaxePart(struct UObject* WorldContextObject, struct UPickaxePart* part, enum class EPickaxePartLocation partLocation, struct UItemID* pickaxeID); // Function FSD.PickaxeFunctionLibrary.EquipPickaxePart
};

// Class FSD.PickaxeItem
// Size: 0x6a0 (Inherited: 0x318)
struct APickaxeItem : AItem {
	char UnknownData_318[0x10]; // 0x318(0x10)
	bool QuadDamageCarving; // 0x328(0x01)
	char UnknownData_329[0x7]; // 0x329(0x07)
	struct FMulticastInlineDelegate ActiveMiningEvent; // 0x330(0x10)
	struct USceneComponent* FP_Root; // 0x340(0x08)
	struct USceneComponent* TP_Root; // 0x348(0x08)
	struct USceneComponent* FP_Scale; // 0x350(0x08)
	struct USceneComponent* TP_Scale; // 0x358(0x08)
	struct UPlayerAnimInstance* FPAnimInstance; // 0x360(0x08)
	struct UPlayerAnimInstance* TPAnimInstance; // 0x368(0x08)
	struct UAnimMontage* FP_EquipAnimation; // 0x370(0x08)
	struct UAnimMontage* TP_EquipAnimation; // 0x378(0x08)
	float EquipDuration; // 0x380(0x04)
	char UnknownData_384[0x4]; // 0x384(0x04)
	struct UItemCharacterAnimationSet* CharacterAnimationSet; // 0x388(0x08)
	char UnknownData_390[0x8]; // 0x390(0x08)
	struct UDamageComponent* DamageComponent; // 0x398(0x08)
	struct UDamageComponent* SpecialDamageComponent; // 0x3a0(0x08)
	float SpecialCooldown; // 0x3a8(0x04)
	float SpecialCooldownRemaining; // 0x3ac(0x04)
	char UnknownData_3B0[0x18]; // 0x3b0(0x18)
	struct FCoolDownProgressStyle SpecialCooldownUI; // 0x3c8(0x40)
	int32_t RockMiningBonus; // 0x408(0x04)
	int32_t DirtMiningBonus; // 0x40c(0x04)
	float DamageRange; // 0x410(0x04)
	float DamageRadius; // 0x414(0x04)
	struct UStatusEffect* OnDamageEnemySlowdownEffect; // 0x418(0x08)
	struct FGameplayTagContainer WideDamageTrackingTags; // 0x420(0x20)
	struct USoundCue* MiningSound; // 0x440(0x08)
	struct UForceFeedbackEffect* MineRumble; // 0x448(0x08)
	struct UForceFeedbackEffect* PartialMineRumble; // 0x450(0x08)
	struct UForceFeedbackEffect* DamageRumble; // 0x458(0x08)
	float GeneralImpactAudioVolume; // 0x460(0x04)
	float HitCooldown; // 0x464(0x04)
	float MiningDuration; // 0x468(0x04)
	float DistanceConsideredSameHit; // 0x46c(0x04)
	float BlockParticlesScaleFP; // 0x470(0x04)
	float BlockParticlesScaleTP; // 0x474(0x04)
	enum class EPickaxeState State; // 0x478(0x01)
	char UnknownData_479[0x167]; // 0x479(0x167)
	bool ActiveMiningEnabled; // 0x5e0(0x01)
	char UnknownData_5E1[0x3]; // 0x5e1(0x03)
	int32_t MaxActiveMiningCount; // 0x5e4(0x04)
	float ActiveMiningSpeedBoost; // 0x5e8(0x04)
	bool PreventQMining; // 0x5ec(0x01)
	char UnknownData_5ED[0x3]; // 0x5ed(0x03)
	float QMiningExpectedDelay; // 0x5f0(0x04)
	float QMiningInitialDelay; // 0x5f4(0x04)
	float QMiningReducedPlayRatePct; // 0x5f8(0x04)
	char UnknownData_5FC[0x4]; // 0x5fc(0x04)
	double QMiningLastHitTime; // 0x600(0x08)
	struct USoundCue* ActiveMiningSucceedSound; // 0x608(0x08)
	struct USoundCue* ActiveMiningFailedSound; // 0x610(0x08)
	char UnknownData_618[0xe]; // 0x618(0x0e)
	bool CanBezerk; // 0x626(0x01)
	char UnknownData_627[0x1]; // 0x627(0x01)
	struct UStatusEffect* BezerkStatusEffect; // 0x628(0x08)
	char UnknownData_630[0x2]; // 0x630(0x02)
	bool PowerAttackEnabled; // 0x632(0x01)
	char UnknownData_633[0x5]; // 0x633(0x05)
	struct TMap<enum class EPickaxePartLocation, struct FPickaxeMeshInstance> EquippedParts; // 0x638(0x50)
	struct UMaterialInterface* EquippedMaterial; // 0x688(0x08)
	char UnknownData_690[0x10]; // 0x690(0x10)

	void SpecialTargetDamageEffects(struct FVector ImpactPoint, struct FVector ImpactNormal); // Function FSD.PickaxeItem.SpecialTargetDamageEffects
	void SetSpecialCoolDownDuration(float newCooldownDuration); // Function FSD.PickaxeItem.SetSpecialCoolDownDuration
	void Server_TriggerBezerk(); // Function FSD.PickaxeItem.Server_TriggerBezerk
	void Server_SetState(enum class EPickaxeState NewState); // Function FSD.PickaxeItem.Server_SetState
	void Server_RemoveDebrisInstance(struct FVector_NetQuantize HitPos, int32_t DebrisIndex, int32_t remappedIndex); // Function FSD.PickaxeItem.Server_RemoveDebrisInstance
	void Server_HitBlock(struct FVector_NetQuantize Position, int32_t Material, bool removeDebris, bool isSpecial); // Function FSD.PickaxeItem.Server_HitBlock
	void Server_DoPowerAttack(); // Function FSD.PickaxeItem.Server_DoPowerAttack
	void Server_DigBlock2(struct FVector carvePos, struct FVector carveDirection, int32_t TerrainMaterial, bool isSpecial); // Function FSD.PickaxeItem.Server_DigBlock2
	void Server_DamageTarget(struct UPrimitiveComponent* TargetComponent, bool isSpecial, struct FVector_NetQuantize ImpactPoint, struct FVector_NetQuantizeNormal ImpactNormal, struct UFSDPhysicalMaterial* PhysMaterial, char BoneIndex); // Function FSD.PickaxeItem.Server_DamageTarget
	void RefreshSpecialCooldown(); // Function FSD.PickaxeItem.RefreshSpecialCooldown
	void OnRep_State(enum class EPickaxeState oldState); // Function FSD.PickaxeItem.OnRep_State
	void OnLoadoutChanged(); // Function FSD.PickaxeItem.OnLoadoutChanged
	float GetSpecialCooldownProgress(); // Function FSD.PickaxeItem.GetSpecialCooldownProgress
	void All_SimulateHitBlock(struct FVector_NetQuantize Position, int32_t materia, bool removeDebris, bool isSpecial); // Function FSD.PickaxeItem.All_SimulateHitBlock
	void All_SimulateDigDebris(struct FVector_NetQuantize Position, struct UParticleSystem* Particles, struct USoundCue* cue); // Function FSD.PickaxeItem.All_SimulateDigDebris
	void All_SimulateDigBlock(struct FVector_NetQuantize Position, bool spawnParticles, int32_t Material, float Density, bool isSpecial); // Function FSD.PickaxeItem.All_SimulateDigBlock
	void All_SimulateDamageTarget(struct UPrimitiveComponent* TargetComponent, bool isSpecial, struct FVector_NetQuantize ImpactPoint, struct FVector_NetQuantizeNormal ImpactNormal, struct UFSDPhysicalMaterial* PhysMaterial, char BoneIndex); // Function FSD.PickaxeItem.All_SimulateDamageTarget
	void All_DoPowerAttack(); // Function FSD.PickaxeItem.All_DoPowerAttack
};

// Class FSD.PickaxePreviewActor
// Size: 0x290 (Inherited: 0x220)
struct APickaxePreviewActor : AActor {
	char UnknownData_220[0x8]; // 0x220(0x08)
	struct USceneComponent* TP_Root; // 0x228(0x08)
	struct TMap<enum class EPickaxePartLocation, struct FPickaxeMeshInstance> EquippedParts; // 0x230(0x50)
	struct UItemID* ItemID; // 0x280(0x08)
	struct UMaterialInterface* EquippedMaterial; // 0x288(0x08)

	void PreviewParts(enum class EPickaxePartLocation PreviewLocation, struct UPickaxePart* PreviewPart); // Function FSD.PickaxePreviewActor.PreviewParts
	void EquipParts(); // Function FSD.PickaxePreviewActor.EquipParts
};

// Class FSD.PickaxePart
// Size: 0x98 (Inherited: 0x60)
struct UPickaxePart : USavablePrimaryDataAsset {
	struct FText Title; // 0x60(0x18)
	struct UPickaxePartItem* Item; // 0x78(0x08)
	struct UItemAquisitionSource* AquisitionSource; // 0x80(0x08)
	bool UnlockedFromStart; // 0x88(0x01)
	char UnknownData_89[0x7]; // 0x89(0x07)
	struct UDLCBase* RequiredDLC; // 0x90(0x08)

	enum class EPickaxePartLocation GetPrefferedLocation(); // Function FSD.PickaxePart.GetPrefferedLocation
};

// Class FSD.PickaxePartItem
// Size: 0x30 (Inherited: 0x28)
struct UPickaxePartItem : UObject {
	char UnknownData_28[0x8]; // 0x28(0x08)
};

// Class FSD.PickaxeMaterialPart
// Size: 0x80 (Inherited: 0x30)
struct UPickaxeMaterialPart : UPickaxePartItem {
	struct TSoftObjectPtr<struct UMaterialInterface> Material; // 0x30(0x28)
	struct TSoftObjectPtr<struct UMaterialInterface> IconMaterial; // 0x58(0x28)
};

// Class FSD.PickaxeMeshPart
// Size: 0x58 (Inherited: 0x30)
struct UPickaxeMeshPart : UPickaxePartItem {
	struct TSoftObjectPtr<struct UStaticMesh> Mesh; // 0x30(0x28)
};

// Class FSD.PickaxeHeadPart
// Size: 0x58 (Inherited: 0x58)
struct UPickaxeHeadPart : UPickaxeMeshPart {
};

// Class FSD.PickaxeBladePart
// Size: 0x60 (Inherited: 0x58)
struct UPickaxeBladePart : UPickaxeMeshPart {
	bool RestrictedToBackside; // 0x58(0x01)
	char UnknownData_59[0x7]; // 0x59(0x07)
};

// Class FSD.PickaxeShaftPart
// Size: 0x58 (Inherited: 0x58)
struct UPickaxeShaftPart : UPickaxeMeshPart {
};

// Class FSD.PickaxeHandlePart
// Size: 0x58 (Inherited: 0x58)
struct UPickaxeHandlePart : UPickaxeMeshPart {
};

// Class FSD.PickaxePommelPart
// Size: 0x58 (Inherited: 0x58)
struct UPickaxePommelPart : UPickaxeMeshPart {
};

// Class FSD.PickaxeSettings
// Size: 0x100 (Inherited: 0x30)
struct UPickaxeSettings : UDataAsset {
	struct TMap<struct UPlayerCharacterID*, struct APickaxePreviewActor*> PickaxePreviewActors; // 0x30(0x50)
	struct UAnimMontage* Salute_FP; // 0x80(0x08)
	struct UAnimMontage* Salute_TP; // 0x88(0x08)
	struct TArray<struct UPickaxePart*> parts; // 0x90(0x10)
	struct TMap<struct UItemID*, struct FDefaultPickaxeParts> DefaultParts; // 0xa0(0x50)
	char UnknownData_F0[0x10]; // 0xf0(0x10)
};

// Class FSD.PickaxePartEquip
// Size: 0x28 (Inherited: 0x28)
struct UPickaxePartEquip : UInterface {
};

// Class FSD.PillarSettings
// Size: 0x68 (Inherited: 0x30)
struct UPillarSettings : UDataAsset {
	struct TArray<struct FPillarSegment> PillarSegments; // 0x30(0x10)
	struct FRandRange PointRange; // 0x40(0x08)
	struct FRandRange PointNoiseRange; // 0x48(0x08)
	struct FRandRange PillarRangeScale; // 0x50(0x08)
	struct FRandRange PillarNoiseRangeScale; // 0x58(0x08)
	struct UFloodFillSettings* Noise; // 0x60(0x08)
};

// Class FSD.PillarGenerationComponent
// Size: 0x410 (Inherited: 0x3f0)
struct UPillarGenerationComponent : UGenerationComponent {
	struct TArray<struct FVector> Points; // 0x3f0(0x10)
	bool Visible; // 0x400(0x01)
	char UnknownData_401[0x7]; // 0x401(0x07)
	struct UPillarSettings* PillarSettings; // 0x408(0x08)
};

// Class FSD.PillarGenerationItem
// Size: 0x230 (Inherited: 0x228)
struct APillarGenerationItem : AGenerationItem {
	struct UPillarGenerationComponent* PillarComponent; // 0x228(0x08)
};

// Class FSD.PilotingStateComponent
// Size: 0x118 (Inherited: 0xf8)
struct UPilotingStateComponent : UCharacterStateComponent {
	struct AActor* Vehicle; // 0xf8(0x08)
	char UnknownData_100[0x18]; // 0x100(0x18)

	void Server_MoveRight(float Value); // Function FSD.PilotingStateComponent.Server_MoveRight
	void Server_MoveForward(float Value); // Function FSD.PilotingStateComponent.Server_MoveForward
	void OnRep_Vehicle(); // Function FSD.PilotingStateComponent.OnRep_Vehicle
};

// Class FSD.PipelineBuilderItem
// Size: 0x3c8 (Inherited: 0x3c0)
struct APipelineBuilderItem : ATrackBuilderItem {
	struct UItemPlacerAggregator* SegmentPlacer; // 0x3c0(0x08)
};

// Class FSD.PipelineFinish
// Size: 0x248 (Inherited: 0x220)
struct APipelineFinish : AActor {
	struct UTrackBuilderConnectPoint* PipelineEndConnection; // 0x220(0x08)
	struct USingleUsableComponent* UsableOrderExtractor; // 0x228(0x08)
	struct APipelineExtractorPod* ExtractPodClass; // 0x230(0x08)
	struct APipelineExtractorPod* ExtractorPod; // 0x238(0x08)
	bool bPipelineCompleted; // 0x240(0x01)
	char UnknownData_241[0x7]; // 0x241(0x07)

	void ReceivePipelineCompleted(); // Function FSD.PipelineFinish.ReceivePipelineCompleted
	void ReceiveExtractorPodSpawned(struct APipelineExtractorPod* InExtractorPod); // Function FSD.PipelineFinish.ReceiveExtractorPodSpawned
	void OnRep_PipelineCompleted(); // Function FSD.PipelineFinish.OnRep_PipelineCompleted
	void OnRep_ExtractorPod(); // Function FSD.PipelineFinish.OnRep_ExtractorPod
	void OnExtractorPodStateChanged(struct ARessuplyPod* InExtractorPod, enum class ERessuplyPodState InState); // Function FSD.PipelineFinish.OnExtractorPodStateChanged
	void OnExtractorPodOrdered(struct APlayerCharacter* InUser); // Function FSD.PipelineFinish.OnExtractorPodOrdered
	void OnConnectedWithSegment(struct UTrackBuilderConnectPoint* InConnectPoint, struct ATrackBuilderSegment* InSegment); // Function FSD.PipelineFinish.OnConnectedWithSegment
	void OnConnectedSegmentActivated(struct APipelineSegment* InSegment); // Function FSD.PipelineFinish.OnConnectedSegmentActivated
	struct FVector GetLandingOffset(); // Function FSD.PipelineFinish.GetLandingOffset
};

// Class FSD.RessuplyPod
// Size: 0x2b0 (Inherited: 0x220)
struct ARessuplyPod : AActor {
	struct FMulticastInlineDelegate OnStateChanged; // 0x220(0x10)
	struct UDamageComponent* Damage; // 0x230(0x08)
	float KillRadius; // 0x238(0x04)
	float DropHeight; // 0x23c(0x04)
	float DropDelay; // 0x240(0x04)
	float MissionShoutDelay; // 0x244(0x04)
	struct UDialogDataAsset* DialogOrderAccepted; // 0x248(0x08)
	struct UDialogDataAsset* DialogPodArrived; // 0x250(0x08)
	char UnknownData_258[0x8]; // 0x258(0x08)
	struct UDialogDataAsset* CurrentMissionShout; // 0x260(0x08)
	struct FVector StartLocation; // 0x268(0x0c)
	struct FVector TargetLocation; // 0x274(0x0c)
	enum class ERessuplyPodState State; // 0x280(0x01)
	char UnknownData_281[0x3]; // 0x281(0x03)
	float TargetDropTime; // 0x284(0x04)
	char UnknownData_288[0xc]; // 0x288(0x0c)
	float ServerDropProgress; // 0x294(0x04)
	struct UCurveFloat* DropCurve; // 0x298(0x08)
	struct AActor* PlayerSpawnPoint; // 0x2a0(0x08)
	float CloseToImpactDistance; // 0x2a8(0x04)
	char UnknownData_2AC[0x4]; // 0x2ac(0x04)

	void SetIdling(); // Function FSD.RessuplyPod.SetIdling
	void RessuplyPodStateDelegate__DelegateSignature(struct ARessuplyPod* InPod, enum class ERessuplyPodState InState); // DelegateFunction FSD.RessuplyPod.RessuplyPodStateDelegate__DelegateSignature
	void OnTunnelBLocked(); // Function FSD.RessuplyPod.OnTunnelBLocked
	void OnRep_State(enum class ERessuplyPodState oldState); // Function FSD.RessuplyPod.OnRep_State
	void OnDropStarted(); // Function FSD.RessuplyPod.OnDropStarted
	void OnDroppodImpact(); // Function FSD.RessuplyPod.OnDroppodImpact
	void OnDroppodCloseToImpact(); // Function FSD.RessuplyPod.OnDroppodCloseToImpact
	struct AActor* DropToTarget(struct UObject* WorldContextObject, struct ARessuplyPod* podClass, struct FVector Location, struct AActor* Requester); // Function FSD.RessuplyPod.DropToTarget
};

// Class FSD.PipelineExtractorPod
// Size: 0x2c0 (Inherited: 0x2b0)
struct APipelineExtractorPod : ARessuplyPod {
	struct FWeakObjectPtr<struct APipelineSegment> ConnectedSegment; // 0x2b0(0x08)
	float TargetRotation; // 0x2b8(0x04)
	char UnknownData_2BC[0x4]; // 0x2bc(0x04)

	void SetTargetRotation(struct APipelineSegment* InPipelineSegment); // Function FSD.PipelineExtractorPod.SetTargetRotation
	void ReceiveConnectedToSegment(struct APipelineSegment* InConnectedSegment); // Function FSD.PipelineExtractorPod.ReceiveConnectedToSegment
	void OnRep_ConnectedSegment(); // Function FSD.PipelineExtractorPod.OnRep_ConnectedSegment
	void ExtractorPodOrderedEvent(struct APlayerCharacter* InUser); // Function FSD.PipelineExtractorPod.ExtractorPodOrderedEvent
};

// Class FSD.PipelineExtractorPodAnimInstance
// Size: 0x2a0 (Inherited: 0x270)
struct UPipelineExtractorPodAnimInstance : UAnimInstance {
	float ConnectionRotation; // 0x268(0x04)
	enum class EPipelineExtractorPodAnimState AnimState; // 0x26c(0x01)
	enum class ERessuplyPodState PodState; // 0x26d(0x01)
	enum class EPipelineBuildState PipelineState; // 0x26e(0x01)
	enum class ERefineryState RefineryState; // 0x26f(0x01)
	float RotationSpeed; // 0x270(0x04)
	struct FWeakObjectPtr<struct APipelineExtractorPod> Pod; // 0x274(0x08)
	struct FWeakObjectPtr<struct APipelineSegment> ConnectedSegment; // 0x27c(0x08)
	struct FWeakObjectPtr<struct APipelineStart> PipelineStart; // 0x284(0x08)
	struct FWeakObjectPtr<struct AFSDRefinery> Refinery; // 0x28c(0x08)
	char UnknownData_29C[0x4]; // 0x29c(0x04)
};

// Class FSD.PipelineSegment
// Size: 0x3a8 (Inherited: 0x290)
struct APipelineSegment : ATrackBuilderSegment {
	struct FMulticastInlineDelegate OnPipelineBroken; // 0x290(0x10)
	struct FMulticastInlineDelegate OnPipelineRepaired; // 0x2a0(0x10)
	struct FMulticastInlineDelegate OnPipelineActivated; // 0x2b0(0x10)
	struct FMulticastInlineDelegate OnPipelineStateChanged; // 0x2c0(0x10)
	struct UStaticMesh* StaticMeshUnassembled; // 0x2d0(0x08)
	struct UStaticMesh* StaticMeshAssembled; // 0x2d8(0x08)
	struct UStaticMesh* StaticMeshFinal; // 0x2e0(0x08)
	struct FVector EditorEndLocation; // 0x2e8(0x0c)
	char CarvingTraceType; // 0x2f4(0x01)
	char UnknownData_2F5[0x3]; // 0x2f5(0x03)
	struct UMaterialInterface* NumberMaterial; // 0x2f8(0x08)
	char UnknownData_300[0x8]; // 0x300(0x08)
	struct USingleUsableComponent* RepairSegmentUsable; // 0x308(0x08)
	struct USingleUsableComponent* ActivateSegmentUsable; // 0x310(0x08)
	struct UDroneUseComponent* DroneUsable; // 0x318(0x08)
	struct USimpleHealthComponent* SegmentHealthComponent; // 0x320(0x08)
	struct USplineComponent* MovementSpline; // 0x328(0x08)
	struct USplineComponent* MovementSplineRight; // 0x330(0x08)
	struct USplineComponent* MovementSplineLeft; // 0x338(0x08)
	struct USplineMeshComponent* PipelineMesh; // 0x340(0x08)
	struct USplineMeshComponent* PipelineOuterMesh; // 0x348(0x08)
	struct USkeletalMeshComponent* PipelineCapMesh; // 0x350(0x08)
	struct USkeletalMeshComponent* EndPostMesh; // 0x358(0x08)
	struct UStaticMeshComponent* EndPostMeshStatic; // 0x360(0x08)
	struct UPathfinderSplineSegmentCollisionComponent* PathfinderComponent; // 0x368(0x08)
	bool bSegmentBroken; // 0x370(0x01)
	char UnknownData_371[0x3]; // 0x371(0x03)
	float SegmentActivatedProgress; // 0x374(0x04)
	enum class EPipelineBuildState PipelineState; // 0x378(0x01)
	char UnknownData_379[0x3]; // 0x379(0x03)
	struct FWeakObjectPtr<struct APipelineStart> PipelineStart; // 0x37c(0x08)
	float MinValidLength; // 0x384(0x04)
	float MaxValidLength; // 0x388(0x04)
	float TooSharpExtraLength; // 0x38c(0x04)
	float TooSteepExtraLength; // 0x390(0x04)
	float BlockedSphereSize; // 0x394(0x04)
	int32_t BlockedExtraRaytraceRotationOffset; // 0x398(0x04)
	float BlockedExtraRaytraces; // 0x39c(0x04)
	float BlockedExtraRaytraceDist; // 0x3a0(0x04)
	float BlockedRayTraceSuccesses; // 0x3a4(0x04)

	void UpdateSplineMesh(struct USplineMeshComponent* InMesh, float InProgress, bool InMoveEndCap); // Function FSD.PipelineSegment.UpdateSplineMesh
	void SetSegmentBroken(struct APlayerCharacter* InUser, bool InSegmentBroken); // Function FSD.PipelineSegment.SetSegmentBroken
	void SetPipelineNumberMaterial(struct UMaterialInterface* InNumberMaterial); // Function FSD.PipelineSegment.SetPipelineNumberMaterial
	void SetEndPostVisible(bool InVisible); // Function FSD.PipelineSegment.SetEndPostVisible
	void ReceiveSegmentBrokenChanged(bool InSegmentBroken); // Function FSD.PipelineSegment.ReceiveSegmentBrokenChanged
	void ReceiveSegmentActivatedProgress(float InProgress); // Function FSD.PipelineSegment.ReceiveSegmentActivatedProgress
	void ReceiveSegmentActivated(); // Function FSD.PipelineSegment.ReceiveSegmentActivated
	void ReceivePlacementFinished(); // Function FSD.PipelineSegment.ReceivePlacementFinished
	void ReceivePlacementBegin(); // Function FSD.PipelineSegment.ReceivePlacementBegin
	void PipelineStateDelegate__DelegateSignature(enum class EPipelineBuildState InPipelineState); // DelegateFunction FSD.PipelineSegment.PipelineStateDelegate__DelegateSignature
	void PipelineSegmentDelegate__DelegateSignature(struct APipelineSegment* InPipelineSegment); // DelegateFunction FSD.PipelineSegment.PipelineSegmentDelegate__DelegateSignature
	void OnRepaired(struct APlayerCharacter* InUser); // Function FSD.PipelineSegment.OnRepaired
	void OnRep_SegmentBroken(); // Function FSD.PipelineSegment.OnRep_SegmentBroken
	void OnRep_SegmentActivatedProgress(); // Function FSD.PipelineSegment.OnRep_SegmentActivatedProgress
	struct APipelineStart* GetPipelineStart(); // Function FSD.PipelineSegment.GetPipelineStart
	struct APipelineSegment* GetNextPipelineSegment(bool bForward); // Function FSD.PipelineSegment.GetNextPipelineSegment
	bool GetIsSegmentActivated(); // Function FSD.PipelineSegment.GetIsSegmentActivated
	void CallbackSegmentRepaired(struct APlayerCharacter* InUser); // Function FSD.PipelineSegment.CallbackSegmentRepaired
	void CallbackSegmentDestroyed(struct UHealthComponentBase* InHealth); // Function FSD.PipelineSegment.CallbackSegmentDestroyed
	void CallbackSegmentActivatedProgress(float InProgress); // Function FSD.PipelineSegment.CallbackSegmentActivatedProgress
	void CallbackSegmentActivated(struct APlayerCharacter* InUser); // Function FSD.PipelineSegment.CallbackSegmentActivated
	void CallbackPipelineStateChanged(struct APipelineStart* InPipelineStart, enum class EPipelineBuildState InState); // Function FSD.PipelineSegment.CallbackPipelineStateChanged
	void CallbackNextSegmentChanged(struct UTrackBuilderUsable* InUsable, struct ATrackBuilderSegment* InSegment); // Function FSD.PipelineSegment.CallbackNextSegmentChanged
	void CallbackDroneUsed(int32_t TimesUsed); // Function FSD.PipelineSegment.CallbackDroneUsed
};

// Class FSD.PipelineSegmentEndPostAnimInstance
// Size: 0x280 (Inherited: 0x270)
struct UPipelineSegmentEndPostAnimInstance : UAnimInstance {
	float AssemblyAnimLength; // 0x268(0x04)
	float AssemblyTimeTarget; // 0x26c(0x04)
	float AssemblyTime; // 0x270(0x04)
	bool bAssembling; // 0x274(0x01)
	char UnknownData_27D[0x3]; // 0x27d(0x03)
};

// Class FSD.PipelineStart
// Size: 0x270 (Inherited: 0x220)
struct APipelineStart : AActor {
	struct FMulticastInlineDelegate OnBuildStateChanged; // 0x220(0x10)
	int32_t PipelineID; // 0x230(0x04)
	char UnknownData_234[0x4]; // 0x234(0x04)
	struct UTrackBuilderUsable* PipelineStartUsable; // 0x238(0x08)
	enum class EPipelineBuildState BuildState; // 0x240(0x01)
	char UnknownData_241[0x7]; // 0x241(0x07)
	struct APipelineFinish* PipelineFinish; // 0x248(0x08)
	struct AFSDRefinery* Refinery; // 0x250(0x08)
	struct TArray<struct FWeakObjectPtr<struct APipelineSegment>> BrokenSegments; // 0x258(0x10)
	char UnknownData_268[0x8]; // 0x268(0x08)

	void ReceiveBuildStateChanged(enum class EPipelineBuildState InBuildState); // Function FSD.PipelineStart.ReceiveBuildStateChanged
	void PipelineStartStateDelegate__DelegateSignature(struct APipelineStart* InPipelineStart, enum class EPipelineBuildState InPipelineState); // DelegateFunction FSD.PipelineStart.PipelineStartStateDelegate__DelegateSignature
	void PipelineCompleted(struct APipelineFinish* InPipelineFinish); // Function FSD.PipelineStart.PipelineCompleted
	void OnRep_BuildState(); // Function FSD.PipelineStart.OnRep_BuildState
	void OnNextSegmentChanged(struct UTrackBuilderUsable* InUsable, struct ATrackBuilderSegment* InSegment); // Function FSD.PipelineStart.OnNextSegmentChanged
	struct TArray<struct APipelineSegment*> GetAllPipelineSegments(); // Function FSD.PipelineStart.GetAllPipelineSegments
};

// Class FSD.PlaceableInterface
// Size: 0x28 (Inherited: 0x28)
struct UPlaceableInterface : UInterface {
};

// Class FSD.PlaceableItem
// Size: 0x390 (Inherited: 0x368)
struct APlaceableItem : AAnimatedItem {
	char UnknownData_368[0x10]; // 0x368(0x10)
	struct UCapacityHoldingItemAggregator* Capacity; // 0x378(0x08)
	struct UItemPlacerAggregator* ItemPlacer; // 0x380(0x08)
	struct AActor* PlacableClass; // 0x388(0x08)

	void Server_SpawnItem(struct FVector Location); // Function FSD.PlaceableItem.Server_SpawnItem
	void ReceiveItemSpawned(struct AActor* SpawnedActor); // Function FSD.PlaceableItem.ReceiveItemSpawned
	void OnCarriedAmountChanged(int32_t newAmount); // Function FSD.PlaceableItem.OnCarriedAmountChanged
};

// Class FSD.PlanetZoneSetup
// Size: 0x40 (Inherited: 0x30)
struct UPlanetZoneSetup : UDataAsset {
	struct TArray<struct UPlanetZone*> PlanetZones; // 0x30(0x10)

	struct UPlanetZone* GetPlanetZoneForBiome(struct UBiome* Biome); // Function FSD.PlanetZoneSetup.GetPlanetZoneForBiome
};

// Class FSD.PlanetZone
// Size: 0x70 (Inherited: 0x30)
struct UPlanetZone : UDataAsset {
	char UnknownData_30[0x8]; // 0x30(0x08)
	struct TArray<struct UBiome*> Biomes; // 0x38(0x10)
	struct TArray<struct FRequiredMissionItem> RequiredMissions; // 0x48(0x10)
	bool MustBeUnlocked; // 0x58(0x01)
	char UnknownData_59[0x3]; // 0x59(0x03)
	struct FGuid SavegameID; // 0x5c(0x10)
	char UnknownData_6C[0x4]; // 0x6c(0x04)

	bool IsUnlocked(struct UFSDSaveGame* SaveGame); // Function FSD.PlanetZone.IsUnlocked
	struct FGuid GetSavegameID(); // Function FSD.PlanetZone.GetSavegameID
	struct TArray<struct UBiome*> GetBiomes(); // Function FSD.PlanetZone.GetBiomes
};

// Class FSD.PlayerAnimInstance
// Size: 0x390 (Inherited: 0x270)
struct UPlayerAnimInstance : UAnimInstance {
	bool IsFirstPerson; // 0x270(0x01)
	char UnknownData_271[0x3]; // 0x271(0x03)
	float WalkTreshhold; // 0x274(0x04)
	struct APlayerCharacter* Character; // 0x278(0x08)
	struct UParticleSystem* DefaultFootstepParticle; // 0x280(0x08)
	struct USoundCue* DefaultFootStepSound; // 0x288(0x08)
	struct UItemCharacterAnimationSet* AnimationSetA; // 0x290(0x08)
	struct UItemCharacterAnimationSet* AnimationSetB; // 0x298(0x08)
	bool AnimationSetAIsPrimary; // 0x2a0(0x01)
	enum class ECharacterState CharacterState; // 0x2a1(0x01)
	char UnknownData_2A2[0x2]; // 0x2a2(0x02)
	float Speed; // 0x2a4(0x04)
	float WalkAnimationSpeed; // 0x2a8(0x04)
	float RunAnimationSpeed; // 0x2ac(0x04)
	float WalkRate; // 0x2b0(0x04)
	float RunRate; // 0x2b4(0x04)
	float Direction; // 0x2b8(0x04)
	struct FRotator AimRotation; // 0x2bc(0x0c)
	bool IsInitialized; // 0x2c8(0x01)
	char UnknownData_2C9[0x3]; // 0x2c9(0x03)
	float Pitch; // 0x2cc(0x04)
	bool IsStandingDown; // 0x2d0(0x01)
	bool IsInAir; // 0x2d1(0x01)
	bool IsMoving; // 0x2d2(0x01)
	bool IsWalking; // 0x2d3(0x01)
	bool IsSprinting; // 0x2d4(0x01)
	bool IsAiming; // 0x2d5(0x01)
	bool IsAlive; // 0x2d6(0x01)
	bool IsLyingDown; // 0x2d7(0x01)
	bool OnZipline; // 0x2d8(0x01)
	bool IsGrinding; // 0x2d9(0x01)
	bool IsParalyzed; // 0x2da(0x01)
	bool IsGrabbed; // 0x2db(0x01)
	bool IsAttached; // 0x2dc(0x01)
	bool BeingRevived; // 0x2dd(0x01)
	bool IsLookingAtMap; // 0x2de(0x01)
	bool IsControllingEnemy; // 0x2df(0x01)
	struct FVector ControllingEnemyRootOffset; // 0x2e0(0x0c)
	struct FVector ControllingEnemyDirectionAlpha; // 0x2ec(0x0c)
	float GliderAnimationLength; // 0x2f8(0x04)
	struct FGliderAnimSync GliderAnimSync; // 0x2fc(0x20)
	bool IsAllowedToPlayMovementAnim; // 0x31c(0x01)
	char UnknownData_31D[0x3]; // 0x31d(0x03)
	float CropBeard; // 0x320(0x04)
	char UnknownData_324[0x4]; // 0x324(0x04)
	struct UAnimMontage* ActiveUseMontage; // 0x328(0x08)
	char UnknownData_330[0x8]; // 0x330(0x08)
	struct UUseAnimationSetting* CurrentUseSetting; // 0x338(0x08)
	struct UAnimMontage* EndUseMontageToPlay; // 0x340(0x08)
	float AimDuration; // 0x348(0x04)
	float ReviveProgress; // 0x34c(0x04)
	float ReviveExplicitTime; // 0x350(0x04)
	char UnknownData_354[0xc]; // 0x354(0x0c)
	float IdleTimeForInspect; // 0x360(0x04)
	float RepeatDealayForInspect; // 0x364(0x04)
	enum class ECharacterMoveDirection CharacterMoveDirection; // 0x368(0x01)
	char UnknownData_369[0x3]; // 0x369(0x03)
	float MoveAdjustmentAngle; // 0x36c(0x04)
	struct UItemCharacterAnimationSet* CarryAnimationSet; // 0x370(0x08)
	struct UItemCharacterAnimationSet* DefaultAnimationSet; // 0x378(0x08)
	char UnknownData_380[0x10]; // 0x380(0x10)

	bool StopUseMontage(); // Function FSD.PlayerAnimInstance.StopUseMontage
	void StopInspectWeapon(); // Function FSD.PlayerAnimInstance.StopInspectWeapon
	void StartInspectWeapon(); // Function FSD.PlayerAnimInstance.StartInspectWeapon
	void SetAiming(); // Function FSD.PlayerAnimInstance.SetAiming
	void PlayUseMontages(struct UUseAnimationSetting* useSetting); // Function FSD.PlayerAnimInstance.PlayUseMontages
	bool IsPlayingMontageInGroup(struct FName GroupName); // Function FSD.PlayerAnimInstance.IsPlayingMontageInGroup
	struct UItemCharacterAnimationSet* GetAnimationSet(); // Function FSD.PlayerAnimInstance.GetAnimationSet
};

// Class FSD.PlayerFPAnimInstance
// Size: 0x440 (Inherited: 0x390)
struct UPlayerFPAnimInstance : UPlayerAnimInstance {
	struct FRotator WeaponRecoil; // 0x388(0x0c)
	float HeadBobScale; // 0x394(0x04)
	float WeaponSwayRecoverySpeed; // 0x398(0x04)
	float WeaponSwayAlphaRecoverySpeed; // 0x39c(0x04)
	struct FRotator WeaponSwayAngle; // 0x3a0(0x0c)
	float WeaponSwayMaxAngle; // 0x3ac(0x04)
	struct FRotator CameraAntiSwayAngle; // 0x3b0(0x0c)
	float WeaponSwayAlpha; // 0x3bc(0x04)
	float WeaponSwayToApply; // 0x3c0(0x04)
	struct FVector CameraOffset; // 0x3c4(0x0c)
	char UnknownData_3D8[0x8]; // 0x3d8(0x08)
	struct FVector NegativeCameraOffset; // 0x3e0(0x0c)
	bool HeadOnlyMode; // 0x3ec(0x01)
	char UnknownData_3ED[0x3]; // 0x3ed(0x03)
	struct FRotator HeadRotation; // 0x3f0(0x0c)
	char UnknownData_3FC[0x4]; // 0x3fc(0x04)
	struct UAnimSequence* FP_Idle; // 0x400(0x08)
	struct UAnimSequence* FP_Walk; // 0x408(0x08)
	struct UAnimSequence* FP_Sprint; // 0x410(0x08)
	struct UAnimSequence* FP_JumpStart; // 0x418(0x08)
	struct UAnimSequence* FP_JumpLoop; // 0x420(0x08)
	struct UAnimSequence* FP_JumpLand; // 0x428(0x08)
	struct UAnimSequence* FP_JumpLand_Aim; // 0x430(0x08)
	struct UAnimSequence* FP_Downed; // 0x438(0x08)
};

// Class FSD.PlayerTPAnimInstance
// Size: 0x5e0 (Inherited: 0x390)
struct UPlayerTPAnimInstance : UPlayerAnimInstance {
	float RigidBodyBlend; // 0x388(0x04)
	bool RigidBodyOn; // 0x38c(0x01)
	float UpperBodyBlend; // 0x390(0x04)
	float AimingValue; // 0x394(0x04)
	struct FRotator CounerMoveadjustmentAngleRotator; // 0x398(0x0c)
	bool FullBodyAnimActive; // 0x3a4(0x01)
	float FullBodyBlendTime; // 0x3a8(0x04)
	float BodyTurnRecoverySpeed; // 0x3ac(0x04)
	float BodyTurnMaxAngle; // 0x3b0(0x04)
	float BodyTurnLerpEXP; // 0x3b4(0x04)
	float TurnAnimationDuration; // 0x3b8(0x04)
	char UnknownData_3BE[0xa]; // 0x3be(0x0a)
	bool bCaveLeechBiting; // 0x3c8(0x01)
	char UnknownData_3C9[0x3]; // 0x3c9(0x03)
	float CaveLeechBiteReactDelay; // 0x3cc(0x04)
	char UnknownData_3D0[0x4]; // 0x3d0(0x04)
	bool IsResettingBodyTurn; // 0x3d4(0x01)
	char UnknownData_3D5[0x3]; // 0x3d5(0x03)
	struct FRotator BodyTurn; // 0x3d8(0x0c)
	struct FRotator CounterBodyTurn; // 0x3e4(0x0c)
	bool TurningLeft; // 0x3f0(0x01)
	bool TurningRight; // 0x3f1(0x01)
	char UnknownData_3F2[0x2]; // 0x3f2(0x02)
	float TurnProgress; // 0x3f4(0x04)
	bool HasPickedUpItem; // 0x3f8(0x01)
	bool IsLyingDownNoTransition; // 0x3f9(0x01)
	char UnknownData_3FA[0x2]; // 0x3fa(0x02)
	int32_t DanceMove; // 0x3fc(0x04)
	struct UAnimSequence* DanceSequence; // 0x400(0x08)
	bool IsDancing; // 0x408(0x01)
	char UnknownData_409[0x3]; // 0x409(0x03)
	float PickedUpItemBlend; // 0x40c(0x04)
	float AttachedBodyTurnFactor; // 0x410(0x04)
	float AttachedHeadTurnFactor; // 0x414(0x04)
	struct FRotator AttachedBodyRotation; // 0x418(0x0c)
	struct FRotator AttachedHeadRotation; // 0x424(0x0c)
	char UnknownData_430[0x8]; // 0x430(0x08)
	struct UBlendSpace1D* TP_LookUpDown; // 0x438(0x08)
	struct UBlendSpace1D* TP_LookUpDown_Aim; // 0x440(0x08)
	struct UBlendSpace1D* A_TP_LookUpDown_Aim; // 0x448(0x08)
	struct UBlendSpace1D* B_TP_LookUpDown_Aim; // 0x450(0x08)
	struct UAnimSequence* TP_JumpLoop; // 0x458(0x08)
	struct UAnimSequence* TP_JumpLoop_Aim; // 0x460(0x08)
	struct UAnimSequence* TP_JumpStart; // 0x468(0x08)
	struct UAnimSequence* TP_JumpStart_Aim; // 0x470(0x08)
	struct UAnimSequence* TP_Sprint; // 0x478(0x08)
	struct UAnimSequence* A_TP_Idle; // 0x480(0x08)
	struct UAnimSequence* B_TP_Idle; // 0x488(0x08)
	struct UAnimSequence* A_TP_Idle_Aim; // 0x490(0x08)
	struct UAnimSequence* B_TP_Idle_Aim; // 0x498(0x08)
	struct UAnimSequence* TP_LookForward; // 0x4a0(0x08)
	struct UAnimSequence* A_TP_LookForward; // 0x4a8(0x08)
	struct UAnimSequence* B_TP_LookForward; // 0x4b0(0x08)
	struct UAnimSequence* A_TP_LookForward_Aim; // 0x4b8(0x08)
	struct UAnimSequence* B_TP_LookForward_Aim; // 0x4c0(0x08)
	struct UAnimSequence* A_TP_Walk_Forward; // 0x4c8(0x08)
	struct UAnimSequence* B_TP_Walk_Forward; // 0x4d0(0x08)
	struct UAnimSequence* A_TP_Run_Forward; // 0x4d8(0x08)
	struct UAnimSequence* B_TP_Run_Forward; // 0x4e0(0x08)
	struct UAnimSequence* A_TP_Walk_Forward_Aim; // 0x4e8(0x08)
	struct UAnimSequence* B_TP_Walk_Forward_Aim; // 0x4f0(0x08)
	struct UAnimSequence* A_TP_Run_Forward_Aim; // 0x4f8(0x08)
	struct UAnimSequence* B_TP_Run_Forward_Aim; // 0x500(0x08)
	struct UAnimSequence* A_TP_Walk_Right; // 0x508(0x08)
	struct UAnimSequence* B_TP_Walk_Right; // 0x510(0x08)
	struct UAnimSequence* A_TP_Run_Right; // 0x518(0x08)
	struct UAnimSequence* B_TP_Run_Right; // 0x520(0x08)
	struct UAnimSequence* A_TP_Walk_Right_Aim; // 0x528(0x08)
	struct UAnimSequence* B_TP_Walk_Right_Aim; // 0x530(0x08)
	struct UAnimSequence* A_TP_Run_Right_Aim; // 0x538(0x08)
	struct UAnimSequence* B_TP_Run_Right_Aim; // 0x540(0x08)
	struct UAnimSequence* A_TP_Walk_Left; // 0x548(0x08)
	struct UAnimSequence* B_TP_Walk_Left; // 0x550(0x08)
	struct UAnimSequence* A_TP_Run_Left; // 0x558(0x08)
	struct UAnimSequence* B_TP_Run_Left; // 0x560(0x08)
	struct UAnimSequence* A_TP_Walk_Left_Aim; // 0x568(0x08)
	struct UAnimSequence* B_TP_Walk_Left_Aim; // 0x570(0x08)
	struct UAnimSequence* A_TP_Run_Left_Aim; // 0x578(0x08)
	struct UAnimSequence* B_TP_Run_Left_Aim; // 0x580(0x08)
	struct UAnimSequence* A_TP_Walk_Back; // 0x588(0x08)
	struct UAnimSequence* B_TP_Walk_Back; // 0x590(0x08)
	struct UAnimSequence* A_TP_Run_Back; // 0x598(0x08)
	struct UAnimSequence* B_TP_Run_Back; // 0x5a0(0x08)
	struct UAnimSequence* A_TP_Walk_Back_Aim; // 0x5a8(0x08)
	struct UAnimSequence* B_TP_Walk_Back_Aim; // 0x5b0(0x08)
	struct UAnimSequence* A_TP_Run_Back_Aim; // 0x5b8(0x08)
	struct UAnimSequence* B_TP_Run_Back_Aim; // 0x5c0(0x08)
	struct UAnimSequence* TP_Revived; // 0x5c8(0x08)
	struct UAnimSequence* TP_Downed; // 0x5d0(0x08)
	struct UAnimSequence* TP_Downed_Loop; // 0x5d8(0x08)

	void SetOverrideFullBody(bool overrideEnabled); // Function FSD.PlayerTPAnimInstance.SetOverrideFullBody
	struct UAnimSequence* GetTPSprint(); // Function FSD.PlayerTPAnimInstance.GetTPSprint
	struct UAnimSequence* GetTPLookForward_Aim(); // Function FSD.PlayerTPAnimInstance.GetTPLookForward_Aim
	struct UAnimSequence* GetTPLookForward(); // Function FSD.PlayerTPAnimInstance.GetTPLookForward
	struct UAnimSequence* GetTPJumpStart_Aim(); // Function FSD.PlayerTPAnimInstance.GetTPJumpStart_Aim
	struct UAnimSequence* GetTPJumpStart(); // Function FSD.PlayerTPAnimInstance.GetTPJumpStart
	struct UAnimSequence* GetTPJumpLoop_Aim(); // Function FSD.PlayerTPAnimInstance.GetTPJumpLoop_Aim
	struct UAnimSequence* GetTPJumpLoop(); // Function FSD.PlayerTPAnimInstance.GetTPJumpLoop
	struct UAnimSequence* GetTPIdle(); // Function FSD.PlayerTPAnimInstance.GetTPIdle
	struct UAnimSequence* GetTPDowned_Aim(); // Function FSD.PlayerTPAnimInstance.GetTPDowned_Aim
	struct UAnimSequence* GetTPDowned(); // Function FSD.PlayerTPAnimInstance.GetTPDowned
	enum class ECharacterAnimSet GetAnimationSetType(); // Function FSD.PlayerTPAnimInstance.GetAnimationSetType
};

// Class FSD.PlayerCharacter
// Size: 0xe10 (Inherited: 0x4c0)
struct APlayerCharacter : ACharacter {
	char UnknownData_4C0[0x10]; // 0x4c0(0x10)
	struct FMulticastInlineDelegate OnStartedUsingItem; // 0x4d0(0x10)
	struct FMulticastInlineDelegate OnStoppedUsingItem; // 0x4e0(0x10)
	struct FMulticastInlineDelegate OnFirePressed; // 0x4f0(0x10)
	struct FMulticastInlineDelegate OnFireReleased; // 0x500(0x10)
	struct FMulticastInlineDelegate OnGrenadePressed; // 0x510(0x10)
	struct FMulticastInlineDelegate OnPerkInitialized; // 0x520(0x10)
	struct FMulticastInlineDelegate OnInstantRevivePossibleEvent; // 0x530(0x10)
	struct FMulticastInlineDelegate OnCollectedEverything; // 0x540(0x10)
	struct FMulticastInlineDelegate OnCollectedSchematic; // 0x550(0x10)
	struct FMulticastInlineDelegate OnCollectedSkin; // 0x560(0x10)
	struct FMulticastInlineDelegate OnCollectedDrink; // 0x570(0x10)
	struct FMulticastInlineDelegate OnCollectedVictoryPose; // 0x580(0x10)
	struct FMulticastInlineDelegate OnCollectedPickaxePart; // 0x590(0x10)
	struct FMulticastInlineDelegate OnCollectedVanityItem; // 0x5a0(0x10)
	struct FMulticastInlineDelegate OnCameraModeChanged; // 0x5b0(0x10)
	struct FMulticastInlineDelegate OnDownCameraTargetChanged; // 0x5c0(0x10)
	struct FMulticastInlineDelegate OnActionHoldProgress; // 0x5d0(0x10)
	struct FMulticastInlineDelegate OnThrowCarriableProgress; // 0x5e0(0x10)
	struct FMulticastInlineDelegate OnJumpPressed; // 0x5f0(0x10)
	struct FMulticastInlineDelegate OnJumpReleased; // 0x600(0x10)
	struct FMulticastInlineDelegate OnSecondaryFirePressed; // 0x610(0x10)
	struct FMulticastInlineDelegate OnSecondaryFireReleased; // 0x620(0x10)
	struct FMulticastInlineDelegate OnManualMiningBegin; // 0x630(0x10)
	struct FMulticastInlineDelegate OnManualMiningEnd; // 0x640(0x10)
	struct FMulticastInlineDelegate OnLaserPointerPressed; // 0x650(0x10)
	struct FMulticastInlineDelegate OnLaserPointerReleased; // 0x660(0x10)
	struct FMulticastInlineDelegate OnTerrainScannerPressed; // 0x670(0x10)
	struct FMulticastInlineDelegate OnTerrainScannerReleased; // 0x680(0x10)
	struct FMulticastInlineDelegate OnFlareThrown; // 0x690(0x10)
	struct FMulticastInlineDelegate OnDropItem; // 0x6a0(0x10)
	struct FMulticastInlineDelegate OnUpdateMeshes; // 0x6b0(0x10)
	struct FMulticastInlineDelegate OnOpenChat; // 0x6c0(0x10)
	struct FMulticastInlineDelegate OnAcceptInvite; // 0x6d0(0x10)
	struct FMulticastInlineDelegate OnRejectInvite; // 0x6e0(0x10)
	struct FMulticastInlineDelegate OnIgnoreInvite; // 0x6f0(0x10)
	struct FMulticastInlineDelegate OnToggleOutline; // 0x700(0x10)
	struct FMulticastInlineDelegate OnToggleMapTool; // 0x710(0x10)
	struct FMulticastInlineDelegate OnToggleScanTool; // 0x720(0x10)
	struct FMulticastInlineDelegate OnDepthChanged; // 0x730(0x10)
	struct FMulticastInlineDelegate OnCharacterStateChanged; // 0x740(0x10)
	struct FMulticastInlineDelegate OnDamagedEnemy; // 0x750(0x10)
	struct FMulticastInlineDelegate OnLaserPointerEvent; // 0x760(0x10)
	struct FMulticastInlineDelegate OnSecondaryLaserPointerEvent; // 0x770(0x10)
	struct FMulticastInlineDelegate OnSaluteEvent; // 0x780(0x10)
	struct FMulticastInlineDelegate OnPlayerShout; // 0x790(0x10)
	char UnknownData_7A0[0x20]; // 0x7a0(0x20)
	struct FMulticastInlineDelegate OnRevivedEvent; // 0x7c0(0x10)
	struct FMulticastInlineDelegate OnReviveCallEvent; // 0x7d0(0x10)
	struct FMulticastInlineDelegate OnRevivedOtherCharacter; // 0x7e0(0x10)
	struct FMulticastInlineDelegate OnHeadlightOnChanged; // 0x7f0(0x10)
	struct FMulticastInlineDelegate OnCallDonkey; // 0x800(0x10)
	struct FGameplayTagContainer GameplayTags; // 0x810(0x20)
	struct UZipLineStateComponent* ZipLineStateComponent; // 0x830(0x08)
	struct TArray<struct AActor*> EscapableGrabberEnemies; // 0x838(0x10)
	struct FMulticastInlineDelegate OnEnemyStartedTracking; // 0x848(0x10)
	struct FMulticastInlineDelegate OnEnemyEndedTracking; // 0x858(0x10)
	struct FMulticastInlineDelegate OnKilledGrabber; // 0x868(0x10)
	struct FMulticastInlineDelegate OnCanEscapeGrabberChanged; // 0x878(0x10)
	struct AActor* GrabbedByClass; // 0x888(0x08)
	struct USoundCue* PowerAttackRefreshedSound; // 0x890(0x08)
	struct FMulticastInlineDelegate OnCoolDownProgress; // 0x898(0x10)
	bool bIsBeingBittenByCaveLeech; // 0x8a8(0x01)
	char UnknownData_8A9[0x7]; // 0x8a9(0x07)
	struct UWidgetInteractionComponent* WidgetInteraction; // 0x8b0(0x08)
	struct FDownCameraSettings DownCameraSettings; // 0x8b8(0x18)
	char UnknownData_8D0[0x10]; // 0x8d0(0x10)
	struct TArray<struct FWeakObjectPtr<struct AArmorRegeneratorActor>> ActiveShieldGenerators; // 0x8e0(0x10)
	char UnknownData_8F0[0x4]; // 0x8f0(0x04)
	struct FGuid SavegameID; // 0x8f4(0x10)
	struct FVector EstimatedVelocity; // 0x904(0x0c)
	char UnknownData_910[0x10]; // 0x910(0x10)
	struct FHoldButton FlareHeadlightButton; // 0x920(0x28)
	struct FHoldButton CycleItemButton; // 0x948(0x28)
	struct FHoldButton ToggleHUDButton; // 0x970(0x28)
	float EquipLaserpointerHoldDuration; // 0x998(0x04)
	bool IsPressingMovementInputKey; // 0x99c(0x01)
	char UnknownData_99D[0x1b]; // 0x99d(0x1b)
	struct UPlayerCharacterID* characterID; // 0x9b8(0x08)
	struct ATutorialManager* TutorialManagerType; // 0x9c0(0x08)
	struct USkeletalMeshComponent* FPMesh; // 0x9c8(0x08)
	struct UCameraComponent* FirstPersonCamera; // 0x9d0(0x08)
	struct USceneComponent* FirstPersonRoot; // 0x9d8(0x08)
	struct UActorTrackingComponent* ActorTracking; // 0x9e0(0x08)
	struct UCharacterIntoxicationComponent* IntoxicationComponent; // 0x9e8(0x08)
	struct UMissionStatsCollector* MissionStatsCollector; // 0x9f0(0x08)
	struct USpringArmComponent* ThirdPersonSpringArm; // 0x9f8(0x08)
	struct UCameraComponent* ThirdPersonCamera; // 0xa00(0x08)
	struct UPointLightComponent* ThirdPersonLight; // 0xa08(0x08)
	struct USpringArmComponent* FollowSpringArm; // 0xa10(0x08)
	struct UCameraComponent* FollowCamera; // 0xa18(0x08)
	struct UCameraComponent* DownCamera; // 0xa20(0x08)
	struct UCharacterCameraController* CameraController; // 0xa28(0x08)
	struct UPlayerHealthComponent* HealthComponent; // 0xa30(0x08)
	struct UCharacterSightComponent* SightComponent; // 0xa38(0x08)
	struct UInventoryComponent* InventoryComponent; // 0xa40(0x08)
	struct UCharacterUseComponent* UseComponent; // 0xa48(0x08)
	struct USingleUsableComponent* UsableComponent; // 0xa50(0x08)
	struct UOutlineComponent* OutlineComponent; // 0xa58(0x08)
	struct UTrailComponent* TrailComponent; // 0xa60(0x08)
	struct UCharacterRecoilComponent* RecoilComponent; // 0xa68(0x08)
	struct UStatusEffectsComponent* StatusEffectsComponent; // 0xa70(0x08)
	struct UPawnStatsComponent* PawnStatsComponent; // 0xa78(0x08)
	struct UPlayerAfflictionComponent* PawnAfflictionComponent; // 0xa80(0x08)
	struct UPlayerAttackPositionComponent* AttackerPositioningComponent; // 0xa88(0x08)
	struct UCommunicationComponent* CommunicationComponent; // 0xa90(0x08)
	struct UPlayerTemperatureComponent* TemperatureComponent; // 0xa98(0x08)
	struct UPlayerReactiveTerrainTrackerComponent* ReactiveTerrainTracker; // 0xaa0(0x08)
	struct UInstantUsable* TrackGrindUsableComponent; // 0xaa8(0x08)
	float RunningSpeed; // 0xab0(0x04)
	float RunBoost; // 0xab4(0x04)
	float RunBoostChargeTime; // 0xab8(0x04)
	char UnknownData_ABC[0x4]; // 0xabc(0x04)
	struct USoundCue* RunBoostActivationSound; // 0xac0(0x08)
	struct UParticleSystem* RunBoostParticles; // 0xac8(0x08)
	char UnknownData_AD0[0x8]; // 0xad0(0x08)
	struct UPawnAffliction* RunBoostAffliction; // 0xad8(0x08)
	struct UPhysicsAsset* HangingPhysicsAsset; // 0xae0(0x08)
	float HangingSimulationBlend; // 0xae8(0x04)
	char UnknownData_AEC[0x8]; // 0xaec(0x08)
	bool IsPlayableCharacter; // 0xaf4(0x01)
	char UnknownData_AF5[0x3]; // 0xaf5(0x03)
	struct UAudioComponent* SprintSoundComponent; // 0xaf8(0x08)
	struct USoundCue* SpringSound; // 0xb00(0x08)
	struct FAnalogAimSettings AimSettings; // 0xb08(0x40)
	float DownedCameraMinPitch; // 0xb48(0x04)
	float DownedCameraMaxPitch; // 0xb4c(0x04)
	float TurnToFaceScannerAngularSpeed; // 0xb50(0x04)
	float CarryingMovementSpeedPenalty; // 0xb54(0x04)
	float CarryingMaxFallVelocity; // 0xb58(0x04)
	float MaxThrowProgress; // 0xb5c(0x04)
	float MaxThrowHoldDuration; // 0xb60(0x04)
	char UnknownData_B64[0x4]; // 0xb64(0x04)
	float CarryingThrowMinForce; // 0xb68(0x04)
	float CarryingThrowMaxForce; // 0xb6c(0x04)
	char UnknownData_B70[0x8]; // 0xb70(0x08)
	struct UStatusEffect* CarryingThrowingStatusEffect; // 0xb78(0x08)
	char UnknownData_B80[0x4]; // 0xb80(0x04)
	float ThrowCarriableProgress; // 0xb84(0x04)
	struct TMap<char, struct UCharacterStateComponent*> CharacterStates; // 0xb88(0x50)
	struct FWeakObjectPtr<struct ATutorialManager> TutorialManager; // 0xbd8(0x08)
	struct UCharacterStateComponent* ActiveCharacterState; // 0xbe0(0x08)
	char UnknownData_BE8[0x3]; // 0xbe8(0x03)
	bool IsInDropPod; // 0xbeb(0x01)
	bool IsInEscapePod; // 0xbec(0x01)
	char UnknownData_BED[0x3]; // 0xbed(0x03)
	float ButtonMemoryDuration; // 0xbf0(0x04)
	bool IsRunning; // 0xbf4(0x01)
	bool CanDash; // 0xbf5(0x01)
	char UnknownData_BF6[0x6]; // 0xbf6(0x06)
	float DashInputWindow; // 0xbfc(0x04)
	float DashFowardMovementMinRequirement; // 0xc00(0x04)
	float DashRightMovementMaxRequirement; // 0xc04(0x04)
	float DashControllerMinValueRequired; // 0xc08(0x04)
	float DashCooldown; // 0xc0c(0x04)
	struct UStatusEffect* DashStatusEffect; // 0xc10(0x08)
	float ForwardInput; // 0xc18(0x04)
	float RightInput; // 0xc1c(0x04)
	char UnknownData_C20[0xc]; // 0xc20(0x0c)
	float StoppedRunningTime; // 0xc2c(0x04)
	float ShoutPressedTime; // 0xc30(0x04)
	bool bIsUsingItemPressed; // 0xc34(0x01)
	bool bIsUsingPressed; // 0xc35(0x01)
	char UnknownData_C36[0x2]; // 0xc36(0x02)
	float UsingDelay; // 0xc38(0x04)
	bool HeadLightOn; // 0xc3c(0x01)
	bool IsUsing; // 0xc3d(0x01)
	char UnknownData_C3E[0x2]; // 0xc3e(0x02)
	float JumpPressedTime; // 0xc40(0x04)
	bool CanMove; // 0xc44(0x01)
	bool CanAim; // 0xc45(0x01)
	bool CanUseItem; // 0xc46(0x01)
	bool CanChangeItems; // 0xc47(0x01)
	bool CanMine; // 0xc48(0x01)
	bool IsStandingDown; // 0xc49(0x01)
	bool InDanceRange; // 0xc4a(0x01)
	bool IsDancing; // 0xc4b(0x01)
	float DanceStartTime; // 0xc4c(0x04)
	struct UFSDAchievement* HappyFeetAchievement; // 0xc50(0x08)
	int32_t DanceMove; // 0xc58(0x04)
	enum class ECharacterCameraMode CameraMode; // 0xc5c(0x01)
	bool IsInCharacterSelectionWorld; // 0xc5d(0x01)
	char UnknownData_C5E[0x2]; // 0xc5e(0x02)
	float IdleTime; // 0xc60(0x04)
	char UnknownData_C64[0x4]; // 0xc64(0x04)
	struct UAnimMontage* FPDrinkSalute; // 0xc68(0x08)
	struct UAnimMontage* TPDrinkSalute; // 0xc70(0x08)
	struct UDialogDataAsset* SaluteShout; // 0xc78(0x08)
	struct UDialogDataAsset* DrinkShout; // 0xc80(0x08)
	struct UAnimMontage* CurrentSaluteMontage; // 0xc88(0x08)
	char UnknownData_C90[0x8]; // 0xc90(0x08)
	struct TArray<struct UMaterialInterface*> CachedMaterials; // 0xc98(0x10)
	bool BlockTrackGrindOnLanded; // 0xca8(0x01)
	char UnknownData_CA9[0x17]; // 0xca9(0x17)
	struct FHeroInfo HeroInfo; // 0xcc0(0x88)
	struct FString SteamClassID; // 0xd48(0x10)
	struct UMaterialInstanceDynamic* RadarMaterialInstance; // 0xd58(0x08)
	int32_t RadarMaterialAngleParameterIndex; // 0xd60(0x04)
	struct FVector LastUpdateVisibiltyPos; // 0xd64(0x0c)
	struct FVector SpawnLocation; // 0xd70(0x0c)
	char UnknownData_D7C[0x4]; // 0xd7c(0x04)
	struct UFSDPhysicalMaterial* FallbackPhysicalMaterial; // 0xd80(0x08)
	char UnknownData_D88[0x1]; // 0xd88(0x01)
	bool ClientReady; // 0xd89(0x01)
	char UnknownData_D8A[0x6]; // 0xd8a(0x06)
	struct UCharacterStateComponent* NextCharacterState; // 0xd90(0x08)
	char UnknownData_D98[0x8]; // 0xd98(0x08)
	bool PlayerIsLeavingInDroppod; // 0xda0(0x01)
	char UnknownData_DA1[0xb]; // 0xda1(0x0b)
	bool CanInstantRevive; // 0xdac(0x01)
	char UnknownData_DAD[0x1]; // 0xdad(0x01)
	bool HasInitializedPerks; // 0xdae(0x01)
	char UnknownData_DAF[0x9]; // 0xdaf(0x09)
	struct UCharacterVanityComponent* CharacterVanity; // 0xdb8(0x08)
	char UnknownData_DC0[0x8]; // 0xdc0(0x08)
	struct FCameraSpringSettings CameraSpringSettings; // 0xdc8(0x3c)
	char UnknownData_E04[0xc]; // 0xe04(0x0c)

	void UseZipLine(struct AZipLineProjectile* ZipLine, struct FVector Start, struct FVector End); // Function FSD.PlayerCharacter.UseZipLine
	void Unparalyze(); // Function FSD.PlayerCharacter.Unparalyze
	void ToggleScanTool(bool Visible); // Function FSD.PlayerCharacter.ToggleScanTool
	void ToggleHUDReleased(); // Function FSD.PlayerCharacter.ToggleHUDReleased
	void ToggleHUDPressed(); // Function FSD.PlayerCharacter.ToggleHUDPressed
	void ToggleHeadLight(); // Function FSD.PlayerCharacter.ToggleHeadLight
	void ThrowFlareReleased(); // Function FSD.PlayerCharacter.ThrowFlareReleased
	void ThrowFlarePressed(); // Function FSD.PlayerCharacter.ThrowFlarePressed
	void ThrowFlare(); // Function FSD.PlayerCharacter.ThrowFlare
	void StopUsingItem(); // Function FSD.PlayerCharacter.StopUsingItem
	void StartTutorials(bool ResetTutorials); // Function FSD.PlayerCharacter.StartTutorials
	void ShowSimpleHoldProgress(struct APlayerController* PlayerController, struct FText InDescription, float InProgress); // Function FSD.PlayerCharacter.ShowSimpleHoldProgress
	void SetStandingDown(bool standingDown); // Function FSD.PlayerCharacter.SetStandingDown
	void SetRadarMaterialInstance(struct UMaterialInstanceDynamic* matInstance); // Function FSD.PlayerCharacter.SetRadarMaterialInstance
	void SetOutsideShieldGenerator(struct AArmorRegeneratorActor* Shield); // Function FSD.PlayerCharacter.SetOutsideShieldGenerator
	void SetIsCharacterSelectionModel(); // Function FSD.PlayerCharacter.SetIsCharacterSelectionModel
	void SetInsideShieldGenerator(struct AArmorRegeneratorActor* Shield); // Function FSD.PlayerCharacter.SetInsideShieldGenerator
	void SetInCharacterSelectionWorld(); // Function FSD.PlayerCharacter.SetInCharacterSelectionWorld
	void SetHeadLight(bool on); // Function FSD.PlayerCharacter.SetHeadLight
	void SetFallbackPhysicalMaterial(struct UFSDPhysicalMaterial* PhysMat); // Function FSD.PlayerCharacter.SetFallbackPhysicalMaterial
	void SetCameraMode(enum class ECharacterCameraMode NewCameraMode); // Function FSD.PlayerCharacter.SetCameraMode
	void SetAttached(struct USceneComponent* AttachTo, bool DelayUntilLanded); // Function FSD.PlayerCharacter.SetAttached
	void Server_TriggerDash(); // Function FSD.PlayerCharacter.Server_TriggerDash
	void Server_ThrowCarriedItem(struct FVector_NetQuantize force); // Function FSD.PlayerCharacter.Server_ThrowCarriedItem
	void Server_StartSalute(struct UAnimMontage* startSalute); // Function FSD.PlayerCharacter.Server_StartSalute
	void Server_Shouted(); // Function FSD.PlayerCharacter.Server_Shouted
	void Server_SetUsing(bool characterIsUsing); // Function FSD.PlayerCharacter.Server_SetUsing
	void Server_SetRunning(bool characterIsRunning); // Function FSD.PlayerCharacter.Server_SetRunning
	void Server_SetRunBoostActive(bool IsActive); // Function FSD.PlayerCharacter.Server_SetRunBoostActive
	void Server_SetIsThrowingCarriable(bool isThrowing); // Function FSD.PlayerCharacter.Server_SetIsThrowingCarriable
	void Server_SetIsPressingMovementInput(bool aIsPushingInput); // Function FSD.PlayerCharacter.Server_SetIsPressingMovementInput
	void Server_SetIsJumpPressed(bool InJumpPressed); // Function FSD.PlayerCharacter.Server_SetIsJumpPressed
	void Server_SetDispenserReward(struct AEventRewardDispenser* Dispenser, struct USchematic* Reward); // Function FSD.PlayerCharacter.Server_SetDispenserReward
	void Server_SetClientReady(); // Function FSD.PlayerCharacter.Server_SetClientReady
	void Server_InstantRevive(struct APlayerCharacter* ReviveTarget); // Function FSD.PlayerCharacter.Server_InstantRevive
	void Server_EscapeFromGrabber(); // Function FSD.PlayerCharacter.Server_EscapeFromGrabber
	void Server_CancelThrowingCarriable(); // Function FSD.PlayerCharacter.Server_CancelThrowingCarriable
	void Server_CallDonkey(); // Function FSD.PlayerCharacter.Server_CallDonkey
	void Server_AddImpulse(struct FVector_NetQuantizeNormal Direction, float force); // Function FSD.PlayerCharacter.Server_AddImpulse
	void SendLevelUpStatistics(int32_t currentRank); // Function FSD.PlayerCharacter.SendLevelUpStatistics
	void ReviveProgress(float Progress); // Function FSD.PlayerCharacter.ReviveProgress
	void RequestChangeInGravityScale(float newGravityScale); // Function FSD.PlayerCharacter.RequestChangeInGravityScale
	void RejectInvite(); // Function FSD.PlayerCharacter.RejectInvite
	void ReceiveOnHeadlightOn(); // Function FSD.PlayerCharacter.ReceiveOnHeadlightOn
	void ReceiveEscapedFromGrabber(); // Function FSD.PlayerCharacter.ReceiveEscapedFromGrabber
	void Receive_ShowFieldMedicInstantReviveEffects(); // Function FSD.PlayerCharacter.Receive_ShowFieldMedicInstantReviveEffects
	void PrepareForEndScreen(); // Function FSD.PlayerCharacter.PrepareForEndScreen
	void PilotVehicle(struct AActor* Vehicle); // Function FSD.PlayerCharacter.PilotVehicle
	void Paralyze(struct AActor* ParalyzedBy); // Function FSD.PlayerCharacter.Paralyze
	void OpenChat(); // Function FSD.PlayerCharacter.OpenChat
	void OnResourceFull(struct UCappedResource* Resource); // Function FSD.PlayerCharacter.OnResourceFull
	void OnRep_IsStandingDown(); // Function FSD.PlayerCharacter.OnRep_IsStandingDown
	void OnRep_IsDancing(); // Function FSD.PlayerCharacter.OnRep_IsDancing
	void OnRep_HeadLightOn(); // Function FSD.PlayerCharacter.OnRep_HeadLightOn
	void OnRep_DanceMove(); // Function FSD.PlayerCharacter.OnRep_DanceMove
	void OnRep_CharacterState(struct UCharacterStateComponent* oldState); // Function FSD.PlayerCharacter.OnRep_CharacterState
	void OnItemEquipped(struct AItem* Item); // Function FSD.PlayerCharacter.OnItemEquipped
	void OnCharacterUsed(struct APlayerCharacter* User); // Function FSD.PlayerCharacter.OnCharacterUsed
	void OnCharacterBeginUse(struct APlayerCharacter* User); // Function FSD.PlayerCharacter.OnCharacterBeginUse
	void MouseWheelUp(); // Function FSD.PlayerCharacter.MouseWheelUp
	void MouseWheelDown(); // Function FSD.PlayerCharacter.MouseWheelDown
	bool LockIfState(enum class ECharacterState LockIf, enum class ECharacterState LockTo, bool canMoveAndAim); // Function FSD.PlayerCharacter.LockIfState
	void KilledGrabber__DelegateSignature(struct AActor* Grabber); // DelegateFunction FSD.PlayerCharacter.KilledGrabber__DelegateSignature
	void JumpRelease(); // Function FSD.PlayerCharacter.JumpRelease
	void JumpPress(); // Function FSD.PlayerCharacter.JumpPress
	void ItemUseDelegate__DelegateSignature(struct AItem* Item); // DelegateFunction FSD.PlayerCharacter.ItemUseDelegate__DelegateSignature
	bool IsWithinDistance(struct AActor* Source, float Distance); // Function FSD.PlayerCharacter.IsWithinDistance
	bool IsWalking(); // Function FSD.PlayerCharacter.IsWalking
	bool IsStateActive(enum class ECharacterState State); // Function FSD.PlayerCharacter.IsStateActive
	bool IsSaluting(); // Function FSD.PlayerCharacter.IsSaluting
	bool IsParalyzed(); // Function FSD.PlayerCharacter.IsParalyzed
	bool IsMovementInputPressed(); // Function FSD.PlayerCharacter.IsMovementInputPressed
	bool IsMining(); // Function FSD.PlayerCharacter.IsMining
	bool IsLyingDown(); // Function FSD.PlayerCharacter.IsLyingDown
	bool IsJumpPressed(); // Function FSD.PlayerCharacter.IsJumpPressed
	bool IsInState(enum class ECharacterState aState); // Function FSD.PlayerCharacter.IsInState
	bool IsFrozen(); // Function FSD.PlayerCharacter.IsFrozen
	bool IsFirstPerson(); // Function FSD.PlayerCharacter.IsFirstPerson
	bool IsDown(); // Function FSD.PlayerCharacter.IsDown
	bool IsAlive(); // Function FSD.PlayerCharacter.IsAlive
	void IgnoreInvite(); // Function FSD.PlayerCharacter.IgnoreInvite
	bool HasBeenRevived(); // Function FSD.PlayerCharacter.HasBeenRevived
	struct UTrailComponent* GetTrailComponent(); // Function FSD.PlayerCharacter.GetTrailComponent
	struct UPlayerTPAnimInstance* GetTPAnimInstance(); // Function FSD.PlayerCharacter.GetTPAnimInstance
	float GetTimeSinceLastRevival(); // Function FSD.PlayerCharacter.GetTimeSinceLastRevival
	enum class ECharacterState GetPreviousState(); // Function FSD.PlayerCharacter.GetPreviousState
	struct AFSDPlayerState* GetPlayerState(); // Function FSD.PlayerCharacter.GetPlayerState
	struct FString GetPlayerName(); // Function FSD.PlayerCharacter.GetPlayerName
	struct AFSDPlayerController* GetPlayerController(); // Function FSD.PlayerCharacter.GetPlayerController
	struct UInventoryList* GetInventoryList(); // Function FSD.PlayerCharacter.GetInventoryList
	struct FText GetHeroSwitchToMessage(); // Function FSD.PlayerCharacter.GetHeroSwitchToMessage
	struct FText GetHeroName(); // Function FSD.PlayerCharacter.GetHeroName
	struct UTexture2D* GetHeroIcon(); // Function FSD.PlayerCharacter.GetHeroIcon
	struct FLinearColor GetHeroColor(); // Function FSD.PlayerCharacter.GetHeroColor
	struct UPlayerFPAnimInstance* GetFPAnimInstance(); // Function FSD.PlayerCharacter.GetFPAnimInstance
	struct AItem* GetEquippedItem(); // Function FSD.PlayerCharacter.GetEquippedItem
	float GetDownTime(); // Function FSD.PlayerCharacter.GetDownTime
	struct APlayerCharacter* GetDownCameraTarget(); // Function FSD.PlayerCharacter.GetDownCameraTarget
	struct USceneComponent* GetDownCameraRotationPoint(); // Function FSD.PlayerCharacter.GetDownCameraRotationPoint
	struct USceneComponent* GetDownCameraAttachPoint(); // Function FSD.PlayerCharacter.GetDownCameraAttachPoint
	enum class ECharacterState GetCurrentState(); // Function FSD.PlayerCharacter.GetCurrentState
	float GetClassXP(); // Function FSD.PlayerCharacter.GetClassXP
	struct UCharacterVanityComponent* GetCharacterVanity(); // Function FSD.PlayerCharacter.GetCharacterVanity
	float GetBeginRevivedProgress(); // Function FSD.PlayerCharacter.GetBeginRevivedProgress
	struct FString GetAnalyticsClass(); // Function FSD.PlayerCharacter.GetAnalyticsClass
	struct FRotator GetAimRotation(); // Function FSD.PlayerCharacter.GetAimRotation
	struct FVector GetActorGroundLocation(); // Function FSD.PlayerCharacter.GetActorGroundLocation
	struct TArray<struct AArmorRegeneratorActor*> GetActiveShieldGenerators(); // Function FSD.PlayerCharacter.GetActiveShieldGenerators
	struct UPlayerAnimInstance* GetActiveAnimInstance(); // Function FSD.PlayerCharacter.GetActiveAnimInstance
	void ForceIsPressingMovementInputKey(); // Function FSD.PlayerCharacter.ForceIsPressingMovementInputKey
	void FirePressedDelegate__DelegateSignature(); // DelegateFunction FSD.PlayerCharacter.FirePressedDelegate__DelegateSignature
	void ExitVehicle(); // Function FSD.PlayerCharacter.ExitVehicle
	void CycleItemUp(); // Function FSD.PlayerCharacter.CycleItemUp
	void CycleItemReleased(); // Function FSD.PlayerCharacter.CycleItemReleased
	void CycleItemPressed(); // Function FSD.PlayerCharacter.CycleItemPressed
	void CycleItemDown(); // Function FSD.PlayerCharacter.CycleItemDown
	void ConsumeCycleItemButton(); // Function FSD.PlayerCharacter.ConsumeCycleItemButton
	void Client_TargetDamaged(struct AActor* Target, struct UObject* Health, float Damage, float DamageModifier, bool IsWeakPoint, bool IsRadial); // Function FSD.PlayerCharacter.Client_TargetDamaged
	void Client_AddImpulse(struct FVector_NetQuantizeNormal Direction, float force); // Function FSD.PlayerCharacter.Client_AddImpulse
	void CheckWithoutAPaddleAchievement(); // Function FSD.PlayerCharacter.CheckWithoutAPaddleAchievement
	void CheatRevive(); // Function FSD.PlayerCharacter.CheatRevive
	void CheatGodMode(); // Function FSD.PlayerCharacter.CheatGodMode
	void CharacterTrackingDelegate__DelegateSignature(struct AActor* InTrackingEnemy); // DelegateFunction FSD.PlayerCharacter.CharacterTrackingDelegate__DelegateSignature
	void ChangeState(enum class ECharacterState NewState); // Function FSD.PlayerCharacter.ChangeState
	void ChangeIfDifferentState(enum class ECharacterState NewState); // Function FSD.PlayerCharacter.ChangeIfDifferentState
	void CanEscapeGrabberDelegate__DelegateSignature(bool bCanEscape); // DelegateFunction FSD.PlayerCharacter.CanEscapeGrabberDelegate__DelegateSignature
	bool CanEscapeFromGrabber(); // Function FSD.PlayerCharacter.CanEscapeFromGrabber
	void CallDonkeyReleased(); // Function FSD.PlayerCharacter.CallDonkeyReleased
	void CallDonkeyPressed(); // Function FSD.PlayerCharacter.CallDonkeyPressed
	void BP_OnUpdateMeshes(); // Function FSD.PlayerCharacter.BP_OnUpdateMeshes
	void BP_OnControllerReady(); // Function FSD.PlayerCharacter.BP_OnControllerReady
	void AnnounceSchematicCollected(struct USchematic* InSchematic); // Function FSD.PlayerCharacter.AnnounceSchematicCollected
	void All_StartSalute(struct UAnimMontage* saluteMontage); // Function FSD.PlayerCharacter.All_StartSalute
	void All_ShowImpactEffects(struct UParticleSystem* Particles, struct FVector_NetQuantize Location, struct FVector_NetQuantizeNormal Orientation); // Function FSD.PlayerCharacter.All_ShowImpactEffects
	void All_ShowFieldMedicInstantReviveEffects(); // Function FSD.PlayerCharacter.All_ShowFieldMedicInstantReviveEffects
	void AddImpulseFromVector(struct FVector Vector); // Function FSD.PlayerCharacter.AddImpulseFromVector
	void AddImpulseFromDirectionAndForce(struct FVector Direction, float force); // Function FSD.PlayerCharacter.AddImpulseFromDirectionAndForce
	float AddClassXP(float amount); // Function FSD.PlayerCharacter.AddClassXP
	void AcknowledgeCharacterState(enum class ECharacterState eState); // Function FSD.PlayerCharacter.AcknowledgeCharacterState
	void AcceptInvite(); // Function FSD.PlayerCharacter.AcceptInvite
};

// Class FSD.PlayerCharacterFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct UPlayerCharacterFunctionLibrary : UBlueprintFunctionLibrary {

	bool SetPlayerVoiceMuted(struct UObject* WorldContextObject, struct AFSDPlayerState* PlayerState, bool Mute, bool TrySystemWide, int32_t localUserNum); // Function FSD.PlayerCharacterFunctionLibrary.SetPlayerVoiceMuted
	bool IsPlayerVoiceMuted(struct UObject* WorldContextObject, struct AFSDPlayerState* PlayerState, int32_t localUserNum); // Function FSD.PlayerCharacterFunctionLibrary.IsPlayerVoiceMuted
	struct APlayerCharacter* GetRandomPlayer(struct UObject* WorldContextObject, bool MustBeAlive, bool MustNotBeParalyzed); // Function FSD.PlayerCharacterFunctionLibrary.GetRandomPlayer
	struct APlayerCharacter* GetNearestVisiblePlayer(struct AActor* From, float MaxDistance, bool MustBeAlive, bool MustNotBeParalyzed); // Function FSD.PlayerCharacterFunctionLibrary.GetNearestVisiblePlayer
	struct APlayerCharacter* GetNearestPlayerToPosition(struct UObject* WorldContextObject, struct FVector Position, float MaxDistance, bool MustBeAlive, bool MustBeUnparalyzed, bool XYOnly); // Function FSD.PlayerCharacterFunctionLibrary.GetNearestPlayerToPosition
	struct APlayerCharacter* GetNearestPlayerFrom(struct UObject* WorldContext, struct FVector From, float MaxDistance, bool MustBeAlive, bool MustBeUnparalyzed, bool XYOnly); // Function FSD.PlayerCharacterFunctionLibrary.GetNearestPlayerFrom
	struct APlayerCharacter* GetNearestPlayer(struct AActor* From, float MaxDistance, bool MustBeAlive, bool MustBeUnparalyzed, bool XYOnly); // Function FSD.PlayerCharacterFunctionLibrary.GetNearestPlayer
};

// Class FSD.PlayerHealthComponent
// Size: 0x368 (Inherited: 0x248)
struct UPlayerHealthComponent : UHealthComponent {
	char UnknownData_248[0x8]; // 0x248(0x08)
	struct FMulticastInlineDelegate OnFullHealthCannotHeal; // 0x250(0x10)
	struct FMulticastInlineDelegate OnHealedFromCrystalEvent; // 0x260(0x10)
	struct FMulticastInlineDelegate OnHealthRegeneratingChanged; // 0x270(0x10)
	char UnknownData_280[0x10]; // 0x280(0x10)
	struct FMulticastInlineDelegate OnPlayerHit; // 0x290(0x10)
	float MaxHealth; // 0x2a0(0x04)
	float MaxArmor; // 0x2a4(0x04)
	float ArmorDamage; // 0x2a8(0x04)
	char UnknownData_2AC[0x4]; // 0x2ac(0x04)
	float ReviveHealthReturnRatio; // 0x2b0(0x04)
	float ReviveArmorReturnRatio; // 0x2b4(0x04)
	float HealthPerCrystalVolume; // 0x2b8(0x04)
	struct FHealthRegenerationParams HealthRegeneration; // 0x2bc(0x10)
	char UnknownData_2CC[0x4]; // 0x2cc(0x04)
	struct UCurveFloat* ArmorRegenCurve; // 0x2d0(0x08)
	float ShieldRegenDelay; // 0x2d8(0x04)
	char UnknownData_2DC[0x4]; // 0x2dc(0x04)
	struct APlayerCharacter* Character; // 0x2e0(0x08)
	struct UParticleSystem* GenericImpactParticles; // 0x2e8(0x08)
	struct UParticleSystem* ShieldLinkEffect; // 0x2f0(0x08)
	struct FAudioWithCooldown AudioFriendlyFire; // 0x2f8(0x10)
	struct UParticleSystemComponent* ShieldLinkInstance; // 0x308(0x08)
	char UnknownData_310[0x4]; // 0x310(0x04)
	float InvulnerabilityDuration; // 0x314(0x04)
	float ReviveInvulnerabilityTime; // 0x318(0x04)
	char UnknownData_31C[0x24]; // 0x31c(0x24)
	struct UPlayerDamageTakenMutator* DamageTakenMutator; // 0x340(0x08)
	char UnknownData_348[0x8]; // 0x348(0x08)
	struct UStatusEffect* IronWillStatusEffect; // 0x350(0x08)
	bool IronWillActive; // 0x358(0x01)
	char UnknownData_359[0x3]; // 0x359(0x03)
	float IronWillTimeToActivate; // 0x35c(0x04)
	char UnknownData_360[0x8]; // 0x360(0x08)

	void Server_TryActivateIronWill(); // Function FSD.PlayerHealthComponent.Server_TryActivateIronWill
	void OnRep_MaxHealth(); // Function FSD.PlayerHealthComponent.OnRep_MaxHealth
	void OnRep_MaxArmor(); // Function FSD.PlayerHealthComponent.OnRep_MaxArmor
	void OnRep_ArmorDamage(float oldDamage); // Function FSD.PlayerHealthComponent.OnRep_ArmorDamage
	float GetRemainingIronWillActivationTime(); // Function FSD.PlayerHealthComponent.GetRemainingIronWillActivationTime
	bool GetIsHealthRegenerating(); // Function FSD.PlayerHealthComponent.GetIsHealthRegenerating
	bool GetIronWillActive(); // Function FSD.PlayerHealthComponent.GetIronWillActive
	float GetHealthRegeneratingTargetRatio(); // Function FSD.PlayerHealthComponent.GetHealthRegeneratingTargetRatio
	void Client_SetHealthRegenerating(bool isRegenerating); // Function FSD.PlayerHealthComponent.Client_SetHealthRegenerating
	void Client_OnFriendlyFire(struct AController* EventInstigator, struct AActor* DamageCauser); // Function FSD.PlayerHealthComponent.Client_OnFriendlyFire
	void Client_HealthFullCannotHeal(); // Function FSD.PlayerHealthComponent.Client_HealthFullCannotHeal
	bool CanActivateIronWill(); // Function FSD.PlayerHealthComponent.CanActivateIronWill
};

// Class FSD.PlayerMovementComponent
// Size: 0x6a0 (Inherited: 0x610)
struct UPlayerMovementComponent : UCharacterMovementComponent {
	bool DebugFastMove; // 0x610(0x01)
	char UnknownData_611[0x7]; // 0x611(0x07)
	struct USoundBase* SlidingOnIceSound; // 0x618(0x08)
	char UnknownData_620[0x10]; // 0x620(0x10)
	float LedgeClimbZVelocity; // 0x630(0x04)
	float MovementPenalty; // 0x634(0x04)
	char UnknownData_638[0x8]; // 0x638(0x08)
	struct APlayerCharacter* Character; // 0x640(0x08)
	struct FWeakObjectPtr<struct UCharacterStateComponent> CurrentPhysUpdateState; // 0x648(0x08)
	char UnknownData_650[0x50]; // 0x650(0x50)

	void RemoveGravityModifier(struct AActor* SourceActor); // Function FSD.PlayerMovementComponent.RemoveGravityModifier
	void AddGravityModifier(struct AActor* SourceActor, float effect); // Function FSD.PlayerMovementComponent.AddGravityModifier
};

// Class FSD.PlayerProximityTracker
// Size: 0xf8 (Inherited: 0xb0)
struct UPlayerProximityTracker : UActorComponent {
	float MaxDistanceBetweenPlayers; // 0xb0(0x04)
	float PlayerSpheresUpdateRatePerSecond; // 0xb4(0x04)
	struct TArray<struct FPlayerSphere> PlayerSpheres; // 0xb8(0x10)
	struct TArray<struct FProximityTriggerItem> LocalPlayerProximityTriggers; // 0xc8(0x10)
	struct TArray<struct FProximityTriggerItem> AnyPlayerProximityTriggers; // 0xd8(0x10)
	char UnknownData_E8[0x10]; // 0xe8(0x10)

	void Receive_RegisterForLocalPlayerProximity(struct UObject* WorldContextObject, struct FVector Location, float Distance, struct FDelegate proximityCallback, bool triggerOnlyOnce); // Function FSD.PlayerProximityTracker.Receive_RegisterForLocalPlayerProximity
	void Receive_RegisterForAnyPlayerProximity(struct UObject* WorldContextObject, struct FVector Location, float Distance, struct FDelegate proximityCallback, bool triggerOnlyOnce); // Function FSD.PlayerProximityTracker.Receive_RegisterForAnyPlayerProximity
	struct FPlayerSphere GetPrimarySphere(); // Function FSD.PlayerProximityTracker.GetPrimarySphere
	struct TArray<struct FPlayerSphere> GetPlayerSpheres(); // Function FSD.PlayerProximityTracker.GetPlayerSpheres
};

// Class FSD.PlayerRejoinState
// Size: 0x120 (Inherited: 0xb0)
struct UPlayerRejoinState : UActorComponent {
	struct APlayerCharacter* CharacterClass; // 0xb0(0x08)
	char UnknownData_B8[0x68]; // 0xb8(0x68)

	void Server_Reset(); // Function FSD.PlayerRejoinState.Server_Reset
	void Server_AddIntValue(struct FGuid ItemKey, struct FName ValueKey, int32_t Value); // Function FSD.PlayerRejoinState.Server_AddIntValue
	void Server_AddFloatValue(struct FGuid ItemKey, struct FName ValueKey, float Value); // Function FSD.PlayerRejoinState.Server_AddFloatValue
	void Client_SetValues(struct TArray<struct FRejoinFloat> floatValues, struct TArray<struct FRejoinInt> intValues); // Function FSD.PlayerRejoinState.Client_SetValues
};

// Class FSD.ResourcesComponent
// Size: 0x108 (Inherited: 0xb0)
struct UResourcesComponent : UActorComponent {
	struct FMulticastInlineDelegate OnResourceChanged; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnResourceIncreased; // 0xc0(0x10)
	struct FMulticastInlineDelegate OnResourceFull; // 0xd0(0x10)
	struct FMulticastInlineDelegate OnResourceAdded; // 0xe0(0x10)
	struct TArray<struct UCappedResource*> Resources; // 0xf0(0x10)
	float ResourceCap; // 0x100(0x04)
	char UnknownData_104[0x4]; // 0x104(0x04)

	void ResourceIncreased(struct UCappedResource* Resource, float Delta); // Function FSD.ResourcesComponent.ResourceIncreased
	void ResourceFull(struct UCappedResource* Resource); // Function FSD.ResourcesComponent.ResourceFull
	void ResourceChanged(struct UCappedResource* Resource, float currentAmount); // Function FSD.ResourcesComponent.ResourceChanged
	void OnRep_Resources(); // Function FSD.ResourcesComponent.OnRep_Resources
	int32_t GetXPFromResourceMap(struct TMap<struct UResourceData*, float> Resources); // Function FSD.ResourcesComponent.GetXPFromResourceMap
	int32_t GetXpFromMining(); // Function FSD.ResourcesComponent.GetXpFromMining
	struct TMap<struct UResourceData*, float> GetSeparateResourcesFromMap(struct TMap<struct UResourceData*, float> Resources); // Function FSD.ResourcesComponent.GetSeparateResourcesFromMap
	struct UCappedResource* GetResource(struct UResourceData* Data, bool createIfAmountIsZero); // Function FSD.ResourcesComponent.GetResource
	float GetCapacityPct(); // Function FSD.ResourcesComponent.GetCapacityPct
	struct TArray<struct UCappedResource*> GetAllResources(); // Function FSD.ResourcesComponent.GetAllResources
};

// Class FSD.PlayerResourceComponent
// Size: 0x108 (Inherited: 0x108)
struct UPlayerResourceComponent : UResourcesComponent {

	struct UPlayerResourceComponent* GetFromPlayer(struct APlayerCharacter* PlayerCharacter); // Function FSD.PlayerResourceComponent.GetFromPlayer
};

// Class FSD.PlayerStatsComponent
// Size: 0x160 (Inherited: 0xb0)
struct UPlayerStatsComponent : UActorComponent {
	struct FMulticastInlineDelegate OnKillAdded; // 0xb0(0x10)
	int32_t TotalKills; // 0xc0(0x04)
	int32_t TotalRevived; // 0xc4(0x04)
	int32_t TotalDeaths; // 0xc8(0x04)
	int32_t TotalSupplypodsRequested; // 0xcc(0x04)
	float TotalGoldMined; // 0xd0(0x04)
	float TotalMOMsMined; // 0xd4(0x04)
	float TotalMineralsMined; // 0xd8(0x04)
	float TotalXPGained; // 0xdc(0x04)
	bool EscapedInPod; // 0xe0(0x01)
	char UnknownData_E1[0x7]; // 0xe1(0x07)
	struct APlayerCharacter* LastPlayedClass; // 0xe8(0x08)
	struct FEndMissionResult EndMissionResult; // 0xf0(0x60)
	struct FMulticastInlineDelegate OnEndMissionResultReady; // 0x150(0x10)

	void SendMissionAnalytics(bool trackMorkite); // Function FSD.PlayerStatsComponent.SendMissionAnalytics
	void SendEndMissionResult(struct FEndMissionResult Result); // Function FSD.PlayerStatsComponent.SendEndMissionResult
	void OnResourceMined(struct UCappedResource* Resource, float amount); // Function FSD.PlayerStatsComponent.OnResourceMined
	void OnRep_EndMissionResult(); // Function FSD.PlayerStatsComponent.OnRep_EndMissionResult
	bool IsEndMissionResultReady(); // Function FSD.PlayerStatsComponent.IsEndMissionResultReady
	bool GetSurvivedInPod(); // Function FSD.PlayerStatsComponent.GetSurvivedInPod
	void EndMissionResultDelegate__DelegateSignature(struct FEndMissionResult Result); // DelegateFunction FSD.PlayerStatsComponent.EndMissionResultDelegate__DelegateSignature
};

// Class FSD.PlayerTemperatureComponent
// Size: 0x180 (Inherited: 0xc8)
struct UPlayerTemperatureComponent : UTemperatureComponent {
	struct FMulticastInlineDelegate OnTemperatureChanged; // 0xc8(0x10)
	struct FMulticastInlineDelegate OnTemperatureStateChanged; // 0xd8(0x10)
	struct FMulticastInlineDelegate OnTemperatureChangeRate; // 0xe8(0x10)
	struct FMulticastInlineDelegate OnDefrosting; // 0xf8(0x10)
	struct FMulticastInlineDelegate OnBarVisibilityChanged; // 0x108(0x10)
	float MinimumTemperature; // 0x118(0x04)
	float MaximumTemperature; // 0x11c(0x04)
	float DefrostTemperature; // 0x120(0x04)
	float BurnTemperature; // 0x124(0x04)
	float DouseFireTemperature; // 0x128(0x04)
	float TemperaturRegainSpeed; // 0x12c(0x04)
	float DefrostingRequired; // 0x130(0x04)
	char UnknownData_134[0x4]; // 0x134(0x04)
	struct UStatusEffect* OnDefrostedStatusEffect; // 0x138(0x08)
	float NormalTemperature; // 0x140(0x04)
	float CurrentTemperature; // 0x144(0x04)
	float TargetTemperature; // 0x148(0x04)
	char UnknownData_14C[0x9]; // 0x14c(0x09)
	int8_t TemperatureChangeSpeed; // 0x155(0x01)
	char UnknownData_156[0x2]; // 0x156(0x02)
	float DefrostProgress; // 0x158(0x04)
	bool barVisible; // 0x15c(0x01)
	char UnknownData_15D[0x13]; // 0x15d(0x13)
	struct APlayerCharacter* Character; // 0x170(0x08)
	enum class EPlayerTemperatureState TemperatureState; // 0x178(0x01)
	char UnknownData_179[0x7]; // 0x179(0x07)

	void SetNormalTemperature(); // Function FSD.PlayerTemperatureComponent.SetNormalTemperature
	void SetFrozenTemperature(); // Function FSD.PlayerTemperatureComponent.SetFrozenTemperature
	void OnRep_TemperatureState(enum class EPlayerTemperatureState oldState); // Function FSD.PlayerTemperatureComponent.OnRep_TemperatureState
	void OnRep_TemperatureChangeSpeed(int8_t OldSpeed); // Function FSD.PlayerTemperatureComponent.OnRep_TemperatureChangeSpeed
	void OnRep_DefrostProgress(); // Function FSD.PlayerTemperatureComponent.OnRep_DefrostProgress
	void OnRep_CurrentTemperature(float OldTemperature); // Function FSD.PlayerTemperatureComponent.OnRep_CurrentTemperature
	void OnDeath(struct UHealthComponentBase* Health); // Function FSD.PlayerTemperatureComponent.OnDeath
	int32_t GetTemperatureChangedSpeed(); // Function FSD.PlayerTemperatureComponent.GetTemperatureChangedSpeed
	float GetDefrostProgress(); // Function FSD.PlayerTemperatureComponent.GetDefrostProgress
	float GetCurrentTemperatureNormalized(); // Function FSD.PlayerTemperatureComponent.GetCurrentTemperatureNormalized
	void Defrost(float amount); // Function FSD.PlayerTemperatureComponent.Defrost
};

// Class FSD.PlayerTriggerBox
// Size: 0x278 (Inherited: 0x228)
struct APlayerTriggerBox : ATriggerBox {
	struct FMulticastInlineDelegate OnPlayerEntered; // 0x228(0x10)
	struct FMulticastInlineDelegate OnPlayerExited; // 0x238(0x10)
	struct FMulticastInlineDelegate OnAllPlayersEntered; // 0x248(0x10)
	struct FMulticastInlineDelegate OnAllPlayersExited; // 0x258(0x10)
	struct TArray<struct APlayerCharacter*> PlayersInside; // 0x268(0x10)

	void TriggerBoxPlayerEvent__DelegateSignature(struct APlayerCharacter* Player); // DelegateFunction FSD.PlayerTriggerBox.TriggerBoxPlayerEvent__DelegateSignature
	void TriggerBoxEvent__DelegateSignature(); // DelegateFunction FSD.PlayerTriggerBox.TriggerBoxEvent__DelegateSignature
	bool IsAnyPlayerInside(bool excludingDeadPlayers); // Function FSD.PlayerTriggerBox.IsAnyPlayerInside
	void BP_OnPlayerExited(struct APlayerCharacter* Player); // Function FSD.PlayerTriggerBox.BP_OnPlayerExited
	void BP_OnPlayerEntered(struct APlayerCharacter* Player); // Function FSD.PlayerTriggerBox.BP_OnPlayerEntered
	void BP_OnAllPlayersExited(); // Function FSD.PlayerTriggerBox.BP_OnAllPlayersExited
	void BP_OnAllPlayersEntered(); // Function FSD.PlayerTriggerBox.BP_OnAllPlayersEntered
	bool AreAllPlayersInside(bool excludingDeadPlayers); // Function FSD.PlayerTriggerBox.AreAllPlayersInside
};

// Class FSD.PlayerTriggerComponent
// Size: 0xe0 (Inherited: 0xb0)
struct UPlayerTriggerComponent : UActorComponent {
	struct FMulticastInlineDelegate OnTriggerBeginEvent; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnTriggerEndEvent; // 0xc0(0x10)
	struct UPrimitiveComponent* Collider; // 0xd0(0x08)
	char UnknownData_D8[0x8]; // 0xd8(0x08)

	void SetCollider(struct UPrimitiveComponent* Collider); // Function FSD.PlayerTriggerComponent.SetCollider
	void OnEndOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function FSD.PlayerTriggerComponent.OnEndOverlap
	void OnBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult SweepResult); // Function FSD.PlayerTriggerComponent.OnBeginOverlap
};

// Class FSD.PLSTester
// Size: 0x298 (Inherited: 0x220)
struct APLSTester : AActor {
	int32_t PLSSeed; // 0x220(0x04)
	int32_t MissionSeed; // 0x224(0x04)
	int32_t GlobalSeed; // 0x228(0x04)
	int32_t GlobalMissionIndex; // 0x22c(0x04)
	struct UMissionComplexity* limitComplexity; // 0x230(0x08)
	struct UMissionDuration* limitDuration; // 0x238(0x08)
	struct UMissionMutator* Mutator; // 0x240(0x08)
	struct TArray<struct UMissionWarning*> Warnings; // 0x248(0x10)
	struct UBiome* Biome; // 0x258(0x08)
	struct UMissionTemplate* MissionTemplate; // 0x260(0x08)
	struct UMissionTemplate* CustomMissionTemplate; // 0x268(0x08)
	struct UDifficultySetting* OverrideDifficulty; // 0x270(0x08)
	int32_t SimulatePlayerCount; // 0x278(0x04)
	char UnknownData_27C[0x4]; // 0x27c(0x04)
	struct FText CustomMissionName; // 0x280(0x18)
};

// Class FSD.PostProcessingManager
// Size: 0x250 (Inherited: 0x220)
struct APostProcessingManager : AActor {
	struct TArray<struct FWeakObjectPtr<struct AFSDPostProcessingActor>> RegisteredActors; // 0x220(0x10)
	struct TArray<struct FPostProcessingBlendable> CurrentBlendables; // 0x230(0x10)
	struct TArray<struct UMaterialInstanceDynamic*> Materials; // 0x240(0x10)
};

// Class FSD.PresenceSubSystem
// Size: 0x38 (Inherited: 0x30)
struct UPresenceSubSystem : UGameInstanceSubsystem {
	char UnknownData_30[0x8]; // 0x30(0x08)
};

// Class FSD.ProceduralController
// Size: 0xb0 (Inherited: 0xb0)
struct UProceduralController : UActorComponent {

	void Server_RequestTunnelData(); // Function FSD.ProceduralController.Server_RequestTunnelData
	void SendTunnelData(); // Function FSD.ProceduralController.SendTunnelData
	void SendRoomData(); // Function FSD.ProceduralController.SendRoomData
	void SendRequestedPLSData(); // Function FSD.ProceduralController.SendRequestedPLSData
	void SendRequestedCarverData(enum class EDebrisItemPass pass); // Function FSD.ProceduralController.SendRequestedCarverData
	void RequestPLSData(); // Function FSD.ProceduralController.RequestPLSData
	void RequestCarverData(enum class EDebrisItemPass pass); // Function FSD.ProceduralController.RequestCarverData
	void ReceivedTunnelData(struct TArray<struct FTunnelNode> Tunnels); // Function FSD.ProceduralController.ReceivedTunnelData
	void ReceivedRoomData(int32_t Seed, struct TArray<struct FRoomNode> Rooms, struct TArray<struct FPathObstacle> obstacles); // Function FSD.ProceduralController.ReceivedRoomData
	void Client_SendTunnelData(struct TArray<struct FTunnelNode> Tunnels); // Function FSD.ProceduralController.Client_SendTunnelData
	void Client_SendRoomData(int32_t Seed, struct TArray<struct FRoomNode> Rooms, struct TArray<struct FPathObstacle> obstacles); // Function FSD.ProceduralController.Client_SendRoomData
	void Client_RecieveCarverSizes(int32_t pass, int32_t carverCount); // Function FSD.ProceduralController.Client_RecieveCarverSizes
	void Client_ReceivePLSLevelCarver(int32_t pass, struct FLevelGenerationCarverLists levelCarvers); // Function FSD.ProceduralController.Client_ReceivePLSLevelCarver
	void Client_ReceivePLSInfluencers(struct FGeneratedInfluenceSets influenceSet); // Function FSD.ProceduralController.Client_ReceivePLSInfluencers
	void Client_ReceivePLSDebris(struct TArray<struct FGeneratedDebrisItem> levelDebris); // Function FSD.ProceduralController.Client_ReceivePLSDebris
};

// Class FSD.ProceduralSettings
// Size: 0x38 (Inherited: 0x30)
struct UProceduralSettings : UDataAsset {
	struct UTunnelParameters* DefaultTunnelParameters; // 0x30(0x08)
};

// Class FSD.CaveInfluencer
// Size: 0x30 (Inherited: 0x30)
struct UCaveInfluencer : UDataAsset {
};

// Class FSD.ProfilingSubSystem
// Size: 0x40 (Inherited: 0x30)
struct UProfilingSubSystem : UWorldSubsystem {
	struct TArray<struct FProfileEntry> Entries; // 0x30(0x10)

	float GetTotalTime(); // Function FSD.ProfilingSubSystem.GetTotalTime
	struct TArray<struct FProfileEntry> GetEntries(); // Function FSD.ProfilingSubSystem.GetEntries
	struct TArray<struct FProfileCategoryTiming> GetCategoryTimings(); // Function FSD.ProfilingSubSystem.GetCategoryTimings
};

// Class FSD.FakePhysicsProjectile
// Size: 0x360 (Inherited: 0x2a8)
struct AFakePhysicsProjectile : AProjectileBase {
	struct FFakeMoverState MoverState; // 0x2a8(0x60)
	struct FFakeMoveState posVel; // 0x308(0x24)
	char UnknownData_32C[0x4]; // 0x32c(0x04)
	struct UFakeMoverSettings* MoveSettings; // 0x330(0x08)
	float InitialSpeed; // 0x338(0x04)
	float DampOmega; // 0x33c(0x04)
	float SyncTime; // 0x340(0x04)
	char UnknownData_344[0x1c]; // 0x344(0x1c)

	void SphereBeginOverlap(struct UPrimitiveComponent* OverlappedComp, struct AActor* Other, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult SweepResult); // Function FSD.FakePhysicsProjectile.SphereBeginOverlap
	void OnRep_PosVel(struct FFakeMoveState posVel); // Function FSD.FakePhysicsProjectile.OnRep_PosVel
};

// Class FSD.FSDProjectileMovementComponent
// Size: 0x1d0 (Inherited: 0x1d0)
struct UFSDProjectileMovementComponent : UProjectileMovementComponent {
};

// Class FSD.ProjectileAttack
// Size: 0x50 (Inherited: 0x28)
struct UProjectileAttack : UObject {
	struct FFloatInterval Delay; // 0x28(0x08)
	bool TriggerOnEvent; // 0x30(0x01)
	char UnknownData_31[0x3]; // 0x31(0x03)
	struct FFloatInterval HorizontalAngleOffset; // 0x34(0x08)
	struct FFloatInterval VerticalAngleOffset; // 0x3c(0x08)
	struct FName OverrideSocketName; // 0x44(0x08)
	char UnknownData_4C[0x4]; // 0x4c(0x04)
};

// Class FSD.NormalProjectileAttack
// Size: 0x60 (Inherited: 0x50)
struct UNormalProjectileAttack : UProjectileAttack {
	struct AProjectile* Projectile; // 0x50(0x08)
	float RandomAngle; // 0x58(0x04)
	char UnknownData_5C[0x4]; // 0x5c(0x04)
};

// Class FSD.BallisticProjectileAttack
// Size: 0x60 (Inherited: 0x50)
struct UBallisticProjectileAttack : UProjectileAttack {
	struct AProjectile* Projectile; // 0x50(0x08)
	float ProjectileArc; // 0x58(0x04)
	float Gravity; // 0x5c(0x04)
};

// Class FSD.ProjectileAttackComponent
// Size: 0x180 (Inherited: 0xf0)
struct UProjectileAttackComponent : UAttackBaseComponent {
	struct TArray<struct UProjectileAttack*> Projectiles; // 0xf0(0x10)
	struct TArray<struct UAnimMontage*> Montages; // 0x100(0x10)
	struct FName SocketName; // 0x110(0x08)
	bool UseSocketForRotation; // 0x118(0x01)
	char UnknownData_119[0xf]; // 0x119(0x0f)
	struct FMulticastInlineDelegate OnAttackStartedEvent; // 0x128(0x10)
	struct FMulticastInlineDelegate OnProjectileFiredEvent; // 0x138(0x10)
	struct FMulticastInlineDelegate OnAttackEndedEvent; // 0x148(0x10)
	bool ProjectilesIgnoreEachOther; // 0x158(0x01)
	char UnknownData_159[0x27]; // 0x159(0x27)

	struct UAnimMontage* SelectMontage(); // Function FSD.ProjectileAttackComponent.SelectMontage
	void OnPerformAttack(); // Function FSD.ProjectileAttackComponent.OnPerformAttack
	void OnMontageEnded(struct UAnimMontage* Montage, bool interrupted); // Function FSD.ProjectileAttackComponent.OnMontageEnded
	void AddAttackMontage(struct UAnimMontage* attackMontage); // Function FSD.ProjectileAttackComponent.AddAttackMontage
};

// Class FSD.ExplosionBaseComponent
// Size: 0xc8 (Inherited: 0xb0)
struct UExplosionBaseComponent : UActorComponent {
	float CarveDiameterCM; // 0xb0(0x04)
	float CarveNoiseCM; // 0xb4(0x04)
	float CarveBurnThicknessCM; // 0xb8(0x04)
	float CarveNormalOffsetCM; // 0xbc(0x04)
	float CarveNormalSqueeze; // 0xc0(0x04)
	char UnknownData_C4[0x4]; // 0xc4(0x04)

	void DamageOnly(struct FVector Location, struct FName BoneName, struct UPrimitiveComponent* Target, struct UPhysicalMaterial* PhysicalMaterial, struct UDamageComponent* DamageComponent); // Function FSD.ExplosionBaseComponent.DamageOnly
	void DamageArmorClients(struct AActor* Target, struct FName BoneName, struct UDamageComponent* DamageComponent); // Function FSD.ExplosionBaseComponent.DamageArmorClients
	void DamageAndCarve(struct FVector Location, struct FVector ImpactNormal, struct FName BoneName, struct UPrimitiveComponent* Target, struct UPhysicalMaterial* PhysicalMaterial, struct UDamageComponent* DamageComponent); // Function FSD.ExplosionBaseComponent.DamageAndCarve
};

// Class FSD.ExplosionComponent
// Size: 0xc8 (Inherited: 0xc8)
struct UExplosionComponent : UExplosionBaseComponent {
};

// Class FSD.ProjectileExplosion
// Size: 0xf0 (Inherited: 0xc8)
struct UProjectileExplosion : UExplosionBaseComponent {
	struct FScaledEffect ExplosionEffect; // 0xc8(0x10)
	struct USoundCue* ExplosionSound; // 0xd8(0x08)
	struct UForceFeedbackEffect* ForceFeedbackEffect; // 0xe0(0x08)
	struct UForceFeedbackAttenuation* ForceFeedbackAttanuation; // 0xe8(0x08)

	void SpawnEffects(struct FVector Location, struct FVector Normal); // Function FSD.ProjectileExplosion.SpawnEffects
};

// Class FSD.ProjectileLauncherBaseComponent
// Size: 0x158 (Inherited: 0x110)
struct UProjectileLauncherBaseComponent : UWeaponFireComponent {
	bool UseSpread; // 0x110(0x01)
	char UnknownData_111[0x3]; // 0x111(0x03)
	float VerticalSpread; // 0x114(0x04)
	float HorizontalSpread; // 0x118(0x04)
	char UnknownData_11C[0x4]; // 0x11c(0x04)
	struct FMulticastInlineDelegate OnProjectileSpawned; // 0x120(0x10)
	struct TArray<struct UItemUpgrade*> ProjectileUpgrades; // 0x130(0x10)
	float ArcStartAngle; // 0x140(0x04)
	bool TransferCharacterVelocityToProjectile; // 0x144(0x01)
	char UnknownData_145[0x13]; // 0x145(0x13)

	void Server_StopFire(); // Function FSD.ProjectileLauncherBaseComponent.Server_StopFire
	void Server_Fire(struct FVector Origin, struct FVector_NetQuantizeNormal Direction, struct FVector_NetQuantizeNormal initialBonusVelocity, struct AProjectileBase* DormentProjectile); // Function FSD.ProjectileLauncherBaseComponent.Server_Fire
	void ProjectileSpawned__DelegateSignature(struct AProjectileBase* Projectile); // DelegateFunction FSD.ProjectileLauncherBaseComponent.ProjectileSpawned__DelegateSignature
	void All_ShowHit(); // Function FSD.ProjectileLauncherBaseComponent.All_ShowHit
};

// Class FSD.ProjectileLauncherComponent
// Size: 0x160 (Inherited: 0x158)
struct UProjectileLauncherComponent : UProjectileLauncherBaseComponent {
	struct AProjectileBase* projectileClass; // 0x158(0x08)

	void SetProjectileClass(struct AProjectileBase* NewProjectileClass); // Function FSD.ProjectileLauncherComponent.SetProjectileClass
};

// Class FSD.ChargedProjectileLauncherComponent
// Size: 0x168 (Inherited: 0x158)
struct UChargedProjectileLauncherComponent : UProjectileLauncherBaseComponent {
	struct AProjectileBase* NormalProjectileClass; // 0x158(0x08)
	struct AProjectileBase* ChargedProjectileClass; // 0x160(0x08)
};

// Class FSD.PromotionRewardsSettings
// Size: 0x90 (Inherited: 0x30)
struct UPromotionRewardsSettings : UDataAsset {
	struct TArray<struct FClaimableRewardEntry> FirstPromotionRewards; // 0x30(0x10)
	struct TMap<int32_t, struct FPromotionRewardsRank> PromotionRanks; // 0x40(0x50)
};

// Class FSD.PromotionRewardsLibrary
// Size: 0x28 (Inherited: 0x28)
struct UPromotionRewardsLibrary : UBlueprintFunctionLibrary {

	bool ClaimPromotionRewards(struct UObject* WorldContext, struct APlayerController* PlayerController, struct TArray<struct FClaimableRewardEntry> OutRewards, bool OutFirstPromotion); // Function FSD.PromotionRewardsLibrary.ClaimPromotionRewards
};

// Class FSD.PushingState
// Size: 0x100 (Inherited: 0xf8)
struct UPushingState : UCharacterStateComponent {
	struct UUseAnimationSetting* PushingAnimation; // 0xf8(0x08)
};

// Class FSD.RadarPointComponent
// Size: 0xd0 (Inherited: 0xb0)
struct URadarPointComponent : UActorComponent {
	struct FMulticastInlineDelegate OnRemove; // 0xb0(0x10)
	float PointPriority; // 0xc0(0x04)
	char UnknownData_C4[0x4]; // 0xc4(0x04)
	struct UUserWidget* WidgetClass; // 0xc8(0x08)

	void MapToRadarPosition(struct FVector playerPos, struct FVector playerForward, struct FVector Pos, bool snap, struct FVector radarPos, float alpha); // Function FSD.RadarPointComponent.MapToRadarPosition
};

// Class FSD.NetworkedRadarPointComponent
// Size: 0xd0 (Inherited: 0xd0)
struct UNetworkedRadarPointComponent : URadarPointComponent {
};

// Class FSD.RagdollManager
// Size: 0xc0 (Inherited: 0xb0)
struct URagdollManager : UActorComponent {
	struct TArray<struct FRagdollItem> Items; // 0xb0(0x10)

	void StartRagdoll(struct AActor* Actor, struct TArray<struct UMaterialInstanceDynamic*> Materials, float desiredDuration); // Function FSD.RagdollManager.StartRagdoll
};

// Class FSD.RandomSelectorItem
// Size: 0x230 (Inherited: 0x228)
struct ARandomSelectorItem : AGenerationItem {
	int32_t Min; // 0x228(0x04)
	int32_t Max; // 0x22c(0x04)
};

// Class FSD.RandRangeFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct URandRangeFunctionLibrary : UBlueprintFunctionLibrary {

	bool TryPickRandomText(struct TArray<struct FText> TextArray, struct FRandomStream RandomStream, struct FText OutResult); // Function FSD.RandRangeFunctionLibrary.TryPickRandomText
	struct FText PickRandomText(struct TArray<struct FText> TextArray, struct FRandomStream RandomStream); // Function FSD.RandRangeFunctionLibrary.PickRandomText
	int32_t GetValueFromStream(struct FIRandRange RandRange, struct FRandomStream RandomStream); // Function FSD.RandRangeFunctionLibrary.GetValueFromStream
	float GetFloatValue(struct FRandRange RandRange); // Function FSD.RandRangeFunctionLibrary.GetFloatValue
	float GetFloatFromStream(struct FRandRange RandRange, struct FRandomStream RandomStream); // Function FSD.RandRangeFunctionLibrary.GetFloatFromStream
};

// Class FSD.RandIntervalFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct URandIntervalFunctionLibrary : UBlueprintFunctionLibrary {

	float GetFloatValue(struct FRandInterval RandInterval); // Function FSD.RandIntervalFunctionLibrary.GetFloatValue
};

// Class FSD.RDGComponent
// Size: 0xc0 (Inherited: 0xb0)
struct URDGComponent : UActorComponent {
	struct FMulticastInlineDelegate OnDetonated; // 0xb0(0x10)
};

// Class FSD.RDGLauncher
// Size: 0x6a0 (Inherited: 0x690)
struct ARDGLauncher : AAmmoDrivenWeapon {
	struct TArray<struct URDGComponent*> ActiveGrenades; // 0x690(0x10)

	void Server_DetonateAll(); // Function FSD.RDGLauncher.Server_DetonateAll
	void RegisterGrenade(struct URDGComponent* Grenade); // Function FSD.RDGLauncher.RegisterGrenade
};

// Class FSD.ReactiveTerrain
// Size: 0x28 (Inherited: 0x28)
struct UReactiveTerrain : UObject {

	void Receive_OnActorLeft(struct UStatusEffectsComponent* StatusEffects); // Function FSD.ReactiveTerrain.Receive_OnActorLeft
	void Receive_OnActorEntered(struct UStatusEffectsComponent* StatusEffects); // Function FSD.ReactiveTerrain.Receive_OnActorEntered
};

// Class FSD.StatusEffectReactiveTerrain
// Size: 0x30 (Inherited: 0x28)
struct UStatusEffectReactiveTerrain : UReactiveTerrain {
	struct UStatusEffect* StatusEffect; // 0x28(0x08)
};

// Class FSD.ReactiveTerrainTrackerComponent
// Size: 0xb0 (Inherited: 0xb0)
struct UReactiveTerrainTrackerComponent : UActorComponent {
};

// Class FSD.PlayerReactiveTerrainTrackerComponent
// Size: 0xb8 (Inherited: 0xb0)
struct UPlayerReactiveTerrainTrackerComponent : UReactiveTerrainTrackerComponent {
	struct UFSDPhysicalMaterial* CurrentPhysicalMaterial; // 0xb0(0x08)
};

// Class FSD.PathfinderReactiveTerrainTrackerComponent
// Size: 0xd0 (Inherited: 0xb0)
struct UPathfinderReactiveTerrainTrackerComponent : UReactiveTerrainTrackerComponent {
	struct FRandRange CheckInterval; // 0xb0(0x08)
	struct UFSDPhysicalMaterial* CurrentPhysicalMaterial; // 0xb8(0x08)
	struct UStatusEffectsComponent* StatusEffectsComponent; // 0xc0(0x08)
	char UnknownData_C8[0x8]; // 0xc8(0x08)
};

// Class FSD.RecallableActor
// Size: 0x420 (Inherited: 0x378)
struct ARecallableActor : ADeepPathfinderCharacter {
	char UnknownData_378[0x8]; // 0x378(0x08)
	struct FMulticastInlineDelegate OnStateChanged; // 0x380(0x10)
	struct FMulticastInlineDelegate OnReturnFinish; // 0x390(0x10)
	struct FMulticastInlineDelegate OnRelocateFinished; // 0x3a0(0x10)
	float AcceptanceRadius; // 0x3b0(0x04)
	float AutoRecallDistance; // 0x3b4(0x04)
	float RelocateLandingHeight; // 0x3b8(0x04)
	char UnknownData_3BC[0x4]; // 0x3bc(0x04)
	struct AActor* RelocationMarkerType; // 0x3c0(0x08)
	struct FWeakObjectPtr<struct AActor> RecallTarget; // 0x3c8(0x08)
	enum class ERecallableActorState State; // 0x3d0(0x01)
	char UnknownData_3D1[0xf]; // 0x3d1(0x0f)
	struct FTransform RelocateTransform; // 0x3e0(0x30)
	bool RelocateLanded; // 0x410(0x01)
	char UnknownData_411[0x3]; // 0x411(0x03)
	struct FWeakObjectPtr<struct AActor> RelocationMarker; // 0x414(0x08)
	bool bInitialized; // 0x41c(0x01)
	char UnknownData_41D[0x3]; // 0x41d(0x03)

	void SetRecallTarget(struct AActor* NewTarget); // Function FSD.RecallableActor.SetRecallTarget
	void Relocate(struct FVector NewLocation, struct FRotator NewRotation); // Function FSD.RecallableActor.Relocate
	void ReceiveOnStateChanged(); // Function FSD.RecallableActor.ReceiveOnStateChanged
	void RecallableActorStateChanged__DelegateSignature(struct ARecallableActor* Sender, enum class ERecallableActorState State); // DelegateFunction FSD.RecallableActor.RecallableActorStateChanged__DelegateSignature
	void Recall(); // Function FSD.RecallableActor.Recall
	void OnReturnSucceeded(); // Function FSD.RecallableActor.OnReturnSucceeded
	void OnReturnFailed(); // Function FSD.RecallableActor.OnReturnFailed
	void OnRep_State(enum class ERecallableActorState oldState); // Function FSD.RecallableActor.OnRep_State
	void OnRep_RecallTarget(); // Function FSD.RecallableActor.OnRep_RecallTarget
	void OnRelocated(); // Function FSD.RecallableActor.OnRelocated
	void OnRecallTargetChanged(struct AActor* NewTarget); // Function FSD.RecallableActor.OnRecallTargetChanged
	void OnPathFinished(bool success); // Function FSD.RecallableActor.OnPathFinished
	void OnMoving(); // Function FSD.RecallableActor.OnMoving
	void OnMoveRequested(); // Function FSD.RecallableActor.OnMoveRequested
	void OnMoveFinished(bool returnedHome); // Function FSD.RecallableActor.OnMoveFinished
	bool GetIsReturning(); // Function FSD.RecallableActor.GetIsReturning
	bool GetIsMovingOrMoveRequested(); // Function FSD.RecallableActor.GetIsMovingOrMoveRequested
	bool GetIsMoving(); // Function FSD.RecallableActor.GetIsMoving
	bool GetIsMoveRequested(); // Function FSD.RecallableActor.GetIsMoveRequested
	void BeginMove(); // Function FSD.RecallableActor.BeginMove
};

// Class FSD.RecallableItem
// Size: 0x388 (Inherited: 0x368)
struct ARecallableItem : AAnimatedItem {
	char UnknownData_368[0x8]; // 0x368(0x08)
	struct ARecallableActor* ItemType; // 0x370(0x08)
	struct TArray<struct FWeakObjectPtr<struct ARecallableActor>> ActiveItems; // 0x378(0x10)

	void ServerSpawnItem(struct FVector Location, struct FRotator Rotation); // Function FSD.RecallableItem.ServerSpawnItem
	void ReceiveOnItemSpawned(struct ARecallableActor* Item); // Function FSD.RecallableItem.ReceiveOnItemSpawned
	void OnRep_ActiveItems(); // Function FSD.RecallableItem.OnRep_ActiveItems
	void ItemReturnFinished(struct AActor* Item, bool success); // Function FSD.RecallableItem.ItemReturnFinished
	bool CanSpawnItem(struct FVector Location, struct FRotator Rotation); // Function FSD.RecallableItem.CanSpawnItem
};

// Class FSD.SentryGun
// Size: 0x400 (Inherited: 0x220)
struct ASentryGun : AActor {
	char UnknownData_220[0x10]; // 0x220(0x10)
	struct FMulticastInlineDelegate OnEnabledChanged; // 0x230(0x10)
	struct FMulticastInlineDelegate OnAmmoCountChanged; // 0x240(0x10)
	struct FMulticastInlineDelegate OnMaxAmmoCountChanged; // 0x250(0x10)
	struct USkeletalMeshComponent* SentryGunMesh; // 0x260(0x08)
	struct TArray<struct FSentryGunMuzzleSetup> SentryGunMuzzels; // 0x268(0x10)
	char UnknownData_278[0x10]; // 0x278(0x10)
	struct AProjectile* projectileClass; // 0x288(0x08)
	struct USoundCue* ShootingSound; // 0x290(0x08)
	struct UParticleSystem* MuzzleFlash; // 0x298(0x08)
	struct FTracerData TracerData; // 0x2a0(0x30)
	struct UParticleSystem* Tracer; // 0x2d0(0x08)
	float MinTracerDistance; // 0x2d8(0x04)
	float AngleRestriction; // 0x2dc(0x04)
	bool Enabled; // 0x2e0(0x01)
	char UnknownData_2E1[0x7]; // 0x2e1(0x07)
	struct TArray<struct FOverlapResult> OverlapCache; // 0x2e8(0x10)
	struct FRotator MinRotation; // 0x2f8(0x0c)
	struct FRotator MaxRotation; // 0x304(0x0c)
	float AquisitionRange; // 0x310(0x04)
	float RotationSpeed; // 0x314(0x04)
	float ShotCoolDown; // 0x318(0x04)
	float TargetLeading; // 0x31c(0x04)
	int32_t BurstCount; // 0x320(0x04)
	float BurstShotCoolDown; // 0x324(0x04)
	float IdleScanAngle; // 0x328(0x04)
	float IdleScanSpeed; // 0x32c(0x04)
	float FinalShotFadeOut; // 0x330(0x04)
	char UnknownData_334[0x4]; // 0x334(0x04)
	struct USoundBase* AudioOnTurn; // 0x338(0x08)
	struct FGameplayTagContainer DissallowedTargetTags; // 0x340(0x20)
	char UnknownData_360[0x18]; // 0x360(0x18)
	int32_t AmmoCount; // 0x378(0x04)
	int32_t MaxAmmoCount; // 0x37c(0x04)
	float Damage; // 0x380(0x04)
	float TargetYaw; // 0x384(0x04)
	float TargetPitch; // 0x388(0x04)
	struct FWeakObjectPtr<struct UHealthComponentBase> LastTarget; // 0x38c(0x08)
	struct FWeakObjectPtr<struct UHealthComponentBase> PrioritizedTarget; // 0x394(0x08)
	char UnknownData_39C[0x1c]; // 0x39c(0x1c)
	struct UWeaponFireComponent* WeaponFire; // 0x3b8(0x08)
	char UnknownData_3C0[0x30]; // 0x3c0(0x30)
	struct UAudioComponent* ShootingAudioComponent; // 0x3f0(0x08)
	char UnknownData_3F8[0x8]; // 0x3f8(0x08)

	void UseAmmo(int32_t amount); // Function FSD.SentryGun.UseAmmo
	void ReceiveAmmoChanged(int32_t Delta, int32_t currentAmount); // Function FSD.SentryGun.ReceiveAmmoChanged
	void OnRep_MaxAmmoCount(int32_t OldCount); // Function FSD.SentryGun.OnRep_MaxAmmoCount
	void OnRep_LastTarget(); // Function FSD.SentryGun.OnRep_LastTarget
	void OnRep_AmmoCount(int32_t OldCount); // Function FSD.SentryGun.OnRep_AmmoCount
	void OnProjectileFired(struct FVector Location); // Function FSD.SentryGun.OnProjectileFired
	void OnNewTargetRequested(struct FLaserPointerTarget HitInfo); // Function FSD.SentryGun.OnNewTargetRequested
	struct FTransform GetMuzzleTransform(); // Function FSD.SentryGun.GetMuzzleTransform
	struct FName GetMuzzleName(); // Function FSD.SentryGun.GetMuzzleName
	int32_t GetMaxAmmoCount(); // Function FSD.SentryGun.GetMaxAmmoCount
	float GetDeployProgress(); // Function FSD.SentryGun.GetDeployProgress
	float GetAmmoLeftPct(); // Function FSD.SentryGun.GetAmmoLeftPct
	int32_t GetAmmoLeft(); // Function FSD.SentryGun.GetAmmoLeft
	void EnabledChanged__DelegateSignature(bool IsEnabled); // DelegateFunction FSD.SentryGun.EnabledChanged__DelegateSignature
	void AmmoSpent(); // Function FSD.SentryGun.AmmoSpent
};

// Class FSD.RedeployableSentryGun
// Size: 0x4b0 (Inherited: 0x400)
struct ARedeployableSentryGun : ASentryGun {
	struct FMulticastInlineDelegate OnStateChanged; // 0x400(0x10)
	struct FMulticastInlineDelegate OnDeployFinished; // 0x410(0x10)
	struct FMulticastInlineDelegate OnDismantleFinished; // 0x420(0x10)
	struct FMulticastInlineDelegate OnDeployProgressEvent; // 0x430(0x10)
	struct UActorTrackingComponent* ActorTrackingIcon; // 0x440(0x08)
	struct UOutlineComponent* outline; // 0x448(0x08)
	struct FWeakObjectPtr<struct APlayerCharacter> SentryGunOwner; // 0x450(0x08)
	bool bOutlineAndIconVisible; // 0x458(0x01)
	enum class ERedeployableSentryGunState State; // 0x459(0x01)
	char UnknownData_45A[0x16]; // 0x45a(0x16)
	float PlasmaLineMaxRange; // 0x470(0x04)
	char UnknownData_474[0x4]; // 0x474(0x04)
	struct TArray<struct ASentryElectroBeam*> PlasmaLines; // 0x478(0x10)
	struct ASentryElectroBeam* PlasmaBeamClass; // 0x488(0x08)
	struct AActor* ElectrocutionActorClass; // 0x490(0x08)
	struct AActor* ElectrocutionActor; // 0x498(0x08)
	struct AActor* EMPDischargeActorClass; // 0x4a0(0x08)
	float EMPDiscargeCooldown; // 0x4a8(0x04)
	char UnknownData_4AC[0x4]; // 0x4ac(0x04)

	void ToggleOutlineAndIcon(bool Visible); // Function FSD.RedeployableSentryGun.ToggleOutlineAndIcon
	void SetSentryGunOwner(struct APlayerCharacter* Character); // Function FSD.RedeployableSentryGun.SetSentryGunOwner
	void ReceiveOnStateChanged(); // Function FSD.RedeployableSentryGun.ReceiveOnStateChanged
	void ReceiveOnSentryGunOwnerChanged(); // Function FSD.RedeployableSentryGun.ReceiveOnSentryGunOwnerChanged
	void ReceiveOnDismantled(); // Function FSD.RedeployableSentryGun.ReceiveOnDismantled
	void ReceiveOnDismantle(); // Function FSD.RedeployableSentryGun.ReceiveOnDismantle
	void ReceiveOnDeployed(); // Function FSD.RedeployableSentryGun.ReceiveOnDeployed
	void ReceiveOnDeploy(); // Function FSD.RedeployableSentryGun.ReceiveOnDeploy
	void OnStateChanged__DelegateSignature(struct ARedeployableSentryGun* Sender, enum class ERedeployableSentryGunState NewState); // DelegateFunction FSD.RedeployableSentryGun.OnStateChanged__DelegateSignature
	void OnRep_State(enum class ERedeployableSentryGunState oldState); // Function FSD.RedeployableSentryGun.OnRep_State
	void OnRep_SentryGunOwner(); // Function FSD.RedeployableSentryGun.OnRep_SentryGunOwner
	void OnElectrocutionActorDestroyed(struct AActor* Actor); // Function FSD.RedeployableSentryGun.OnElectrocutionActorDestroyed
	void OnDismantleFinished__DelegateSignature(); // DelegateFunction FSD.RedeployableSentryGun.OnDismantleFinished__DelegateSignature
	void OnDeployProgress__DelegateSignature(float Progress); // DelegateFunction FSD.RedeployableSentryGun.OnDeployProgress__DelegateSignature
	void OnDeployFinished__DelegateSignature(); // DelegateFunction FSD.RedeployableSentryGun.OnDeployFinished__DelegateSignature
	bool GetIsDismantled(); // Function FSD.RedeployableSentryGun.GetIsDismantled
	bool GetIsDeployed(); // Function FSD.RedeployableSentryGun.GetIsDeployed
	float GetAnimDuration(struct USkeletalMeshComponent* Mesh); // Function FSD.RedeployableSentryGun.GetAnimDuration
	void DismantleFinished(); // Function FSD.RedeployableSentryGun.DismantleFinished
	void Dismantle(); // Function FSD.RedeployableSentryGun.Dismantle
	void DeployFinished(); // Function FSD.RedeployableSentryGun.DeployFinished
	void Deploy(); // Function FSD.RedeployableSentryGun.Deploy
	void ActivateSpecialAttack(); // Function FSD.RedeployableSentryGun.ActivateSpecialAttack
};

// Class FSD.RefineryObjective
// Size: 0x1e0 (Inherited: 0x150)
struct URefineryObjective : UObjective {
	struct FMulticastInlineDelegate OnRefinerySpawned; // 0x150(0x10)
	SoftClassProperty refineryClass; // 0x160(0x28)
	struct FWeakObjectPtr<struct AFSDRefinery> Refinery; // 0x188(0x08)
	enum class ERefineryState RefineryState; // 0x190(0x01)
	char UnknownData_191[0x7]; // 0x191(0x07)
	struct UDebrisPositioning* RefineryPlacement; // 0x198(0x08)
	SoftClassProperty RawMaterialClass; // 0x1a0(0x28)
	struct UDebrisPositioning* RawMaterialPlacement; // 0x1c8(0x08)
	int32_t RawMaterialCount; // 0x1d0(0x04)
	bool bMissionCompleted; // 0x1d4(0x01)
	bool bIsFinalBattle; // 0x1d5(0x01)
	char UnknownData_1D6[0x2]; // 0x1d6(0x02)
	int32_t OptionalTunnelRoomID; // 0x1d8(0x04)
	char UnknownData_1DC[0x4]; // 0x1dc(0x04)

	void SpawnWells(struct AProceduralSetup* setup, struct FVector rigLocation, float minDistanceBetween, struct TArray<struct FVector2D> minMaxDistancesToRig); // Function FSD.RefineryObjective.SpawnWells
	void RefineryDelegate__DelegateSignature(struct AFSDRefinery* InRefinery); // DelegateFunction FSD.RefineryObjective.RefineryDelegate__DelegateSignature
	void ReceiveRefinerySpawned(struct AFSDRefinery* InRefinery); // Function FSD.RefineryObjective.ReceiveRefinerySpawned
	void OnRep_Refinery(); // Function FSD.RefineryObjective.OnRep_Refinery
	void OnRefineryStateChanged(enum class ERefineryState InRefineryState); // Function FSD.RefineryObjective.OnRefineryStateChanged
	struct FVector GetRefinerySpawnLocation(struct AFSDRefinery* refineryClass); // Function FSD.RefineryObjective.GetRefinerySpawnLocation
	void AddMissionCriticalItems(struct AProceduralSetup* setup); // Function FSD.RefineryObjective.AddMissionCriticalItems
};

// Class FSD.RegisterInviteNotificationBlueprintCallProxy
// Size: 0x98 (Inherited: 0x30)
struct URegisterInviteNotificationBlueprintCallProxy : UOnlineBlueprintCallProxyBase {
	struct FMulticastInlineDelegate OnInviteReceived; // 0x30(0x10)
	struct FMulticastInlineDelegate OnInviteAccepted; // 0x40(0x10)
	struct FMulticastInlineDelegate OnInviteRejected; // 0x50(0x10)
	struct UObject* WorldContextObject; // 0x60(0x08)
	char UnknownData_68[0x30]; // 0x68(0x30)

	struct URegisterInviteNotificationBlueprintCallProxy* RegisterInvitiNotification(struct UObject* WorldContextObject); // Function FSD.RegisterInviteNotificationBlueprintCallProxy.RegisterInvitiNotification
};

// Class FSD.RegisterSessionInviteNotificationBlueprintCallProxy
// Size: 0x58 (Inherited: 0x30)
struct URegisterSessionInviteNotificationBlueprintCallProxy : UOnlineBlueprintCallProxyBase {
	struct FMulticastInlineDelegate OnSessionUserInviteAccepted; // 0x30(0x10)
	struct UObject* WorldContextObject; // 0x40(0x08)
	char UnknownData_48[0x10]; // 0x48(0x10)

	struct URegisterSessionInviteNotificationBlueprintCallProxy* RegisterSessionInviteNotification(struct UObject* WorldContextObject); // Function FSD.RegisterSessionInviteNotificationBlueprintCallProxy.RegisterSessionInviteNotification
};

// Class FSD.RejectInviteBlueprintCallProxy
// Size: 0x90 (Inherited: 0x30)
struct URejectInviteBlueprintCallProxy : UOnlineBlueprintCallProxyBase {
	struct FMulticastInlineDelegate OnSuccess; // 0x30(0x10)
	struct FMulticastInlineDelegate OnFailure; // 0x40(0x10)
	struct UObject* WorldContextObject; // 0x50(0x08)
	char UnknownData_58[0x38]; // 0x58(0x38)

	struct URejectInviteBlueprintCallProxy* RejectInvite(struct UObject* WorldContextObject, struct FString ListName, struct FString userId); // Function FSD.RejectInviteBlueprintCallProxy.RejectInvite
};

// Class FSD.RepairObjective
// Size: 0x1c0 (Inherited: 0x150)
struct URepairObjective : UObjective {
	int32_t RepairedObjectives; // 0x150(0x04)
	int32_t ObjectivesToRepair; // 0x154(0x04)
	SoftClassProperty RepairObjectiveClass; // 0x158(0x28)
	struct UGemResourceData* RepairObjectiveResource; // 0x180(0x08)
	struct UDebrisPositioning* Positioning; // 0x188(0x08)
	int32_t RepairResourcesPerActor; // 0x190(0x04)
	float RepairResourceDistanceFromActor; // 0x194(0x04)
	float MinRepairObjectiveDistanceToLandingZone; // 0x198(0x04)
	char UnknownData_19C[0x4]; // 0x19c(0x04)
	struct TArray<struct AActor*> RepairedObjectivesList; // 0x1a0(0x10)
	char UnknownData_1B0[0x10]; // 0x1b0(0x10)

	void OnRep_RepairedObjectives(); // Function FSD.RepairObjective.OnRep_RepairedObjectives
	void OnRep_ObjectivesToRepair(); // Function FSD.RepairObjective.OnRep_ObjectivesToRepair
	void OnObjectiveRepaired(struct URepairableComponent* repairable); // Function FSD.RepairObjective.OnObjectiveRepaired
	void AllObjectivesRepaired(); // Function FSD.RepairObjective.AllObjectivesRepaired
};

// Class FSD.ResourceBank
// Size: 0x140 (Inherited: 0xd8)
struct UResourceBank : UUsableComponentBase {
	struct FMulticastInlineDelegate OnBeginDeposite; // 0xd8(0x10)
	struct FMulticastInlineDelegate OnDepositing; // 0xe8(0x10)
	struct FMulticastInlineDelegate OnEndDeposite; // 0xf8(0x10)
	bool OpenForDeposit; // 0x108(0x01)
	char UnknownData_109[0x7]; // 0x109(0x07)
	struct AFSDGameState* GameState; // 0x110(0x08)
	float DepositesPerSecond; // 0x118(0x04)
	float DepositeAmount; // 0x11c(0x04)
	char UnknownData_120[0x4]; // 0x120(0x04)
	bool CanGetStrict; // 0x124(0x01)
	bool AddToTeamInventory; // 0x125(0x01)
	char UnknownData_126[0x2]; // 0x126(0x02)
	struct USoundBase* AudioBeginDepositing; // 0x128(0x08)
	struct USoundBase* AudioDepositing; // 0x130(0x08)
	struct USoundBase* AudioEndDepositing; // 0x138(0x08)

	void ResourceBankEvent__DelegateSignature(struct APlayerCharacter* User); // DelegateFunction FSD.ResourceBank.ResourceBankEvent__DelegateSignature
	void All_Depositing(struct APlayerCharacter* Character); // Function FSD.ResourceBank.All_Depositing
};

// Class FSD.RestrictedResourceBank
// Size: 0x148 (Inherited: 0x140)
struct URestrictedResourceBank : UResourceBank {
	struct UResourceData* RequiredResource; // 0x140(0x08)
};

// Class FSD.ResourceChunk
// Size: 0x288 (Inherited: 0x230)
struct AResourceChunk : AFSDPhysicsActor {
	float CollectDuration; // 0x230(0x04)
	bool CanBeCollectedNormally; // 0x234(0x01)
	bool CanBeCollected; // 0x235(0x01)
	char UnknownData_236[0x2]; // 0x236(0x02)
	struct USimpleObjectInfoComponent* InfoComponent; // 0x238(0x08)
	float ResourceAmount; // 0x240(0x04)
	char UnknownData_244[0x4]; // 0x244(0x04)
	struct USoundCue* PickupSound; // 0x248(0x08)
	struct UResourceData* ResourceData; // 0x250(0x08)
	struct TArray<struct APlayerCharacter*> OverlappingPlayers; // 0x258(0x10)
	struct FWeakObjectPtr<struct APlayerCharacter> CollectedBy; // 0x268(0x08)
	char UnknownData_270[0x18]; // 0x270(0x18)

	void SetCollectOpen(); // Function FSD.ResourceChunk.SetCollectOpen
	void OnRep_CollectedBy(); // Function FSD.ResourceChunk.OnRep_CollectedBy
	struct UResourceData* GetResourceData(); // Function FSD.ResourceChunk.GetResourceData
	float GetResourceAmount(); // Function FSD.ResourceChunk.GetResourceAmount
	void CalcMovement(float InProgress, struct FVector InVector, struct FVector OutVelocity, struct FVector OutAngularVelocity); // Function FSD.ResourceChunk.CalcMovement
};

// Class FSD.ResourceCreator
// Size: 0x30 (Inherited: 0x30)
struct UResourceCreator : UDataAsset {
};

// Class FSD.VeinResourceCreator
// Size: 0x78 (Inherited: 0x30)
struct UVeinResourceCreator : UResourceCreator {
	struct UVeinResourceData* Resource; // 0x30(0x08)
	struct UDebrisPositioning* Positioning; // 0x38(0x08)
	enum class ECarveFilterType CarveType; // 0x40(0x01)
	char UnknownData_41[0x3]; // 0x41(0x03)
	float SegmentMaxDot; // 0x44(0x04)
	float VeinWorldHorizontalMaxDot; // 0x48(0x04)
	float VeinWorldHorizontalMinDot; // 0x4c(0x04)
	struct FRandRange VeinLength; // 0x50(0x08)
	struct UFloodFillSettings* Noise; // 0x58(0x08)
	float Range; // 0x60(0x04)
	float NoiseRange; // 0x64(0x04)
	struct TArray<struct TSoftObjectPtr<struct UDebrisBase>> Debris; // 0x68(0x10)
};

// Class FSD.PatchResourceCreator
// Size: 0x70 (Inherited: 0x30)
struct UPatchResourceCreator : UResourceCreator {
	struct UDebrisPositioning* Positioning; // 0x30(0x08)
	enum class ECarveFilterType CarveType; // 0x38(0x01)
	char UnknownData_39[0x7]; // 0x39(0x07)
	struct UFloodFillSettings* PatchNoise; // 0x40(0x08)
	struct UFloodFillSettings* CarverNoise; // 0x48(0x08)
	float Range; // 0x50(0x04)
	float NoiseRange; // 0x54(0x04)
	float NoiseScale; // 0x58(0x04)
	float Size; // 0x5c(0x04)
	struct TArray<struct UDebrisBase*> VeinDebris; // 0x60(0x10)
};

// Class FSD.CarvedResourceCreator
// Size: 0x98 (Inherited: 0x30)
struct UCarvedResourceCreator : UResourceCreator {
	struct UCarvedResourceData* Resource; // 0x30(0x08)
	bool ScaleToResourceDistribution; // 0x38(0x01)
	char UnknownData_39[0x7]; // 0x39(0x07)
	struct UDebrisPositioning* Positioning; // 0x40(0x08)
	struct FIRandRange NumCarvers; // 0x48(0x08)
	float ExpensiveNoise; // 0x50(0x04)
	float CarveOffsetRadius; // 0x54(0x04)
	struct AActor* SpawnAttachClass; // 0x58(0x08)
	float AttachSpawnOffsetDistance; // 0x60(0x04)
	char UnknownData_64[0x4]; // 0x64(0x04)
	struct UTerrainMaterial* TerrainMaterial; // 0x68(0x08)
	enum class ECarveFilterType Filter; // 0x70(0x01)
	enum class CarveOptionsCellSize CarveCellSize; // 0x71(0x01)
	char UnknownData_72[0x6]; // 0x72(0x06)
	struct TArray<struct FUDebrisCarveMesh> Meshes; // 0x78(0x10)
	struct TArray<struct FResourceDebris> Debris; // 0x88(0x10)
};

// Class FSD.BaseResource
// Size: 0x30 (Inherited: 0x30)
struct UBaseResource : UDataAsset {
};

// Class FSD.ResourceObjective
// Size: 0x198 (Inherited: 0x150)
struct UResourceObjective : UResourceBasedObjective {
	struct UResourceData* Resource; // 0x150(0x08)
	float ResourcesRequired; // 0x158(0x04)
	float ResourcesCollected; // 0x15c(0x04)
	float ResourceBuffer; // 0x160(0x04)
	float RoundToNearest; // 0x164(0x04)
	struct FText ObjectivesText; // 0x168(0x18)
	struct FText CreditsRewardText; // 0x180(0x18)

	void OnResourceChanged(struct UCappedResource* CappedResource, float amount); // Function FSD.ResourceObjective.OnResourceChanged
	void OnRep_ResourcesCollected(float prevAmount); // Function FSD.ResourceObjective.OnRep_ResourcesCollected
	float GetRequiredAmount(float missionScaling); // Function FSD.ResourceObjective.GetRequiredAmount
};

// Class FSD.RessuplyPodSpawn
// Size: 0x2b0 (Inherited: 0x2b0)
struct ARessuplyPodSpawn : ARessuplyPod {

	void SetController(struct AFSDPlayerController* Controller); // Function FSD.RessuplyPodSpawn.SetController
	void SetCharacter(struct APlayerCharacter* Character); // Function FSD.RessuplyPodSpawn.SetCharacter
};

// Class FSD.RessuplyPodItem
// Size: 0x3c8 (Inherited: 0x368)
struct ARessuplyPodItem : AAnimatedItem {
	struct AActor* ResupplyBeacon; // 0x368(0x08)
	struct UItemPlacerAggregator* ItemPlacerClass; // 0x370(0x08)
	struct UItemPlacerAggregator* ItemPlacerInstance; // 0x378(0x08)
	struct ARessuplyPod* SupplyPodClass; // 0x380(0x08)
	int32_t ResourceCost; // 0x388(0x04)
	char UnknownData_38C[0x4]; // 0x38c(0x04)
	struct FText OrderDescription; // 0x390(0x18)
	struct FText LogText; // 0x3a8(0x18)
	float Cooldown; // 0x3c0(0x04)
	bool Used; // 0x3c4(0x01)
	char UnknownData_3C5[0x3]; // 0x3c5(0x03)

	void Server_Call_Resupply(struct FVector Location); // Function FSD.RessuplyPodItem.Server_Call_Resupply
	void ReceiveItemPlacerSpawned(struct UItemPlacerAggregator* InItemPlacer); // Function FSD.RessuplyPodItem.ReceiveItemPlacerSpawned
	void OnRep_Used(); // Function FSD.RessuplyPodItem.OnRep_Used
	int32_t GetResourceCost(struct UObject* WorldContextObject); // Function FSD.RessuplyPodItem.GetResourceCost
	struct UItemPlacerAggregator* GetActiveAggregator(); // Function FSD.RessuplyPodItem.GetActiveAggregator
};

// Class FSD.Reward
// Size: 0x30 (Inherited: 0x30)
struct UReward : UDataAsset {
};

// Class FSD.UnlockReward
// Size: 0x30 (Inherited: 0x30)
struct UUnlockReward : UReward {
};

// Class FSD.UnlockPlanetZoneReward
// Size: 0x38 (Inherited: 0x30)
struct UUnlockPlanetZoneReward : UUnlockReward {
	struct UPlanetZone* ZoneToUnlock; // 0x30(0x08)
};

// Class FSD.UnlockMissionTypeReward
// Size: 0x38 (Inherited: 0x30)
struct UUnlockMissionTypeReward : UUnlockReward {
	struct UMissionTemplate* MissionToUnlock; // 0x30(0x08)
};

// Class FSD.UnlockComplexityReward
// Size: 0x40 (Inherited: 0x30)
struct UUnlockComplexityReward : UUnlockReward {
	struct UMissionTemplate* mission; // 0x30(0x08)
	struct UMissionComplexity* Complexity; // 0x38(0x08)
};

// Class FSD.UnlockDurationReward
// Size: 0x40 (Inherited: 0x30)
struct UUnlockDurationReward : UUnlockReward {
	struct UMissionTemplate* mission; // 0x30(0x08)
	struct UMissionDuration* Duration; // 0x38(0x08)
};

// Class FSD.UnlockDifficultyReward
// Size: 0x38 (Inherited: 0x30)
struct UUnlockDifficultyReward : UUnlockReward {
	struct UDifficultySetting* Difficulty; // 0x30(0x08)
};

// Class FSD.ResourceReward
// Size: 0x40 (Inherited: 0x30)
struct UResourceReward : UReward {
	struct UResourceData* Resource; // 0x30(0x08)
	int32_t amount; // 0x38(0x04)
	char UnknownData_3C[0x4]; // 0x3c(0x04)
};

// Class FSD.WeeklyResourceReward
// Size: 0x40 (Inherited: 0x30)
struct UWeeklyResourceReward : UReward {
	int32_t ResourceCount; // 0x30(0x04)
	struct FIRandRange amount; // 0x34(0x08)
	char UnknownData_3C[0x4]; // 0x3c(0x04)

	struct TMap<struct UResourceData*, float> GetRewards(struct AFSDPlayerController* Player); // Function FSD.WeeklyResourceReward.GetRewards
};

// Class FSD.RetirementReward
// Size: 0x38 (Inherited: 0x30)
struct URetirementReward : UUnlockReward {
	struct UPlayerCharacterID* characterID; // 0x30(0x08)
};

// Class FSD.ItemBlueprintReward
// Size: 0x58 (Inherited: 0x30)
struct UItemBlueprintReward : UUnlockReward {
	SoftClassProperty ItemToUnlock; // 0x30(0x28)

	struct AActor* GetActorDefaultObject(); // Function FSD.ItemBlueprintReward.GetActorDefaultObject
	struct AActor* GetActorClass(); // Function FSD.ItemBlueprintReward.GetActorClass
};

// Class FSD.SchematicReward
// Size: 0x40 (Inherited: 0x30)
struct USchematicReward : UUnlockReward {
	enum class ESchematicType SchematicType; // 0x30(0x01)
	char UnknownData_31[0x7]; // 0x31(0x07)
	struct USchematic* RewardedSchematic; // 0x38(0x08)
};

// Class FSD.SkinUnlock
// Size: 0x40 (Inherited: 0x30)
struct USkinUnlock : UUnlockReward {
	struct UItemID* OptionalItemID; // 0x30(0x08)
	struct UItemSkin* Skin; // 0x38(0x08)
};

// Class FSD.PermanentItemUpgradeReward
// Size: 0x40 (Inherited: 0x30)
struct UPermanentItemUpgradeReward : UUnlockReward {
	struct AActor* Item; // 0x30(0x08)
	struct UItemUpgrade* Upgrade; // 0x38(0x08)
};

// Class FSD.OverclockingUnlockReward
// Size: 0x38 (Inherited: 0x30)
struct UOverclockingUnlockReward : UUnlockReward {
	struct AActor* Item; // 0x30(0x08)
};

// Class FSD.PureTextReward
// Size: 0x48 (Inherited: 0x30)
struct UPureTextReward : UUnlockReward {
	struct FText Text; // 0x30(0x18)
};

// Class FSD.VanityReward
// Size: 0x48 (Inherited: 0x30)
struct UVanityReward : UUnlockReward {
	struct UVanityItem* VanityItem; // 0x30(0x08)
	struct UPlayerCharacterID* OptionalCharacterID; // 0x38(0x08)
	bool UseContextAsTargetCharacter; // 0x40(0x01)
	char UnknownData_41[0x7]; // 0x41(0x07)
};

// Class FSD.VanityCollectionReward
// Size: 0x50 (Inherited: 0x30)
struct UVanityCollectionReward : UUnlockReward {
	struct TArray<struct UVanityItem*> vanityItems; // 0x30(0x10)
	struct UPlayerCharacterID* OptionalCharacterID; // 0x40(0x08)
	bool UseContextAsTargetCharacter; // 0x48(0x01)
	char UnknownData_49[0x7]; // 0x49(0x07)
};

// Class FSD.PickaxePartReward
// Size: 0x38 (Inherited: 0x30)
struct UPickaxePartReward : UUnlockReward {
	struct UPickaxePart* PicaxePart; // 0x30(0x08)
};

// Class FSD.RewardWidget
// Size: 0x238 (Inherited: 0x230)
struct URewardWidget : UUserWidget {
	struct UReward* Reward; // 0x230(0x08)

	void PlayReceiveAnim(); // Function FSD.RewardWidget.PlayReceiveAnim
};

// Class FSD.RichTextInputDecorator
// Size: 0x38 (Inherited: 0x30)
struct URichTextInputDecorator : UCustomRichTextDecorator {
	struct URichTextInputWidget* DecoratorWidgetClass; // 0x30(0x08)
};

// Class FSD.RichTextInputWidget
// Size: 0x518 (Inherited: 0x230)
struct URichTextInputWidget : UUserWidget {
	struct FName InputName; // 0x230(0x08)
	struct TMap<struct FName, struct FString> MetaData; // 0x238(0x50)
	struct FText Content; // 0x288(0x18)
	struct FTextBlockStyle TextStyle; // 0x2a0(0x268)
	enum class EFSDInputSource InputSource; // 0x508(0x01)
	char UnknownData_509[0x7]; // 0x509(0x07)
	struct URichTextBlock* RichTextBlock; // 0x510(0x08)

	void ScaleTextBlockToHeight(struct UTextBlock* InTextBlock, float LineHeight); // Function FSD.RichTextInputWidget.ScaleTextBlockToHeight
	void ReceiveInputUnknown(); // Function FSD.RichTextInputWidget.ReceiveInputUnknown
	void ReceiveInputDetails(struct FInputDisplay InDisplay); // Function FSD.RichTextInputWidget.ReceiveInputDetails
	void OnInputSourceChanged(enum class EFSDInputSource InSource); // Function FSD.RichTextInputWidget.OnInputSourceChanged
	void OnCustomKeyBindsChanged(); // Function FSD.RichTextInputWidget.OnCustomKeyBindsChanged
	struct FVector2D MeasureTextSize(struct FText Text, float Scale); // Function FSD.RichTextInputWidget.MeasureTextSize
	float GetLineHeight(); // Function FSD.RichTextInputWidget.GetLineHeight
	void ApplyTextStyle(struct UTextBlock* InTextBlock, struct FTextBlockStyle InTextStyle); // Function FSD.RichTextInputWidget.ApplyTextStyle
};

// Class FSD.RichTextStylable
// Size: 0x730 (Inherited: 0x668)
struct URichTextStylable : URichTextBlock {
	struct FSlateFontInfo Font; // 0x668(0x50)
	struct FSlateColor FontColor; // 0x6b8(0x28)
	struct TMap<struct FName, struct FTextStyleOverride> Styles; // 0x6e0(0x50)
};

// Class FSD.RichTextSizable
// Size: 0x6a0 (Inherited: 0x668)
struct URichTextSizable : URichTextBlock {
	bool bOverrideDefaultSize; // 0x668(0x01)
	char UnknownData_669[0x3]; // 0x669(0x03)
	int32_t OverrideDefaultFontSize; // 0x66c(0x04)
	bool bOverrideDefaultColor; // 0x670(0x01)
	char UnknownData_671[0x7]; // 0x671(0x07)
	struct FSlateColor OverrideDefaultFontColor; // 0x678(0x28)

	void SetDefaultFontSize(int32_t inFontSize); // Function FSD.RichTextSizable.SetDefaultFontSize
	void SetDefaultFontColor(struct FLinearColor InColor); // Function FSD.RichTextSizable.SetDefaultFontColor
};

// Class FSD.RockEnemiesEvent
// Size: 0x3d8 (Inherited: 0x358)
struct ARockEnemiesEvent : AGameEvent {
	struct AProjectile* PowerUpClass; // 0x358(0x08)
	char UnknownData_360[0x8]; // 0x360(0x08)
	float PowerUpGenerationTime; // 0x368(0x04)
	char UnknownData_36C[0x4]; // 0x36c(0x04)
	struct TArray<int32_t> KillAmountPerPlayer; // 0x370(0x10)
	struct TArray<int32_t> MaxEnemyCountPerPlayer; // 0x380(0x10)
	struct TArray<struct APawn*> SpawnedRockEnemies; // 0x390(0x10)
	struct USkeletalMeshComponent* Mesh; // 0x3a0(0x08)
	struct UParticleSystem* MuzzleEffect; // 0x3a8(0x08)
	int32_t PowerUpsPerGeneration; // 0x3b0(0x04)
	int32_t GruntPointsAward; // 0x3b4(0x04)
	int32_t TankPointsAward; // 0x3b8(0x04)
	char UnknownData_3BC[0x14]; // 0x3bc(0x14)
	struct UEnemyGroupDescriptor* RockEnemies; // 0x3d0(0x08)

	void StopPowerupGeneration(); // Function FSD.RockEnemiesEvent.StopPowerupGeneration
	void StartPowerupGeneration(); // Function FSD.RockEnemiesEvent.StartPowerupGeneration
	void SpawnRockEnemies(float Difficulty, struct TArray<struct FVector> Locations); // Function FSD.RockEnemiesEvent.SpawnRockEnemies
	void ShowFireEffects(int32_t selectedBone); // Function FSD.RockEnemiesEvent.ShowFireEffects
	void RockEnemySpawned(struct APawn* spawnedEnemy); // Function FSD.RockEnemiesEvent.RockEnemySpawned
	void RockEnemyDied(struct UHealthComponentBase* Health); // Function FSD.RockEnemiesEvent.RockEnemyDied
	void OnShoot(); // Function FSD.RockEnemiesEvent.OnShoot
	void EnemySpawnedAfterComplete(struct APawn* spawnedEnemy); // Function FSD.RockEnemiesEvent.EnemySpawnedAfterComplete
};

// Class FSD.RoomCarverComponent
// Size: 0x200 (Inherited: 0x1f0)
struct URoomCarverComponent : USceneComponent {
	struct URoomGenerator* RoomGenerator; // 0x1f0(0x08)
	char UnknownData_1F8[0x8]; // 0x1f8(0x08)
};

// Class FSD.RoomDecorationObject
// Size: 0x40 (Inherited: 0x30)
struct URoomDecorationObject : UDataAsset {
	struct UDebrisPositioning* Positioning; // 0x30(0x08)
	struct AActor* Actor; // 0x38(0x08)
};

// Class FSD.RoomFeature
// Size: 0x40 (Inherited: 0x28)
struct URoomFeature : UObject {
	struct TArray<struct URoomFeature*> RoomFeatures; // 0x28(0x10)
	char UnknownData_38[0x8]; // 0x38(0x08)
};

// Class FSD.RandomSelector
// Size: 0x48 (Inherited: 0x40)
struct URandomSelector : URoomFeature {
	int32_t Min; // 0x40(0x04)
	int32_t Max; // 0x44(0x04)
};

// Class FSD.FloodFillLine
// Size: 0x70 (Inherited: 0x40)
struct UFloodFillLine : URoomFeature {
	struct UFloodFillSettings* WallNoiseOverride; // 0x40(0x08)
	struct UFloodFillSettings* CeilingNoiseOverride; // 0x48(0x08)
	struct UFloodFillSettings* FloorNoiseOverride; // 0x50(0x08)
	bool UseDetailNoise; // 0x58(0x01)
	char UnknownData_59[0x7]; // 0x59(0x07)
	struct TArray<struct FRoomLinePoint> Points; // 0x60(0x10)
};

// Class FSD.FloodFillPillar
// Size: 0x70 (Inherited: 0x40)
struct UFloodFillPillar : URoomFeature {
	struct UFloodFillSettings* NoiseOverride; // 0x40(0x08)
	struct TArray<struct FRandLinePoint> Points; // 0x48(0x10)
	struct FRandRange RangeScale; // 0x58(0x08)
	struct FRandRange NoiseRangeScale; // 0x60(0x08)
	struct FRandRange EndcapScale; // 0x68(0x08)
};

// Class FSD.FloodFillProceduralPillar
// Size: 0x58 (Inherited: 0x40)
struct UFloodFillProceduralPillar : URoomFeature {
	struct TArray<struct FVector> Points; // 0x40(0x10)
	struct UPillarSettings* PillarSettings; // 0x50(0x08)
};

// Class FSD.FloodFillBox
// Size: 0x78 (Inherited: 0x40)
struct UFloodFillBox : URoomFeature {
	struct UFloodFillSettings* Noise; // 0x40(0x08)
	struct FVector Position; // 0x48(0x0c)
	struct FVector Extends; // 0x54(0x0c)
	struct FRotator Rotation; // 0x60(0x0c)
	bool IsCarver; // 0x6c(0x01)
	char UnknownData_6D[0x3]; // 0x6d(0x03)
	float NoiseRange; // 0x70(0x04)
	char UnknownData_74[0x4]; // 0x74(0x04)
};

// Class FSD.EntranceFeature
// Size: 0x60 (Inherited: 0x40)
struct UEntranceFeature : URoomFeature {
	struct FVector Location; // 0x40(0x0c)
	struct FRotator Direction; // 0x4c(0x0c)
	enum class ECaveEntranceType EntranceType; // 0x58(0x01)
	char UnknownData_59[0x7]; // 0x59(0x07)
};

// Class FSD.ResourceFeature
// Size: 0x60 (Inherited: 0x40)
struct UResourceFeature : URoomFeature {
	struct FVector Location; // 0x40(0x0c)
	char UnknownData_4C[0x4]; // 0x4c(0x04)
	struct UResourceData* Resource; // 0x50(0x08)
	float BaseAmount; // 0x58(0x04)
	char UnknownData_5C[0x4]; // 0x5c(0x04)
};

// Class FSD.SpawnActorFeature
// Size: 0x90 (Inherited: 0x40)
struct USpawnActorFeature : URoomFeature {
	struct FVector Location; // 0x40(0x0c)
	char UnknownData_4C[0x4]; // 0x4c(0x04)
	struct AActor* ActorToSpawn; // 0x50(0x08)
	struct FVector AdjustmentDirection; // 0x58(0x0c)
	enum class EItemAdjustmentType Adjustment; // 0x64(0x01)
	char UnknownData_65[0x3]; // 0x65(0x03)
	struct FVector ScaleMin; // 0x68(0x0c)
	struct FVector ScaleMax; // 0x74(0x0c)
	struct FRotator RotationDelta; // 0x80(0x0c)
	char UnknownData_8C[0x4]; // 0x8c(0x04)
};

// Class FSD.SpawnTriggerFeature
// Size: 0x90 (Inherited: 0x40)
struct USpawnTriggerFeature : URoomFeature {
	struct AActor* TriggerClass; // 0x40(0x08)
	char UnknownData_48[0x8]; // 0x48(0x08)
	struct FTransform Transform; // 0x50(0x30)
	struct FName Message; // 0x80(0x08)
	char UnknownData_88[0x8]; // 0x88(0x08)
};

// Class FSD.SpawnTrigger
// Size: 0x228 (Inherited: 0x220)
struct ASpawnTrigger : AActor {
	struct FName Message; // 0x220(0x08)
};

// Class FSD.SubRoomFeature
// Size: 0x68 (Inherited: 0x40)
struct USubRoomFeature : URoomFeature {
	struct URoomGenerator* RoomGenerator; // 0x40(0x08)
	struct FVector Location; // 0x48(0x0c)
	struct FRotator Rotation; // 0x54(0x0c)
	float Scale; // 0x60(0x04)
	char UnknownData_64[0x4]; // 0x64(0x04)
};

// Class FSD.RandomSubRoomFeature
// Size: 0xb0 (Inherited: 0x40)
struct URandomSubRoomFeature : URoomFeature {
	struct URoomGeneratorGroup* RoomGroup; // 0x40(0x08)
	struct FGameplayTagQuery tagQuery; // 0x48(0x48)
	int32_t Layer; // 0x90(0x04)
	struct FVector Location; // 0x94(0x0c)
	struct FRotator Rotation; // 0xa0(0x0c)
	float Scale; // 0xac(0x04)
};

// Class FSD.DropPodCalldownLocationFeature
// Size: 0x58 (Inherited: 0x40)
struct UDropPodCalldownLocationFeature : URoomFeature {
	struct FVector Location; // 0x40(0x0c)
	char UnknownData_4C[0x4]; // 0x4c(0x04)
	struct AActor* CalldownClass; // 0x50(0x08)
};

// Class FSD.RoomGeneratorBase
// Size: 0x58 (Inherited: 0x30)
struct URoomGeneratorBase : UDataAsset {
	float Bounds; // 0x30(0x04)
	bool CanOnlyBeUsedOnce; // 0x34(0x01)
	enum class ERoomMirroringSupport MirrorSupport; // 0x35(0x01)
	char UnknownData_36[0x2]; // 0x36(0x02)
	struct FGameplayTagContainer RoomTags; // 0x38(0x20)
};

// Class FSD.RoomGenerator
// Size: 0x68 (Inherited: 0x58)
struct URoomGenerator : URoomGeneratorBase {
	struct TArray<struct URoomFeature*> RoomFeatures; // 0x58(0x10)
};

// Class FSD.ProceduralRoomGenerator
// Size: 0x80 (Inherited: 0x58)
struct UProceduralRoomGenerator : URoomGeneratorBase {
	struct FIRandRange RoomCount; // 0x58(0x08)
	float MaxLength; // 0x60(0x04)
	float MaxWidth; // 0x64(0x04)
	float MaxHeight; // 0x68(0x04)
	char UnknownData_6C[0x4]; // 0x6c(0x04)
	struct TArray<struct URoomPiece*> RoomPieces; // 0x70(0x10)
};

// Class FSD.RoomPiece
// Size: 0x48 (Inherited: 0x30)
struct URoomPiece : UDataAsset {
	struct URoomGenerator* RoomGenerator; // 0x30(0x08)
	struct TArray<enum class ERoomPieceSide> ConnectedSides; // 0x38(0x10)

	struct FVector GetDirectionFromPieceSide(enum class ERoomPieceSide side); // Function FSD.RoomPiece.GetDirectionFromPieceSide
};

// Class FSD.RoomGeneratorGroup
// Size: 0x40 (Inherited: 0x30)
struct URoomGeneratorGroup : UDataAsset {
	struct TArray<struct URoomGenerator*> Rooms; // 0x30(0x10)

	struct URoomGenerator* GetRandomRoomWithTags(struct FRoomGeneratorGroupInstance groupInstance, struct FGameplayTagQuery queury, struct FRandomStream RandomStream); // Function FSD.RoomGeneratorGroup.GetRandomRoomWithTags
	struct URoomGenerator* GetRandomRoom(struct FRandomStream RandomStream); // Function FSD.RoomGeneratorGroup.GetRandomRoom
	struct FRoomGeneratorGroupInstance CreateGroupInstance(); // Function FSD.RoomGeneratorGroup.CreateGroupInstance
};

// Class FSD.TunnelParameters
// Size: 0x50 (Inherited: 0x30)
struct UTunnelParameters : UDataAsset {
	struct UFloodFillSettings* PathfinderNoise; // 0x30(0x08)
	float PathZPenalty; // 0x38(0x04)
	float PathDirectionPenalty; // 0x3c(0x04)
	float PathEntranceAnglePenalty; // 0x40(0x04)
	float ObstacleCostScale; // 0x44(0x04)
	bool AllowBlockedEntrances; // 0x48(0x01)
	bool PickBestMatchingEntrance; // 0x49(0x01)
	char UnknownData_4A[0x6]; // 0x4a(0x06)
};

// Class FSD.RotateToFace
// Size: 0x210 (Inherited: 0x1f0)
struct URotateToFace : USceneComponent {
	struct FVector TargetOffset; // 0x1f0(0x0c)
	char UnknownData_1FC[0x4]; // 0x1fc(0x04)
	struct AActor* Target; // 0x200(0x08)
	int32_t Face; // 0x208(0x04)
	char UnknownData_20C[0x4]; // 0x20c(0x04)

	void SetTarget(struct AActor* Target); // Function FSD.RotateToFace.SetTarget
	void SetShouldFaceAway(bool FaceAway); // Function FSD.RotateToFace.SetShouldFaceAway
};

// Class FSD.SalvageObjective
// Size: 0x230 (Inherited: 0x150)
struct USalvageObjective : UObjective {
	int32_t SalvageActorCount; // 0x150(0x04)
	char UnknownData_154[0x4]; // 0x154(0x04)
	struct UGemResourceData* LegResource; // 0x158(0x08)
	int32_t LegCountPerActor; // 0x160(0x04)
	float LegDistanceToActor; // 0x164(0x04)
	struct FMulticastInlineDelegate OnDisableLegSpheres; // 0x168(0x10)
	struct UDebrisPositioning* Positioning; // 0x178(0x08)
	struct TArray<struct UDebrisBase*> Debris; // 0x180(0x10)
	SoftClassProperty SalvageActor; // 0x190(0x28)
	SoftClassProperty DamagedPodClass; // 0x1b8(0x28)
	struct UDebrisPositioning* DamagedPodPositioning; // 0x1e0(0x08)
	float DamagedPodMinDistanceToDropZone; // 0x1e8(0x04)
	char UnknownData_1EC[0x4]; // 0x1ec(0x04)
	struct AMiningPod* DamagedPod; // 0x1f0(0x08)
	int32_t ActorsToSalvage; // 0x1f8(0x04)
	int32_t ActorsSalvaged; // 0x1fc(0x04)
	int32_t RepairPoints; // 0x200(0x04)
	int32_t PointsRepaired; // 0x204(0x04)
	float MinSalvageActorDistanceToLandingZone; // 0x208(0x04)
	char UnknownData_20C[0x4]; // 0x20c(0x04)
	struct TArray<struct AMiniMule*> SalvagedActors; // 0x210(0x10)
	char UnknownData_220[0x10]; // 0x220(0x10)

	void PointRepaired(); // Function FSD.SalvageObjective.PointRepaired
	void OnRep_PointsRepaired(); // Function FSD.SalvageObjective.OnRep_PointsRepaired
	void OnRep_ActorsToSalvage(int32_t prevAmount); // Function FSD.SalvageObjective.OnRep_ActorsToSalvage
	void OnRep_ActorsSalvaged(int32_t prevAmount); // Function FSD.SalvageObjective.OnRep_ActorsSalvaged
	void OnActorRepaired(struct URepairableComponent* repairable); // Function FSD.SalvageObjective.OnActorRepaired
	struct FTransform FindRepairPointLocation(struct AProceduralSetup* setup, struct FVector podLocation, float Radius, float maxVerticalDistance, struct UDebrisPositioning* DebrisPositioning, struct AActor* terrainPlacement, struct TArray<struct FVector> locationsToAvoid, struct UCurveFloat* avoidCostCurve); // Function FSD.SalvageObjective.FindRepairPointLocation
	void AllActorsSalvaged(); // Function FSD.SalvageObjective.AllActorsSalvaged
};

// Class FSD.SalvageFuelPod
// Size: 0x2b0 (Inherited: 0x2b0)
struct ASalvageFuelPod : ARessuplyPod {

	void ReceiveFuelLineStarted(bool InFuelLineStarted); // Function FSD.SalvageFuelPod.ReceiveFuelLineStarted
	void ReceiveFuelLineConnected(struct AFuelLineEndPoint* InFuelLine); // Function FSD.SalvageFuelPod.ReceiveFuelLineConnected
	void ReceiveFirstFuelLineSegment(struct AFuelLineSegment* InFirstSegment); // Function FSD.SalvageFuelPod.ReceiveFirstFuelLineSegment
};

// Class FSD.SavableObject
// Size: 0x40 (Inherited: 0x28)
struct USavableObject : UObject {
	bool EnableDangerousSaveGameIDEditing; // 0x28(0x01)
	char UnknownData_29[0x3]; // 0x29(0x03)
	struct FGuid SavegameID; // 0x2c(0x10)
	char UnknownData_3C[0x4]; // 0x3c(0x04)
};

// Class FSD.SavableActor
// Size: 0x238 (Inherited: 0x220)
struct ASavableActor : AActor {
	bool EnableDangerousSaveGameIDEditing; // 0x220(0x01)
	char UnknownData_221[0x3]; // 0x221(0x03)
	struct FGuid SavegameID; // 0x224(0x10)
	char UnknownData_234[0x4]; // 0x234(0x04)
};

// Class FSD.SaveGameIDInterface
// Size: 0x28 (Inherited: 0x28)
struct USaveGameIDInterface : UInterface {
};

// Class FSD.RefundableInterface
// Size: 0x28 (Inherited: 0x28)
struct URefundableInterface : USaveGameIDInterface {
};

// Class FSD.ItemIDInterface
// Size: 0x28 (Inherited: 0x28)
struct UItemIDInterface : UInterface {
};

// Class FSD.SaveGameLibrary
// Size: 0x28 (Inherited: 0x28)
struct USaveGameLibrary : UBlueprintFunctionLibrary {

	bool TryGetSaveGameSnapShot(struct UObject* WorldContext, struct FString Filename, int32_t userIdx, struct FSaveGameSnapShot OutSnapShot); // Function FSD.SaveGameLibrary.TryGetSaveGameSnapShot
	struct TMap<struct FString, struct FDateTime> GetUserSaveGameSlots(struct FString userId); // Function FSD.SaveGameLibrary.GetUserSaveGameSlots
	struct TMap<struct FString, struct FDateTime> GetAllSaveGameSlots(); // Function FSD.SaveGameLibrary.GetAllSaveGameSlots
};

// Class FSD.SaveGameStateComponent
// Size: 0x210 (Inherited: 0xb0)
struct USaveGameStateComponent : UActorComponent {
	struct FMulticastInlineDelegate OnEquippedPerksChanged; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnItemUpgradeCrafted; // 0xc0(0x10)
	struct FMulticastInlineDelegate OnItemUpgradeEquipped; // 0xd0(0x10)
	struct FMulticastInlineDelegate OnItemUpgradeUnequipped; // 0xe0(0x10)
	struct FMulticastInlineDelegate OnPlayerProgressChanged; // 0xf0(0x10)
	struct FMulticastInlineDelegate OnLoadoutChangedEvent; // 0x100(0x10)
	struct FMulticastInlineDelegate OnCharacterStatsChanged; // 0x110(0x10)
	struct FMulticastInlineDelegate OnCreditsChanged; // 0x120(0x10)
	int32_t Credits; // 0x130(0x04)
	char UnknownData_134[0x4]; // 0x134(0x04)
	struct TArray<struct FSaveGameStatePerkItem> EquippedPerks; // 0x138(0x10)
	struct UVictoryPose* VictoryPose; // 0x148(0x08)
	struct FItemLoadout EquippedLoadout; // 0x150(0x84)
	struct FActiveCampaingMission ActiveCampaignMission; // 0x1d4(0x0c)
	char UnknownData_1E0[0x8]; // 0x1e0(0x08)
	struct TArray<struct FItemUpgradeSelection> ItemUpgradeSelections; // 0x1e8(0x10)
	struct FPlayerProgress PlayerProgress; // 0x1f8(0x08)
	struct TArray<struct FCharacterProgress> CharacterStats; // 0x200(0x10)

	void SetCampaign(); // Function FSD.SaveGameStateComponent.SetCampaign
	void Server_SetVictoryPose(struct UVictoryPose* pose); // Function FSD.SaveGameStateComponent.Server_SetVictoryPose
	void Server_SetPlayerProgress(struct FPlayerProgress Progress); // Function FSD.SaveGameStateComponent.Server_SetPlayerProgress
	void Server_SetLoadout(struct FItemLoadout Loadout, struct TArray<struct FItemUpgradeSelection> weaponLoadouts); // Function FSD.SaveGameStateComponent.Server_SetLoadout
	void Server_SetEquippedPerks(struct TArray<struct FSaveGameStatePerkItem> perks); // Function FSD.SaveGameStateComponent.Server_SetEquippedPerks
	void Server_SetCredits(int32_t amount); // Function FSD.SaveGameStateComponent.Server_SetCredits
	void Server_SetCharacterStats(struct TArray<struct FCharacterProgress> Stats); // Function FSD.SaveGameStateComponent.Server_SetCharacterStats
	void Server_SetActiveCampaignMission(struct FActiveCampaingMission Data); // Function FSD.SaveGameStateComponent.Server_SetActiveCampaignMission
	void RefreshLoadoutFromSave(struct UPlayerCharacterID* characterID); // Function FSD.SaveGameStateComponent.RefreshLoadoutFromSave
	void OnRep_PlayerProgress(); // Function FSD.SaveGameStateComponent.OnRep_PlayerProgress
	void OnRep_ItemUpgradeSelections(); // Function FSD.SaveGameStateComponent.OnRep_ItemUpgradeSelections
	void OnRep_Credits(); // Function FSD.SaveGameStateComponent.OnRep_Credits
	void OnRep_CharacterStats(); // Function FSD.SaveGameStateComponent.OnRep_CharacterStats
	void OnRep_ActiveCampaignMission(); // Function FSD.SaveGameStateComponent.OnRep_ActiveCampaignMission
	void ItemUpgradeEquipSignature__DelegateSignature(struct AActor* itemClass, struct UItemUpgrade* Upgrade); // DelegateFunction FSD.SaveGameStateComponent.ItemUpgradeEquipSignature__DelegateSignature
	void ItemUpgradeCraftSignature__DelegateSignature(struct UItemUpgrade* Upgrade); // DelegateFunction FSD.SaveGameStateComponent.ItemUpgradeCraftSignature__DelegateSignature
	struct FCharacterProgress GetCharacterStat(struct UPlayerCharacterID* characterID); // Function FSD.SaveGameStateComponent.GetCharacterStat
	struct UGeneratedMission* GetActiveCampaignMission(); // Function FSD.SaveGameStateComponent.GetActiveCampaignMission
	void CreditsChangedDelegate__DelegateSignature(); // DelegateFunction FSD.SaveGameStateComponent.CreditsChangedDelegate__DelegateSignature
};

// Class FSD.SchematicRarity
// Size: 0x38 (Inherited: 0x30)
struct USchematicRarity : UDataAsset {
	float Rarity; // 0x30(0x04)
	char UnknownData_34[0x4]; // 0x34(0x04)
};

// Class FSD.Schematic
// Size: 0x108 (Inherited: 0x58)
struct USchematic : USavableDataAsset {
	struct FMulticastInlineDelegate OnSchematicAddedToInventory; // 0x58(0x10)
	struct FMulticastInlineDelegate OnSchematicReset; // 0x68(0x10)
	struct FMulticastInlineDelegate OnSchematicBuilt; // 0x78(0x10)
	struct USchematicCategory* Category; // 0x88(0x08)
	struct USchematicPricingTier* PricingTier; // 0x90(0x08)
	struct USchematicRarity* Rarity; // 0x98(0x08)
	struct UPlayerCharacterID* UsedByCharacter; // 0xa0(0x08)
	struct USchematicItem* Item; // 0xa8(0x08)
	struct TMap<struct UResourceData*, int32_t> CraftingCost; // 0xb0(0x50)
	bool CostIsLocked; // 0x100(0x01)
	char UnknownData_101[0x7]; // 0x101(0x07)

	void SetCraftingMaterialCost(); // Function FSD.Schematic.SetCraftingMaterialCost
	void SetCostLocked(bool IsLocked); // Function FSD.Schematic.SetCostLocked
	void SchematicDelegate__DelegateSignature(struct USchematic* Schematic); // DelegateFunction FSD.Schematic.SchematicDelegate__DelegateSignature
	bool HasBeenForged(struct UObject* WorldContext); // Function FSD.Schematic.HasBeenForged
	bool HasBeenAwardedOrForged(struct UObject* WorldContext); // Function FSD.Schematic.HasBeenAwardedOrForged
	bool HasBeenAwarded(struct UObject* WorldContext); // Function FSD.Schematic.HasBeenAwarded
	struct FText GetTitle(); // Function FSD.Schematic.GetTitle
	enum class ESchematicState GetSchematicState(struct UObject* WorldContext); // Function FSD.Schematic.GetSchematicState
	struct USchematicItem* GetSchematicItem(); // Function FSD.Schematic.GetSchematicItem
	struct TMap<struct UResourceData*, int32_t> GetResourceCost(); // Function FSD.Schematic.GetResourceCost
	struct FColor GetIconTint(); // Function FSD.Schematic.GetIconTint
	struct UTexture* GetIcon(struct UObject* WorldContextObject); // Function FSD.Schematic.GetIcon
	struct FText GetDescription(); // Function FSD.Schematic.GetDescription
	bool CanAffordSchematic(struct UObject* WorldContext); // Function FSD.Schematic.CanAffordSchematic
	void BuildSchematic(struct UObject* WorldContext); // Function FSD.Schematic.BuildSchematic
	void AddSchematicToPlayerInventory(struct UObject* WorldContext); // Function FSD.Schematic.AddSchematicToPlayerInventory
};

// Class FSD.SchematicBankBase
// Size: 0x38 (Inherited: 0x30)
struct USchematicBankBase : UDataAsset {
	char UnknownData_30[0x8]; // 0x30(0x08)
};

// Class FSD.SchematicBank
// Size: 0x88 (Inherited: 0x38)
struct USchematicBank : USchematicBankBase {
	struct TSet<struct USchematic*> Schematics; // 0x38(0x50)

	void AddSchematic(struct USchematic* Schematic); // Function FSD.SchematicBank.AddSchematic
};

// Class FSD.SchematicBankInterface
// Size: 0x28 (Inherited: 0x28)
struct USchematicBankInterface : UInterface {
};

// Class FSD.SchematicCategory
// Size: 0xf0 (Inherited: 0x58)
struct USchematicCategory : USavableDataAsset {
	struct FText CategoryName; // 0x58(0x18)
	struct TSoftObjectPtr<struct UTexture2D> FrameTexture; // 0x70(0x28)
	struct FLinearColor FrameTint; // 0x98(0x10)
	struct FLinearColor BackgroundTint; // 0xa8(0x10)
	enum class ESchematicType SchematicType; // 0xb8(0x01)
	char UnknownData_B9[0x7]; // 0xb9(0x07)
	struct TSoftObjectPtr<struct UDialogDataAsset> ShoutForging; // 0xc0(0x28)
	struct UEventRewardType* RewardType; // 0xe8(0x08)
};

// Class FSD.SchematicBlueprintLibrary
// Size: 0x28 (Inherited: 0x28)
struct USchematicBlueprintLibrary : UBlueprintFunctionLibrary {

	void PriceAllSchematics(bool lockPrices); // Function FSD.SchematicBlueprintLibrary.PriceAllSchematics
	bool IsSchematicOwnedOrForged(struct UObject* WorldContextObject, struct USchematic* Schematic); // Function FSD.SchematicBlueprintLibrary.IsSchematicOwnedOrForged
	bool IsSchematicOwned(struct UObject* WorldContextObject, struct USchematic* Schematic); // Function FSD.SchematicBlueprintLibrary.IsSchematicOwned
	bool IsSchematicForged(struct UObject* WorldContextObject, struct USchematic* Schematic); // Function FSD.SchematicBlueprintLibrary.IsSchematicForged
	bool HasAnyUnlockableSchematics(struct UObject* WorldContextObject, struct UPlayerCharacterID* characterID, struct TSet<struct USchematicCategory*> Categories); // Function FSD.SchematicBlueprintLibrary.HasAnyUnlockableSchematics
	struct TArray<struct USchematic*> GetRewardableSchematics(struct UObject* WorldContextObject, struct UPlayerCharacterID* characterID, struct USchematicCategory* Category); // Function FSD.SchematicBlueprintLibrary.GetRewardableSchematics
	struct TArray<struct USchematic*> GetForgedSchematic(struct UObject* WorldContextObject); // Function FSD.SchematicBlueprintLibrary.GetForgedSchematic
	struct USchematicCategory* FindItemUpgradeSchematicCategory(struct UItemUpgrade* Upgrade); // Function FSD.SchematicBlueprintLibrary.FindItemUpgradeSchematicCategory
	void AddSkinSchematicCollectionToSettings(struct UItemSkinSchematicCollection* Collection); // Function FSD.SchematicBlueprintLibrary.AddSkinSchematicCollectionToSettings
};

// Class FSD.SchematicItem
// Size: 0x28 (Inherited: 0x28)
struct USchematicItem : UObject {

	struct FText GetTitle(); // Function FSD.SchematicItem.GetTitle
	struct FColor GetIconTint(); // Function FSD.SchematicItem.GetIconTint
	struct UTexture* GetIcon(struct UObject* WorldContextObject); // Function FSD.SchematicItem.GetIcon
	struct FText GetDescription(); // Function FSD.SchematicItem.GetDescription
};

// Class FSD.OverclockShematicItem
// Size: 0x58 (Inherited: 0x28)
struct UOverclockShematicItem : USchematicItem {
	SoftClassProperty OwningItem; // 0x28(0x28)
	struct UItemUpgrade* Overclock; // 0x50(0x08)

	struct UUpgradableGearComponent* GetOwningGearComponent(); // Function FSD.OverclockShematicItem.GetOwningGearComponent
};

// Class FSD.VanitySchematicItem
// Size: 0x30 (Inherited: 0x28)
struct UVanitySchematicItem : USchematicItem {
	struct UVanityItem* Item; // 0x28(0x08)

	struct UVanityItem* GetVanityItem(); // Function FSD.VanitySchematicItem.GetVanityItem
};

// Class FSD.VictoryPoseSchematicItem
// Size: 0x30 (Inherited: 0x28)
struct UVictoryPoseSchematicItem : USchematicItem {
	struct UVictoryPose* VictoryPose; // 0x28(0x08)
};

// Class FSD.DrinkableSchematicItem
// Size: 0x30 (Inherited: 0x28)
struct UDrinkableSchematicItem : USchematicItem {
	struct UDrinkableDataAsset* Drinkable; // 0x28(0x08)
};

// Class FSD.SkinSchematicItem
// Size: 0x38 (Inherited: 0x28)
struct USkinSchematicItem : USchematicItem {
	struct UItemID* ItemID; // 0x28(0x08)
	struct UItemSkin* Skin; // 0x30(0x08)
};

// Class FSD.ResourceSchematicItem
// Size: 0x40 (Inherited: 0x28)
struct UResourceSchematicItem : USchematicItem {
	int32_t Credits; // 0x28(0x04)
	char UnknownData_2C[0x4]; // 0x2c(0x04)
	struct UResourceData* Resource; // 0x30(0x08)
	int32_t ResourceAmount; // 0x38(0x04)
	char UnknownData_3C[0x4]; // 0x3c(0x04)
};

// Class FSD.BlankSchematicItem
// Size: 0x60 (Inherited: 0x28)
struct UBlankSchematicItem : USchematicItem {
	struct FText Title; // 0x28(0x18)
	struct FText Description; // 0x40(0x18)
	struct UTexture2D* Icon; // 0x58(0x08)
};

// Class FSD.SchematicSettings
// Size: 0x340 (Inherited: 0x30)
struct USchematicSettings : UDataAsset {
	struct UDataTable* PricingTable; // 0x30(0x08)
	struct USchematic* BlankSchematic; // 0x38(0x08)
	struct TSet<struct USchematicBank*> SchematicBanks; // 0x40(0x50)
	struct TSet<struct UOverclockBank*> OverclockBanks; // 0x90(0x50)
	struct TSet<struct UItemSkinSchematicCollection*> SkinSchematicCollections; // 0xe0(0x50)
	struct TSet<struct USchematicBankBase*> VanitySchematicBanks; // 0x130(0x50)
	struct TMap<enum class ESchematicType, struct FSchematicType> SchematicTypes; // 0x180(0x50)
	struct USchematicBank* EndlessSchematics; // 0x1d0(0x08)
	struct TSet<struct USchematicCategory*> Categories; // 0x1d8(0x50)
	struct TArray<struct USchematicCategory*> OverclockCategories; // 0x228(0x10)
	struct TArray<struct USchematicCategory*> VanityCategories; // 0x238(0x10)
	struct TArray<struct USchematicCategory*> EndlessCategories; // 0x248(0x10)
	struct USchematicPricingTier* OverclockPricingTier; // 0x258(0x08)
	struct TArray<struct USchematicPricingTier*> VanityPricingTiers; // 0x260(0x10)
	struct TArray<struct USchematicRarity*> VanityRarity; // 0x270(0x10)
	struct TArray<struct USchematicRarity*> OverclockRarity; // 0x280(0x10)
	struct TArray<struct USchematicRarity*> EndlessRarity; // 0x290(0x10)
	char UnknownData_2A0[0xa0]; // 0x2a0(0xa0)

	struct FSchematicType GetSchematicTypeData(enum class ESchematicType InType); // Function FSD.SchematicSettings.GetSchematicTypeData
	struct TSet<struct USchematic*> GetSchematics(); // Function FSD.SchematicSettings.GetSchematics
};

// Class FSD.ForginSettings
// Size: 0x48 (Inherited: 0x30)
struct UForginSettings : UDataAsset {
	int32_t XPRequiredPerLevel; // 0x30(0x04)
	char UnknownData_34[0x4]; // 0x34(0x04)
	struct TArray<enum class ESchematicType> MasteryRewardCycle; // 0x38(0x10)
};

// Class FSD.SendInviteBlueprintCallProxy
// Size: 0x88 (Inherited: 0x30)
struct USendInviteBlueprintCallProxy : UOnlineBlueprintCallProxyBase {
	struct FMulticastInlineDelegate OnSuccess; // 0x30(0x10)
	struct FMulticastInlineDelegate OnFailure; // 0x40(0x10)
	struct UObject* WorldContextObject; // 0x50(0x08)
	char UnknownData_58[0x30]; // 0x58(0x30)

	struct USendInviteBlueprintCallProxy* SendInvite(struct UObject* WorldContextObject, struct FString ListName, struct FString userId); // Function FSD.SendInviteBlueprintCallProxy.SendInvite
};

// Class FSD.SendSessionInviteToFriendBlueprintCallProxy
// Size: 0x68 (Inherited: 0x30)
struct USendSessionInviteToFriendBlueprintCallProxy : UOnlineBlueprintCallProxyBase {
	struct FMulticastInlineDelegate OnSuccess; // 0x30(0x10)
	struct FMulticastInlineDelegate OnFailure; // 0x40(0x10)
	struct UObject* WorldContextObject; // 0x50(0x08)
	char UnknownData_58[0x10]; // 0x58(0x10)

	struct USendSessionInviteToFriendBlueprintCallProxy* SendSessionInviteToFriend(struct UObject* WorldContextObject, struct FString FriendId); // Function FSD.SendSessionInviteToFriendBlueprintCallProxy.SendSessionInviteToFriend
};

// Class FSD.SentryAttachment
// Size: 0x220 (Inherited: 0x220)
struct ASentryAttachment : AActor {
};

// Class FSD.SentryGunAnimInstance
// Size: 0x290 (Inherited: 0x270)
struct USentryGunAnimInstance : UAnimInstance {
	struct ASentryGun* SentryGun; // 0x268(0x08)
	struct ARedeployableSentryGun* RedeployableSentryGun; // 0x270(0x08)
	struct FRotator TurretRotation; // 0x278(0x0c)
	float YawOffset; // 0x284(0x04)
	float BuildProgress; // 0x288(0x04)
};

// Class FSD.RecallableSentryGun
// Size: 0x440 (Inherited: 0x420)
struct ARecallableSentryGun : ARecallableActor {
	struct FMulticastInlineDelegate OnSentryIndexChanged; // 0x420(0x10)
	int32_t SentryIndex; // 0x430(0x04)
	char UnknownData_434[0xc]; // 0x434(0x0c)

	void SentryIndexChanged__DelegateSignature(int32_t Index); // DelegateFunction FSD.RecallableSentryGun.SentryIndexChanged__DelegateSignature
	void ReceiveOnSentryReady(struct ASentryGun* SentryGun, struct APlayerCharacter* PlayerCharacter); // Function FSD.RecallableSentryGun.ReceiveOnSentryReady
	void OnRep_SentryIndex(); // Function FSD.RecallableSentryGun.OnRep_SentryIndex
	void GetStateDescription(struct FText Description); // Function FSD.RecallableSentryGun.GetStateDescription
	struct ASentryGun* GetSentryGunClass(); // Function FSD.RecallableSentryGun.GetSentryGunClass
	struct ASentryGun* GetSentryGun(); // Function FSD.RecallableSentryGun.GetSentryGun
};

// Class FSD.ReloadSentryUsableComponent
// Size: 0x170 (Inherited: 0x100)
struct UReloadSentryUsableComponent : UUsableComponent {
	struct FText OutOfAmmoText; // 0x100(0x18)
	struct FText AmmoFullText; // 0x118(0x18)
	struct USoundBase* AudioOutOfAmmo; // 0x130(0x08)
	struct USoundBase* AudioReloading; // 0x138(0x08)
	struct UAudioComponent* ReloadingAudioComponent; // 0x140(0x08)
	bool Usable; // 0x148(0x01)
	bool bReloading; // 0x149(0x01)
	char UnknownData_14A[0x6]; // 0x14a(0x06)
	struct UAudioComponent* ReloadAudioComponent; // 0x150(0x08)
	float AmmoPerSec; // 0x158(0x04)
	char UnknownData_15C[0x4]; // 0x15c(0x04)
	struct FWeakObjectPtr<struct APlayerCharacter> OwningPlayerCharacter; // 0x160(0x08)
	struct ASentryGun* SentryGun; // 0x168(0x08)

	void SetOwningPlayerCharacter(struct APlayerCharacter* Player); // Function FSD.ReloadSentryUsableComponent.SetOwningPlayerCharacter
	void SetCanUse(bool isUsable); // Function FSD.ReloadSentryUsableComponent.SetCanUse
	void OnRep_Reloading(); // Function FSD.ReloadSentryUsableComponent.OnRep_Reloading
	void OnReloadAudioFinished(); // Function FSD.ReloadSentryUsableComponent.OnReloadAudioFinished
};

// Class FSD.SentryGunItem
// Size: 0x3a0 (Inherited: 0x390)
struct ASentryGunItem : APlaceableItem {
	struct TArray<struct UItemUpgrade*> Upgrades; // 0x390(0x10)
};

// Class FSD.RecallableSentryGunItem
// Size: 0x410 (Inherited: 0x388)
struct ARecallableSentryGunItem : ARecallableItem {
	struct FMulticastInlineDelegate OnActiveItemsChanged; // 0x388(0x10)
	struct FMulticastInlineDelegate OnSelectedItemChanged; // 0x398(0x10)
	int32_t MaxSentryCount; // 0x3a8(0x04)
	float MinDistanceBetweenSentries; // 0x3ac(0x04)
	struct FText RecallHoldDescription; // 0x3b0(0x18)
	float RecallHoldDuration; // 0x3c8(0x04)
	char UnknownData_3CC[0x4]; // 0x3cc(0x04)
	struct UCapacityHoldingItemAggregator* AmmoCapacity; // 0x3d0(0x08)
	struct UItemPlacerAggregator* ItemPlacer; // 0x3d8(0x08)
	struct TArray<struct UItemUpgrade*> Upgrades; // 0x3e0(0x10)
	struct AItem* LoadoutClass; // 0x3f0(0x08)
	float SupplyStatusWeight; // 0x3f8(0x04)
	float SentryAngleRestriction; // 0x3fc(0x04)
	bool bIsUpgraded; // 0x400(0x01)
	char UnknownData_401[0xf]; // 0x401(0x0f)

	void ReceiveItemUpgraded(); // Function FSD.RecallableSentryGunItem.ReceiveItemUpgraded
	void RecallableSentryGunSignature__DelegateSignature(struct ARecallableSentryGun* SentryGun); // DelegateFunction FSD.RecallableSentryGunItem.RecallableSentryGunSignature__DelegateSignature
	void RecallableSentryGunItemSignature__DelegateSignature(struct ARecallableSentryGunItem* Item); // DelegateFunction FSD.RecallableSentryGunItem.RecallableSentryGunItemSignature__DelegateSignature
	bool HasAmmoLeft(); // Function FSD.RecallableSentryGunItem.HasAmmoLeft
	struct ARecallableSentryGun* GetSelectedSentryGun(); // Function FSD.RecallableSentryGunItem.GetSelectedSentryGun
	struct TArray<struct ARecallableSentryGun*> GetActiveSentryGuns(); // Function FSD.RecallableSentryGunItem.GetActiveSentryGuns
	bool AreAllSentriesPlaced(); // Function FSD.RecallableSentryGunItem.AreAllSentriesPlaced
};

// Class FSD.SessionHandling
// Size: 0x28 (Inherited: 0x28)
struct USessionHandling : UBlueprintFunctionLibrary {

	void StopVoice(struct UObject* WorldContextObject); // Function FSD.SessionHandling.StopVoice
	void StartVoice(struct UObject* WorldContextObject); // Function FSD.SessionHandling.StartVoice
	bool StartSearchForFriends(int32_t localUserNum, struct UFSDGameInstance* GameInstance); // Function FSD.SessionHandling.StartSearchForFriends
	void StartCheckForInstalledDLC(struct UObject* WorldContextObject); // Function FSD.SessionHandling.StartCheckForInstalledDLC
	void SortServerList(struct UObject* WorldContextObject, enum class EServerSortOrder order, bool Reverse, bool sortByFriends, struct TArray<struct FBlueprintSessionResult> servers); // Function FSD.SessionHandling.SortServerList
	void ShowStoreUI(struct UObject* WorldContextObject); // Function FSD.SessionHandling.ShowStoreUI
	void ShowInviteUI(struct UObject* WorldContextObject); // Function FSD.SessionHandling.ShowInviteUI
	void JoinOfficialXboxClub(struct UObject* WorldContextObject); // Function FSD.SessionHandling.JoinOfficialXboxClub
	bool IsVoiceChatting(); // Function FSD.SessionHandling.IsVoiceChatting
	bool IsInActiveSession(); // Function FSD.SessionHandling.IsInActiveSession
	bool IsDisconnectReasonAKick(enum class EDisconnectReason reason); // Function FSD.SessionHandling.IsDisconnectReasonAKick
	struct FString GetVoiceStatus(); // Function FSD.SessionHandling.GetVoiceStatus
	struct FText GetSessionJoinError(struct UObject* WorldContextObject); // Function FSD.SessionHandling.GetSessionJoinError
	bool GetOnlinePlayerName(int32_t localUserNum, struct FString Name); // Function FSD.SessionHandling.GetOnlinePlayerName
	enum class EFSDNATType GetNATType(struct UObject* WorldContextObject); // Function FSD.SessionHandling.GetNATType
	enum class EMissionStructure GetMissionStructure(struct FBlueprintSessionResult Result); // Function FSD.SessionHandling.GetMissionStructure
	struct FString GetLoginStatus(int32_t localUserNum); // Function FSD.SessionHandling.GetLoginStatus
	struct FString GetHostUsername(struct UObject* WorldContextObject); // Function FSD.SessionHandling.GetHostUsername
	struct FString GetHostUniqueId(struct UObject* WorldContextObject); // Function FSD.SessionHandling.GetHostUniqueId
	bool GetFriendsList(int32_t localUserNum, struct TArray<struct FFriendInfo> Players); // Function FSD.SessionHandling.GetFriendsList
	struct FString GetFriendlyServerNameSanitized(struct UObject* WorldContextObject); // Function FSD.SessionHandling.GetFriendlyServerNameSanitized
	struct FString GetFriendlyServerName(struct UObject* WorldContextObject); // Function FSD.SessionHandling.GetFriendlyServerName
	bool GetCurrentSessionState(struct FString sessionState, struct FString ID); // Function FSD.SessionHandling.GetCurrentSessionState
	bool FSDUpdateSessionInfo(struct UObject* WorldContextObject); // Function FSD.SessionHandling.FSDUpdateSessionInfo
	enum class EFSDMissionStatus FSDMissionStatus(struct FBlueprintSessionResult Result); // Function FSD.SessionHandling.FSDMissionStatus
	void FSDListen(struct UObject* WorldContextObject); // Function FSD.SessionHandling.FSDListen
	bool FSDIsSessionValid(struct FBlueprintSessionResult Result); // Function FSD.SessionHandling.FSDIsSessionValid
	bool FSDIsPrivateServer(struct FBlueprintSessionResult Result); // Function FSD.SessionHandling.FSDIsPrivateServer
	bool FSDIsPasswordRequired(struct FBlueprintSessionResult Result); // Function FSD.SessionHandling.FSDIsPasswordRequired
	bool FSDIsModdedServer(struct FBlueprintSessionResult Result); // Function FSD.SessionHandling.FSDIsModdedServer
	bool FSDIsFullServer(struct FBlueprintSessionResult Result); // Function FSD.SessionHandling.FSDIsFullServer
	bool FSDIsEliteDeepDive(struct FBlueprintSessionResult Result); // Function FSD.SessionHandling.FSDIsEliteDeepDive
	bool FSDIsClassLocked(struct FBlueprintSessionResult Result); // Function FSD.SessionHandling.FSDIsClassLocked
	bool FSDHasGameStarted(struct FBlueprintSessionResult Result); // Function FSD.SessionHandling.FSDHasGameStarted
	bool FSDGetServerStartTime(struct FBlueprintSessionResult Result, struct FDateTime StartTime); // Function FSD.SessionHandling.FSDGetServerStartTime
	struct FString FSDGetServerNameSanitized(struct FBlueprintSessionResult Result); // Function FSD.SessionHandling.FSDGetServerNameSanitized
	struct FString FSDGetServerName(struct FBlueprintSessionResult Result); // Function FSD.SessionHandling.FSDGetServerName
	struct FString FSDGetServerID(struct FBlueprintSessionResult Result); // Function FSD.SessionHandling.FSDGetServerID
	struct FString FSDGetRegion(struct FBlueprintSessionResult Result); // Function FSD.SessionHandling.FSDGetRegion
	struct TArray<struct APlayerCharacter*> FSDGetPlayerClasses(struct FBlueprintSessionResult Result); // Function FSD.SessionHandling.FSDGetPlayerClasses
	int32_t FSDGetNumPlayers(struct FBlueprintSessionResult Result); // Function FSD.SessionHandling.FSDGetNumPlayers
	struct TArray<struct FString> FSDGetModsInstalled(struct FBlueprintSessionResult Result); // Function FSD.SessionHandling.FSDGetModsInstalled
	int32_t FSDGetMissionSeed(struct FBlueprintSessionResult Result); // Function FSD.SessionHandling.FSDGetMissionSeed
	struct FString FSDGetMapName(struct FBlueprintSessionResult Result); // Function FSD.SessionHandling.FSDGetMapName
	struct FString FSDGetHostUserID(struct FBlueprintSessionResult Result); // Function FSD.SessionHandling.FSDGetHostUserID
	int32_t FSDGetGlobalMissionSeed(struct FBlueprintSessionResult Result); // Function FSD.SessionHandling.FSDGetGlobalMissionSeed
	float FSDGetDistanceFloat(struct FBlueprintSessionResult Result); // Function FSD.SessionHandling.FSDGetDistanceFloat
	enum class EServerDistance FSDGetDistance(struct FBlueprintSessionResult Result); // Function FSD.SessionHandling.FSDGetDistance
	struct UDifficultySetting* FSDGetDifficulty(struct FBlueprintSessionResult Result); // Function FSD.SessionHandling.FSDGetDifficulty
	struct FString FSDGetBuildId(struct FBlueprintSessionResult Result); // Function FSD.SessionHandling.FSDGetBuildId
	bool FSDCancelFindSessions(struct UObject* WorldContextObject); // Function FSD.SessionHandling.FSDCancelFindSessions
	bool FindBestQuickJoinServer(struct UObject* WorldContextObject, struct TArray<struct FBlueprintSessionResult> sessions, struct UDifficultySetting* Difficulty, struct UBiome* Biome, struct UMissionTemplate* MissionTemplate, struct FBlueprintSessionResult OutResult); // Function FSD.SessionHandling.FindBestQuickJoinServer
	bool AllowLinkToExternalFeedback(struct UObject* WorldContextObject); // Function FSD.SessionHandling.AllowLinkToExternalFeedback
};

// Class FSD.SharkEnemy
// Size: 0x4e8 (Inherited: 0x398)
struct ASharkEnemy : AEnemyDeepPathfinderCharacter {
	struct UPawnSensingComponent* PawnSensing; // 0x398(0x08)
	struct USphereComponent* CollisionSphere; // 0x3a0(0x08)
	struct USphereComponent* NearTargetSphere; // 0x3a8(0x08)
	struct UParticleSystemComponent* TearingGroundParticles; // 0x3b0(0x08)
	struct UParticleSystemComponent* AirTrailParticles; // 0x3b8(0x08)
	struct UInDangerComponent* Danger; // 0x3c0(0x08)
	struct UEnemyComponent* EnemyComponent; // 0x3c8(0x08)
	struct UDamageComponent* Damage; // 0x3d0(0x08)
	struct UDamageComponent* BumpDamage; // 0x3d8(0x08)
	struct UFakePhysGrabberComponent* RestrictedGrabberComponent; // 0x3e0(0x08)
	float RagdollSpeedFactor; // 0x3e8(0x04)
	char UnknownData_3EC[0x4]; // 0x3ec(0x04)
	struct USoundCue* ImpactCue; // 0x3f0(0x08)
	struct USoundCue* JumpSound; // 0x3f8(0x08)
	char UnknownData_400[0x4]; // 0x400(0x04)
	float DiveForSeconds; // 0x404(0x04)
	char UnknownData_408[0x4]; // 0x408(0x04)
	struct FVector_NetQuantize RagdollImpact; // 0x40c(0x0c)
	char UnknownData_418[0x10]; // 0x418(0x10)
	float LaunchPower; // 0x428(0x04)
	char UnknownData_42C[0xc]; // 0x42c(0x0c)
	float GrabTime; // 0x438(0x04)
	char UnknownData_43C[0xc]; // 0x43c(0x0c)
	float StopSpeedThreshold; // 0x448(0x04)
	float UpsideDownTime; // 0x44c(0x04)
	float RaiseSpeed; // 0x450(0x04)
	float TiltInSpeed; // 0x454(0x04)
	float TiltOutSpeed; // 0x458(0x04)
	float SafeTimeAfterVounerable; // 0x45c(0x04)
	float RaiseHeight; // 0x460(0x04)
	float AttackDuration; // 0x464(0x04)
	float HitLaunchPower; // 0x468(0x04)
	float ChanceToGrab; // 0x46c(0x04)
	float MinTimeBetweenBumps; // 0x470(0x04)
	char UnknownData_474[0x4]; // 0x474(0x04)
	float ChanceForJump; // 0x478(0x04)
	float MinJumpCooldown; // 0x47c(0x04)
	float MaxJumpCooldown; // 0x480(0x04)
	float JumpForce; // 0x484(0x04)
	float TimeBeforeGroundCheck; // 0x488(0x04)
	char UnknownData_48C[0xc]; // 0x48c(0x0c)
	float MinCirclingTime; // 0x498(0x04)
	float MaxCirclingTime; // 0x49c(0x04)
	struct UFakeMoverSettings* CircleSetttings; // 0x4a0(0x08)
	struct UFakeMoverSettings* AttackSettings; // 0x4a8(0x08)
	struct UFakeMoverSettings* PostHitSettings; // 0x4b0(0x08)
	struct UFakeMoverSettings* JumpSettings; // 0x4b8(0x08)
	struct UFakeMoverSettings* VounerableSettings; // 0x4c0(0x08)
	float MaxInGroundTime; // 0x4c8(0x04)
	float MinInGroundTime; // 0x4cc(0x04)
	float StartParticleTime; // 0x4d0(0x04)
	float EndParticleTime; // 0x4d4(0x04)
	struct UParticleSystem* DiveParticles; // 0x4d8(0x08)
	char UnknownData_4E0[0x1]; // 0x4e0(0x01)
	enum class ESharkEnemyState State; // 0x4e1(0x01)
	char UnknownData_4E2[0x6]; // 0x4e2(0x06)

	void SetVulnerable(); // Function FSD.SharkEnemy.SetVulnerable
	void ReleasePlayer(struct AActor* playerchar); // Function FSD.SharkEnemy.ReleasePlayer
	void PopRecentlyBumpedPlayer(); // Function FSD.SharkEnemy.PopRecentlyBumpedPlayer
	void OnStateChangedEvent(enum class ESharkEnemyState CurrentState); // Function FSD.SharkEnemy.OnStateChangedEvent
	void OnSeePawn(struct APawn* APawn); // Function FSD.SharkEnemy.OnSeePawn
	void OnRep_State(); // Function FSD.SharkEnemy.OnRep_State
	void OnRep_RagdollImpact(); // Function FSD.SharkEnemy.OnRep_RagdollImpact
	void OnRep_DiveTime(); // Function FSD.SharkEnemy.OnRep_DiveTime
	void OnNearTarget(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult SweepResult); // Function FSD.SharkEnemy.OnNearTarget
	void OnLandedEvent(); // Function FSD.SharkEnemy.OnLandedEvent
	void OnJumpEvent(); // Function FSD.SharkEnemy.OnJumpEvent
	void OnGrabbedEvent(); // Function FSD.SharkEnemy.OnGrabbedEvent
	void OnDeath(struct UHealthComponentBase* aHealthComponent); // Function FSD.SharkEnemy.OnDeath
	void OnDamaged(float aAmount); // Function FSD.SharkEnemy.OnDamaged
	void OnCollided(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult SweepResult); // Function FSD.SharkEnemy.OnCollided
	void Jumped(); // Function FSD.SharkEnemy.Jumped
	void ImpactSound(); // Function FSD.SharkEnemy.ImpactSound
	void DiveShow(); // Function FSD.SharkEnemy.DiveShow
	void DiveHide(); // Function FSD.SharkEnemy.DiveHide
	void ActivateDanger(); // Function FSD.SharkEnemy.ActivateDanger
};

// Class FSD.SharkAnimInstance
// Size: 0x410 (Inherited: 0x410)
struct USharkAnimInstance : USpiderAnimInstance {
	enum class ESharkEnemyState SharkState; // 0x408(0x01)
	bool IsCloseToGround; // 0x409(0x01)
	bool AttackConnected; // 0x40a(0x01)
	float BendValue; // 0x40c(0x04)
};

// Class FSD.ShootingPlantAnimInstance
// Size: 0x2e0 (Inherited: 0x2c0)
struct UShootingPlantAnimInstance : UEnemyAnimInstance {
	struct AActor* Target; // 0x2b8(0x08)
	float Yaw; // 0x2c0(0x04)
	float Pitch; // 0x2c4(0x04)
	float YawSpeed; // 0x2c8(0x04)
	float PitchSpeed; // 0x2cc(0x04)
	bool IsVisible; // 0x2d0(0x01)
	char UnknownData_2D9[0x7]; // 0x2d9(0x07)
};

// Class FSD.ShowroomItem
// Size: 0x248 (Inherited: 0x220)
struct AShowroomItem : AActor {
	SoftClassProperty ShowroomStage; // 0x220(0x28)
};

// Class FSD.EnemyShowroomItem
// Size: 0x250 (Inherited: 0x248)
struct AEnemyShowroomItem : AShowroomItem {
	enum class EShowroomScaling Scaling; // 0x248(0x01)
	char UnknownData_249[0x7]; // 0x249(0x07)
};

// Class FSD.ShowroomController
// Size: 0xb8 (Inherited: 0xb0)
struct UShowroomController : UActorComponent {
	struct AShowroomStage* Stage; // 0xb0(0x08)

	void SetLightChannels(struct AActor* Actor); // Function FSD.ShowroomController.SetLightChannels
	void RotateShowroom(float Pitch, float Yaw); // Function FSD.ShowroomController.RotateShowroom
	void ResetShowroomRotation(); // Function FSD.ShowroomController.ResetShowroomRotation
	struct FRotator GetShowroomRotation(); // Function FSD.ShowroomController.GetShowroomRotation
};

// Class FSD.EnemyShowroomController
// Size: 0xc8 (Inherited: 0xb8)
struct UEnemyShowroomController : UShowroomController {
	struct AEnemyShowroomItem* EnemyInstance; // 0xb8(0x08)
	struct UEnemyMinersManualData* enemyData; // 0xc0(0x08)

	void Receive_PlayAttack(struct UAnimSequenceBase* attackAnimation); // Function FSD.EnemyShowroomController.Receive_PlayAttack
	void PlayAttack(struct UAnimSequenceBase* Animation); // Function FSD.EnemyShowroomController.PlayAttack
	struct UEnemyShowroomController* DisplayEnemy(struct UObject* WorldContextObject, struct UEnemyMinersManualData* enemyData); // Function FSD.EnemyShowroomController.DisplayEnemy
};

// Class FSD.CharacterShowroomController
// Size: 0xc0 (Inherited: 0xb8)
struct UCharacterShowroomController : UShowroomController {
	struct APlayerCharacter* CharacterInstance; // 0xb8(0x08)

	void Receive_CharacterShown(); // Function FSD.CharacterShowroomController.Receive_CharacterShown
	void EquipWeapon(enum class EItemCategory Category); // Function FSD.CharacterShowroomController.EquipWeapon
	struct UCharacterShowroomController* DisplayCharacter(struct UObject* WorldContextObject, struct UPlayerCharacterID* characterID); // Function FSD.CharacterShowroomController.DisplayCharacter
};

// Class FSD.ShowroomManager
// Size: 0xd8 (Inherited: 0xb0)
struct UShowroomManager : UActorComponent {
	struct FVector ShowroomLocation; // 0xb0(0x0c)
	char UnknownData_BC[0x4]; // 0xbc(0x04)
	struct AShowroomStage* CurrentStage; // 0xc0(0x08)
	struct AShowroomStage* StageInstance; // 0xc8(0x08)
	struct UTextureRenderTarget2D* RenderTarget; // 0xd0(0x08)

	struct UShowroomController* GetController(); // Function FSD.ShowroomManager.GetController
	void ClearShowroom(); // Function FSD.ShowroomManager.ClearShowroom
};

// Class FSD.ShowroomSettings
// Size: 0xa8 (Inherited: 0x30)
struct UShowroomSettings : UDataAsset {
	SoftClassProperty EnemyShowroomController; // 0x30(0x28)
	SoftClassProperty CharacterShowroomController; // 0x58(0x28)
	SoftClassProperty CharacterStage; // 0x80(0x28)
};

// Class FSD.ShowroomStage
// Size: 0x260 (Inherited: 0x220)
struct AShowroomStage : AActor {
	struct USceneCaptureComponent2D* SceneCapure; // 0x220(0x08)
	struct UShowroomController* ControllerClass; // 0x228(0x08)
	struct UShowroomController* ControllerInstance; // 0x230(0x08)
	struct USceneCaptureComponent2D* SceneCapture; // 0x238(0x08)
	float MinPitch; // 0x240(0x04)
	float MaxPitch; // 0x244(0x04)
	struct USceneComponent* CameraFocusPoint; // 0x248(0x08)
	char UnknownData_250[0x10]; // 0x250(0x10)

	void ReceiveInitialize(struct UTextureRenderTarget2D* RenderTarget); // Function FSD.ShowroomStage.ReceiveInitialize
	struct UTextureRenderTarget2D* CreateRenderTarget(); // Function FSD.ShowroomStage.CreateRenderTarget
};

// Class FSD.SimpleHealthComponent
// Size: 0x1c0 (Inherited: 0x148)
struct USimpleHealthComponent : UHealthComponentBase {
	float Damage; // 0x148(0x04)
	float MaxHealth; // 0x14c(0x04)
	bool InvulnerableToNonDefinedResistances; // 0x150(0x01)
	bool bShowHealthBar; // 0x151(0x01)
	char UnknownData_152[0x2]; // 0x152(0x02)
	struct FVector HealthBarOffsetWorld; // 0x154(0x0c)
	struct FWeakObjectPtr<struct UEnemyComponent> EnemyComponent; // 0x160(0x08)
	struct TMap<struct UPawnStat*, float> Resistances; // 0x168(0x50)
	bool AutomaticFlushNetDormancy; // 0x1b8(0x01)
	char UnknownData_1B9[0x7]; // 0x1b9(0x07)

	void OnRep_Damage(float oldDamage); // Function FSD.SimpleHealthComponent.OnRep_Damage
	float HealFromDeath(float amount); // Function FSD.SimpleHealthComponent.HealFromDeath
};

// Class FSD.MaggotAnimationSharingStateProcessor
// Size: 0x50 (Inherited: 0x50)
struct UMaggotAnimationSharingStateProcessor : UAnimationSharingStateProcessor {
};

// Class FSD.PipelineAnimationSharingProcessor
// Size: 0x50 (Inherited: 0x50)
struct UPipelineAnimationSharingProcessor : UAnimationSharingStateProcessor {
};

// Class FSD.Skinnable
// Size: 0x28 (Inherited: 0x28)
struct USkinnable : UInterface {
};

// Class FSD.SkinnableComponent
// Size: 0xd0 (Inherited: 0xb0)
struct USkinnableComponent : UActorComponent {
	struct UItemSkin* EquippedSkinColor; // 0xb0(0x08)
	struct UItemSkin* EquippedSkinMesh; // 0xb8(0x08)
	char UnknownData_C0[0x10]; // 0xc0(0x10)

	void UpdateSkin(struct AFSDPlayerState* Player); // Function FSD.SkinnableComponent.UpdateSkin
	void OnLoadoutChanged(); // Function FSD.SkinnableComponent.OnLoadoutChanged
	struct TArray<struct UItemSkin*> GetSkinsForItem(struct UItemID* ItemID, enum class EItemSkinType SkinType); // Function FSD.SkinnableComponent.GetSkinsForItem
	struct UItemSkin* GetEquippedSkinMesh(struct UItemID* ItemID, struct AFSDPlayerState* Player); // Function FSD.SkinnableComponent.GetEquippedSkinMesh
	struct UItemSkin* GetEquippedSkinColor(struct UItemID* ItemID, struct AFSDPlayerState* Player); // Function FSD.SkinnableComponent.GetEquippedSkinColor
	struct UItemSkin* GetEquippedSkin(struct UItemID* ItemID, enum class EItemSkinType SkinType, struct AFSDPlayerState* Player); // Function FSD.SkinnableComponent.GetEquippedSkin
	struct UItemSkin* GetDefaultItemSkin(struct UItemID* ItemID, enum class EItemSkinType itemSkinType); // Function FSD.SkinnableComponent.GetDefaultItemSkin
	void FilterColorSkins(struct TArray<struct UItemSkin*> Skins, struct UItemSkin* equippedMeshSkin); // Function FSD.SkinnableComponent.FilterColorSkins
	void EquipSkin(struct UItemSkin* Skin, struct UItemID* ItemID, struct AFSDPlayerState* Player); // Function FSD.SkinnableComponent.EquipSkin
};

// Class FSD.DroneSkinnableComponent
// Size: 0xd0 (Inherited: 0xd0)
struct UDroneSkinnableComponent : USkinnableComponent {
};

// Class FSD.SoundClassManager
// Size: 0x40 (Inherited: 0x30)
struct USoundClassManager : UGameInstanceSubsystem {
	char UnknownData_30[0x10]; // 0x30(0x10)
};

// Class FSD.SoundMixManagerComponent
// Size: 0xc0 (Inherited: 0xb0)
struct USoundMixManagerComponent : UActorComponent {
	struct TArray<struct FSoundMixManagerItem> SoundMixes; // 0xb0(0x10)
};

// Class FSD.SpaceRigBar
// Size: 0x270 (Inherited: 0x220)
struct ASpaceRigBar : AActor {
	struct FMulticastInlineDelegate OnNewDrinkableSpecial; // 0x220(0x10)
	struct UInstantUsable* BarUsable; // 0x230(0x08)
	struct UBoxComponent* BarUsableCollider; // 0x238(0x08)
	struct UBarMenuWidget* BarMenuWidget; // 0x240(0x08)
	struct TArray<struct FVector> DrinkServingLocations; // 0x248(0x10)
	struct TArray<struct FDrinkableBarSlot> DrinkableBarSlots; // 0x258(0x10)
	struct UDrinkableDataAsset* DrinkableSpecial; // 0x268(0x08)

	void SpawnDrinkables(struct UDrinkableDataAsset* Drinkable, struct APlayerCharacter* User); // Function FSD.SpaceRigBar.SpawnDrinkables
	void ReceiveFinishedSpawningDrinkables(struct UDrinkableDataAsset* DrinkableData, struct APlayerCharacter* Customer); // Function FSD.SpaceRigBar.ReceiveFinishedSpawningDrinkables
	void ReceiveDrinkableSpawned(struct ADrinkableActor* Drinkable, struct APlayerCharacter* Customer, int32_t LocationIndex); // Function FSD.SpaceRigBar.ReceiveDrinkableSpawned
	void ReceiveBeginSpawningDrinkables(struct UDrinkableDataAsset* DrinkableData, struct APlayerCharacter* Customer); // Function FSD.SpaceRigBar.ReceiveBeginSpawningDrinkables
	void PlayBartenderTip(struct APlayerCharacter* User); // Function FSD.SpaceRigBar.PlayBartenderTip
	void PayTip(struct APlayerCharacter* Character, int32_t Credits); // Function FSD.SpaceRigBar.PayTip
	void OnRep_DrinkableSpecial(); // Function FSD.SpaceRigBar.OnRep_DrinkableSpecial
	bool HasUnclaimedDrinkables(); // Function FSD.SpaceRigBar.HasUnclaimedDrinkables
	bool HasSpaceForMoreDrinkables(); // Function FSD.SpaceRigBar.HasSpaceForMoreDrinkables
	int32_t GetAvailableDrinkableSlots(); // Function FSD.SpaceRigBar.GetAvailableDrinkableSlots
	void DrinkableSignature__DelegateSignature(struct UDrinkableDataAsset* Drinkable); // DelegateFunction FSD.SpaceRigBar.DrinkableSignature__DelegateSignature
};

// Class FSD.SpaceRigBarMenuItem
// Size: 0x258 (Inherited: 0x250)
struct USpaceRigBarMenuItem : UFSDUserWidget {
	struct UDrinkableDataAsset* Drink; // 0x250(0x08)

	void Unselect(); // Function FSD.SpaceRigBarMenuItem.Unselect
	void Select(); // Function FSD.SpaceRigBarMenuItem.Select
};

// Class FSD.SpawnActorWithDebrisPosComponent
// Size: 0xb8 (Inherited: 0xb0)
struct USpawnActorWithDebrisPosComponent : UActorComponent {
	float MinDistanceBetweenSpwans; // 0xb0(0x04)
	bool AddTerrainPlacementBlockers; // 0xb4(0x01)
	char UnknownData_B5[0x3]; // 0xb5(0x03)

	bool PlaceActors(int32_t NumToSpawn, int32_t NumToSpawnMin, int32_t NumAllowedChecks, struct AActor* SpawnedActorClass, struct AProceduralSetup* setup, float Radius, struct UDebrisPositioning* DebrisPositioning, struct TArray<struct FVector> locationsToAvoid, struct UCurveFloat* avoidCostCurve, struct TArray<struct AActor*> OutSpawnedActors, struct FVector CustomLocation); // Function FSD.SpawnActorWithDebrisPosComponent.PlaceActors
};

// Class FSD.SpawningBlueprintLibrary
// Size: 0x28 (Inherited: 0x28)
struct USpawningBlueprintLibrary : UBlueprintFunctionLibrary {

	void SpawnEnemyGroupDescriptorSpreadOut(struct UObject* WorldContextObject, struct UEnemyGroupDescriptor* descriptor, float Difficulty, struct TArray<struct FVector> Locations, bool Alert, enum class DeepPathFinderSize pfSize); // Function FSD.SpawningBlueprintLibrary.SpawnEnemyGroupDescriptorSpreadOut
	void SpawnEnemyGroupDescriptor(struct UObject* WorldContextObject, struct UEnemyGroupDescriptor* descriptor, float Difficulty, struct FVector Location, bool Alert, enum class DeepPathFinderSize pfSize); // Function FSD.SpawningBlueprintLibrary.SpawnEnemyGroupDescriptor
	void SpawnEnemiesFromPool(struct UObject* WorldContextObject, float Difficulty, struct TArray<struct FVector> Locations, bool Alert, bool isConstantPreassure); // Function FSD.SpawningBlueprintLibrary.SpawnEnemiesFromPool
	void SpawnEnemiesAtLocationWithCallback(struct UObject* WorldContextObject, struct UEnemyDescriptor* EnemyDescriptor, int32_t count, struct FVector Location, struct FDelegate Callback, bool Alert, bool scaleToDifficulty, enum class DeepPathFinderSize pfSize); // Function FSD.SpawningBlueprintLibrary.SpawnEnemiesAtLocationWithCallback
	void SpawnEnemiesAtLocation(struct UObject* WorldContextObject, struct UEnemyDescriptor* EnemyDescriptor, int32_t count, struct FVector Location, bool Alert, bool scaleToDifficulty, enum class DeepPathFinderSize pfSize); // Function FSD.SpawningBlueprintLibrary.SpawnEnemiesAtLocation
	void SpawnEnemiesAtEachLocation(struct UObject* WorldContextObject, struct UEnemyDescriptor* EnemyDescriptor, struct TArray<struct FVector> Locations, enum class DeepPathFinderSize pfSize); // Function FSD.SpawningBlueprintLibrary.SpawnEnemiesAtEachLocation
	struct TArray<struct FVector> GetSpawnPointsInRange(struct UObject* WorldContextObject, float distanceToPlayers, int32_t spawnPointCount, enum class DeepPathFinderSize pfSize); // Function FSD.SpawningBlueprintLibrary.GetSpawnPointsInRange
	struct TArray<struct FVector> GetSpawnPointsInCircle(struct UObject* WorldContextObject, struct FVector Location, float Radius, int32_t count, bool scaleToDificulty, float maxSpawnAngle, enum class DeepPathFinderSize pfSize); // Function FSD.SpawningBlueprintLibrary.GetSpawnPointsInCircle
	struct TArray<struct FVector> GetSpawnPointsFromLocation(struct UObject* WorldContextObject, struct FVector Location, float Distance, int32_t spawnPointCount, enum class DeepPathFinderSize pfSize); // Function FSD.SpawningBlueprintLibrary.GetSpawnPointsFromLocation
	struct TArray<struct FVector> GetSpawnPointsAroundLocation(struct UObject* WorldContextObject, struct FVector Location, float Distance, int32_t spawnPointCount, enum class DeepPathFinderSize pfSize); // Function FSD.SpawningBlueprintLibrary.GetSpawnPointsAroundLocation
	struct FVector GetSpawnPointInRange(struct UObject* WorldContextObject, float distanceToPlayers, enum class DeepPathFinderSize pfSize); // Function FSD.SpawningBlueprintLibrary.GetSpawnPointInRange
	struct FVector GetSpawnPointFromLocation(struct UObject* WorldContextObject, struct FVector Location, float Distance, enum class DeepPathFinderSize pfSize); // Function FSD.SpawningBlueprintLibrary.GetSpawnPointFromLocation
};

// Class FSD.SpecialAttackComponent
// Size: 0x120 (Inherited: 0xf0)
struct USpecialAttackComponent : UAttackBaseComponent {
	struct TArray<struct UAnimMontage*> Montages; // 0xf0(0x10)
	char UnknownData_100[0x10]; // 0x100(0x10)
	struct FMulticastInlineDelegate OnAttackActionNotify; // 0x110(0x10)

	void TriggerAttack(struct FName Name); // Function FSD.SpecialAttackComponent.TriggerAttack
	struct UAnimMontage* SelectMontage(); // Function FSD.SpecialAttackComponent.SelectMontage
	void Receive_OnPerformAttack(); // Function FSD.SpecialAttackComponent.Receive_OnPerformAttack
	void Receive_OnAborted(); // Function FSD.SpecialAttackComponent.Receive_OnAborted
	void OnMontageEnded(struct UAnimMontage* Montage, bool interrupted); // Function FSD.SpecialAttackComponent.OnMontageEnded
	void OnFrozen(bool IsFrozen); // Function FSD.SpecialAttackComponent.OnFrozen
};

// Class FSD.SpecialDamageAttackComponent
// Size: 0x128 (Inherited: 0x120)
struct USpecialDamageAttackComponent : USpecialAttackComponent {
	struct UDamageComponent* Damage; // 0x120(0x08)
};

// Class FSD.SpecialEventBlueprintLibrary
// Size: 0x28 (Inherited: 0x28)
struct USpecialEventBlueprintLibrary : UBlueprintFunctionLibrary {

	struct USchematic* TryGivePendingReward(struct UObject* WorldContextObject); // Function FSD.SpecialEventBlueprintLibrary.TryGivePendingReward
	void StorePendingReward(struct UObject* WorldContextObject, struct TArray<struct USchematic*> schematicsToChooseFrom); // Function FSD.SpecialEventBlueprintLibrary.StorePendingReward
	void SpawnEventRewardFrame(struct UObject* WorldContextObject, struct FVector Location); // Function FSD.SpecialEventBlueprintLibrary.SpawnEventRewardFrame
	bool HasPendingReward(struct UObject* WorldContextObject); // Function FSD.SpecialEventBlueprintLibrary.HasPendingReward
	struct TArray<struct USchematic*> GetSpecialEventsRewardSchematics(struct UObject* WorldContextObject); // Function FSD.SpecialEventBlueprintLibrary.GetSpecialEventsRewardSchematics
	void ClearPendingReward(struct UObject* WorldContextObject); // Function FSD.SpecialEventBlueprintLibrary.ClearPendingReward
};

// Class FSD.SpecialEventSpawner
// Size: 0x28 (Inherited: 0x28)
struct USpecialEventSpawner : UObject {
};

// Class FSD.SimpleSpecialEventSpawner
// Size: 0x60 (Inherited: 0x28)
struct USimpleSpecialEventSpawner : USpecialEventSpawner {
	struct UDebrisPositioning* Positioning; // 0x28(0x08)
	SoftClassProperty EventActor; // 0x30(0x28)
	float EventAvoidanceRadius; // 0x58(0x04)
	char UnknownData_5C[0x4]; // 0x5c(0x04)
};

// Class FSD.SpecialEvent
// Size: 0x40 (Inherited: 0x30)
struct USpecialEvent : UDataAsset {
	float Weight; // 0x30(0x04)
	char UnknownData_34[0x4]; // 0x34(0x04)
	struct USpecialEventSpawner* EventSpawner; // 0x38(0x08)
};

// Class FSD.SpecialEventSettings
// Size: 0x110 (Inherited: 0x30)
struct USpecialEventSettings : UDataAsset {
	struct TArray<struct USpecialEvent*> SpecialEvents; // 0x30(0x10)
	SoftClassProperty EventRewardFrameClass; // 0x40(0x28)
	struct UDebrisPositioning* EventRewardFramePositioning; // 0x68(0x08)
	float EventRewardRadius; // 0x70(0x04)
	float CreditsReward; // 0x74(0x04)
	float XPReward; // 0x78(0x04)
	char UnknownData_7C[0x4]; // 0x7c(0x04)
	struct UCurveFloat* SimplePlacementCostCurve; // 0x80(0x08)
	struct FRuntimeFloatCurve SpawnChanceMissionLengthCurve; // 0x88(0x88)
};

// Class FSD.ShootingSpiderAnimInstance
// Size: 0x430 (Inherited: 0x410)
struct UShootingSpiderAnimInstance : USpiderAnimInstance {
	float LookAtBlend; // 0x408(0x04)
	bool CheckCurve; // 0x40c(0x01)
	struct FWeakObjectPtr<struct AActor> TargetActor; // 0x410(0x08)
	struct FVector LookAtLocation; // 0x418(0x0c)
	char UnknownData_429[0x7]; // 0x429(0x07)
};

// Class FSD.SpiderEnemy
// Size: 0x3e0 (Inherited: 0x398)
struct ASpiderEnemy : AEnemyDeepPathfinderCharacter {
	char UnknownData_398[0x8]; // 0x398(0x08)
	struct UPawnStatsComponent* PawnStats; // 0x3a0(0x08)
	struct TArray<struct UAnimSequenceBase*> HitReactions; // 0x3a8(0x10)
	float FirstHitReactBlendIn; // 0x3b8(0x04)
	float OverrideHitReactBlendIn; // 0x3bc(0x04)
	char UnknownData_3C0[0x8]; // 0x3c0(0x08)
	struct UStaticMesh* GoreMesh; // 0x3c8(0x08)
	bool ApplyDifficultySpeedModifier; // 0x3d0(0x01)
	char UnknownData_3D1[0x3]; // 0x3d1(0x03)
	float AttackDamageModifier; // 0x3d4(0x04)
	bool LimitRagdollSpeed; // 0x3d8(0x01)
	char UnknownData_3D9[0x3]; // 0x3d9(0x03)
	float MaxRagdollSpeed; // 0x3dc(0x04)

	void PlayHitReaction(); // Function FSD.SpiderEnemy.PlayHitReaction
	void OnDamaged(float Damage); // Function FSD.SpiderEnemy.OnDamaged
	struct UStaticMeshComponent* CreateHeadGore(); // Function FSD.SpiderEnemy.CreateHeadGore
	void AlertNearbyEnemies(); // Function FSD.SpiderEnemy.AlertNearbyEnemies
};

// Class FSD.EnemyBufferComponent
// Size: 0x170 (Inherited: 0xb0)
struct UEnemyBufferComponent : UActorComponent {
	struct UStatusEffect* StatusEffect; // 0xb0(0x08)
	struct FName BufferParticleSocket; // 0xb8(0x08)
	struct UParticleSystem* Particles; // 0xc0(0x08)
	float ParticleTangentSize; // 0xc8(0x04)
	char UnknownData_CC[0x4]; // 0xcc(0x04)
	struct FMulticastInlineDelegate OnBuffingChangedEvent; // 0xd0(0x10)
	float BuffRadius; // 0xe0(0x04)
	int32_t MaxBuffedTargets; // 0xe4(0x04)
	struct FGameplayTagQuery BuffQuery; // 0xe8(0x48)
	struct TArray<struct AFSDPawn*> BuffTargets; // 0x130(0x10)
	struct TArray<struct UParticleSystemComponent*> ParticleInstances; // 0x140(0x10)
	char UnknownData_150[0x20]; // 0x150(0x20)

	void SetBuffingEnabled(bool Enabled); // Function FSD.EnemyBufferComponent.SetBuffingEnabled
	void OnPawnDied(struct UHealthComponentBase* Health); // Function FSD.EnemyBufferComponent.OnPawnDied
	void OnOwnerDied(struct UHealthComponentBase* Health); // Function FSD.EnemyBufferComponent.OnOwnerDied
};

// Class FSD.AlignEnemyComponent
// Size: 0xb8 (Inherited: 0xb0)
struct UAlignEnemyComponent : UActorComponent {
	bool RotateWhileStationary; // 0xb0(0x01)
	char UnknownData_B1[0x7]; // 0xb1(0x07)

	void SetRotateWhileStationary(bool Value); // Function FSD.AlignEnemyComponent.SetRotateWhileStationary
	void OnRep_RotateWhileStationary(); // Function FSD.AlignEnemyComponent.OnRep_RotateWhileStationary
};

// Class FSD.SplineDecoratorComponent
// Size: 0x580 (Inherited: 0x530)
struct USplineDecoratorComponent : UInstancedStaticMeshComponent {
	float DistanceBetweenInstances; // 0x528(0x04)
	int32_t StartIndex; // 0x52c(0x04)
	int32_t EndIndex; // 0x530(0x04)
	bool bUpdateContinuously; // 0x534(0x01)
	struct FVector VerticalOffset; // 0x538(0x0c)
	struct FVector Scale; // 0x544(0x0c)
	float DistanceProgress; // 0x550(0x04)
	struct USplineComponent* SplineComponent; // 0x558(0x08)
	struct TArray<struct FTransform> NewInstancesTransforms; // 0x560(0x10)
	float Phase; // 0x570(0x04)
	char UnknownData_575[0xb]; // 0x575(0x0b)

	void Update(float DeltaTime); // Function FSD.SplineDecoratorComponent.Update
	void SetUpdateContinuously(bool InContinuously); // Function FSD.SplineDecoratorComponent.SetUpdateContinuously
	void SetSplineComponent(struct USplineComponent* InSplineComponent); // Function FSD.SplineDecoratorComponent.SetSplineComponent
};

// Class FSD.SplinePlant
// Size: 0x448 (Inherited: 0x220)
struct ASplinePlant : AActor {
	struct USplineComponent* PlantSpline; // 0x220(0x08)
	struct USceneComponent* PlantEndPoint; // 0x228(0x08)
	struct UAudioComponent* AudioComponent; // 0x230(0x08)
	struct TSoftObjectPtr<struct USoundCue> CueExtending; // 0x238(0x28)
	struct TSoftObjectPtr<struct USoundCue> CueRetracting; // 0x260(0x28)
	struct USoundCue* AudioExtending; // 0x288(0x08)
	struct USoundCue* AudioRetracting; // 0x290(0x08)
	bool bEnabledSegmentCollision; // 0x298(0x01)
	char UnknownData_299[0x3]; // 0x299(0x03)
	float CarveRadius; // 0x29c(0x04)
	struct TSoftObjectPtr<struct UStaticMesh> SegmentMeshPtr; // 0x2a0(0x28)
	char SegmentForwardAxis; // 0x2c8(0x01)
	char UnknownData_2C9[0x3]; // 0x2c9(0x03)
	float SegmentLength; // 0x2cc(0x04)
	struct FRuntimeFloatCurve SegmentWidthCurve; // 0x2d0(0x88)
	float SegmentWidthScale; // 0x358(0x04)
	char UnknownData_35C[0x4]; // 0x35c(0x04)
	struct FRuntimeFloatCurve SegmentHeightCurve; // 0x360(0x88)
	float SegmentHeightScale; // 0x3e8(0x04)
	float PreviewLengthPercent; // 0x3ec(0x04)
	int32_t PreviewSeed; // 0x3f0(0x04)
	char UnknownData_3F4[0x4]; // 0x3f4(0x04)
	struct TArray<struct USplineMeshComponent*> SegmentMeshCache; // 0x3f8(0x10)
	struct TArray<struct USplineMeshComponent*> CollisionMeshCache; // 0x408(0x10)
	struct USplineComponent* SplineInstance; // 0x418(0x08)
	struct UStaticMesh* SegmentMesh; // 0x420(0x08)
	int32_t Seed; // 0x428(0x04)
	char UnknownData_42C[0x1c]; // 0x42c(0x1c)

	void SetTargetPlantLengthPercent(float InTargetPercent, float InPercentPerSecond, float InEaseExp); // Function FSD.SplinePlant.SetTargetPlantLengthPercent
	void SetTargetPlantLength(float InTargetLength, float InDistancePerSecond, float InEaseExp); // Function FSD.SplinePlant.SetTargetPlantLength
	void SetPlantLengthPercent(float InPercent); // Function FSD.SplinePlant.SetPlantLengthPercent
	void ResetSpline(); // Function FSD.SplinePlant.ResetSpline
	void ResetScale(); // Function FSD.SplinePlant.ResetScale
	void ReceivePrepareSpline(struct USplineComponent* InSplineComponent, int32_t InSeed); // Function FSD.SplinePlant.ReceivePrepareSpline
	void ReceiveMovementUpdated(float InDistanceProgress); // Function FSD.SplinePlant.ReceiveMovementUpdated
	void ReceiveMovementStarted(float InTargetDistance); // Function FSD.SplinePlant.ReceiveMovementStarted
	void ReceiveMovementFinished(float InDistanceProgress); // Function FSD.SplinePlant.ReceiveMovementFinished
	float GetPlantTargetLengthPercent(); // Function FSD.SplinePlant.GetPlantTargetLengthPercent
	float GetPlantLengthPercent(); // Function FSD.SplinePlant.GetPlantLengthPercent
	struct FTransform GetNearestLocationToLocalPlayer(); // Function FSD.SplinePlant.GetNearestLocationToLocalPlayer
	float GetFullPlantLength(); // Function FSD.SplinePlant.GetFullPlantLength
};

// Class FSD.StabberVineRoot
// Size: 0x338 (Inherited: 0x338)
struct AStabberVineRoot : AEnemyPawn {

	void RemoveVine(struct AStabberVine* vine); // Function FSD.StabberVineRoot.RemoveVine
};

// Class FSD.StabberVine
// Size: 0x4b0 (Inherited: 0x338)
struct AStabberVine : AEnemyPawn {
	struct USplineComponent* SplineComponent; // 0x338(0x08)
	struct FTransform RestTransform; // 0x340(0x30)
	struct FTransform LastTransform; // 0x370(0x30)
	struct FTransform DesiredTransform; // 0x3a0(0x30)
	struct FStabberVineTarget DesiredTarget; // 0x3d0(0x18)
	char UnknownData_3E8[0x68]; // 0x3e8(0x68)
	struct FVector TargetLocation; // 0x450(0x0c)
	float MovementAlpha; // 0x45c(0x04)
	float HeadMovementDuration; // 0x460(0x04)
	float CanSwayCooldown; // 0x464(0x04)
	struct FVector2D SwayRange; // 0x468(0x08)
	float NeckBaseTangentLength; // 0x470(0x04)
	struct FVector NeckBasePositionOffset; // 0x474(0x0c)
	struct FVector NeckBaseTangentOffset; // 0x480(0x0c)
	float NeckTopTangentLength; // 0x48c(0x04)
	struct FVector NeckTopPositionOffset; // 0x490(0x0c)
	struct FVector NeckTopTangentOffset; // 0x49c(0x0c)
	float DurationTentacleRetract; // 0x4a8(0x04)
	float DurationTentacleFoldout; // 0x4ac(0x04)

	void UpdateSpline(); // Function FSD.StabberVine.UpdateSpline
	void Recieve_OnRep_Owner(); // Function FSD.StabberVine.Recieve_OnRep_Owner
	void ReceiveSplineUpdated(); // Function FSD.StabberVine.ReceiveSplineUpdated
	void OnRep_DesiredTarget(); // Function FSD.StabberVine.OnRep_DesiredTarget
	void MoveHydraHead(struct FTransform newDesiredTransform, float newCanSwayCooldown, float newHeadMovementDuration); // Function FSD.StabberVine.MoveHydraHead
	struct AStabberVineRoot* GetStabberVineRoot(); // Function FSD.StabberVine.GetStabberVineRoot
};

// Class FSD.StabberVineAnimInstance
// Size: 0xc30 (Inherited: 0x270)
struct UStabberVineAnimInstance : UAnimInstance {
	struct FStabberVineAnimInstanceProxy AnimInstanceProxy; // 0x270(0x8b0)
	struct FVector SplineLocation01; // 0xb20(0x0c)
	struct FVector SplineLocation02; // 0xb2c(0x0c)
	struct FVector SplineLocation03; // 0xb38(0x0c)
	struct FVector SplineLocation04; // 0xb44(0x0c)
	struct FVector SplineLocation05; // 0xb50(0x0c)
	struct FVector SplineLocation06; // 0xb5c(0x0c)
	struct FVector SplineLocation07; // 0xb68(0x0c)
	struct FVector SplineLocation08; // 0xb74(0x0c)
	struct FVector SplineLocation09; // 0xb80(0x0c)
	struct FVector SplineLocation10; // 0xb8c(0x0c)
	struct FVector SplineLocation11; // 0xb98(0x0c)
	struct FRotator SplineRotation01; // 0xba4(0x0c)
	struct FRotator SplineRotation02; // 0xbb0(0x0c)
	struct FRotator SplineRotation03; // 0xbbc(0x0c)
	struct FRotator SplineRotation04; // 0xbc8(0x0c)
	struct FRotator SplineRotation05; // 0xbd4(0x0c)
	struct FRotator SplineRotation06; // 0xbe0(0x0c)
	struct FRotator SplineRotation07; // 0xbec(0x0c)
	struct FRotator SplineRotation08; // 0xbf8(0x0c)
	struct FRotator SplineRotation09; // 0xc04(0x0c)
	struct FRotator SplineRotation10; // 0xc10(0x0c)
	struct FRotator SplineRotation11; // 0xc1c(0x0c)
	char UnknownData_C28[0x8]; // 0xc28(0x08)
};

// Class FSD.StatHat
// Size: 0xa0 (Inherited: 0x28)
struct UStatHat : UObject {
	char UnknownData_28[0x78]; // 0x28(0x78)
};

// Class FSD.StatusEffectExclusiveKey
// Size: 0x30 (Inherited: 0x30)
struct UStatusEffectExclusiveKey : UDataAsset {
};

// Class FSD.StatusEffect
// Size: 0xf8 (Inherited: 0x28)
struct UStatusEffect : UObject {
	struct UPawnAffliction* PawnAffliction; // 0x28(0x08)
	struct TArray<struct UStatusEffectItem*> StatusEffects; // 0x30(0x10)
	float MaxResistance; // 0x40(0x04)
	char UnknownData_44[0x4]; // 0x44(0x04)
	struct UDamageClass* DamageClass; // 0x48(0x08)
	struct UStatusEffectExclusiveKey* ExclusiveKey; // 0x50(0x08)
	struct FRandRange ApplyEffectsInterval; // 0x58(0x08)
	bool CanStack; // 0x60(0x01)
	char UnknownData_61[0x3]; // 0x61(0x03)
	float Duration; // 0x64(0x04)
	bool ApplyDurationAfterPop; // 0x68(0x01)
	bool RemoveOnDeath; // 0x69(0x01)
	char UnknownData_6A[0x6]; // 0x6a(0x06)
	struct FGameplayTagQuery GameplayTagQuery; // 0x70(0x48)
	struct FGameplayTagContainer ExcludeTargetsWithTags; // 0xb8(0x20)
	struct FGameplayTagContainer TargetRequiredTags; // 0xd8(0x20)

	bool ShouldInstantiate(); // Function FSD.StatusEffect.ShouldInstantiate
	float GetStatusEffectDuration(struct UStatusEffect* StatusEffect); // Function FSD.StatusEffect.GetStatusEffectDuration
	bool CanTrigger(struct AActor* Target); // Function FSD.StatusEffect.CanTrigger
};

// Class FSD.StatusEffectItem
// Size: 0x28 (Inherited: 0x28)
struct UStatusEffectItem : UObject {
};

// Class FSD.DotStatusEffectItem
// Size: 0x30 (Inherited: 0x28)
struct UDotStatusEffectItem : UStatusEffectItem {
	struct FRandRange damageAmount; // 0x28(0x08)
};

// Class FSD.PlayerArmorStatusEffectItem
// Size: 0x30 (Inherited: 0x28)
struct UPlayerArmorStatusEffectItem : UStatusEffectItem {
	struct FRandRange ChangeAmount; // 0x28(0x08)
};

// Class FSD.HealingStatusEffectItem
// Size: 0x48 (Inherited: 0x28)
struct UHealingStatusEffectItem : UStatusEffectItem {
	bool HealPercentage; // 0x28(0x01)
	char UnknownData_29[0x3]; // 0x29(0x03)
	float NoDamageTimeRequired; // 0x2c(0x04)
	struct UPawnAffliction* PawnAffliction; // 0x30(0x08)
	struct FRandRange amount; // 0x38(0x08)
	bool IgnoreCanTakeDamage; // 0x40(0x01)
	char UnknownData_41[0x7]; // 0x41(0x07)
};

// Class FSD.StatChangeStatusEffectItem
// Size: 0x38 (Inherited: 0x28)
struct UStatChangeStatusEffectItem : UStatusEffectItem {
	struct UPawnStat* Stat; // 0x28(0x08)
	float StatChange; // 0x30(0x04)
	bool AffectedByResistances; // 0x34(0x01)
	char UnknownData_35[0x3]; // 0x35(0x03)
};

// Class FSD.TemperatureStatusEffectItem
// Size: 0x30 (Inherited: 0x28)
struct UTemperatureStatusEffectItem : UStatusEffectItem {
	struct FRandRange TemperatureChangeAmount; // 0x28(0x08)
};

// Class FSD.HeatSourceStatusEffectItem
// Size: 0x30 (Inherited: 0x28)
struct UHeatSourceStatusEffectItem : UStatusEffectItem {
	float Temperature; // 0x28(0x04)
	enum class ETemperatureIntensity Intensity; // 0x2c(0x01)
	char UnknownData_2D[0x3]; // 0x2d(0x03)
};

// Class FSD.PheromoneStatusEffectItem
// Size: 0x28 (Inherited: 0x28)
struct UPheromoneStatusEffectItem : UStatusEffectItem {
};

// Class FSD.MakeAttackableStatusEffectItem
// Size: 0x38 (Inherited: 0x28)
struct UMakeAttackableStatusEffectItem : UStatusEffectItem {
	float AttackCostModifier; // 0x28(0x04)
	char UnknownData_2C[0x4]; // 0x2c(0x04)
	struct UAttackerPositioningComponent* ComponentClass; // 0x30(0x08)
};

// Class FSD.FSDPawnStatusEffectItem
// Size: 0x30 (Inherited: 0x28)
struct UFSDPawnStatusEffectItem : UStatusEffectItem {
	float StaggerDurationMultiplier; // 0x28(0x04)
	float AttackSpeedModifier; // 0x2c(0x04)
};

// Class FSD.ReplenishOxygenStatusEffectItem
// Size: 0x28 (Inherited: 0x28)
struct UReplenishOxygenStatusEffectItem : UStatusEffectItem {
};

// Class FSD.EnemyTemperatureStatusEffectItem
// Size: 0x38 (Inherited: 0x28)
struct UEnemyTemperatureStatusEffectItem : UStatusEffectItem {
	float WarmingRate; // 0x28(0x04)
	float UnFreezeTemperature; // 0x2c(0x04)
	float TemperatureChangeScaleModifier; // 0x30(0x04)
	char UnknownData_34[0x4]; // 0x34(0x04)
};

// Class FSD.StatusEffectsComponent
// Size: 0x120 (Inherited: 0xb0)
struct UStatusEffectsComponent : UActorComponent {
	struct TArray<struct FActiveStatusEffectBank> ActiveStatusEffects; // 0xb0(0x10)
	struct UHealthComponentBase* OwnerHealth; // 0xc0(0x08)
	struct TSet<struct UStatusEffectExclusiveKey*> ActiveExclusiveKeys; // 0xc8(0x50)
	bool IgnoreAll; // 0x118(0x01)
	char UnknownData_119[0x7]; // 0x119(0x07)

	bool TryPushActiveStatusEffect(struct UStatusEffect* StatusEffect, struct AActor* Target, struct AActor* Owner); // Function FSD.StatusEffectsComponent.TryPushActiveStatusEffect
	bool TryPopActiveStatusEffect(struct UStatusEffect* StatusEffect, struct AActor* Target, struct AActor* Owner); // Function FSD.StatusEffectsComponent.TryPopActiveStatusEffect
	bool PushActiveStatusEffectInstance(struct UStatusEffect* StatusEffect, struct AActor* Owner); // Function FSD.StatusEffectsComponent.PushActiveStatusEffectInstance
	bool PushActiveStatusEffect(struct UStatusEffect* StatusEffect, struct AActor* Owner); // Function FSD.StatusEffectsComponent.PushActiveStatusEffect
	void PopAllActiveStatusEffects(struct AActor* Owner); // Function FSD.StatusEffectsComponent.PopAllActiveStatusEffects
	bool PopActiveStatusEffectInstance(struct UStatusEffect* StatusEffect, struct AActor* Owner); // Function FSD.StatusEffectsComponent.PopActiveStatusEffectInstance
	bool PopActiveStatusEffect(struct UStatusEffect* StatusEffect, struct AActor* Owner); // Function FSD.StatusEffectsComponent.PopActiveStatusEffect
	void OnDeath(struct UHealthComponentBase* HealthComponent); // Function FSD.StatusEffectsComponent.OnDeath
	bool HasActiveEffect(struct UStatusEffect* StatusEffect); // Function FSD.StatusEffectsComponent.HasActiveEffect
	struct UStatusEffect* CreateStatusEffectInstance(struct UStatusEffect* StatusEffect, struct UObject* Owner); // Function FSD.StatusEffectsComponent.CreateStatusEffectInstance
};

// Class FSD.StatusEffectTriggerComponent
// Size: 0x100 (Inherited: 0xb0)
struct UStatusEffectTriggerComponent : UActorComponent {
	struct FMulticastInlineDelegate OnEffectTriggered; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnActorEnterLeave; // 0xc0(0x10)
	struct TArray<struct UStatusEffect*> StatusEffects; // 0xd0(0x10)
	struct TArray<struct UStatusEffect*> LeaveTriggerEffects; // 0xe0(0x10)
	struct UPrimitiveComponent* Collider; // 0xf0(0x08)
	bool RemoveStatusEffectOnEndOverlap; // 0xf8(0x01)
	char UnknownData_F9[0x7]; // 0xf9(0x07)

	void OnOverlapEnd(struct AActor* MyActor, struct AActor* OtherActor); // Function FSD.StatusEffectTriggerComponent.OnOverlapEnd
	void OnOverlapBegin(struct AActor* MyActor, struct AActor* OtherActor); // Function FSD.StatusEffectTriggerComponent.OnOverlapBegin
	void OnComponentOverlapEnd(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function FSD.StatusEffectTriggerComponent.OnComponentOverlapEnd
	void OnComponentOverlapBegin(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult SweepResult); // Function FSD.StatusEffectTriggerComponent.OnComponentOverlapBegin
};

// Class FSD.StayAwayFromWallsComponent
// Size: 0x250 (Inherited: 0x1f0)
struct UStayAwayFromWallsComponent : USceneComponent {
	char UnknownData_1F0[0x8]; // 0x1f0(0x08)
	struct AFSDGameState* GameState; // 0x1f8(0x08)
	char UnknownData_200[0x28]; // 0x200(0x28)
	float MaxSpeed; // 0x228(0x04)
	float Acceleration; // 0x22c(0x04)
	float BackAcceleration; // 0x230(0x04)
	float PointOffset; // 0x234(0x04)
	float AvoidSpeed; // 0x238(0x04)
	float GoBackSpeed; // 0x23c(0x04)
	bool Active; // 0x240(0x01)
	char UnknownData_241[0xf]; // 0x241(0x0f)

	void SetIsActive(bool IsActive); // Function FSD.StayAwayFromWallsComponent.SetIsActive
};

// Class FSD.SteelSeriesComponent
// Size: 0xf0 (Inherited: 0xb0)
struct USteelSeriesComponent : UActorComponent {
	struct FSteelSeriesLinearColor HealthBarColor; // 0xb0(0x03)
	struct FSteelSeriesLinearColor DamageEffectColor; // 0xb3(0x03)
	struct FSteelSeriesLinearColor DownedEffectColor; // 0xb6(0x03)
	struct FSteelSeriesLinearColor ShieldBarColor; // 0xb9(0x03)
	struct FSteelSeriesLinearColor ShieldEffectColor; // 0xbc(0x03)
	struct FSteelSeriesLinearColor WeaponColor; // 0xbf(0x03)
	struct FSteelSeriesLinearColor WeaponEquipedColor; // 0xc2(0x03)
	struct FSteelSeriesLinearColor GrenadeColor; // 0xc5(0x03)
	struct FSteelSeriesLinearColor WASDColor; // 0xc8(0x03)
	struct FSteelSeriesLinearColor RessuplyColor; // 0xcb(0x03)
	struct FSteelSeriesLinearColor ReloadColor; // 0xce(0x03)
	char UnknownData_D1[0xf]; // 0xd1(0x0f)
	enum class EFSDSteelSeriesEffect ActiveEffect; // 0xe0(0x01)
	char UnknownData_E1[0x3]; // 0xe1(0x03)
	float EffectDuration; // 0xe4(0x04)
	uint32_t EffectSeed; // 0xe8(0x04)
	char UnknownData_EC[0x4]; // 0xec(0x04)

	void UpdateHealthIndicator(int32_t healthPct, int32_t shieldPct); // Function FSD.SteelSeriesComponent.UpdateHealthIndicator
};

// Class FSD.Steerable
// Size: 0x28 (Inherited: 0x28)
struct USteerable : UInterface {
};

// Class FSD.StickyFlame
// Size: 0x268 (Inherited: 0x220)
struct AStickyFlame : AActor {
	struct UParticleSystemComponent* FlameParticles; // 0x220(0x08)
	struct UAudioComponent* Audio; // 0x228(0x08)
	struct UStatusEffectTriggerComponent* StatusTriggerComponent; // 0x230(0x08)
	struct FDecalData Decal; // 0x238(0x18)
	float FlameLifetime; // 0x250(0x04)
	float FlameExtinguishTime; // 0x254(0x04)
	float AudioFadeOutTime; // 0x258(0x04)
	bool IsActive; // 0x25c(0x01)
	char UnknownData_25D[0xb]; // 0x25d(0x0b)

	void OnRep_IsActive(); // Function FSD.StickyFlame.OnRep_IsActive
	void OnExtinguisFlame(); // Function FSD.StickyFlame.OnExtinguisFlame
};

// Class FSD.StickyFlameSpawner
// Size: 0xe8 (Inherited: 0xb0)
struct UStickyFlameSpawner : UActorComponent {
	struct FMulticastInlineDelegate OnStickyFlameSpawned; // 0xb0(0x10)
	struct AStickyFlame* StickyFlameActor; // 0xc0(0x08)
	float FlameLifetime; // 0xc8(0x04)
	float StickyFlameIntervals; // 0xcc(0x04)
	float StickyFlameMinDistance; // 0xd0(0x04)
	float StickyFlameLastTime; // 0xd4(0x04)
	struct FVector StickyFlameLastLocation; // 0xd8(0x0c)
	char UnknownData_E4[0x4]; // 0xe4(0x04)

	bool TrySpawnStickyFlameHit(struct FHitResult Hit); // Function FSD.StickyFlameSpawner.TrySpawnStickyFlameHit
	bool TrySpawnStickyFlame(struct FVector Location, struct FVector Normal); // Function FSD.StickyFlameSpawner.TrySpawnStickyFlame
	void StickyFlameSignature__DelegateSignature(struct AStickyFlame* StickyFlame); // DelegateFunction FSD.StickyFlameSpawner.StickyFlameSignature__DelegateSignature
	void ServerSpawnStickyFlame(struct FVector_NetQuantize Location, struct FVector_NetQuantizeNormal Normal); // Function FSD.StickyFlameSpawner.ServerSpawnStickyFlame
};

// Class FSD.STLMeshCarver
// Size: 0x70 (Inherited: 0x28)
struct USTLMeshCarver : UObject {
	struct FBox AABB; // 0x28(0x1c)
	char UnknownData_44[0x4]; // 0x44(0x04)
	struct FDeepCSGFloatTree BSPTree; // 0x48(0x18)
	struct TArray<struct FVector> Vertices; // 0x60(0x10)
};

// Class FSD.SubHealthComponent
// Size: 0xe0 (Inherited: 0xb0)
struct USubHealthComponent : UActorComponent {
	char UnknownData_B0[0x8]; // 0xb0(0x08)
	struct FMulticastInlineDelegate OnDamageTaken; // 0xb8(0x10)
	struct FMulticastInlineDelegate OnHealthChanged; // 0xc8(0x10)
	bool BlockAllOtherDamage; // 0xd8(0x01)
	enum class EHealthbarType HealthbarType; // 0xd9(0x01)
	char UnknownData_DA[0x1]; // 0xda(0x01)
	enum class EEnemyHealthScaling EnemyHealthScaling; // 0xdb(0x01)
	char UnknownData_DC[0x4]; // 0xdc(0x04)

	void SetCanTakeDamage(bool canTakeDamage); // Function FSD.SubHealthComponent.SetCanTakeDamage
	bool IsDead(); // Function FSD.SubHealthComponent.IsDead
	bool IsAlive(); // Function FSD.SubHealthComponent.IsAlive
	float GetHealthPct(); // Function FSD.SubHealthComponent.GetHealthPct
	float GetHealth(); // Function FSD.SubHealthComponent.GetHealth
	bool GetCanTakeDamage(); // Function FSD.SubHealthComponent.GetCanTakeDamage
};

// Class FSD.DestructibleSubHealthComponent
// Size: 0x110 (Inherited: 0xe0)
struct UDestructibleSubHealthComponent : USubHealthComponent {
	float MaxHealth; // 0xe0(0x04)
	bool UseResistances; // 0xe4(0x01)
	char UnknownData_E5[0x3]; // 0xe5(0x03)
	float RadialDamageResistance; // 0xe8(0x04)
	bool AllowInderectDamage; // 0xec(0x01)
	char UnknownData_ED[0x3]; // 0xed(0x03)
	float Damage; // 0xf0(0x04)
	char UnknownData_F4[0x4]; // 0xf4(0x04)
	struct USceneComponent* ArmorComponent; // 0xf8(0x08)
	struct FMulticastInlineDelegate OnDestroyed; // 0x100(0x10)

	void SubHealthDestroyed__DelegateSignature(struct UDestructibleSubHealthComponent* subHealth); // DelegateFunction FSD.DestructibleSubHealthComponent.SubHealthDestroyed__DelegateSignature
	void ResetHealth(); // Function FSD.DestructibleSubHealthComponent.ResetHealth
	void OnRep_Damage(float oldDamage); // Function FSD.DestructibleSubHealthComponent.OnRep_Damage
};

// Class FSD.TargetDummyPawn
// Size: 0x250 (Inherited: 0x220)
struct ATargetDummyPawn : AActor {
	char UnknownData_220[0x10]; // 0x220(0x10)
	struct FGameplayTagContainer GameplayTags; // 0x230(0x20)
};

// Class FSD.TeamResourcesComponent
// Size: 0x108 (Inherited: 0x108)
struct UTeamResourcesComponent : UResourcesComponent {
};

// Class FSD.Teleporter
// Size: 0x238 (Inherited: 0x220)
struct ATeleporter : AActor {
	char UnknownData_220[0x8]; // 0x220(0x08)
	struct ATeleporter* ConnectedTeleporter; // 0x228(0x08)
	float MinTeleporterRange; // 0x230(0x04)
	float MaxTeleporterRange; // 0x234(0x04)
};

// Class FSD.TemporaryBuff
// Size: 0x70 (Inherited: 0x30)
struct UTemporaryBuff : UDataAsset {
	struct FText Description; // 0x30(0x18)
	struct TSoftObjectPtr<struct UTexture2D> Icon; // 0x48(0x28)

	void DeActivateBuff(struct AFSDPlayerController* Player); // Function FSD.TemporaryBuff.DeActivateBuff
	void ActivateBuffOnPlayer(struct APlayerCharacter* Player); // Function FSD.TemporaryBuff.ActivateBuffOnPlayer
	void ActivateBuffOnController(struct AFSDPlayerController* Player); // Function FSD.TemporaryBuff.ActivateBuffOnController
};

// Class FSD.StatTemporaryBuff
// Size: 0xc0 (Inherited: 0x70)
struct UStatTemporaryBuff : UTemporaryBuff {
	struct TMap<struct UPawnStat*, float> ModifiedStats; // 0x70(0x50)
};

// Class FSD.TerrainDetectComponent
// Size: 0x210 (Inherited: 0x1f0)
struct UTerrainDetectComponent : USceneComponent {
	char UnknownData_1F0[0x8]; // 0x1f0(0x08)
	struct FMulticastInlineDelegate OnPointRemoved; // 0x1f8(0x10)
	bool StartDetectOnBeginPlay; // 0x208(0x01)
	bool OnlyDetectOnServer; // 0x209(0x01)
	bool KillActorOnPointRemoved; // 0x20a(0x01)
	char UnknownData_20B[0x5]; // 0x20b(0x05)

	void StartDetect(); // Function FSD.TerrainDetectComponent.StartDetect
};

// Class FSD.TerrainDetectBoxComponent
// Size: 0x440 (Inherited: 0x420)
struct UTerrainDetectBoxComponent : UBoxComponent {
	struct FMulticastInlineDelegate OnBoxExcavated; // 0x420(0x10)
	bool StartDetectOnBeginPlay; // 0x430(0x01)
	bool OnlyDetectOnServer; // 0x431(0x01)
	char UnknownData_432[0x2]; // 0x432(0x02)
	int32_t NumCornersToExcavate; // 0x434(0x04)
	int32_t NumCornersExcavated; // 0x438(0x04)
	bool KillActorOnPointRemoved; // 0x43c(0x01)
	char UnknownData_43D[0x3]; // 0x43d(0x03)

	void StartDetect(); // Function FSD.TerrainDetectBoxComponent.StartDetect
};

// Class FSD.TerrainDetectInterface
// Size: 0x28 (Inherited: 0x28)
struct UTerrainDetectInterface : UInterface {
};

// Class FSD.TerrainFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct UTerrainFunctionLibrary : UBlueprintFunctionLibrary {

	void CreateExplosionCrater2(struct UObject* WorldContextObject, struct FVector Location, float CarveDiameter, float carveNoiseSize, float carveBurnThickness, struct FVector Normal, float NormalOffset, float NormalSqueeze, bool allowCustomBurntMaterial, bool DissolvePlatforms, struct UTerrainMaterial* overrideBurnedMaterial); // Function FSD.TerrainFunctionLibrary.CreateExplosionCrater2
	void CreateExplosionCrater(struct UObject* WorldContextObject, struct FVector Location, float CarveDiameter, float carveNoiseSize, float carveBurnThickness, bool allowCustomBurntMaterial, struct UTerrainMaterial* overrideBurnedMaterial); // Function FSD.TerrainFunctionLibrary.CreateExplosionCrater
};

// Class FSD.ProceduralFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct UProceduralFunctionLibrary : UBlueprintFunctionLibrary {

	void SpawnTerrainImpact(struct UObject* WorldContextObject, struct UParticleSystem* particle, struct FVector Location, struct FRotator Rotation); // Function FSD.ProceduralFunctionLibrary.SpawnTerrainImpact
	struct AProceduralSetup* GetProceduralSetup(struct UObject* WorldContextObject); // Function FSD.ProceduralFunctionLibrary.GetProceduralSetup
	int32_t GetObjectiveXP(struct UObjective* objectiveClass, float missionLength); // Function FSD.ProceduralFunctionLibrary.GetObjectiveXP
	int32_t GetObjectiveCredits(struct UObjective* objectiveClass, float missionLength); // Function FSD.ProceduralFunctionLibrary.GetObjectiveCredits
	struct UBiome* GetBiome(struct AProceduralSetup* levelSetup); // Function FSD.ProceduralFunctionLibrary.GetBiome
	void CreateEntrances(struct AProceduralSetup* pls, struct FRoomNode Room, int32_t exitCount, int32_t entranceCount, struct UDebrisPositioning* exitPositioning, struct UDebrisPositioning* entrancePositioning); // Function FSD.ProceduralFunctionLibrary.CreateEntrances
	bool AllControllersFinishedTransitionToPlay(struct UObject* WorldContextObject); // Function FSD.ProceduralFunctionLibrary.AllControllersFinishedTransitionToPlay
};

// Class FSD.SmartRockTerrainMaterial
// Size: 0x30 (Inherited: 0x30)
struct USmartRockTerrainMaterial : UTerrainMaterialBase {
};

// Class FSD.TerrainMaterial
// Size: 0x220 (Inherited: 0xa0)
struct UTerrainMaterial : UTerrainMaterialCore {
	char Collide : 1; // 0xa0(0x01)
	char Diggable : 1; // 0xa0(0x01)
	char CanBeDrilled : 1; // 0xa0(0x01)
	char ExplosionProof : 1; // 0xa0(0x01)
	char MeltsInFire : 1; // 0xa0(0x01)
	char PlatformDissolvable : 1; // 0xa0(0x01)
	char UnknownData_A0_6 : 2; // 0xa0(0x01)
	char UnknownData_A1[0x7]; // 0xa1(0x07)
	struct UResourceData* ResourceData; // 0xa8(0x08)
	int32_t HitsNeededToMine; // 0xb0(0x04)
	char UnknownData_B4[0x4]; // 0xb4(0x04)
	struct TArray<struct FDecalData> HitDecal; // 0xb8(0x10)
	bool CanHaveDecals; // 0xc8(0x01)
	char UnknownData_C9[0x3]; // 0xc9(0x03)
	float PickAxeDigSize; // 0xcc(0x04)
	bool RemoveDebrisOnFirstHit; // 0xd0(0x01)
	char UnknownData_D1[0x7]; // 0xd1(0x07)
	struct UDialogDataAsset* ShoutLookAt; // 0xd8(0x08)
	struct UDialogDataAsset* ShoutOnDig; // 0xe0(0x08)
	struct UTerrainType* TerrainType; // 0xe8(0x08)
	char UnknownData_F0[0x8]; // 0xf0(0x08)
	struct FText InGameName; // 0xf8(0x18)
	struct FText InGameDescription; // 0x110(0x18)
	char Precious : 1; // 0x128(0x01)
	char UnknownData_128_1 : 7; // 0x128(0x01)
	char UnknownData_129[0x7]; // 0x129(0x07)
	struct TSoftObjectPtr<struct UFXSystemAsset> DigParticles; // 0x130(0x28)
	struct TSoftObjectPtr<struct UMaterialInstance> DigParticlesMaterialOverride; // 0x158(0x28)
	struct TSoftObjectPtr<struct UFXSystemAsset> PartialDigParticles; // 0x180(0x28)
	struct TSoftObjectPtr<struct UMaterialInstance> PartialDigParticlesMaterialOverride; // 0x1a8(0x28)
	struct TSoftObjectPtr<struct USoundCue> CrumbleSound; // 0x1d0(0x28)
	struct TSoftObjectPtr<struct USoundCue> PartialMineSound; // 0x1f8(0x28)

	struct UFXSystemComponent* SpawnPartialDigParticles(struct UObject* WorldContextObject, struct FVector Location, struct FRotator Rotation); // Function FSD.TerrainMaterial.SpawnPartialDigParticles
	struct UFXSystemComponent* SpawnDigParticles(struct UObject* WorldContextObject, struct FVector Location, struct FRotator Rotation, float Density); // Function FSD.TerrainMaterial.SpawnDigParticles
	bool IsPrecious(); // Function FSD.TerrainMaterial.IsPrecious
	struct UMaterialInstance* GetObjectMaterial(); // Function FSD.TerrainMaterial.GetObjectMaterial
	struct FText GetInGameName(); // Function FSD.TerrainMaterial.GetInGameName
	struct UMaterialInstance* GetDigParticlesMaterialOverride(); // Function FSD.TerrainMaterial.GetDigParticlesMaterialOverride
};

// Class FSD.TerrainType
// Size: 0x70 (Inherited: 0x30)
struct UTerrainType : UDataAsset {
	char Collide : 1; // 0x30(0x01)
	char Diggable : 1; // 0x30(0x01)
	char Precious : 1; // 0x30(0x01)
	char UnknownData_30_3 : 5; // 0x30(0x01)
	char UnknownData_31[0x7]; // 0x31(0x07)
	struct USoundCue* DebrisStandardSoundCue; // 0x38(0x08)
	char UnknownData_40[0x8]; // 0x40(0x08)
	struct TSoftObjectPtr<struct UParticleSystem> DebrisStandardParticles; // 0x48(0x28)
};

// Class FSD.TerrainMaterialsCollection
// Size: 0x60 (Inherited: 0x30)
struct UTerrainMaterialsCollection : UDataAsset {
	struct TArray<struct UTerrainMaterial*> Materials; // 0x30(0x10)
	struct TArray<struct UTerrainType*> TerrainTypes; // 0x40(0x10)
	char UnknownData_50[0x10]; // 0x50(0x10)
};

// Class FSD.TerrainModifyingProjectile
// Size: 0x348 (Inherited: 0x2f0)
struct ATerrainModifyingProjectile : AProjectile {
	struct FMulticastInlineDelegate OnRevertToNormal; // 0x2f0(0x10)
	struct UTerrainMaterial* Terrain; // 0x300(0x08)
	struct UTerrainMaterial* OriginalGroundMaterial; // 0x308(0x08)
	struct UStaticMesh* CarveMesh; // 0x310(0x08)
	struct FVector CarveMeshScale; // 0x318(0x0c)
	struct FVector LastHitLocation; // 0x324(0x0c)
	float Radius; // 0x330(0x04)
	bool Revert; // 0x334(0x01)
	char UnknownData_335[0x3]; // 0x335(0x03)
	float TimeOnGround; // 0x338(0x04)
	float ExpensiveCarveNoise; // 0x33c(0x04)
	char UnknownData_340[0x8]; // 0x340(0x08)

	void Tick(float DeltaSeconds); // Function FSD.TerrainModifyingProjectile.Tick
	float GetRadius(); // Function FSD.TerrainModifyingProjectile.GetRadius
	void BeginPlay(); // Function FSD.TerrainModifyingProjectile.BeginPlay
};

// Class FSD.TerrainPlacementComponent
// Size: 0x230 (Inherited: 0x1f0)
struct UTerrainPlacementComponent : USceneComponent {
	struct TArray<struct FTerrainPlacementBox> TerrainCheckers; // 0x1f0(0x10)
	enum class EDebrisColliderType CapsuleType; // 0x200(0x01)
	char UnknownData_201[0x3]; // 0x201(0x03)
	struct FDebrisCapsule Capsule; // 0x204(0x20)
	int32_t BlockerIDHack; // 0x224(0x04)
	char UnknownData_228[0x8]; // 0x228(0x08)

	void RemoveBlockers(); // Function FSD.TerrainPlacementComponent.RemoveBlockers
	void AddBlockers(struct AProceduralSetup* ProceduralSetup, struct FTransform Transform); // Function FSD.TerrainPlacementComponent.AddBlockers
};

// Class FSD.TerrainScannerItem
// Size: 0x3d8 (Inherited: 0x368)
struct ATerrainScannerItem : AAnimatedItem {
	int32_t TerrainScannerZoomDirection; // 0x368(0x04)
	struct FName ScannerAttachSocketName; // 0x36c(0x08)
	char UnknownData_374[0x4]; // 0x374(0x04)
	float TerrainScannerStartAngle; // 0x378(0x04)
	float TerrainScannerScale; // 0x37c(0x04)
	float DelayedTerrainScannerScale; // 0x380(0x04)
	float DelayedTerrainScannerZoom; // 0x384(0x04)
	char UnknownData_388[0x1]; // 0x388(0x01)
	bool IsLookingAtMap; // 0x389(0x01)
	bool UpdateMapToolActors; // 0x38a(0x01)
	char UnknownData_38B[0x5]; // 0x38b(0x05)
	struct TArray<struct UAnimMontage*> UseLoopsFP; // 0x390(0x10)
	struct UAnimMontage* EndFP; // 0x3a0(0x08)
	struct TArray<struct UAnimMontage*> UseLoopsTP; // 0x3a8(0x10)
	struct UAnimMontage* EndTP; // 0x3b8(0x08)
	char UnknownData_3C0[0x8]; // 0x3c0(0x08)
	struct USceneComponent* TerrainScannerRoot; // 0x3c8(0x08)
	struct USceneCaptureComponent2D* TerrainScannerCapture; // 0x3d0(0x08)

	void Server_SetIslookingAtMap(bool lookingAtMap); // Function FSD.TerrainScannerItem.Server_SetIslookingAtMap
	void OnRep_IsLookingAtMap(); // Function FSD.TerrainScannerItem.OnRep_IsLookingAtMap
};

// Class FSD.TerrainScannerStaticMesh
// Size: 0x490 (Inherited: 0x480)
struct UTerrainScannerStaticMesh : UStaticMeshComponent {
	bool bVisibleAtBeginPlay; // 0x480(0x01)
	bool bHideOnDeath; // 0x481(0x01)
	bool bUseFogOfWar; // 0x482(0x01)
	bool bVisibleOnScanner; // 0x483(0x01)
	char UnknownData_484[0xc]; // 0x484(0x0c)

	void SetVisibleOnScanner(bool InShowOnScanner); // Function FSD.TerrainScannerStaticMesh.SetVisibleOnScanner
	void OnOwnerDeath(struct UHealthComponentBase* InHealthComponent); // Function FSD.TerrainScannerStaticMesh.OnOwnerDeath
};

// Class FSD.TerrainScannerSplineMesh
// Size: 0x520 (Inherited: 0x520)
struct UTerrainScannerSplineMesh : USplineMeshComponent {
	bool bVisibleAtBeginPlay; // 0x518(0x01)
	bool bHideOnDeath; // 0x519(0x01)
	bool bUseFogOfWar; // 0x51a(0x01)
	bool bVisibleOnScanner; // 0x51b(0x01)

	void SetVisibleOnScanner(bool InShowOnScanner); // Function FSD.TerrainScannerSplineMesh.SetVisibleOnScanner
	void OnOwnerDeath(struct UHealthComponentBase* InHealthComponent); // Function FSD.TerrainScannerSplineMesh.OnOwnerDeath
};

// Class FSD.TetherComponent
// Size: 0x118 (Inherited: 0xb0)
struct UTetherComponent : UActorComponent {
	struct FMulticastInlineDelegate OnPowerChanged; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnConnectionChanged; // 0xc0(0x10)
	struct FMulticastInlineDelegate OnTetherMessage; // 0xd0(0x10)
	char UnknownData_E0[0x10]; // 0xe0(0x10)
	struct FName ConnectionPointName; // 0xf0(0x08)
	struct UTetherComponent* ForwardConnection; // 0xf8(0x08)
	struct UTetherComponent* backConnection; // 0x100(0x08)
	float ConnectionDistance; // 0x108(0x04)
	enum class ETetherConnectionMode ConnectionMode; // 0x10c(0x04)
	int32_t ConnectionPriority; // 0x110(0x04)
	bool GeneratesPower; // 0x114(0x01)
	bool hasPower; // 0x115(0x01)
	char UnknownData_116[0x2]; // 0x116(0x02)

	void OnRep_HasPower(); // Function FSD.TetherComponent.OnRep_HasPower
	void OnRep_ForwardConnection(); // Function FSD.TetherComponent.OnRep_ForwardConnection
	void OnRep_BackConnection(); // Function FSD.TetherComponent.OnRep_BackConnection
	void MessageTetherLine(struct FName Message, float Delay, bool Forward); // Function FSD.TetherComponent.MessageTetherLine
	void MessageBody(struct FTetherMessageSettings Message); // Function FSD.TetherComponent.MessageBody
	bool IsStartOfLine(); // Function FSD.TetherComponent.IsStartOfLine
	bool IsEndOfLine(); // Function FSD.TetherComponent.IsEndOfLine
	bool IsConnected(); // Function FSD.TetherComponent.IsConnected
	bool GetHasPower(); // Function FSD.TetherComponent.GetHasPower
	struct UTetherComponent* GetForwardConnection(); // Function FSD.TetherComponent.GetForwardConnection
	struct FVector GetConnectionPoint(); // Function FSD.TetherComponent.GetConnectionPoint
	struct UTetherComponent* GetBackConnection(); // Function FSD.TetherComponent.GetBackConnection
	void DisconnectFromTetherLine(); // Function FSD.TetherComponent.DisconnectFromTetherLine
	bool ConnectToTetherLine(); // Function FSD.TetherComponent.ConnectToTetherLine
};

// Class FSD.Tether
// Size: 0x2c8 (Inherited: 0x248)
struct ATether : ACarriableItem {
	struct USkeletalMeshComponent* BaseMesh; // 0x248(0x08)
	struct UInstantUsable* UsableComponent; // 0x250(0x08)
	struct UCarriableComponent* Carry; // 0x258(0x08)
	struct USphereComponent* UseTrigger; // 0x260(0x08)
	struct UParticleSystemComponent* ConnectionBeam; // 0x268(0x08)
	struct USphereComponent* PysicalCollision; // 0x270(0x08)
	struct UDamageComponent* ExplosionDamage; // 0x278(0x08)
	struct UParticleSystem* ExplosionParticle; // 0x280(0x08)
	struct USoundCue* ExplosionSound; // 0x288(0x08)
	struct FName ConnectionPointSocketName; // 0x290(0x08)
	bool ConnectionRequiresPower; // 0x298(0x01)
	bool IsOnGround; // 0x299(0x01)
	char UnknownData_29A[0x6]; // 0x29a(0x06)
	struct ATether* frontConnection; // 0x2a0(0x08)
	struct ATether* backConnection; // 0x2a8(0x08)
	float ConnectionDistance; // 0x2b0(0x04)
	int32_t ConnectionPriority; // 0x2b4(0x04)
	bool hasPower; // 0x2b8(0x01)
	bool GeneratesPower; // 0x2b9(0x01)
	char UnknownData_2BA[0x2]; // 0x2ba(0x02)
	float KnockBackForce; // 0x2bc(0x04)
	bool ConnectionOpen; // 0x2c0(0x01)
	bool CanHaveBackConnection; // 0x2c1(0x01)
	bool CanHaveFrontConnection; // 0x2c2(0x01)
	bool ExplodeOnKill; // 0x2c3(0x01)
	char UnknownData_2C4[0x4]; // 0x2c4(0x04)

	void SetIsOnGround(bool IsOnGround); // Function FSD.Tether.SetIsOnGround
	void OnRep_ConnectionOpen(); // Function FSD.Tether.OnRep_ConnectionOpen
	void OnClosed(); // Function FSD.Tether.OnClosed
	void Explode(); // Function FSD.Tether.Explode
};

// Class FSD.TetherStation
// Size: 0x2a8 (Inherited: 0x220)
struct ATetherStation : AActor {
	struct USceneComponent* SceneRoot; // 0x220(0x08)
	struct USkeletalMeshComponent* BaseMesh; // 0x228(0x08)
	struct UStaticMeshComponent* PlatformMesh; // 0x230(0x08)
	struct TArray<struct AFacilityShield*> ShieldActors; // 0x238(0x10)
	struct USimpleHealthComponent* Health; // 0x248(0x08)
	struct USingleUsableComponent* ActivateUsable; // 0x250(0x08)
	struct AFacilityShield* ShieldClass; // 0x258(0x08)
	struct UParticleSystem* BatteryExplosionParticle; // 0x260(0x08)
	struct USoundCue* BatteryExplosionSound; // 0x268(0x08)
	struct UPhysicalMaterial* WeakPointMaterial; // 0x270(0x08)
	struct UAnimSequenceBase* ExposeWeakpointAnimation; // 0x278(0x08)
	float ShieldStartDelay; // 0x280(0x04)
	char UnknownData_284[0x4]; // 0x284(0x04)
	struct AFacilityGeneratorLine* FacilityGeneratorLineType; // 0x288(0x08)
	struct AActor* MainShieldGenerator; // 0x290(0x08)
	int32_t DestroyedShields; // 0x298(0x04)
	int32_t ActiveShields; // 0x29c(0x04)
	bool IsWeakpointExposed; // 0x2a0(0x01)
	bool AreGeneratorsReady; // 0x2a1(0x01)
	bool FacilityActive; // 0x2a2(0x01)
	char UnknownData_2A3[0x5]; // 0x2a3(0x05)

	void ShieldDestroyed(struct UHealthComponentBase* Died); // Function FSD.TetherStation.ShieldDestroyed
	void SetWeakpointExposed(bool isExposed); // Function FSD.TetherStation.SetWeakpointExposed
	void SetUpShieldSpeed(); // Function FSD.TetherStation.SetUpShieldSpeed
	void SetMainShieldGenerator(struct AActor* InMainGenerator); // Function FSD.TetherStation.SetMainShieldGenerator
	void SetGeneratorsReady(bool ready); // Function FSD.TetherStation.SetGeneratorsReady
	void OnRep_IsWeakpointExposed(); // Function FSD.TetherStation.OnRep_IsWeakpointExposed
	void Onrep_FacilityActive(); // Function FSD.TetherStation.Onrep_FacilityActive
	void OnRep_AreGeneratorsReady(); // Function FSD.TetherStation.OnRep_AreGeneratorsReady
	void OnGeneratorsReady(); // Function FSD.TetherStation.OnGeneratorsReady
	void OnFacilityDestroyed(); // Function FSD.TetherStation.OnFacilityDestroyed
	void OnFacilityDamaged(); // Function FSD.TetherStation.OnFacilityDamaged
	void OnActivated(); // Function FSD.TetherStation.OnActivated
	void DisableShields(); // Function FSD.TetherStation.DisableShields
	void CallbackActivateUsed(struct APlayerCharacter* User); // Function FSD.TetherStation.CallbackActivateUsed
	void ActivateFacility(); // Function FSD.TetherStation.ActivateFacility
};

// Class FSD.FacilityShield
// Size: 0x270 (Inherited: 0x220)
struct AFacilityShield : AActor {
	struct USceneComponent* Root; // 0x220(0x08)
	struct USkeletalMeshComponent* Mesh; // 0x228(0x08)
	struct USimpleHealthComponent* Health; // 0x230(0x08)
	struct UObjectInfoComponent* Info; // 0x238(0x08)
	struct UAnimSequence* ExposeVialAnimation; // 0x240(0x08)
	struct USoundCue* VialExplosionSound; // 0x248(0x08)
	struct UParticleSystem* VialExplosionEffect; // 0x250(0x08)
	struct FRandRange RotationspeedRange; // 0x258(0x08)
	float SafetyAngle; // 0x260(0x04)
	float RotationSpeed; // 0x264(0x04)
	float RotationTarget; // 0x268(0x04)
	bool VialExposed; // 0x26c(0x01)
	bool IsSpinning; // 0x26d(0x01)
	char UnknownData_26E[0x2]; // 0x26e(0x02)

	void OnVialDeath(struct UHealthComponentBase* Died); // Function FSD.FacilityShield.OnVialDeath
	void OnStartedSpinning(); // Function FSD.FacilityShield.OnStartedSpinning
	void OnRep_VialExposed(); // Function FSD.FacilityShield.OnRep_VialExposed
	void OnRep_IsSpinning(); // Function FSD.FacilityShield.OnRep_IsSpinning
};

// Class FSD.TetherAnimInstance
// Size: 0x280 (Inherited: 0x270)
struct UTetherAnimInstance : UAnimInstance {
	float CurrentZLocation; // 0x268(0x04)
	float MinZ; // 0x26c(0x04)
	float MaxZ; // 0x270(0x04)
	bool SearchingForConnection; // 0x274(0x01)
	char UnknownData_27D[0x3]; // 0x27d(0x03)
};

// Class FSD.Throwable
// Size: 0x28 (Inherited: 0x28)
struct UThrowable : UInterface {
};

// Class FSD.ThrownGrenadeItem
// Size: 0x390 (Inherited: 0x318)
struct AThrownGrenadeItem : AItem {
	char UnknownData_318[0x8]; // 0x318(0x08)
	struct FMulticastInlineDelegate OnGrenadeThrown; // 0x320(0x10)
	struct UPlayerAnimInstance* FPAnimInstance; // 0x330(0x08)
	struct UPlayerAnimInstance* TPAnimInstance; // 0x338(0x08)
	struct UItemCharacterAnimationSet* CharacterAnimationSet; // 0x340(0x08)
	struct FVector ThrowOffset; // 0x348(0x0c)
	float ThrowAngle; // 0x354(0x04)
	int32_t MaxGrenades; // 0x358(0x04)
	int32_t Grenades; // 0x35c(0x04)
	float GrenadeCooldownRemaining; // 0x360(0x04)
	enum class EThrownGrenadeItemState State; // 0x364(0x04)
	struct AGrenade* GrenadeClass; // 0x368(0x08)
	struct UGrenadeAnimationSet* DefaultGrenadeAnimationSet; // 0x370(0x08)
	char UnknownData_378[0x8]; // 0x378(0x08)
	struct UStaticMeshComponent* GrenadeMeshInstance; // 0x380(0x08)
	char UnknownData_388[0x1]; // 0x388(0x01)
	bool HasRejoinedInitialized; // 0x389(0x01)
	char UnknownData_38A[0x6]; // 0x38a(0x06)

	void Server_ThrowGrenade(); // Function FSD.ThrownGrenadeItem.Server_ThrowGrenade
	void Server_SetState(enum class EThrownGrenadeItemState itemState); // Function FSD.ThrownGrenadeItem.Server_SetState
	void Server_Resupply(float percentage); // Function FSD.ThrownGrenadeItem.Server_Resupply
	void ResupplyGrenades(float percentage); // Function FSD.ThrownGrenadeItem.ResupplyGrenades
	void OnRep_State(); // Function FSD.ThrownGrenadeItem.OnRep_State
	void OnRep_GrenadeCount(); // Function FSD.ThrownGrenadeItem.OnRep_GrenadeCount
	void OnGrenadeThrown__DelegateSignature(); // DelegateFunction FSD.ThrownGrenadeItem.OnGrenadeThrown__DelegateSignature
	void OnDeath(struct UHealthComponentBase* Health); // Function FSD.ThrownGrenadeItem.OnDeath
	void GrenadeThrowFinished(); // Function FSD.ThrownGrenadeItem.GrenadeThrowFinished
	float GetGrenadeThrowVelocity(); // Function FSD.ThrownGrenadeItem.GetGrenadeThrowVelocity
	struct FRotator GetGrenadeThrowRotation(); // Function FSD.ThrownGrenadeItem.GetGrenadeThrowRotation
	float GetGrenadeGravity(); // Function FSD.ThrownGrenadeItem.GetGrenadeGravity
	float GetGrenadeDuration(); // Function FSD.ThrownGrenadeItem.GetGrenadeDuration
};

// Class FSD.TickableActionBase
// Size: 0x40 (Inherited: 0x30)
struct UTickableActionBase : UBlueprintAsyncActionBase {
	char UnknownData_30[0x10]; // 0x30(0x10)
};

// Class FSD.MiniTimerAction
// Size: 0x68 (Inherited: 0x40)
struct UMiniTimerAction : UTickableActionBase {
	struct FMulticastInlineDelegate Completed; // 0x40(0x10)
	struct FMulticastInlineDelegate OnTick; // 0x50(0x10)
	char UnknownData_60[0x8]; // 0x60(0x08)

	void TickDelegate__DelegateSignature(float DeltaTime, float NormalizedTime); // DelegateFunction FSD.MiniTimerAction.TickDelegate__DelegateSignature
	struct UMiniTimerAction* MiniTimer(struct UObject* WorldContext, float InDuration); // Function FSD.MiniTimerAction.MiniTimer
};

// Class FSD.MultiTextCounterAction
// Size: 0xb8 (Inherited: 0x40)
struct UMultiTextCounterAction : UTickableActionBase {
	struct FMulticastInlineDelegate Completed; // 0x40(0x10)
	struct FMulticastInlineDelegate OnTick; // 0x50(0x10)
	struct UTextBlock* TotalBlock; // 0x60(0x08)
	struct FText TotalFormat; // 0x68(0x18)
	struct TArray<struct FTextCounterEntry> Entries; // 0x80(0x10)
	float CountSpeed; // 0x90(0x04)
	char UnknownData_94[0x4]; // 0x94(0x04)
	struct USoundCue* CountingSound; // 0x98(0x08)
	struct UAudioComponent* AudioComponent; // 0xa0(0x08)
	struct UObject* WorldContext; // 0xa8(0x08)
	char UnknownData_B0[0x8]; // 0xb0(0x08)

	void TickDelegate__DelegateSignature(); // DelegateFunction FSD.MultiTextCounterAction.TickDelegate__DelegateSignature
	struct UMultiTextCounterAction* StartMultiTextCounter(struct UObject* InWorldContext, struct UTextBlock* InTotalBlock, struct FText InTotalFormat, float InCountSpeed, struct USoundCue* InCountingSound, struct TArray<struct FTextCounterEntry> InEntries); // Function FSD.MultiTextCounterAction.StartMultiTextCounter
};

// Class FSD.PendingLatentActionLibrary
// Size: 0x28 (Inherited: 0x28)
struct UPendingLatentActionLibrary : UBlueprintFunctionLibrary {

	void WaitOneFrame(struct UObject* WorldContextObject, struct FLatentActionInfo LatentInfo); // Function FSD.PendingLatentActionLibrary.WaitOneFrame
};

// Class FSD.MoveComponentToAction
// Size: 0xd0 (Inherited: 0x40)
struct UMoveComponentToAction : UTickableActionBase {
	struct FWeakObjectPtr<struct USceneComponent> Component; // 0x40(0x08)
	char UnknownData_48[0x78]; // 0x48(0x78)
	struct FMulticastInlineDelegate Completed; // 0xc0(0x10)

	struct UMoveComponentToAction* EaseComponentTo(struct UObject* WorldContext, struct USceneComponent* InComponent, struct FTransform InEndTransform, char InEasingMode, bool InWorldSpace, float InDuration); // Function FSD.MoveComponentToAction.EaseComponentTo
	void CompletedDelegate__DelegateSignature(struct USceneComponent* Component); // DelegateFunction FSD.MoveComponentToAction.CompletedDelegate__DelegateSignature
};

// Class FSD.TowerEventModule
// Size: 0x380 (Inherited: 0x2e8)
struct ATowerEventModule : AFSDPawn {
	char UnknownData_2E8[0x8]; // 0x2e8(0x08)
	struct USceneComponent* Root; // 0x2f0(0x08)
	struct USkeletalMeshComponent* Mesh; // 0x2f8(0x08)
	struct UEnemyHealthComponent* Health; // 0x300(0x08)
	struct UArmorHealthDamageComponent* ArmorDamage; // 0x308(0x08)
	struct UWeakpointGlowComponent* WeakpointGlow; // 0x310(0x08)
	struct UParticleSystemComponent* SmokeParticles; // 0x318(0x08)
	struct FRotator MainBodyRotation; // 0x320(0x0c)
	char UnknownData_32C[0x4]; // 0x32c(0x04)
	struct USkeletalMesh* DestroyedMesh; // 0x330(0x08)
	struct USoundCue* ExplosionSound; // 0x338(0x08)
	struct UParticleSystem* ExplosionEffect; // 0x340(0x08)
	struct ATowerEventModule* PreviousModule; // 0x348(0x08)
	struct ATowerEventModule* NextModule; // 0x350(0x08)
	struct UStaticMesh* ArmorMesh; // 0x358(0x08)
	int32_t ArmorPieces; // 0x360(0x04)
	float ArmorLifetime; // 0x364(0x04)
	float ArmorPopForce; // 0x368(0x04)
	float ArmorShedDelay; // 0x36c(0x04)
	struct TArray<struct UStaticMeshComponent*> ArmorMeshes; // 0x370(0x10)

	void OnAttack(); // Function FSD.TowerEventModule.OnAttack
	void HideArmorPlates(); // Function FSD.TowerEventModule.HideArmorPlates
	void DestroyArmor(); // Function FSD.TowerEventModule.DestroyArmor
};

// Class FSD.AimingTowerEventModule
// Size: 0x398 (Inherited: 0x380)
struct AAimingTowerEventModule : ATowerEventModule {
	struct FRotator AimRotation; // 0x380(0x0c)
	char UnknownData_38C[0x4]; // 0x38c(0x04)
	struct AActor* CurrentTarget; // 0x390(0x08)
};

// Class FSD.TracerManager
// Size: 0xc8 (Inherited: 0x30)
struct UTracerManager : UWorldSubsystem {
	char UnknownData_30[0x20]; // 0x30(0x20)
	float StartScale; // 0x50(0x04)
	float WhizByStartDistance; // 0x54(0x04)
	float WhizByMaxDistanceFromTrajectory; // 0x58(0x04)
	float WhizBySpeed; // 0x5c(0x04)
	char UnknownData_60[0x68]; // 0x60(0x68)

	void AddTracer(struct FVector Origin, struct FVector Destination, float Speed, struct UParticleSystem* particle, float MinDistance, float Offset, struct UParticleSystem* Trail); // Function FSD.TracerManager.AddTracer
};

// Class FSD.TrackBuilderMovement
// Size: 0xb8 (Inherited: 0xb0)
struct UTrackBuilderMovement : UActorComponent {
	float MovementSpeed; // 0xb0(0x04)
	char UnknownData_B4[0x4]; // 0xb4(0x04)
};

// Class FSD.TrackMovementStateComponent
// Size: 0x240 (Inherited: 0xf8)
struct UTrackMovementStateComponent : UCharacterStateComponent {
	struct UAudioComponent* AudioStartComponent; // 0xf8(0x08)
	struct UAudioComponent* AudioDuringComponent; // 0x100(0x08)
	struct UAudioComponent* AudioStopComponent; // 0x108(0x08)
	struct USoundBase* AudioOnStart; // 0x110(0x08)
	struct USoundBase* AudioOnDuring; // 0x118(0x08)
	struct USoundBase* AudioOnStop; // 0x120(0x08)
	float AudioOnFadeOut; // 0x128(0x04)
	char UnknownData_12C[0x4]; // 0x12c(0x04)
	struct UDialogDataAsset* StateUpdateShout; // 0x130(0x08)
	float StateUpdateShoutFrequencySecsMin; // 0x138(0x04)
	float StateUpdateShoutFrequencySecsMax; // 0x13c(0x04)
	float AudioDuringSlidingSpeedParam; // 0x140(0x04)
	float SpeedTarget; // 0x144(0x04)
	float SpeedMin; // 0x148(0x04)
	float SpeedMax; // 0x14c(0x04)
	float AccelerationBase; // 0x150(0x04)
	float AccelerationMultiplier; // 0x154(0x04)
	float DecelerationMultiplier; // 0x158(0x04)
	float AccelerationOnSlopeMultiplier; // 0x15c(0x04)
	float DecelerationOnSlopeMultiplier; // 0x160(0x04)
	float StoppingDeceleration; // 0x164(0x04)
	float StoppingDistance; // 0x168(0x04)
	char UnknownData_16C[0x4]; // 0x16c(0x04)
	SoftClassProperty ConnectorClass; // 0x170(0x28)
	struct AZipLineConnector* Connector; // 0x198(0x08)
	enum class EExitTrackMode ExitMode; // 0x1a0(0x01)
	char UnknownData_1A1[0x3]; // 0x1a1(0x03)
	struct FPipelineMovementData TrackMovementData; // 0x1a4(0x1c)
	char UnknownData_1C0[0x80]; // 0x1c0(0x80)

	void ServerExitMode(enum class EExitTrackMode eMode); // Function FSD.TrackMovementStateComponent.ServerExitMode
	void ServerAddTemporaryAcceration(float Acceleration, float Duration); // Function FSD.TrackMovementStateComponent.ServerAddTemporaryAcceration
	void OnRep_TrackMovementdata(struct FPipelineMovementData oldState); // Function FSD.TrackMovementStateComponent.OnRep_TrackMovementdata
	void JumpPressed(); // Function FSD.TrackMovementStateComponent.JumpPressed
};

// Class FSD.TrailComponent
// Size: 0x230 (Inherited: 0x1f0)
struct UTrailComponent : USceneComponent {
	float MinRadius; // 0x1f0(0x04)
	float MinStep; // 0x1f4(0x04)
	float MaxStep; // 0x1f8(0x04)
	bool MinimizePath; // 0x1fc(0x01)
	char UnknownData_1FD[0x3]; // 0x1fd(0x03)
	struct TArray<struct FVector> Trail; // 0x200(0x10)
	char Query; // 0x210(0x01)
	bool bDrawPath; // 0x211(0x01)
	char UnknownData_212[0x2]; // 0x212(0x02)
	float MaxDrawDistance; // 0x214(0x04)
	float PathLineWidth; // 0x218(0x04)
	float PathNodeSize; // 0x21c(0x04)
	struct FColor DrawColor; // 0x220(0x04)
	char UnknownData_224[0xc]; // 0x224(0x0c)

	int32_t TrailLength(); // Function FSD.TrailComponent.TrailLength
	void ToggleDrawPath(bool Visible); // Function FSD.TrailComponent.ToggleDrawPath
	void Reset(); // Function FSD.TrailComponent.Reset
	struct FVector GetTrailPoint(int32_t Index); // Function FSD.TrailComponent.GetTrailPoint
	struct FVector GetNextTrailPointFrom(struct FVector From); // Function FSD.TrailComponent.GetNextTrailPointFrom
	int32_t GetNearestTrailIndex(struct FVector Location); // Function FSD.TrailComponent.GetNearestTrailIndex
	struct UTrailComponent* GetNearestPlayerTrail(struct UWorld* World, struct FVector From, float MinDist, float MaxDist); // Function FSD.TrailComponent.GetNearestPlayerTrail
	struct FColor GetDrawColor(); // Function FSD.TrailComponent.GetDrawColor
};

// Class FSD.TreasureBox
// Size: 0x2f0 (Inherited: 0x288)
struct ATreasureBox : ATreasureContainer {
	struct URepairableComponent* repairable; // 0x288(0x08)
	struct URepairableUsable* RepairUsable; // 0x290(0x08)
	struct USingleUsableComponent* HammeringUsable; // 0x298(0x08)
	struct UTerrainPlacementComponent* terrainPlacement; // 0x2a0(0x08)
	struct UStaticMeshComponent* MiddlePlane; // 0x2a8(0x08)
	struct USkeletalMeshComponent* BoxMesh; // 0x2b0(0x08)
	float CollectActivationDelay; // 0x2b8(0x04)
	char UnknownData_2BC[0x4]; // 0x2bc(0x04)
	struct UAnimSequenceBase* OpenBoxAnim; // 0x2c0(0x08)
	float DelayToOpenAfterRepair; // 0x2c8(0x04)
	char UnknownData_2CC[0x4]; // 0x2cc(0x04)
	struct AActor* ResourceClass; // 0x2d0(0x08)
	struct UTreasureRewarder* boxRewarder; // 0x2d8(0x08)
	float HologramRotationSpeed; // 0x2e0(0x04)
	char UnknownData_2E4[0x4]; // 0x2e4(0x04)
	int32_t ItemsInserted; // 0x2e8(0x04)
	char UnknownData_2EC[0x1]; // 0x2ec(0x01)
	bool IsTreasureAvailable; // 0x2ed(0x01)
	char UnknownData_2EE[0x2]; // 0x2ee(0x02)

	void PlaceResources(struct AProceduralSetup* setup, float Radius, struct UDebrisPositioning* DebrisPositioning, struct TArray<struct FVector> locationsToAvoid, struct UCurveFloat* avoidCostCurve); // Function FSD.TreasureBox.PlaceResources
	void OnUsedEvent(struct APlayerCharacter* User); // Function FSD.TreasureBox.OnUsedEvent
	void OnRepairedEvent(struct URepairableComponent* repaired); // Function FSD.TreasureBox.OnRepairedEvent
	void OnHammerProgress(float Progress); // Function FSD.TreasureBox.OnHammerProgress
	void OnHammered(struct APlayerCharacter* User); // Function FSD.TreasureBox.OnHammered
	void OnFullyRepairedEvent(struct URepairableComponent* repaired); // Function FSD.TreasureBox.OnFullyRepairedEvent
	void OnAllResourcesCollectedEvent(struct URepairableComponent* repaired); // Function FSD.TreasureBox.OnAllResourcesCollectedEvent
	void BP_OnCollectedTreasure(struct APlayerCharacter* collector); // Function FSD.TreasureBox.BP_OnCollectedTreasure
	void AfterRepairDelay(); // Function FSD.TreasureBox.AfterRepairDelay
	void ActivateCollection(); // Function FSD.TreasureBox.ActivateCollection
};

// Class FSD.TreasureBoxAnimInstance
// Size: 0x280 (Inherited: 0x270)
struct UTreasureBoxAnimInstance : UAnimInstance {
	float BuildProgress; // 0x268(0x04)
	float PhysicsAlpha; // 0x26c(0x04)
	bool IsTreasureAvailable; // 0x270(0x01)
	bool IsLeftInserted; // 0x271(0x01)
	bool IsRightInserted; // 0x272(0x01)
	char UnknownData_27B[0x5]; // 0x27b(0x05)
};

// Class FSD.TreasureFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct UTreasureFunctionLibrary : UBlueprintFunctionLibrary {

	bool IsBoxInWall(struct UObject* WorldContextObject, struct AProceduralSetup* setup, float SizeX, float SizeY, float sizeZ, struct FTransform transorm); // Function FSD.TreasureFunctionLibrary.IsBoxInWall
	bool GiveSimilarSkin(struct UObject* WorldContextObject, struct UItemSkin* targetSkin, struct UItemID* targetItem, struct UItemSkin* outGivenSkin, struct UItemID* outSkinnedItem); // Function FSD.TreasureFunctionLibrary.GiveSimilarSkin
	void GiveRandomSkin(struct UObject* WorldContextObject, struct UItemSkin* outGivenSkin, struct UItemID* outSkinnedItem); // Function FSD.TreasureFunctionLibrary.GiveRandomSkin
};

// Class FSD.TreasureRewarder
// Size: 0xb0 (Inherited: 0xb0)
struct UTreasureRewarder : UActorComponent {
};

// Class FSD.SkinTreasureRewarder
// Size: 0xc0 (Inherited: 0xb0)
struct USkinTreasureRewarder : UTreasureRewarder {
	struct UItemSkin* GivenSkin; // 0xb0(0x08)
	struct UItemID* GivenSkinID; // 0xb8(0x08)
};

// Class FSD.DrinkTreasureRewarder
// Size: 0xb8 (Inherited: 0xb0)
struct UDrinkTreasureRewarder : UTreasureRewarder {
	struct UDrinkableDataAsset* GivenDrink; // 0xb0(0x08)
};

// Class FSD.VictoryPoseRewarder
// Size: 0xc0 (Inherited: 0xb0)
struct UVictoryPoseRewarder : UTreasureRewarder {
	struct UVictoryPose* GivenPose; // 0xb0(0x08)
	struct UPlayerCharacterID* GivenCharacterID; // 0xb8(0x08)
};

// Class FSD.PickaxePartRewarder
// Size: 0xb8 (Inherited: 0xb0)
struct UPickaxePartRewarder : UTreasureRewarder {
	struct UPickaxePart* PickaxePart; // 0xb0(0x08)
};

// Class FSD.VanityItemRewarder
// Size: 0xc0 (Inherited: 0xb0)
struct UVanityItemRewarder : UTreasureRewarder {
	struct UVanityItem* GivenVanityItem; // 0xb0(0x08)
	struct UPlayerCharacterID* GivenCharacterID; // 0xb8(0x08)
};

// Class FSD.TreasureSettings
// Size: 0x158 (Inherited: 0x30)
struct UTreasureSettings : UDataAsset {
	struct TArray<struct UItemSkinSet*> SkinSets; // 0x30(0x10)
	struct TArray<struct UDrinkableDataAsset*> Drinks; // 0x40(0x10)
	struct TArray<struct UVictoryPose*> VictoryPoses; // 0x50(0x10)
	struct TArray<enum class ETreasureType> CrateTreasureTypes; // 0x60(0x10)
	struct FText CrateTreasureEmptyMsg; // 0x70(0x18)
	struct TArray<enum class ETreasureType> LostPackTreasureTypes; // 0x88(0x10)
	struct FText LostPackEmptyMsg; // 0x98(0x18)
	struct UItemAquisitionSource* CrateAquisitionSource; // 0xb0(0x08)
	struct UItemAquisitionSource* LostPackAquisitionSource; // 0xb8(0x08)
	struct FRuntimeFloatCurve TreasureChanceMissionLengthCurve; // 0xc0(0x88)
	struct TArray<struct USpecialEvent*> TreasureEvents; // 0x148(0x10)
};

// Class FSD.TremorAttackComponent
// Size: 0x178 (Inherited: 0x128)
struct UTremorAttackComponent : USpecialDamageAttackComponent {
	char UnknownData_128[0x18]; // 0x128(0x18)
	bool IsAttackActive; // 0x140(0x01)
	char UnknownData_141[0x7]; // 0x141(0x07)
	struct UBoxComponent* CollisionComponent; // 0x148(0x08)
	struct UParticleSystemComponent* ParticlesComponent; // 0x150(0x08)
	float InitialParticlesDelay; // 0x158(0x04)
	float PostParticleDelay; // 0x15c(0x04)
	float TargetMaxDistanceFromGround; // 0x160(0x04)
	float TimeBetweenDamageTicks; // 0x164(0x04)
	float LaunchForce; // 0x168(0x04)
	float Duration; // 0x16c(0x04)
	char UnknownData_170[0x8]; // 0x170(0x08)

	void StopParticles(); // Function FSD.TremorAttackComponent.StopParticles
	void StartParticles(); // Function FSD.TremorAttackComponent.StartParticles
	void OnTargetExitedTrigger(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function FSD.TremorAttackComponent.OnTargetExitedTrigger
	void OnTargetEnteredTrigger(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult SweepResult); // Function FSD.TremorAttackComponent.OnTargetEnteredTrigger
	void OnRep_IsAttackActive(); // Function FSD.TremorAttackComponent.OnRep_IsAttackActive
	bool IsInited(); // Function FSD.TremorAttackComponent.IsInited
	void InitTremorAttack(struct UBoxComponent* Box, struct UParticleSystemComponent* Particles); // Function FSD.TremorAttackComponent.InitTremorAttack
};

// Class FSD.TunnelSegmentSetting
// Size: 0x90 (Inherited: 0x30)
struct UTunnelSegmentSetting : UDataAsset {
	struct UTerrainMaterial* Material; // 0x30(0x08)
	struct UFloodFillSettings* PathfinderNoise; // 0x38(0x08)
	struct UFloodFillSettings* CielingNoise; // 0x40(0x08)
	struct UFloodFillSettings* WallNoise; // 0x48(0x08)
	struct UFloodFillSettings* FloorNoise; // 0x50(0x08)
	struct FVector2D VRange; // 0x58(0x08)
	struct FVector2D HRange; // 0x60(0x08)
	struct FVector2D Cielingheight; // 0x68(0x08)
	struct FVector2D FloorHeight; // 0x70(0x08)
	struct FVector2D CielingNoiseRange; // 0x78(0x08)
	struct FVector2D WallNoiseRange; // 0x80(0x08)
	struct FVector2D FloorNoiseRange; // 0x88(0x08)
};

// Class FSD.TunnelSettings
// Size: 0x90 (Inherited: 0x30)
struct UTunnelSettings : UDataAsset {
	struct UTerrainMaterial* Material; // 0x30(0x08)
	struct UFloodFillSettings* PathfinderNoise; // 0x38(0x08)
	struct UFloodFillSettings* CielingNoise; // 0x40(0x08)
	struct UFloodFillSettings* WallNoise; // 0x48(0x08)
	struct UFloodFillSettings* FloorNoise; // 0x50(0x08)
	struct FVector2D VRange; // 0x58(0x08)
	struct FVector2D HRange; // 0x60(0x08)
	struct FVector2D Cielingheight; // 0x68(0x08)
	struct FVector2D FloorHeight; // 0x70(0x08)
	struct FVector2D CielingNoiseRange; // 0x78(0x08)
	struct FVector2D WallNoiseRange; // 0x80(0x08)
	struct FVector2D FloorNoiseRange; // 0x88(0x08)
};

// Class FSD.TunnelSetting
// Size: 0x70 (Inherited: 0x30)
struct UTunnelSetting : UDataAsset {
	struct UFloodFillSettings* PathfinderNoise; // 0x30(0x08)
	struct UTunnelSegmentSetting* BaseSegmentSetting; // 0x38(0x08)
	struct UTunnelSegmentSetting* TightBendSegmentSetting; // 0x40(0x08)
	struct UTunnelSegmentSetting* DirtSegmentSetting; // 0x48(0x08)
	struct UTunnelSegmentSetting* DirtOffsetSetting; // 0x50(0x08)
	struct TArray<struct FTunnelSettingItem> VariationSegments; // 0x58(0x10)
	float Weight; // 0x68(0x04)
	char UnknownData_6C[0x4]; // 0x6c(0x04)
};

// Class FSD.TutorialContentWidget
// Size: 0x260 (Inherited: 0x250)
struct UTutorialContentWidget : UFSDUserWidget {
	struct FMulticastInlineDelegate OnTutorialFinished; // 0x250(0x10)

	void OnTutorialFinished__DelegateSignature(struct UTutorialContentWidget* TutorialWidget); // DelegateFunction FSD.TutorialContentWidget.OnTutorialFinished__DelegateSignature
	void OnShown(); // Function FSD.TutorialContentWidget.OnShown
	void OnRemoveWidget(); // Function FSD.TutorialContentWidget.OnRemoveWidget
};

// Class FSD.TutorialLevelWidget
// Size: 0x278 (Inherited: 0x250)
struct UTutorialLevelWidget : UFSDUserWidget {
	char UnknownData_250[0x8]; // 0x250(0x08)
	float DelayBetweenTutorials; // 0x258(0x04)
	char UnknownData_25C[0x1c]; // 0x25c(0x1c)

	void ShowTutorialWidget(struct UTutorialContentWidget* TutorialWidget, bool ignoreQueue); // Function FSD.TutorialLevelWidget.ShowTutorialWidget
	void RemoveTutorialWidget(struct UTutorialContentWidget* TutorialWidget); // Function FSD.TutorialLevelWidget.RemoveTutorialWidget
	void RemoveAllTutorials(); // Function FSD.TutorialLevelWidget.RemoveAllTutorials
	void OnTutorialFinished(struct UTutorialContentWidget* TutorialWidget); // Function FSD.TutorialLevelWidget.OnTutorialFinished
	void OnNewActiveTutorial(struct UTutorialContentWidget* Widget); // Function FSD.TutorialLevelWidget.OnNewActiveTutorial
};

// Class FSD.TutorialManager
// Size: 0x260 (Inherited: 0x220)
struct ATutorialManager : AActor {
	float MinimumTimeBetweenTutorials; // 0x220(0x04)
	bool ResetTutorialsOnStart; // 0x224(0x01)
	bool ShowTutorialsDebug; // 0x225(0x01)
	char UnknownData_226[0x2]; // 0x226(0x02)
	struct FWeakObjectPtr<struct AFSDPlayerController> PlayerController; // 0x228(0x08)
	struct FWeakObjectPtr<struct APlayerCharacter> PlayerCharacter; // 0x230(0x08)
	struct FWeakObjectPtr<struct UFSDSaveGame> SaveGame; // 0x238(0x08)
	struct TArray<struct FWeakObjectPtr<struct UTutorialComponent>> Tutorials; // 0x240(0x10)
	struct FWeakObjectPtr<struct UTutorialComponent> ActiveTutorial; // 0x250(0x08)
	char UnknownData_258[0x8]; // 0x258(0x08)
};

// Class FSD.TutorialWidget
// Size: 0x258 (Inherited: 0x250)
struct UTutorialWidget : UFSDUserWidget {
	float RemainingVisibleTime; // 0x250(0x04)
	char UnknownData_254[0x4]; // 0x254(0x04)

	void Show(struct FText Text, struct FText Title, struct FText TaskText, struct UTexture2D* Image, float Duration); // Function FSD.TutorialWidget.Show
	void OnShow(struct FText Text, struct FText Title, struct FText TaskText, struct UTexture2D* Image); // Function FSD.TutorialWidget.OnShow
	void OnHide(bool watched); // Function FSD.TutorialWidget.OnHide
	void Hide(bool watched); // Function FSD.TutorialWidget.Hide
	void ChangeHintDuration(float NewDuration); // Function FSD.TutorialWidget.ChangeHintDuration
};

// Class FSD.BTTask_TunnelToTarget
// Size: 0xa8 (Inherited: 0x70)
struct UBTTask_TunnelToTarget : UBTTaskNode {
	struct FBlackboardKeySelector TargetKey; // 0x70(0x28)
	float BurrowSpeed; // 0x98(0x04)
	float BurrowDuration; // 0x9c(0x04)
	struct FFloatInterval DurationClamp; // 0xa0(0x08)
};

// Class FSD.HeightenedSenseComponent
// Size: 0xe8 (Inherited: 0xc0)
struct UHeightenedSenseComponent : UFloatPerkComponent {
	struct UPawnAffliction* HeightenSenseAffliction; // 0xc0(0x08)
	float AlertDistance; // 0xc8(0x04)
	char UnknownData_CC[0x4]; // 0xcc(0x04)
	struct TArray<struct FHeightenedSenseTracker> ActiveTrackers; // 0xd0(0x10)
	bool bAfflictionActivated; // 0xe0(0x01)
	char UnknownData_E1[0x7]; // 0xe1(0x07)

	void RemoveTracker(struct AActor* TrackerActor); // Function FSD.HeightenedSenseComponent.RemoveTracker
	void AddTracker(struct AActor* TrackerActor); // Function FSD.HeightenedSenseComponent.AddTracker
};

// Class FSD.UIFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct UUIFunctionLibrary : UBlueprintFunctionLibrary {

	void SetLoadoutIcon(struct UObject* WorldContextObject, struct UPlayerCharacterID* characterID, int32_t loadoutIndex, int32_t IconIndex); // Function FSD.UIFunctionLibrary.SetLoadoutIcon
	void RemoveItemUINotification(struct UObject* WorldContextObject, struct TArray<struct UObject*> Item, bool MatchChildNotifications); // Function FSD.UIFunctionLibrary.RemoveItemUINotification
	bool IsInItemUINotificationSet(struct UObject* WorldContextObject, struct UObject* Item); // Function FSD.UIFunctionLibrary.IsInItemUINotificationSet
	int64_t GetUnixTimeStamp(); // Function FSD.UIFunctionLibrary.GetUnixTimeStamp
	int32_t GetLoadoutIcon(struct UObject* WorldContextObject, struct UPlayerCharacterID* characterID, int32_t loadoutIndex); // Function FSD.UIFunctionLibrary.GetLoadoutIcon
	struct TArray<struct FText> FormatNewsTexts(struct TArray<struct FText> texts, int32_t RandomSeed, struct UNewsTextLists* wordList, struct UMissionNameBank* MissionNameBank); // Function FSD.UIFunctionLibrary.FormatNewsTexts
	void ClearAllItemUINotifications(struct UObject* WorldContextObject); // Function FSD.UIFunctionLibrary.ClearAllItemUINotifications
	void CheckItemUINotification(struct UObject* WorldContextObject, struct TArray<struct UObject*> Item, bool HasNotification, bool MatchChildNotifications); // Function FSD.UIFunctionLibrary.CheckItemUINotification
	void AddItemUINotification(struct UObject* WorldContextObject, struct TArray<struct UObject*> Item); // Function FSD.UIFunctionLibrary.AddItemUINotification
};

// Class FSD.UpgradableGearComponent
// Size: 0x1f8 (Inherited: 0xb0)
struct UUpgradableGearComponent : UActorComponent {
	struct TArray<struct FUpgradeTier> UpgradeTiers; // 0xb0(0x10)
	struct UOverclockBank* OverclockBank; // 0xc0(0x08)
	struct TArray<struct UItemUpgrade*> AllOverclocks; // 0xc8(0x10)
	struct UTexture2D* IconLine; // 0xd8(0x08)
	struct UTexture2D* IconBG; // 0xe0(0x08)
	struct UTexture2D* IconDetailed; // 0xe8(0x08)
	struct TSoftObjectPtr<struct UTexture2D> PreviewImage; // 0xf0(0x28)
	SoftClassProperty PreviewActor; // 0x118(0x28)
	struct FText Name; // 0x140(0x18)
	struct FText Category; // 0x158(0x18)
	struct FText Description; // 0x170(0x18)
	int32_t CreditCost; // 0x188(0x04)
	char UnknownData_18C[0x4]; // 0x18c(0x04)
	struct TMap<struct UResourceData*, float> ResourceCost; // 0x190(0x50)
	int32_t RequiredCharacterLevel; // 0x1e0(0x04)
	char UnknownData_1E4[0x4]; // 0x1e4(0x04)
	struct TArray<struct FMasteryItem> masteryLevels; // 0x1e8(0x10)

	void SetGearStatText(struct FGearStatEntry entry, struct FText Text); // Function FSD.UpgradableGearComponent.SetGearStatText
	bool PurchaseItem(struct AActor* Item, struct AFSDPlayerState* Player); // Function FSD.UpgradableGearComponent.PurchaseItem
	bool PlayerOwnesUpgradeInAllTiers(struct AActor* itemClass, struct UObject* WorldContextObject); // Function FSD.UpgradableGearComponent.PlayerOwnesUpgradeInAllTiers
	void MirrorUpgradePreviewStatus(struct FGearStatEntry From, struct FGearStatEntry to); // Function FSD.UpgradableGearComponent.MirrorUpgradePreviewStatus
	bool IsUpgradeEquipped(struct AActor* itemClass, struct UItemUpgrade* Upgrade, struct AFSDPlayerState* Player); // Function FSD.UpgradableGearComponent.IsUpgradeEquipped
	bool IsTierUnLocked(struct AActor* itemClass, int32_t tierIndex, struct AFSDPlayerState* Player, struct UPlayerCharacterID* characterID); // Function FSD.UpgradableGearComponent.IsTierUnLocked
	bool IsOverclockingEnabled(struct UObject* WorldContextObject, struct AFSDPlayerState* Player, struct UPlayerCharacterID* characterID, struct AActor* itemClass); // Function FSD.UpgradableGearComponent.IsOverclockingEnabled
	bool IsItemUnlocked(struct UObject* WorldContextObject, struct UItemID* Item, struct UPlayerCharacterID* ItemOwner); // Function FSD.UpgradableGearComponent.IsItemUnlocked
	bool IsItemOwned(struct UObject* WorldContextObject, struct UItemID* Item); // Function FSD.UpgradableGearComponent.IsItemOwned
	bool IsItemEquipped(struct UObject* WorldContextObject, struct AActor* itemClass, struct UPlayerCharacterID* characterID); // Function FSD.UpgradableGearComponent.IsItemEquipped
	int32_t GetUpgradeTier(struct AActor* itemClass, struct UItemUpgrade* ItemUpgrade); // Function FSD.UpgradableGearComponent.GetUpgradeTier
	struct FString GetSourceGearName(); // Function FSD.UpgradableGearComponent.GetSourceGearName
	struct UTexture2D* GetPreviewImage(); // Function FSD.UpgradableGearComponent.GetPreviewImage
	struct AActor* GetPreviewActorClass(); // Function FSD.UpgradableGearComponent.GetPreviewActorClass
	struct TArray<struct UItemUpgrade*> GetOverClocks(); // Function FSD.UpgradableGearComponent.GetOverClocks
	int32_t GetMasteryProgress(struct UObject* WorldContextObject, struct UItemID* ItemID, int32_t maxMastery); // Function FSD.UpgradableGearComponent.GetMasteryProgress
	struct TArray<struct FMasteryItem> GetMasteryLevels(struct UItemID* ItemID); // Function FSD.UpgradableGearComponent.GetMasteryLevels
	bool GetMasteryForLevel(struct TArray<struct FMasteryItem> masteryLevels, int32_t Level, struct FMasteryItem outLevel); // Function FSD.UpgradableGearComponent.GetMasteryForLevel
	struct TArray<struct FUpgradeTier> GetItemUpgradeTiers(struct AActor* itemClass); // Function FSD.UpgradableGearComponent.GetItemUpgradeTiers
	enum class EItemUpgradeStatus GetItemUpgradeStatus(struct UObject* WorldContextObject, struct AActor* itemClass, struct UItemUpgrade* ItemUpgrade, struct UPlayerCharacterID* characterID); // Function FSD.UpgradableGearComponent.GetItemUpgradeStatus
	struct TArray<struct UItemUpgrade*> GetItemUpgrades(struct AActor* itemClass, struct UItemUpgrade* upgradeClass, struct AFSDPlayerState* Player, char upgradeIndex); // Function FSD.UpgradableGearComponent.GetItemUpgrades
	struct AActor* GetItemPreviewClass(struct AActor* itemClass); // Function FSD.UpgradableGearComponent.GetItemPreviewClass
	bool GetItemMasteryForLevel(struct UItemID* ItemID, int32_t Level, struct FMasteryItem outLevel); // Function FSD.UpgradableGearComponent.GetItemMasteryForLevel
	struct TArray<struct FCraftingCost> GetItemCost(struct AActor* Item); // Function FSD.UpgradableGearComponent.GetItemCost
	struct FText GetGearStatValue(struct FGearStatEntry entry); // Function FSD.UpgradableGearComponent.GetGearStatValue
	struct TArray<struct FGearStatEntry> GetGearStats(struct AFSDPlayerState* PlayerState, struct AActor* ActorClass); // Function FSD.UpgradableGearComponent.GetGearStats
	struct FString GetGearSourceName(struct AActor* itemClass, struct UItemUpgrade* ItemUpgrade); // Function FSD.UpgradableGearComponent.GetGearSourceName
	struct TArray<struct UItemUpgrade*> GetEquippedUpgrades(struct AActor* itemClass, struct AFSDPlayerState* Player); // Function FSD.UpgradableGearComponent.GetEquippedUpgrades
	struct UItemUpgrade* GetEquippedUpgradeAtTier(struct AActor* itemClass, int32_t tierIndex, struct UPlayerCharacterID* characterID, struct AFSDPlayerState* Player); // Function FSD.UpgradableGearComponent.GetEquippedUpgradeAtTier
	struct UItemUpgrade* GetEquippedOverclock(struct UObject* WorldContextObject, struct AActor* itemClass); // Function FSD.UpgradableGearComponent.GetEquippedOverclock
	struct TArray<struct UItemUpgrade*> GetEquippableOverclocks(struct UObject* WorldContextObject, struct AActor* itemClass, struct UPlayerCharacterID* characterID); // Function FSD.UpgradableGearComponent.GetEquippableOverclocks
	struct TArray<struct FCraftingCost> GetCraftingCost(); // Function FSD.UpgradableGearComponent.GetCraftingCost
	int32_t GetCharacterLevelRequiredForItem(struct AActor* itemClass); // Function FSD.UpgradableGearComponent.GetCharacterLevelRequiredForItem
	struct TArray<struct UItemUpgrade*> GetAllUpgrades(); // Function FSD.UpgradableGearComponent.GetAllUpgrades
	void ClearEquippedUpgrade(struct AActor* itemClass, int32_t tierIndex, struct AFSDPlayerState* Player); // Function FSD.UpgradableGearComponent.ClearEquippedUpgrade
	void CheckMasteryUnlocks(struct UItemID* ItemID, struct AFSDPlayerController* Player); // Function FSD.UpgradableGearComponent.CheckMasteryUnlocks
	bool CanItemOverclock(struct UObject* WorldContextObject, struct AActor* itemClass); // Function FSD.UpgradableGearComponent.CanItemOverclock
	bool CanAffordUpgrade(struct UObject* WorldContextObject, struct UItemUpgrade* Upgrade); // Function FSD.UpgradableGearComponent.CanAffordUpgrade
	bool CanAffordItem(struct UObject* WorldContextObject, struct AActor* Item); // Function FSD.UpgradableGearComponent.CanAffordItem
};

// Class FSD.UpgradableItemComponent
// Size: 0x1f8 (Inherited: 0x1f8)
struct UUpgradableItemComponent : UUpgradableGearComponent {
};

// Class FSD.UpgradableBoscoComponent
// Size: 0x1f8 (Inherited: 0x1f8)
struct UUpgradableBoscoComponent : UUpgradableGearComponent {
};

// Class FSD.UseAnimationSetting
// Size: 0x78 (Inherited: 0x30)
struct UUseAnimationSetting : UDataAsset {
	struct UAnimMontage* BeginFP; // 0x30(0x08)
	struct TArray<struct UAnimMontage*> LoopsFP; // 0x38(0x10)
	struct UAnimMontage* EndFP; // 0x48(0x08)
	struct UAnimMontage* BeginTP; // 0x50(0x08)
	struct TArray<struct UAnimMontage*> LoopsTP; // 0x58(0x10)
	struct UAnimMontage* EndTP; // 0x68(0x08)
	bool IsManuallyControlled; // 0x70(0x01)
	char UnknownData_71[0x7]; // 0x71(0x07)
};

// Class FSD.BPInstantUsable
// Size: 0x138 (Inherited: 0x138)
struct UBPInstantUsable : UInstantUsable {

	void SetShoutBeginUse(struct UDialogDataAsset* InShout); // Function FSD.BPInstantUsable.SetShoutBeginUse
	bool BPCanUse(struct APlayerCharacter* User, struct USceneComponent* UseCollider); // Function FSD.BPInstantUsable.BPCanUse
};

// Class FSD.ShieldBoostUsable
// Size: 0x138 (Inherited: 0x138)
struct UShieldBoostUsable : UInstantUsable {

	void OnCharacterBoosted(struct APlayerCharacter* User); // Function FSD.ShieldBoostUsable.OnCharacterBoosted
};

// Class FSD.RepairableUsable
// Size: 0x138 (Inherited: 0x138)
struct URepairableUsable : UInstantUsable {
};

// Class FSD.SingleUsableComponent
// Size: 0x1d8 (Inherited: 0x100)
struct USingleUsableComponent : UUsableComponent {
	struct FMulticastInlineDelegate OnUsedBy; // 0x100(0x10)
	struct FMulticastInlineDelegate OnUseBegin; // 0x110(0x10)
	struct FMulticastInlineDelegate OnProgress; // 0x120(0x10)
	struct FMulticastInlineDelegate OnUsableChanged; // 0x130(0x10)
	struct FMulticastInlineDelegate OnUserCountChanged; // 0x140(0x10)
	struct FMulticastInlineDelegate OnFailed; // 0x150(0x10)
	struct USoundCue* AudioBeginUse; // 0x160(0x08)
	struct USoundCue* AudioFailedUse; // 0x168(0x08)
	struct USoundCue* AudioCompletedUse; // 0x170(0x08)
	struct UDialogDataAsset* BoscoLaserpointerShout; // 0x178(0x08)
	bool CoopUse; // 0x180(0x01)
	char UnknownData_181[0x7]; // 0x181(0x07)
	struct UPawnStat* UseSpeedStat; // 0x188(0x08)
	float CoopUseMultiplier; // 0x190(0x04)
	bool Usable; // 0x194(0x01)
	bool TurnOffAfterUse; // 0x195(0x01)
	char UnknownData_196[0x1]; // 0x196(0x01)
	bool bShowUsingUI; // 0x197(0x01)
	struct TSoftObjectPtr<struct UTexture2D> UsableIcon; // 0x198(0x28)
	float useDuration; // 0x1c0(0x04)
	float Progress; // 0x1c4(0x04)
	float DesiredProgress; // 0x1c8(0x04)
	int32_t userCount; // 0x1cc(0x04)
	struct UAudioComponent* AudioBeginUseInstance; // 0x1d0(0x08)

	void Use(struct APlayerCharacter* User, float DeltaTime); // Function FSD.SingleUsableComponent.Use
	void SetCanUse(bool canUse); // Function FSD.SingleUsableComponent.SetCanUse
	void OnRep_UserCount(); // Function FSD.SingleUsableComponent.OnRep_UserCount
	void OnRep_Usable(); // Function FSD.SingleUsableComponent.OnRep_Usable
	void OnRep_DesiredProgress(); // Function FSD.SingleUsableComponent.OnRep_DesiredProgress
	void All_PlayFailedAudio(); // Function FSD.SingleUsableComponent.All_PlayFailedAudio
};

// Class FSD.ContinuousUsableComponent
// Size: 0x120 (Inherited: 0x100)
struct UContinuousUsableComponent : UUsableComponent {
	struct FMulticastInlineDelegate UseTick; // 0x100(0x10)
	float TimeBetweenTicks; // 0x110(0x04)
	bool Usable; // 0x114(0x01)
	char UnknownData_115[0xb]; // 0x115(0x0b)

	void SetCanUse(bool canUse); // Function FSD.ContinuousUsableComponent.SetCanUse
};

// Class FSD.OncePerPlayerUsableComponent
// Size: 0x160 (Inherited: 0x138)
struct UOncePerPlayerUsableComponent : UInstantUsable {
	struct FMulticastInlineDelegate OnUsersChangedEvent; // 0x138(0x10)
	struct TArray<struct FUniqueNetIdRepl> Users; // 0x148(0x10)
	char UnknownData_158[0x8]; // 0x158(0x08)

	void OnUsersChanged(struct TArray<struct FUniqueNetIdRepl> userList); // Function FSD.OncePerPlayerUsableComponent.OnUsersChanged
	void OnRep_Users(); // Function FSD.OncePerPlayerUsableComponent.OnRep_Users
};

// Class FSD.EventRewarderUsableComponent
// Size: 0x1f8 (Inherited: 0x1d8)
struct UEventRewarderUsableComponent : USingleUsableComponent {
	struct FText RewardUseText; // 0x1d8(0x18)
	char UnknownData_1F0[0x8]; // 0x1f0(0x08)

	struct FText CreateUseText(int32_t blankSchematicCount); // Function FSD.EventRewarderUsableComponent.CreateUseText
};

// Class FSD.SpecialEventUsableComponent
// Size: 0x1d8 (Inherited: 0x1d8)
struct USpecialEventUsableComponent : USingleUsableComponent {
};

// Class FSD.ControlEnemyUsable
// Size: 0x148 (Inherited: 0x138)
struct UControlEnemyUsable : UInstantUsable {
	char UnknownData_138[0x10]; // 0x138(0x10)
};

// Class FSD.UsableAggregator
// Size: 0xf0 (Inherited: 0xc8)
struct UUsableAggregator : UItemAggregator {
	struct FMulticastInlineDelegate OnVisibilityChanged; // 0xc8(0x10)
	struct FText UsingText; // 0xd8(0x18)

	float GetProgress(); // Function FSD.UsableAggregator.GetProgress
};

// Class FSD.UsingStateComponent
// Size: 0xf8 (Inherited: 0xf8)
struct UUsingStateComponent : UCharacterStateComponent {
};

// Class FSD.VanityTestCharacter
// Size: 0x520 (Inherited: 0x4c0)
struct AVanityTestCharacter : ACharacter {
	float ArmorThickness; // 0x4b8(0x04)
	float BeardThickness; // 0x4bc(0x04)
	bool ArmorCoversBeard; // 0x4c0(0x01)
	struct TMap<enum class EVanitySlot, struct FVanityTestCharacterItem> vanityItems; // 0x4c8(0x50)
	struct USkeletalMesh* WeaponMesh; // 0x518(0x08)

	void SetupVanity(); // Function FSD.VanityTestCharacter.SetupVanity
};

// Class FSD.VanityCharacter
// Size: 0x290 (Inherited: 0x220)
struct AVanityCharacter : AActor {
	struct UAnimSequenceBase* Animation; // 0x220(0x08)
	struct USkinColorVanityItem* skinColor; // 0x228(0x08)
	struct UBeardColorVanityItem* BeardColor; // 0x230(0x08)
	struct UHeadVanityItem* Head; // 0x238(0x08)
	struct UEyeBrowsVanityItem* EyeBrows; // 0x240(0x08)
	struct USideburnsVanityItem* Sideburns; // 0x248(0x08)
	struct UMoustacheVanityItem* Moustache; // 0x250(0x08)
	struct UBeardVanityItem* Beard; // 0x258(0x08)
	struct UArmorVanityItem* Armor; // 0x260(0x08)
	struct UArmorMaterialVanityItem* ArmorColor; // 0x268(0x08)
	struct USkeletalMeshComponent* Mesh; // 0x270(0x08)
	struct USkeletalMeshComponent* BodyMesh; // 0x278(0x08)
	struct UBeardColorVanityItem* DefaultHairColor; // 0x280(0x08)
	struct UMaterialInterface* DefaultArmorMaterial; // 0x288(0x08)

	void DisplayVanity(); // Function FSD.VanityCharacter.DisplayVanity
	void Clean(); // Function FSD.VanityCharacter.Clean
};

// Class FSD.IconGenerationBase
// Size: 0x230 (Inherited: 0x220)
struct AIconGenerationBase : AActor {
	struct USceneCaptureComponent2D* ActiveCaptureComponent; // 0x220(0x08)
	struct UMaterialInterface* DownScaleMaterial; // 0x228(0x08)
};

// Class FSD.IconGenerationCameraKey
// Size: 0x30 (Inherited: 0x30)
struct UIconGenerationCameraKey : UDataAsset {
};

// Class FSD.IconSceneCaptureComponent
// Size: 0x880 (Inherited: 0x880)
struct UIconSceneCaptureComponent : USceneCaptureComponent2D {
	struct UIconGenerationCameraKey* CameraKey; // 0x878(0x08)
};

// Class FSD.IconGenerationCharacter
// Size: 0x260 (Inherited: 0x230)
struct AIconGenerationCharacter : AIconGenerationBase {
	struct USkeletalMeshComponent* Mesh; // 0x230(0x08)
	struct USkeletalMeshComponent* BodyMesh; // 0x238(0x08)
	struct UBeardColorVanityItem* HairColor; // 0x240(0x08)
	struct UMaterialInterface* ArmorMaterial; // 0x248(0x08)
	struct TArray<struct UIconSceneCaptureComponent*> CaptureComponents; // 0x250(0x10)
};

// Class FSD.PickaxeIconSceneCaptureComponent
// Size: 0x880 (Inherited: 0x880)
struct UPickaxeIconSceneCaptureComponent : USceneCaptureComponent2D {
	enum class EPickaxePartLocation CameraKey; // 0x878(0x01)
};

// Class FSD.IconGenerationPickaxe
// Size: 0x240 (Inherited: 0x230)
struct AIconGenerationPickaxe : AIconGenerationBase {
	struct TArray<struct UPickaxeIconSceneCaptureComponent*> CaptureComponents; // 0x230(0x10)
};

// Class FSD.IconGenerationManager
// Size: 0x138 (Inherited: 0x28)
struct UIconGenerationManager : UObject {
	struct AIconGenerationCharacter* GeneratorInst; // 0x28(0x08)
	struct AIconGenerationPickaxe* PickaxeGeneratorInst; // 0x30(0x08)
	char UnknownData_38[0x50]; // 0x38(0x50)
	struct TArray<struct FGenerateIconInfo> ItemGenerationQueue; // 0x88(0x10)
	char UnknownData_98[0x28]; // 0x98(0x28)
	struct TArray<enum class EVanitySlot> VanitySlots; // 0xc0(0x10)
	struct TArray<struct UVanityItem*> HairColorHairItems; // 0xd0(0x10)
	SoftClassProperty IconCharacter; // 0xe0(0x28)
	SoftClassProperty IconPickaxe; // 0x108(0x28)
	struct UTextureRenderTarget2D* LatestGeneratedTexture; // 0x130(0x08)

	void GeneratePickaxePartIcon_Async(struct UIconGenerationManager* Manager, struct UPickaxePart* part, enum class EPickaxePartLocation PickaxePartLocation, struct UPlayerCharacterID* Character, struct UTextureRenderTarget2D* Icon, struct FLatentActionInfo LatentInfo); // Function FSD.IconGenerationManager.GeneratePickaxePartIcon_Async
	void GenerateIcon_Async(struct UIconGenerationManager* Manager, struct UVanityItem* Item, struct UPlayerCharacterID* Character, struct UTextureRenderTarget2D* Icon, struct FLatentActionInfo LatentInfo); // Function FSD.IconGenerationManager.GenerateIcon_Async
};

// Class FSD.VanityItem
// Size: 0x1a0 (Inherited: 0x60)
struct UVanityItem : USavablePrimaryDataAsset {
	char UnknownData_60[0x10]; // 0x60(0x10)
	struct FMulticastInlineDelegate OnUnlockFlagChanged; // 0x70(0x10)
	int32_t SortingPriority; // 0x80(0x04)
	char UnknownData_84[0x4]; // 0x84(0x04)
	struct FText ItemName; // 0x88(0x18)
	struct FText ItemDescription; // 0xa0(0x18)
	struct FString NotesInternal; // 0xb8(0x10)
	struct UTexture2D* Icon; // 0xc8(0x08)
	bool IsPartOfRandomization; // 0xd0(0x01)
	char UnknownData_D1[0x7]; // 0xd1(0x07)
	struct UIconGenerationCameraKey* IconGenerationCameraKey; // 0xd8(0x08)
	struct UDLCBase* RequiredDLC; // 0xe0(0x08)
	struct UDLCBase* CraftingRestrictionDLC; // 0xe8(0x08)
	bool bUnLockedFlag; // 0xf0(0x01)
	char UnknownData_F1[0x3]; // 0xf1(0x03)
	int32_t CraftingPlayerRankRequired; // 0xf4(0x04)
	struct TMap<struct UResourceData*, float> CraftingCost; // 0xf8(0x50)
	int32_t CraftingCreditsCost; // 0x148(0x04)
	char UnknownData_14C[0x4]; // 0x14c(0x04)
	struct TSet<struct UPlayerCharacterID*> RestrictToCharacters; // 0x150(0x50)

	void PreviewItem(struct AFSDPlayerState* PlayerState, bool Show); // Function FSD.VanityItem.PreviewItem
	void MarkAsUnLocked(); // Function FSD.VanityItem.MarkAsUnLocked
	bool IsOwned(struct UObject* WorldContextObject, struct UPlayerCharacterID* characterID); // Function FSD.VanityItem.IsOwned
	bool IsEquipped(struct UObject* WorldContextObject, struct UPlayerCharacterID* characterID); // Function FSD.VanityItem.IsEquipped
	void GiftItem(struct UObject* WorldContextObject, struct UPlayerCharacterID* characterID); // Function FSD.VanityItem.GiftItem
	enum class EVanitySlot GetVanitySlot(); // Function FSD.VanityItem.GetVanitySlot
	struct TArray<struct FCraftingCost> GetResourceCost(); // Function FSD.VanityItem.GetResourceCost
	int32_t GetRequiredPlayerRank(); // Function FSD.VanityItem.GetRequiredPlayerRank
	struct UTexture* GetIcon(struct UObject* WorldContextObject); // Function FSD.VanityItem.GetIcon
	int32_t GetCraftingCreditsCost(); // Function FSD.VanityItem.GetCraftingCreditsCost
	struct FText GetCraftableName(); // Function FSD.VanityItem.GetCraftableName
	struct UTexture2D* GetCraftableIcon(); // Function FSD.VanityItem.GetCraftableIcon
	struct FText GetCraftableDescription(); // Function FSD.VanityItem.GetCraftableDescription
	void CraftItem(struct UObject* WorldContextObject, struct UPlayerCharacterID* characterID); // Function FSD.VanityItem.CraftItem
	void ClearUnLockedMark(); // Function FSD.VanityItem.ClearUnLockedMark
	bool CanCraft(struct UObject* WorldContextObject); // Function FSD.VanityItem.CanCraft
	void ApplyItemPermanently(struct UObject* WorldContextObject, struct UPlayerCharacterID* characterID); // Function FSD.VanityItem.ApplyItemPermanently
	void ApplyItem(struct APlayerCharacter* Player, bool isPermanent); // Function FSD.VanityItem.ApplyItem
};

// Class FSD.ItemMaterialVanityItem
// Size: 0x1a8 (Inherited: 0x1a0)
struct UItemMaterialVanityItem : UVanityItem {
	struct UMaterialInterface* Material; // 0x1a0(0x08)
};

// Class FSD.SkinColorVanityItem
// Size: 0x1a8 (Inherited: 0x1a8)
struct USkinColorVanityItem : UItemMaterialVanityItem {
};

// Class FSD.BeardColorVanityItem
// Size: 0x1c8 (Inherited: 0x1a0)
struct UBeardColorVanityItem : UVanityItem {
	struct UMaterialInterface* HairColor; // 0x1a0(0x08)
	struct UMaterialInterface* EyebrowColor; // 0x1a8(0x08)
	struct UMaterialInterface* MoustacheColor; // 0x1b0(0x08)
	struct UMaterialInterface* SideburnColor; // 0x1b8(0x08)
	struct UMaterialInterface* BeardColor; // 0x1c0(0x08)
};

// Class FSD.HeadVanityItem
// Size: 0x220 (Inherited: 0x1a0)
struct UHeadVanityItem : UVanityItem {
	struct TSoftObjectPtr<struct USkeletalMesh> Mesh; // 0x1a0(0x28)
	SoftClassProperty AnimInstance; // 0x1c8(0x28)
	enum class EHeadVanityType HeadVanityType; // 0x1f0(0x01)
	bool HideEyebrows; // 0x1f1(0x01)
	bool HideSideburns; // 0x1f2(0x01)
	bool HideMoustache; // 0x1f3(0x01)
	bool HideBeard; // 0x1f4(0x01)
	bool HideAll; // 0x1f5(0x01)
	bool HideHead; // 0x1f6(0x01)
	enum class ECharacterHeadMesh HeadMesh; // 0x1f7(0x01)
	struct TSoftObjectPtr<struct UMaterialInterface> MaterialOverride; // 0x1f8(0x28)
};

// Class FSD.BeardVanityItem
// Size: 0x1f8 (Inherited: 0x1a0)
struct UBeardVanityItem : UVanityItem {
	struct TSoftObjectPtr<struct USkeletalMesh> Mesh; // 0x1a0(0x28)
	float BeardThickness; // 0x1c8(0x04)
	bool RequiresSlimArmor; // 0x1cc(0x01)
	char UnknownData_1CD[0x3]; // 0x1cd(0x03)
	SoftClassProperty AnimInstance; // 0x1d0(0x28)
};

// Class FSD.ArmorVanityItem
// Size: 0x290 (Inherited: 0x1a0)
struct UArmorVanityItem : UVanityItem {
	struct TSoftObjectPtr<struct USkeletalMesh> Mesh; // 0x1a0(0x28)
	struct TSoftObjectPtr<struct USkeletalMesh> BeardCompatibleMesh; // 0x1c8(0x28)
	struct TSoftObjectPtr<struct USkeletalMesh> FPMesh; // 0x1f0(0x28)
	SoftClassProperty AnimInstance; // 0x218(0x28)
	bool CropBeard; // 0x240(0x01)
	char UnknownData_241[0x3]; // 0x241(0x03)
	float ArmorThickness; // 0x244(0x04)
	struct TSoftObjectPtr<struct UMaterialInterface> MaterialOverride; // 0x248(0x28)
	bool CanOnlyUseDefaultArmorMaterial; // 0x270(0x01)
	char UnknownData_271[0x7]; // 0x271(0x07)
	struct UArmorMaterialVanityItem* DefaultArmorMaterial; // 0x278(0x08)
	struct TArray<struct FTattooArmorItem> Tattoos; // 0x280(0x10)

	void PreviewArmor(struct AFSDPlayerState* PlayerState, bool Show, bool useDefaultArmorMaterial); // Function FSD.ArmorVanityItem.PreviewArmor
};

// Class FSD.ArmorMaterialVanityItem
// Size: 0x208 (Inherited: 0x1a0)
struct UArmorMaterialVanityItem : UVanityItem {
	struct TSoftObjectPtr<struct UMaterialInterface> Material; // 0x1a0(0x28)
	struct TSoftObjectPtr<struct UMaterialInterface> IconMaterial; // 0x1c8(0x28)
	struct UArmorVanityItem* LockedToArmor; // 0x1f0(0x08)
	struct TArray<struct UArmorVanityItem*> BannedArmors; // 0x1f8(0x10)
};

// Class FSD.EyeBrowsVanityItem
// Size: 0x1f0 (Inherited: 0x1a0)
struct UEyeBrowsVanityItem : UVanityItem {
	struct TSoftObjectPtr<struct USkeletalMesh> Mesh; // 0x1a0(0x28)
	SoftClassProperty AnimInstance; // 0x1c8(0x28)
};

// Class FSD.MoustacheVanityItem
// Size: 0x1f8 (Inherited: 0x1a0)
struct UMoustacheVanityItem : UVanityItem {
	struct TSoftObjectPtr<struct USkeletalMesh> Mesh; // 0x1a0(0x28)
	SoftClassProperty AnimInstance; // 0x1c8(0x28)
	bool RequiresSlimArmor; // 0x1f0(0x01)
	char UnknownData_1F1[0x7]; // 0x1f1(0x07)
};

// Class FSD.SideburnsVanityItem
// Size: 0x1f8 (Inherited: 0x1a0)
struct USideburnsVanityItem : UVanityItem {
	struct TSoftObjectPtr<struct USkeletalMesh> Mesh; // 0x1a0(0x28)
	SoftClassProperty AnimInstance; // 0x1c8(0x28)
	bool RequiresSlimArmor; // 0x1f0(0x01)
	char UnknownData_1F1[0x7]; // 0x1f1(0x07)
};

// Class FSD.VanityAnimInstance
// Size: 0x2a0 (Inherited: 0x270)
struct UVanityAnimInstance : UAnimInstance {
	enum class EVanitySlot VanitySlot; // 0x268(0x01)
	bool ArmorCoversBeard; // 0x269(0x01)
	struct FVector ArmorChestThickness; // 0x26c(0x0c)
	struct FRotator ArmorChestRotation; // 0x278(0x0c)
	struct FVector ExternalForce; // 0x284(0x0c)
	float ExternalForceMultiplier; // 0x290(0x04)
	float MaxForce; // 0x294(0x04)
	char UnknownData_29E[0x2]; // 0x29e(0x02)
};

// Class FSD.VanitySchematicBank
// Size: 0x90 (Inherited: 0x38)
struct UVanitySchematicBank : USchematicBankBase {
	struct USchematicCategory* SchematicCategory; // 0x38(0x08)
	struct TMap<struct UVanityItem*, struct FSchematicBankItem> vanityItems; // 0x40(0x50)

	void AppendItems(struct TArray<struct UVanityItem*> toArray); // Function FSD.VanitySchematicBank.AppendItems
};

// Class FSD.VanityTattoo
// Size: 0x70 (Inherited: 0x30)
struct UVanityTattoo : UDataAsset {
	struct TSoftObjectPtr<struct UTexture2D> Texture; // 0x30(0x28)
	struct FVector2D Location; // 0x58(0x08)
	float RotationAngle; // 0x60(0x04)
	float ScaleBase; // 0x64(0x04)
	float ScaleStretch; // 0x68(0x04)
	char UnknownData_6C[0x4]; // 0x6c(0x04)
};

// Class FSD.VeinResourceData
// Size: 0x108 (Inherited: 0xf0)
struct UVeinResourceData : UResourceData {
	struct UTerrainMaterial* TerrainMaterial; // 0xf0(0x08)
	float UnitsPerLenth; // 0xf8(0x04)
	bool ScaleToResourceDistribution; // 0xfc(0x01)
	char UnknownData_FD[0x3]; // 0xfd(0x03)
	struct UVeinResourceCreator* ResourceCreator; // 0x100(0x08)

	struct UTerrainMaterial* GetTerrainMaterial(); // Function FSD.VeinResourceData.GetTerrainMaterial
};

// Class FSD.VictoryPoseFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct UVictoryPoseFunctionLibrary : UBlueprintFunctionLibrary {

	bool IsRandomVictoryPose(struct UVictoryPose* VictoryPose); // Function FSD.VictoryPoseFunctionLibrary.IsRandomVictoryPose
	struct TArray<struct UVictoryPose*> GetOwnedVictoryPoses(struct UObject* WorldContextObject, struct UPlayerCharacterID* characterID); // Function FSD.VictoryPoseFunctionLibrary.GetOwnedVictoryPoses
	struct UVictoryPose* GetEquippedVictoryPose(struct UObject* WorldContextObject, struct UPlayerCharacterID* characterID); // Function FSD.VictoryPoseFunctionLibrary.GetEquippedVictoryPose
};

// Class FSD.VictoryPose
// Size: 0x170 (Inherited: 0x60)
struct UVictoryPose : USavablePrimaryDataAsset {
	struct FText Title; // 0x60(0x18)
	struct FText Description; // 0x78(0x18)
	bool UnlockedFromStart; // 0x90(0x01)
	char UnknownData_91[0x7]; // 0x91(0x07)
	struct TArray<struct TSoftObjectPtr<struct UAnimSequence>> Walks; // 0x98(0x10)
	struct TSoftObjectPtr<struct UAnimSequence> pose; // 0xa8(0x28)
	SoftClassProperty Prop_Actor; // 0xd0(0x28)
	struct TSoftObjectPtr<struct UAnimSequence> Prop_Walk; // 0xf8(0x28)
	struct TSoftObjectPtr<struct UAnimSequence> Prop_Pose; // 0x120(0x28)
	struct TSoftObjectPtr<struct UAnimSequence> Prop_Idle; // 0x148(0x28)

	void Unlock(struct UObject* WorldContextObject, struct UPlayerCharacterID* characterID); // Function FSD.VictoryPose.Unlock
	bool IsUnlocked(struct UObject* WorldContextObject, struct UPlayerCharacterID* characterID); // Function FSD.VictoryPose.IsUnlocked
	void Equip(struct UObject* WorldContextObject, struct UPlayerCharacterID* characterID); // Function FSD.VictoryPose.Equip
};

// Class FSD.VictoryPoseSchematicBank
// Size: 0x90 (Inherited: 0x38)
struct UVictoryPoseSchematicBank : USchematicBankBase {
	struct USchematicCategory* SchematicCategory; // 0x38(0x08)
	struct TMap<struct UVictoryPose*, struct FSchematicBankItem> VictoryPoses; // 0x40(0x50)
};

// Class FSD.VictoryPoseSettings
// Size: 0x90 (Inherited: 0x30)
struct UVictoryPoseSettings : UDataAsset {
	struct UTexture2D* GenericVictoryPoseIcon; // 0x30(0x08)
	struct TArray<struct UVictoryPose*> AvailableVictoryPoses; // 0x38(0x10)
	struct TArray<struct UVictoryPose*> LoadedVictoryPoses; // 0x48(0x10)
	struct UVictoryPose* RandomVictoryPose; // 0x58(0x08)
	struct TArray<struct UActorComponent*> ModReferencesHack; // 0x60(0x10)
	struct TArray<struct AActor*> ModProxyHack; // 0x70(0x10)
	char UnknownData_80[0x10]; // 0x80(0x10)
};

// Class FSD.WalkingStateComponent
// Size: 0x158 (Inherited: 0xf8)
struct UWalkingStateComponent : UCharacterStateComponent {
	bool SlidingEnabled; // 0xf8(0x01)
	bool ShowDebug; // 0xf9(0x01)
	char UnknownData_FA[0x2]; // 0xfa(0x02)
	float SlideAngle; // 0xfc(0x04)
	float SlideAcceleration; // 0x100(0x04)
	float MaxSlideSpeed; // 0x104(0x04)
	float MaxClimbDistance; // 0x108(0x04)
	char UnknownData_10C[0x4]; // 0x10c(0x04)
	struct USoundBase* AudioSliding; // 0x110(0x08)
	struct USoundBase* IceSliding; // 0x118(0x08)
	struct UAudioComponent* AudioComponentSliding; // 0x120(0x08)
	struct UAudioComponent* AudioComponentIceSliding; // 0x128(0x08)
	char UnknownData_130[0x28]; // 0x130(0x28)

	void TrackGrindCallback(struct APlayerCharacter* User); // Function FSD.WalkingStateComponent.TrackGrindCallback
	void Server_StartTrackMovement(struct UTrackBuilderMovement* InMovement); // Function FSD.WalkingStateComponent.Server_StartTrackMovement
	void Server_SetIsSliding(bool isSliding); // Function FSD.WalkingStateComponent.Server_SetIsSliding
	void JumpPress(); // Function FSD.WalkingStateComponent.JumpPress
};

// Class FSD.WeakpointGlowComponent
// Size: 0x178 (Inherited: 0xb0)
struct UWeakpointGlowComponent : UActorComponent {
	struct FName EmissiveParam; // 0xb0(0x08)
	char UnknownData_B8[0x18]; // 0xb8(0x18)
	struct FRuntimeFloatCurve WeakpointHitCurve; // 0xd0(0x88)
	struct UMaterialInstance* MakeMIDFrom; // 0x158(0x08)
	float MaxEmissive; // 0x160(0x04)
	float MinEmissive; // 0x164(0x04)
	struct UFSDPhysicalMaterial* WeakPointMaterial; // 0x168(0x08)
	bool AddFirstChannelAutomatically; // 0x170(0x01)
	char UnknownData_171[0x3]; // 0x171(0x03)
	int32_t ReplaceMatIndex; // 0x174(0x04)

	bool StopLoopingGlow(int32_t aGlowID, bool aFade); // Function FSD.WeakpointGlowComponent.StopLoopingGlow
	void ShowBodypartHit(float amount, float BaseAmount, struct UPrimitiveComponent* Component, struct UFSDPhysicalMaterial* PhysMat, struct FName BoneName); // Function FSD.WeakpointGlowComponent.ShowBodypartHit
	void SetUpWeakPointGlowOnMesh(struct UMeshComponent* Mesh, int32_t MaterialIndex, struct UFSDPhysicalMaterial* PhysicalMaterial, struct UHealthComponentBase* HealthComponent); // Function FSD.WeakpointGlowComponent.SetUpWeakPointGlowOnMesh
	void All_ShowWeakPointHit(char Channel); // Function FSD.WeakpointGlowComponent.All_ShowWeakPointHit
	void AddWeakpointGlow(bool loopIndefinitely, float loopTime, struct FRuntimeFloatCurve GrowCurve, struct FRuntimeFloatCurve FadeCurve, int32_t UniqueId, int32_t Channel); // Function FSD.WeakpointGlowComponent.AddWeakpointGlow
};

// Class FSD.WeaponFireOwner
// Size: 0x28 (Inherited: 0x28)
struct UWeaponFireOwner : UInterface {

	struct APlayerCharacter* GetPlayerCharacter(); // Function FSD.WeaponFireOwner.GetPlayerCharacter
	struct FQuat GetMuzzleQuat(); // Function FSD.WeaponFireOwner.GetMuzzleQuat
	struct FVector GetMuzzleLocation(); // Function FSD.WeaponFireOwner.GetMuzzleLocation
	bool GetIsLocallyControlled(); // Function FSD.WeaponFireOwner.GetIsLocallyControlled
	bool GetIsFirstPerson(); // Function FSD.WeaponFireOwner.GetIsFirstPerson
};

// Class FSD.AssaultRifle
// Size: 0x6b0 (Inherited: 0x690)
struct AAssaultRifle : AAmmoDrivenWeapon {
	float KillsResetAccuracyDuration; // 0x690(0x04)
	bool KillsTriggersStatusEffect; // 0x694(0x01)
	char UnknownData_695[0x13]; // 0x695(0x13)
	struct UStatusEffect* KillTriggeredStatusEffect; // 0x6a8(0x08)

	void OnTimerElapsed(); // Function FSD.AssaultRifle.OnTimerElapsed
	void OnEnemyKilled(struct AActor* Target, struct UFSDPhysicalMaterial* PhysMat); // Function FSD.AssaultRifle.OnEnemyKilled
	void Client_ResetAccuracy(); // Function FSD.AssaultRifle.Client_ResetAccuracy
};

// Class FSD.FlareGun
// Size: 0x690 (Inherited: 0x690)
struct AFlareGun : AAmmoDrivenWeapon {
};

// Class FSD.SawedOffShotgun
// Size: 0x6e0 (Inherited: 0x690)
struct ASawedOffShotgun : AAmmoDrivenWeapon {
	struct UDamageComponent* DamageComponent; // 0x690(0x08)
	struct UDamageComponent* ShockWaveDamageComponent; // 0x698(0x08)
	float FearFactorOnFire; // 0x6a0(0x04)
	float FearFactorOnFireRadius; // 0x6a4(0x04)
	bool ShotgunJumpEnabled; // 0x6a8(0x01)
	char UnknownData_6A9[0x3]; // 0x6a9(0x03)
	float ShotgunJumpForce; // 0x6ac(0x04)
	bool ShockwaveEnabled; // 0x6b0(0x01)
	char UnknownData_6B1[0x3]; // 0x6b1(0x03)
	float ShockWaveDistance; // 0x6b4(0x04)
	float ShockWaveRadius; // 0x6b8(0x04)
	float ShockWaveLength; // 0x6bc(0x04)
	char UnknownData_6C0[0x20]; // 0x6c0(0x20)

	void SetShockWaveDamageComponent(struct UDamageComponent* Component); // Function FSD.SawedOffShotgun.SetShockWaveDamageComponent
};

// Class FSD.BurstWeapon
// Size: 0x6c8 (Inherited: 0x690)
struct ABurstWeapon : AAmmoDrivenWeapon {
	struct UDamageComponent* Damage; // 0x690(0x08)
	struct UDamageComponent* BurstFireBonusDamage; // 0x698(0x08)
	char UnknownData_6A0[0x28]; // 0x6a0(0x28)

	void OnTargetDamaged(struct UHealthComponentBase* Health, float amount, struct UFSDPhysicalMaterial* PhysicalMaterial); // Function FSD.BurstWeapon.OnTargetDamaged
	void OnReadyToFire(); // Function FSD.BurstWeapon.OnReadyToFire
};

// Class FSD.Revoler
// Size: 0x6a8 (Inherited: 0x690)
struct ARevoler : AAmmoDrivenWeapon {
	float OnKillFearFactor; // 0x690(0x04)
	float OnKillFearRange; // 0x694(0x04)
	char UnknownData_698[0x10]; // 0x698(0x10)

	void OnTargetKilled(struct AActor* Target, struct UFSDPhysicalMaterial* PhysMat); // Function FSD.Revoler.OnTargetKilled
};

// Class FSD.BasicPistol
// Size: 0x6a8 (Inherited: 0x690)
struct ABasicPistol : AAmmoDrivenWeapon {
	float ConsecutiveHitsDamageBonus; // 0x690(0x04)
	char UnknownData_694[0xc]; // 0x694(0x0c)
	float ConsecutiveHitsMaxBonus; // 0x6a0(0x04)
	char UnknownData_6A4[0x4]; // 0x6a4(0x04)

	void OnTargetDamaged(struct UHealthComponentBase* Health, float amount, struct UFSDPhysicalMaterial* PhysicalMaterial); // Function FSD.BasicPistol.OnTargetDamaged
};

// Class FSD.ElectricalSMG
// Size: 0x6d0 (Inherited: 0x690)
struct AElectricalSMG : AAmmoDrivenWeapon {
	struct UStatusEffect* AoEStatusEffect; // 0x690(0x08)
	struct UParticleSystem* AoEParticle; // 0x698(0x08)
	struct USoundCue* AoESound; // 0x6a0(0x08)
	float AoEStatusEffectChance; // 0x6a8(0x04)
	float AoEStatusEffectRange; // 0x6ac(0x04)
	char UnknownData_6B0[0x20]; // 0x6b0(0x20)

	void OnTargetDamaged(struct UHealthComponentBase* Health, float amount, struct UFSDPhysicalMaterial* PhysicalMaterial); // Function FSD.ElectricalSMG.OnTargetDamaged
	void OnStatusEffectPushed(struct UHealthComponentBase* Health); // Function FSD.ElectricalSMG.OnStatusEffectPushed
	void All_OnAoETriggered(struct FVector_NetQuantize Location, struct FVector_NetQuantizeNormal Normal); // Function FSD.ElectricalSMG.All_OnAoETriggered
};

// Class FSD.AutoShotgun
// Size: 0x698 (Inherited: 0x690)
struct AAutoShotgun : AAmmoDrivenWeapon {
	char UnknownData_690[0x8]; // 0x690(0x08)

	void OnTargetDamaged(struct UHealthComponentBase* Health, float amount, struct UFSDPhysicalMaterial* PhysicalMaterial); // Function FSD.AutoShotgun.OnTargetDamaged
};

// Class FSD.LineCutter
// Size: 0x6b8 (Inherited: 0x690)
struct ALineCutter : AAmmoDrivenWeapon {
	bool StopUsingReversesProjectile; // 0x690(0x01)
	bool RotateProjectileUntillStop; // 0x691(0x01)
	bool ExplodeLastProjectileOnNextFireAttempt; // 0x692(0x01)
	char UnknownData_693[0x5]; // 0x693(0x05)
	struct TArray<struct UItemUpgrade*> Upgrades; // 0x698(0x10)
	struct FWeakObjectPtr<struct ALineCutterProjectile> LastProjectile; // 0x6a8(0x08)
	float MinExplosiveGoodbyeActivationTimme; // 0x6b0(0x04)
	char UnknownData_6B4[0x4]; // 0x6b4(0x04)

	void Server_StopRotatingProjectile(); // Function FSD.LineCutter.Server_StopRotatingProjectile
	void Server_ReverseLastProjectile(); // Function FSD.LineCutter.Server_ReverseLastProjectile
	void Server_DestroyOldProjectile(); // Function FSD.LineCutter.Server_DestroyOldProjectile
	void OnRep_LastProjectile(); // Function FSD.LineCutter.OnRep_LastProjectile
	void OnProjectileLaunched(struct AProjectileBase* Projectile); // Function FSD.LineCutter.OnProjectileLaunched
	void OnFireWhileLastProjectileAlive(struct ALineCutterProjectile* Projectile); // Function FSD.LineCutter.OnFireWhileLastProjectileAlive
};

// Class FSD.Magazine
// Size: 0x238 (Inherited: 0x220)
struct AMagazine : AActor {
	char UnknownData_220[0x8]; // 0x220(0x08)
	struct USoundCue* ImpactGroundSound; // 0x228(0x08)
	char UnknownData_230[0x8]; // 0x230(0x08)

	void OnItemSkinned(struct USkinEffect* Skin); // Function FSD.Magazine.OnItemSkinned
	void ActorWasHit(struct AActor* SelfActor, struct AActor* OtherActor, struct FVector NormalImpulse, struct FHitResult Hit); // Function FSD.Magazine.ActorWasHit
};

// Class FSD.WeaponHitCountEffect
// Size: 0x30 (Inherited: 0x28)
struct UWeaponHitCountEffect : UObject {
	bool UsesDamageEffects; // 0x28(0x01)
	char UnknownData_29[0x7]; // 0x29(0x07)
};

// Class FSD.WeaponHitCounterComponent
// Size: 0xd0 (Inherited: 0xb0)
struct UWeaponHitCounterComponent : UActorComponent {
	struct UWeaponHitCountEffect* HitEffect; // 0xb0(0x08)
	bool RequiresWeakpointHit; // 0xb8(0x01)
	char UnknownData_B9[0x17]; // 0xb9(0x17)

	void Server_OnReloading(); // Function FSD.WeaponHitCounterComponent.Server_OnReloading
	void OnTargetDamaged(struct UHealthComponentBase* Health, float amount, struct UFSDPhysicalMaterial* PhysicalMaterial); // Function FSD.WeaponHitCounterComponent.OnTargetDamaged
	void OnStoppedUsing(); // Function FSD.WeaponHitCounterComponent.OnStoppedUsing
	void OnReloading(); // Function FSD.WeaponHitCounterComponent.OnReloading
	void All_ShowDamageEffects(struct TArray<struct FWeakObjectPtr<struct AActor>> Targets); // Function FSD.WeaponHitCounterComponent.All_ShowDamageEffects
};

// Class FSD.DamageHitCountEffect
// Size: 0x60 (Inherited: 0x30)
struct UDamageHitCountEffect : UWeaponHitCountEffect {
	float DamagePerHit; // 0x30(0x04)
	char UnknownData_34[0x4]; // 0x34(0x04)
	struct UDamageClass* DamageClass; // 0x38(0x08)
	struct UParticleSystem* DamageParticle; // 0x40(0x08)
	struct USoundCue* DamageSound; // 0x48(0x08)
	bool DeadBugWalkingTargetMarking; // 0x50(0x01)
	char UnknownData_51[0x7]; // 0x51(0x07)
	struct UStatusEffect* DeadBugWalkingSTE; // 0x58(0x08)
};

// Class FSD.StatusHitCountEffect
// Size: 0x40 (Inherited: 0x30)
struct UStatusHitCountEffect : UWeaponHitCountEffect {
	struct UStatusEffect* StatusEffect; // 0x30(0x08)
	float ChancePerHit; // 0x38(0x04)
	char UnknownData_3C[0x4]; // 0x3c(0x04)
};

// Class FSD.RicochetHitCountEffect
// Size: 0x30 (Inherited: 0x30)
struct URicochetHitCountEffect : UWeaponHitCountEffect {
};

// Class FSD.ChargedHitCountEffect
// Size: 0x50 (Inherited: 0x30)
struct UChargedHitCountEffect : UWeaponHitCountEffect {
	char UnknownData_30[0x4]; // 0x30(0x04)
	float DamagePerHit; // 0x34(0x04)
	struct UDamageClass* DamageClass; // 0x38(0x08)
	struct UParticleSystem* DamageParticle; // 0x40(0x08)
	struct USoundCue* DamageSound; // 0x48(0x08)
};

// Class FSD.WeaponHitEffectComponent
// Size: 0xc0 (Inherited: 0xb0)
struct UWeaponHitEffectComponent : UActorComponent {
	float EffectChance; // 0xb0(0x04)
	char UnknownData_B4[0x4]; // 0xb4(0x04)
	struct AActor* ActorToSpawn; // 0xb8(0x08)

	void Server_SpawnEffect(struct FVector_NetQuantize Location, struct FRotator Rotation); // Function FSD.WeaponHitEffectComponent.Server_SpawnEffect
	void OnHit(struct FHitResult HitResult, bool isAlwaysPenetrated); // Function FSD.WeaponHitEffectComponent.OnHit
};

// Class FSD.WeightRoomSelectorLibrary
// Size: 0x28 (Inherited: 0x28)
struct UWeightRoomSelectorLibrary : UBlueprintFunctionLibrary {

	void SetupWeightedRoomSelector(struct FWeightedRoomSelector Target, struct TArray<struct URoomGenerator*> Rooms); // Function FSD.WeightRoomSelectorLibrary.SetupWeightedRoomSelector
	struct URoomGenerator* SelectRandomRoom(struct FWeightedRoomSelector Target, struct FRandomStream RandomStream); // Function FSD.WeightRoomSelectorLibrary.SelectRandomRoom
	struct URoomGenerator* GetRandomRoom(struct TArray<struct URoomGenerator*> Rooms, bool removeChosenRoom, struct FRandomStream RandomStream); // Function FSD.WeightRoomSelectorLibrary.GetRandomRoom
};

// Class FSD.WidgetToRenderTargetComponent
// Size: 0x190 (Inherited: 0xb0)
struct UWidgetToRenderTargetComponent : UActorComponent {
	struct UUserWidget* WidgetClass; // 0xb0(0x08)
	struct FIntPoint DrawSize; // 0xb8(0x08)
	bool bManuallyRedraw; // 0xc0(0x01)
	bool bRedrawRequested; // 0xc1(0x01)
	char UnknownData_C2[0x2]; // 0xc2(0x02)
	float RedrawTime; // 0xc4(0x04)
	float LastWidgetRenderTime; // 0xc8(0x04)
	bool bWindowFocusable; // 0xcc(0x01)
	char UnknownData_CD[0x3]; // 0xcd(0x03)
	struct FIntPoint CurrentDrawSize; // 0xd0(0x08)
	bool bDrawAtDesiredSize; // 0xd8(0x01)
	char UnknownData_D9[0x3]; // 0xd9(0x03)
	struct FVector2D Pivot; // 0xdc(0x08)
	char UnknownData_E4[0x4]; // 0xe4(0x04)
	struct UMaterialInterface* BaseMaterial; // 0xe8(0x08)
	struct ULocalPlayer* OwnerPlayer; // 0xf0(0x08)
	struct FLinearColor BackgroundColor; // 0xf8(0x10)
	struct FLinearColor TintColorAndOpacity; // 0x108(0x10)
	float OpacityFromTexture; // 0x118(0x04)
	bool bIsTwoSided; // 0x11c(0x01)
	bool TickWhenOffscreen; // 0x11d(0x01)
	char UnknownData_11E[0x2]; // 0x11e(0x02)
	struct UUserWidget* Widget; // 0x120(0x08)
	char UnknownData_128[0x20]; // 0x128(0x20)
	struct UTextureRenderTarget2D* RenderTarget; // 0x148(0x08)
	struct UMaterialInstanceDynamic* MaterialInstance; // 0x150(0x08)
	bool bEditTimeUsable; // 0x158(0x01)
	char UnknownData_159[0x37]; // 0x159(0x37)

	void SetWidget(struct UUserWidget* Widget); // Function FSD.WidgetToRenderTargetComponent.SetWidget
	void SetOwnerPlayer(struct ULocalPlayer* LocalPlayer); // Function FSD.WidgetToRenderTargetComponent.SetOwnerPlayer
	void SetBackgroundColor(struct FLinearColor NewBackgroundColor); // Function FSD.WidgetToRenderTargetComponent.SetBackgroundColor
	void RequestRedraw(); // Function FSD.WidgetToRenderTargetComponent.RequestRedraw
	struct UUserWidget* GetUserWidgetObject(); // Function FSD.WidgetToRenderTargetComponent.GetUserWidgetObject
	struct UTextureRenderTarget2D* GetRenderTarget(); // Function FSD.WidgetToRenderTargetComponent.GetRenderTarget
	struct ULocalPlayer* GetOwnerPlayer(); // Function FSD.WidgetToRenderTargetComponent.GetOwnerPlayer
	struct UMaterialInstanceDynamic* GetMaterialInstance(); // Function FSD.WidgetToRenderTargetComponent.GetMaterialInstance
};

// Class FSD.WindowManager
// Size: 0x198 (Inherited: 0xb0)
struct UWindowManager : UActorComponent {
	struct FMulticastInlineDelegate OnFirstWindowOpened; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnLastWindowClosed; // 0xc0(0x10)
	struct USoundCue* AudioWindowOpen; // 0xd0(0x08)
	struct TArray<struct UWindowWidget*> WindowStack; // 0xd8(0x10)
	struct TMap<struct UWindowWidget*, struct UWindowWidget*> WindowList; // 0xe8(0x50)
	struct TMap<struct UUserWidget*, struct FWeakObjectPtr<struct UUserWidget>> WidgetSingletonCache; // 0x138(0x50)
	bool ResolutionDownscaleActive; // 0x188(0x01)
	char UnknownData_189[0x3]; // 0x189(0x03)
	float PrevFrameBudget; // 0x18c(0x04)
	float PrevMinScreenPct; // 0x190(0x04)
	char UnknownData_194[0x4]; // 0x194(0x04)

	void ReplaceWindow(struct UWindowWidget* Window); // Function FSD.WindowManager.ReplaceWindow
	struct UWindowWidget* OpenWindowFromClass(struct UWindowWidget* windowClass, int32_t ZOrder, bool ShowCursor); // Function FSD.WindowManager.OpenWindowFromClass
	void OpenWindow(struct UWindowWidget* Window, bool PlayAudio, bool ShowCursor); // Function FSD.WindowManager.OpenWindow
	struct UWindowWidget* OpenSingleUseWindow(struct UWindowWidget* windowClass, int32_t ZOrder); // Function FSD.WindowManager.OpenSingleUseWindow
	bool IsWindowOpen(struct UWindowWidget* Window); // Function FSD.WindowManager.IsWindowOpen
	bool IsTopWindow(struct UWindowWidget* Window); // Function FSD.WindowManager.IsTopWindow
	struct UUserWidget* GetOrCreateSingletonWidget(struct UUserWidget* WidgetClass, bool WidgetCreated); // Function FSD.WindowManager.GetOrCreateSingletonWidget
	struct UWindowWidget* GetCurrentWindow(); // Function FSD.WindowManager.GetCurrentWindow
	void CloseWindow(struct UWindowWidget* Window); // Function FSD.WindowManager.CloseWindow
	void CloseTopWindow(); // Function FSD.WindowManager.CloseTopWindow
	void CloseAllWindows(); // Function FSD.WindowManager.CloseAllWindows
	void CenterCursor(); // Function FSD.WindowManager.CenterCursor
	bool AnyWindowsOpen(); // Function FSD.WindowManager.AnyWindowsOpen
};

// Class FSD.WoodLouse
// Size: 0x580 (Inherited: 0x398)
struct AWoodLouse : AEnemyDeepPathfinderCharacter {
	struct USceneComponent* RollingCenter; // 0x398(0x08)
	struct UPawnSensingComponent* PawnSensing; // 0x3a0(0x08)
	char UnknownData_3A8[0x1]; // 0x3a8(0x01)
	enum class EWoodLouseState forceState; // 0x3a9(0x01)
	char UnknownData_3AA[0x2]; // 0x3aa(0x02)
	float RollingCenterOffsetOnStanding; // 0x3ac(0x04)
	float RollingCenterOffsetOnFold; // 0x3b0(0x04)
	char UnknownData_3B4[0x4]; // 0x3b4(0x04)
	float ChanceToWalk; // 0x3b8(0x04)
	bool DebugAngle; // 0x3bc(0x01)
	char UnknownData_3BD[0x23]; // 0x3bd(0x23)
	struct UFakeMoverSettings* FakeMoverSettings; // 0x3e0(0x08)
	struct AProjectile* BurstProjectileClass; // 0x3e8(0x08)
	float BurstTime; // 0x3f0(0x04)
	char UnknownData_3F4[0x4]; // 0x3f4(0x04)
	struct TArray<struct UStatusEffect*> StatusEffectsOnRoll; // 0x3f8(0x10)
	struct FBumpPlayerHit LastHit; // 0x408(0x18)
	float TiltModifier; // 0x420(0x04)
	float BurstXOffset; // 0x424(0x04)
	float BurstYOffset; // 0x428(0x04)
	float BurstZOffset; // 0x42c(0x04)
	float HighDifficultyCustomProjectileGravity; // 0x430(0x04)
	int32_t BurstCount; // 0x434(0x04)
	char UnknownData_438[0x4]; // 0x438(0x04)
	bool InvounerableOnRoll; // 0x43c(0x01)
	bool LockToRollMode; // 0x43d(0x01)
	bool LockToWalkMode; // 0x43e(0x01)
	char UnknownData_43F[0x1]; // 0x43f(0x01)
	float ForgetRange; // 0x440(0x04)
	float ForgetTime; // 0x444(0x04)
	char UnknownData_448[0x4]; // 0x448(0x04)
	float RefreshTimeMax; // 0x44c(0x04)
	float RefreshTimeMin; // 0x450(0x04)
	float BumpPower; // 0x454(0x04)
	float DirectionalBumpPower; // 0x458(0x04)
	enum class EWoodLouseState CurrentState; // 0x45c(0x01)
	char UnknownData_45D[0x23]; // 0x45d(0x23)
	struct AActor* CurrentTarget; // 0x480(0x08)
	float FoldedStateMaxTime; // 0x488(0x04)
	float FoldedStateMinTime; // 0x48c(0x04)
	float UnfoldedStateMaxTime; // 0x490(0x04)
	float UnflodedStateMinTime; // 0x494(0x04)
	char UnknownData_498[0x8]; // 0x498(0x08)
	struct USoundBase* BumpSound; // 0x4a0(0x08)
	float TimeBetweenBumpingSamePlayer; // 0x4a8(0x04)
	float MinBumpDamage; // 0x4ac(0x04)
	float MaxBumpDamage; // 0x4b0(0x04)
	float BumpDamage; // 0x4b4(0x04)
	struct UDamageClass* BumpDamageType; // 0x4b8(0x08)
	float MaxBumpPower; // 0x4c0(0x04)
	float BumpRange; // 0x4c4(0x04)
	char UnknownData_4C8[0x4]; // 0x4c8(0x04)
	float AcceptableAngles; // 0x4cc(0x04)
	float RollSpeedModifier; // 0x4d0(0x04)
	float RollAlpha; // 0x4d4(0x04)
	float TiltAlpha; // 0x4d8(0x04)
	char UnknownData_4DC[0x4]; // 0x4dc(0x04)
	struct USoundBase* RollingSound; // 0x4e0(0x08)
	struct FName RollingSpeedParamName; // 0x4e8(0x08)
	struct FWeakObjectPtr<struct UAudioComponent> RollingSoundComponent; // 0x4f0(0x08)
	struct UFakeMoverSettings* RollMoveSettings; // 0x4f8(0x08)
	struct UFakeMoverSettings* StopRollMoveSettings; // 0x500(0x08)
	struct FGameplayTagQuery TargetQuery; // 0x508(0x48)
	char UnknownData_550[0x18]; // 0x550(0x18)
	bool RotateTowardsTarget; // 0x568(0x01)
	char UnknownData_569[0x3]; // 0x569(0x03)
	float SeeTargetSafetyTime; // 0x56c(0x04)
	char UnknownData_570[0x4]; // 0x570(0x04)
	bool WantsToStandUp; // 0x574(0x01)
	bool IsShooting; // 0x575(0x01)
	bool CanStandOnAnySurface; // 0x576(0x01)
	char UnknownData_577[0x9]; // 0x577(0x09)

	void SwitchedState(enum class EWoodLouseState CurrentState); // Function FSD.WoodLouse.SwitchedState
	void StopSpecial(); // Function FSD.WoodLouse.StopSpecial
	void StartSpecial(); // Function FSD.WoodLouse.StartSpecial
	void SetWantsToStandUp(bool aWantsToStandUp); // Function FSD.WoodLouse.SetWantsToStandUp
	void SetState(enum class EWoodLouseState aState); // Function FSD.WoodLouse.SetState
	void SetRotateToTarget(bool aRotateToTarget); // Function FSD.WoodLouse.SetRotateToTarget
	void SeePawn(struct APawn* aSenPawn); // Function FSD.WoodLouse.SeePawn
	void OnRep_State(); // Function FSD.WoodLouse.OnRep_State
	void OnRep_LastHit(); // Function FSD.WoodLouse.OnRep_LastHit
	enum class EWoodLouseState GetRollerState(); // Function FSD.WoodLouse.GetRollerState
	void BumpedTarget(); // Function FSD.WoodLouse.BumpedTarget
};

// Class FSD.WoodLouseAnimInstance
// Size: 0x430 (Inherited: 0x410)
struct UWoodLouseAnimInstance : USpiderAnimInstance {
	struct FVector2D AngleToTarget; // 0x40c(0x08)
	float InterpSpeed; // 0x414(0x04)
	float BreakRollingWhenTimeLeft; // 0x418(0x04)
	enum class EWoodLouseState RollerState; // 0x41c(0x01)
	bool IsWalking; // 0x41d(0x01)
	bool IsUpRight; // 0x41e(0x01)
	bool IsDoingSpecialAttack; // 0x41f(0x01)
	bool IsUnFolded; // 0x420(0x01)
	bool IsGroundValid; // 0x421(0x01)
	bool IsInRollState; // 0x422(0x01)
	bool IdleToDownTurnLeftLock; // 0x423(0x01)
	bool DownTurnLeftToIdleLock; // 0x424(0x01)
	bool DownWalkToDownTurnLeftLock; // 0x425(0x01)
	bool WoodlouseWalk; // 0x426(0x01)
	bool IdleToDownWalkLock; // 0x427(0x01)
	bool DownWalkToDownTurnRightLock; // 0x428(0x01)
	bool IdleToDownTurnRightLock; // 0x429(0x01)
	char UnknownData_42E[0x2]; // 0x42e(0x02)
};

// Class FSD.YesNoPromptWidget
// Size: 0x288 (Inherited: 0x270)
struct UYesNoPromptWidget : UWindowWidget {
	bool bDestroyOnClick; // 0x270(0x01)
	char UnknownData_271[0x3]; // 0x271(0x03)
	struct FDelegate OnClickedCallback; // 0x274(0x10)
	char UnknownData_284[0x4]; // 0x284(0x04)

	void Show(struct FText Title, struct FText Message, struct FDelegate OnYesNoClicked); // Function FSD.YesNoPromptWidget.Show
	void SetMappedResources(struct TMap<struct UResourceData*, int32_t> Resources); // Function FSD.YesNoPromptWidget.SetMappedResources
	void OnYesNoClickedDelegate__DelegateSignature(bool Yes); // DelegateFunction FSD.YesNoPromptWidget.OnYesNoClickedDelegate__DelegateSignature
	void OnShow(struct FText Title, struct FText Message); // Function FSD.YesNoPromptWidget.OnShow
	void OnClicked(bool Yes); // Function FSD.YesNoPromptWidget.OnClicked
	void Clicked(bool YesClicked); // Function FSD.YesNoPromptWidget.Clicked
};

// Class FSD.YesNoPromptAction
// Size: 0x68 (Inherited: 0x30)
struct UYesNoPromptAction : UBlueprintAsyncActionBase {
	struct FMulticastInlineDelegate Yes; // 0x30(0x10)
	struct FMulticastInlineDelegate No; // 0x40(0x10)
	struct FDelegate YesNoDelegate; // 0x50(0x10)
	struct FWeakObjectPtr<struct UYesNoPromptWidget> ActivePrompt; // 0x60(0x08)

	void YesNoOutputPin__DelegateSignature(); // DelegateFunction FSD.YesNoPromptAction.YesNoOutputPin__DelegateSignature
	struct UYesNoPromptAction* PromptYesNo(struct UObject* WorldContext, struct FYesNoPromptSettings Prompt); // Function FSD.YesNoPromptAction.PromptYesNo
	struct UYesNoPromptAction* PromptPurchase(struct UObject* WorldContext, struct FYesNoPromptSettings Prompt, struct TMap<struct UResourceData*, int32_t> Resources); // Function FSD.YesNoPromptAction.PromptPurchase
	void PromptCallback(bool YesClicked); // Function FSD.YesNoPromptAction.PromptCallback
};

// Class FSD.ZapperItem
// Size: 0x388 (Inherited: 0x368)
struct AZapperItem : AAnimatedItem {
	struct UCapacityHoldingItemAggregator* Capacity; // 0x368(0x08)
	struct UItemPlacerAggregator* ItemPlacer; // 0x370(0x08)
	struct AZapper* ZapperClass; // 0x378(0x08)
	float Cooldown; // 0x380(0x04)
	float CooldownRemaining; // 0x384(0x04)

	void Server_PlaceZapper(struct FVector Location); // Function FSD.ZapperItem.Server_PlaceZapper
};

// Class FSD.Zapper
// Size: 0x2a0 (Inherited: 0x220)
struct AZapper : AActor {
	struct USphereComponent* AttackArea; // 0x220(0x08)
	struct FGameplayTagContainer AllowedTags; // 0x228(0x20)
	struct UParticleSystem* ZapParticles; // 0x248(0x08)
	float Damage; // 0x250(0x04)
	char UnknownData_254[0x4]; // 0x254(0x04)
	struct UDamageClass* DamageClass; // 0x258(0x08)
	int32_t Charges; // 0x260(0x04)
	float ChargeTime; // 0x264(0x04)
	float CoolDownTime; // 0x268(0x04)
	float ChargeProgress; // 0x26c(0x04)
	float CooldownRemaining; // 0x270(0x04)
	char UnknownData_274[0x4]; // 0x274(0x04)
	struct ULightComponent* ZappingLight; // 0x278(0x08)
	struct USceneComponent* ZappingPoint; // 0x280(0x08)
	struct TArray<struct FZapperTarget> Targets; // 0x288(0x10)
	char UnknownData_298[0x8]; // 0x298(0x08)

	struct USceneComponent* GetZappingPoint(); // Function FSD.Zapper.GetZappingPoint
	struct ULightComponent* GetZappingLight(); // Function FSD.Zapper.GetZappingLight
};

// Class FSD.ZipLineProjectile
// Size: 0x278 (Inherited: 0x220)
struct AZipLineProjectile : AActor {
	struct UTimelineComponent* Timeline; // 0x220(0x08)
	float LightIntensity; // 0x228(0x04)
	float MaterialGlow; // 0x22c(0x04)
	struct FDelegate Callback; // 0x230(0x10)
	struct UCurveFloat* LightCurve; // 0x240(0x08)
	struct TArray<struct UPointLightComponent*> PointLights; // 0x248(0x10)
	struct TArray<struct UMaterialInstanceDynamic*> MaterialInstances; // 0x258(0x10)
	struct UStatusEffect* OnUseStatusEffect; // 0x268(0x08)
	struct UStatusEffect* OnReleaseStatusEffect; // 0x270(0x08)

	void OnTimelineTick(float NewValue); // Function FSD.ZipLineProjectile.OnTimelineTick
	void OnShoot(struct FVector Origin, struct FVector EndLocation); // Function FSD.ZipLineProjectile.OnShoot
};

// Class FSD.ZiplineLauncherComponent
// Size: 0x120 (Inherited: 0x110)
struct UZiplineLauncherComponent : UWeaponFireComponent {
	char HitCollisionChannel; // 0x110(0x01)
	char UnknownData_111[0x3]; // 0x111(0x03)
	float ProjectileLocationOffset; // 0x114(0x04)
	struct AZipLineProjectile* projectileClass; // 0x118(0x08)

	void Server_Fire(struct FVector_NetQuantize Origin, struct FVector_NetQuantize Destination); // Function FSD.ZiplineLauncherComponent.Server_Fire
	void All_ShowHit(); // Function FSD.ZiplineLauncherComponent.All_ShowHit
};

// Class FSD.ZipLineItem
// Size: 0x6e8 (Inherited: 0x690)
struct AZipLineItem : AAmmoDrivenWeapon {
	float MaxDistance; // 0x690(0x04)
	float MinDistance; // 0x694(0x04)
	float MinAngle; // 0x698(0x04)
	float MaxAngle; // 0x69c(0x04)
	struct FGameplayTagQuery ExcludeSurfaceTags; // 0x6a0(0x48)

	bool CanFireWeapon(struct FText FailMsg, struct UDialogDataAsset* FailShout); // Function FSD.ZipLineItem.CanFireWeapon
};

// Class FSD.AngleIndicatorWidget
// Size: 0x260 (Inherited: 0x250)
struct UAngleIndicatorWidget : UFSDUserWidget {
	float pixelsPerAngle; // 0x250(0x04)
	float AlphaFade; // 0x254(0x04)
	float MinAngle; // 0x258(0x04)
	float MaxAngle; // 0x25c(0x04)
};

// Class FSD.ZipLineConnector
// Size: 0x250 (Inherited: 0x220)
struct AZipLineConnector : AActor {
	struct FWeakObjectPtr<struct APlayerCharacter> Character; // 0x220(0x08)
	struct FVector ZipLineLocation; // 0x228(0x0c)
	struct FVector ZipLineDirection; // 0x234(0x0c)
	struct FRotator RotationOffset; // 0x240(0x0c)
	bool bSpeeding; // 0x24c(0x01)
	char UnknownData_24D[0x3]; // 0x24d(0x03)

	void ReceiveUpdateZipLinePoint(struct FVector WorldLocation, struct FVector Directioy, bool Speeding); // Function FSD.ZipLineConnector.ReceiveUpdateZipLinePoint
	void ReceiveDisconnected(); // Function FSD.ZipLineConnector.ReceiveDisconnected
	void ReceiveConnected(struct FVector WorldLocation, struct FVector Direction); // Function FSD.ZipLineConnector.ReceiveConnected
};

// Class FSD.ZipLineStateComponent
// Size: 0x228 (Inherited: 0xf8)
struct UZipLineStateComponent : UCharacterStateComponent {
	struct FZipLineConnectorHandler ZipLineConnector; // 0xf8(0x30)
	float VerticalOffset; // 0x128(0x04)
	float HorizontalOffset; // 0x12c(0x04)
	float TravelSpeed; // 0x130(0x04)
	float AccelAndDecelAlpha; // 0x134(0x04)
	float JumpForce; // 0x138(0x04)
	float SpeedBoostActivationDuration; // 0x13c(0x04)
	float SpeedBoostActivionMinAngle; // 0x140(0x04)
	float BaseSpeedBoost; // 0x144(0x04)
	float AdditionalSpeedBoostPerAngle; // 0x148(0x04)
	float SpeedBoostCoolDownDuration; // 0x14c(0x04)
	float AccelerationAlpha; // 0x150(0x04)
	float DecelerationAlpha; // 0x154(0x04)
	float MinStartDistanceToEnd; // 0x158(0x04)
	float ReleaseDistance; // 0x15c(0x04)
	bool bCanActivateSpeedBoost; // 0x160(0x01)
	bool bShowSpeedBoostActivator; // 0x161(0x01)
	char UnknownData_162[0x2]; // 0x162(0x02)
	float SpeedBoostActivationProgress; // 0x164(0x04)
	char UnknownData_168[0x8]; // 0x168(0x08)
	struct USoundBase* AudioOnStart; // 0x170(0x08)
	struct USoundBase* AudioOnDuring; // 0x178(0x08)
	struct USoundBase* AudioOnChangingDirection; // 0x180(0x08)
	struct USoundBase* AudioOnStop; // 0x188(0x08)
	struct USoundBase* AudioOnSpeedBoostActivated; // 0x190(0x08)
	struct UDialogDataAsset* ShoutStartUsing; // 0x198(0x08)
	struct UDialogDataAsset* ShoutSpeedBoostActivated; // 0x1a0(0x08)
	struct FWeakObjectPtr<struct AZipLineProjectile> ZipLineProjectile; // 0x1a8(0x08)
	struct FZipLine ZipLine; // 0x1b0(0x38)
	char UnknownData_1E8[0x14]; // 0x1e8(0x14)
	float DamageBeforeFalling; // 0x1fc(0x04)
	float friendlyFireModifier; // 0x200(0x04)
	float DamageResetTime; // 0x204(0x04)
	struct UAudioComponent* AudioComponent; // 0x208(0x08)
	char UnknownData_210[0x18]; // 0x210(0x18)

	void ServerSetSpeedBoostActivated(bool InBoostActivated); // Function FSD.ZipLineStateComponent.ServerSetSpeedBoostActivated
	void ServerJumpPressed(bool JumpForward); // Function FSD.ZipLineStateComponent.ServerJumpPressed
	void ServerForwardInputChanged(float Input); // Function FSD.ZipLineStateComponent.ServerForwardInputChanged
	void ServerChangeDirection(); // Function FSD.ZipLineStateComponent.ServerChangeDirection
	void ReceiveSpeedBoostDeactivated(); // Function FSD.ZipLineStateComponent.ReceiveSpeedBoostDeactivated
	void ReceiveSpeedBoostActivated(); // Function FSD.ZipLineStateComponent.ReceiveSpeedBoostActivated
	void OnRep_ZipLine(); // Function FSD.ZipLineStateComponent.OnRep_ZipLine
	void OnPlayerHit(float Damage, struct UDamageClass* DamageClass, struct AActor* DamageCauser, bool anyHealthLost); // Function FSD.ZipLineStateComponent.OnPlayerHit
	bool GetSpeedBoostActivated(); // Function FSD.ZipLineStateComponent.GetSpeedBoostActivated
	struct FVector GetJumpVector(struct FVector LookVector, struct FVector CurrentVelocity); // Function FSD.ZipLineStateComponent.GetJumpVector
	void All_SpeedBoostChanged(bool bActive); // Function FSD.ZipLineStateComponent.All_SpeedBoostChanged
};

