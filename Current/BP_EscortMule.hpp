#ifndef UE4SS_SDK_BP_EscortMule_HPP
#define UE4SS_SDK_BP_EscortMule_HPP

class ABP_EscortMule_C : public AEscortMule
{
    FPointerToUberGraphFrame UberGraphFrame;
    class UHealthDamageTracker* HealthDamageTracker;
    class UBoxComponent* Collision_Drill_Pawn;
    class USceneComponent* ForwardTracePointTop;
    class UBoxComponent* Collision_Platform1;
    class UBoxComponent* Collision_Platform;
    class UAutoCarverComponent* AutoCarverSmall;
    class UAutoCarverComponent* AutoCarverbig;
    class USceneComponent* CarverRoot;
    class UNiagaraComponent* P_LTracks;
    class UNiagaraComponent* P_RTracks;
    class UNiagaraComponent* P_LeftBoxDamagedLow;
    class UNiagaraComponent* P_LeftBoxDamagedHigh;
    class UNiagaraComponent* P_LeftBoxDamagedMedium;
    class USceneComponent* LeftBoxParticleNormal;
    class UNiagaraComponent* P_RightBoxDamagedHigh;
    class UNiagaraComponent* P_RightBoxDamagedLow;
    class UNiagaraComponent* P_RightBoxDamagedMedium;
    class USceneComponent* RightBoxParticleNormal;
    class USceneComponent* LeftBoxParticleMainBody;
    class USceneComponent* RightBoxParticleMainBody;
    class UNiagaraComponent* EngineStoppedSmoke;
    class UPointLightComponent* Box_Light_L;
    class UPointLightComponent* Box_Light_R;
    class UPointLightComponent* PointLight6;
    class UPointLightComponent* PointLight5;
    class UNiagaraComponent* JetFlame;
    class USceneComponent* impactLocation;
    class UNiagaraComponent* P_DrillHeartstone;
    class USkeletalMeshComponent* Mesh_DrillHead;
    class USceneComponent* DrillRotator;
    class UNiagaraComponent* ExhaustRight;
    class UNiagaraComponent* ExhaustLeft;
    class UWidgetComponent* Widget_Canister2;
    class UWidgetComponent* Widget_Canister1;
    class USpotLightComponent* SpotLight3;
    class UStaticMeshComponent* Cone3;
    class UStaticMeshComponent* Cone2;
    class USpotLightComponent* SpotLight2;
    class USceneComponent* SpotlightRight;
    class USceneComponent* SpotlightLeft;
    class UStaticMeshComponent* DrillDozerGuts_Right;
    class UStaticMeshComponent* DrillDozerGuts_Left;
    class UBoxComponent* Collision_RepairBoxBody;
    class UPointLightComponent* Red Button Light;
    class UPointLightComponent* DorettaPointLight;
    class USpotLightComponent* Doretta_SpotLight;
    class UStaticMeshComponent* Doretta_Cone;
    class UStaticMeshComponent* SM_WallLamp_004;
    class UPointLightComponent* PointLight2;
    class UBoxComponent* Achievement_Riding_Collider;
    class USphereComponent* Collision_Drill_Damage;
    class UBoxComponent* Colission_Doretta;
    class UInstantUsable* PetDorettaUsable;
    class USceneComponent* FlameHover;
    class UAudioComponent* Drilldozer_JetEngine_Start_Cue;
    class UAudioComponent* Drilldozer_JetEninge_Cue;
    class UChildActorComponent* OxygenTank01;
    class UOxygenSourceComponent* OxygenSource;
    class USkeletalMeshComponent* Cannister_02;
    class USkeletalMeshComponent* Cannister_01;
    class UWidgetComponent* Widget_Button;
    class USphereComponent* UseSphere_Activate;
    class USceneComponent* ButtonRoot;
    class UNiagaraComponent* P_Drill;
    class UBoxComponent* Collision_RepairBoxLeft;
    class UBoxComponent* Collision_RepairBoxRight;
    class USkeletalMeshComponent* RepairBoxRight;
    class USkeletalMeshComponent* RepairBoxLeft;
    class UOutlineComponent* outline;
    class UBoxComponent* FearBox;
    class UPawnStatsComponent* PawnStats;
    class UAudioComponent* DrillingVehicle_DrillingShell_Cue;
    class UChildActorComponent* RTrack;
    class UChildActorComponent* LTrack;
    class USceneComponent* DrillHeadRoot;
    class UDamageComponent* WeakpointDestroyedDamage;
    class UDamageComponent* DrillDamage;
    class UEscortMuleAttackerPositioning* EscortMuleAttackerPositioning;
    class UAudioComponent* Engine_Cue;
    class UAudioComponent* DrillHead_Cue;
    class USceneComponent* ForwardTracePoint;
    class UPointLightComponent* CannisterLight2;
    class UPointLightComponent* CannisterLight1;
    class USphereComponent* Sphere2;
    class USphereComponent* Sphere1;
    class UBP_EscortCannisterUsable_C* Cannister2Usable;
    class UBP_EscortCannisterUsable_C* Cannister1Usable;
    class UAudioComponent* DrillVehicle_RubbleSoftB_Cue;
    class UAudioComponent* DrillVehicle_RubbleSoftA_Cue;
    class UAudioComponent* DrillVehicleTrack2_Cue;
    class UAudioComponent* Rubble_Cue;
    class UAudioComponent* DrillVehicleTrack1_Cue;
    class UPointLightComponent* PointLight1;
    class UStaticMeshComponent* SM_WallLamp_003;
    class USceneComponent* Center;
    class USceneComponent* CarverScaler;
    class URadarPointComponent* radarPoint;
    class UStaticMeshComponent* TerrainScannerMesh;
    class UPathfinderCollisionComponent* PathfinderCollision;
    class USceneComponent* CarvParticleLocation;
    class USingleUsableComponent* ActivateMachineUsable;
    class UContinuousUsableComponent* ContinuousUsable;
    float Timeline_MoveDrillOut_Delta_1A396ACD40DA3371D46E58AD5DAAFC92;
    TEnumAsByte<ETimelineDirection::Type> Timeline_MoveDrillOut__Direction_1A396ACD40DA3371D46E58AD5DAAFC92;
    class UTimelineComponent* Timeline_MoveDrillOut;
    float MoveCloser_Alpha_E35B04D84FB5313C58E2E18AE68DA5A2;
    TEnumAsByte<ETimelineDirection::Type> MoveCloser__Direction_E35B04D84FB5313C58E2E18AE68DA5A2;
    class UTimelineComponent* MoveCloser;
    FVector HammerDrillTest_DrillHead_MoveVectorV2_FAAD5F0B4630F8F53E3DFB9B966534B9;
    float HammerDrillTest_Hammer_FAAD5F0B4630F8F53E3DFB9B966534B9;
    TEnumAsByte<ETimelineDirection::Type> HammerDrillTest__Direction_FAAD5F0B4630F8F53E3DFB9B966534B9;
    class UTimelineComponent* HammerDrillTest;
    FBP_EscortMule_CResourceFull ResourceFull;
    void ResourceFull();
    class UAudioComponent* Sound_Moving;
    class UAudioComponent* Sound_Drilling;
    bool UnderAttack;
    class UPrimitiveComponent* ActiveRepairCollider;
    FVector StartLoc;
    FVector EndLoc;
    EEscortMissionState oldState;
    float LastDamageSoundTime;
    bool DrillPaused;
    class UABP_DrillDozer_Drill_C* DrillHeadAnimBP;
    class USkeletalMeshComponent* ActiveRepairMesh;
    FTimerHandle NotRepairedEvent;
    class UHUDWarningWidget* HUDWarning;
    class UHUDWarningWidget* HUDCellDestroyWarning;
    bool LastHoverTest;
    int32 EnemiesKilled;
    class UFSDAchievement* DrillByShooting;
    class UMaterialInstanceDynamic* LeftBoxMaterial;
    class UMaterialInstanceDynamic* RightBoxMaterial;
    class UMaterialInstanceDynamic* BodyMaterial;
    bool DoRotateInterpOnServer;
    float DrillRotateSpeed;
    class UNiagaraComponent* EngineStopSmoke;
    FBP_EscortMule_CEscortStateChanged EscortStateChanged;
    void EscortStateChanged(EEscortMissionState State);
    int32 MaxAttackersOmoranFight;
    bool IsPathReady;
    class UBP_BossFight_Heartstone_C* BossFight;

    void AllCanistersFull(bool& areFull);
    void RepComponentDamage();
    void UpdateRepairBoxLook();
    void UpdateBoxDamageEmitter(class UNiagaraComponent* ParticlesLow, class UNiagaraComponent* ParticlesMedium, class UNiagaraComponent* ParticlesHigh, float HealthPercent);
    void SetBothCannistersVisibility(bool IsVisible);
    void IsFriendlyFire(class AActor* Object, bool& bSuccess);
    void OnRep_DrillPaused();
    void TryPlayDamageSound(FVector Location);
    void Update Moving FX(EEscortMissionState InState);
    void SetupParticleMaterials();
    void HandleCannisterUsed(class APlayerCharacter* User, class UInstantUsable* Usable);
    void CreateCanister(class UInstantUsable* NewItem_Usable, class USkinnedMeshComponent* MeshComponent, class UWidgetComponent* Widget);
    bool GetIsTargetable();
    FVector GetTargetCenterMass();
    class UHealthComponentBase* GetTargetHealthComponent();
    void UserConstructionScript();
    void HammerDrillTest__FinishedFunc();
    void HammerDrillTest__UpdateFunc();
    void HammerDrillTest__HitEvents__EventFunc();
    void MoveCloser__FinishedFunc();
    void MoveCloser__UpdateFunc();
    void Timeline_MoveDrillOut__FinishedFunc();
    void Timeline_MoveDrillOut__UpdateFunc();
    void OnNotifyEnd_654993624EF7011EBE481AB20B9D51EC(FName NotifyName);
    void OnNotifyBegin_654993624EF7011EBE481AB20B9D51EC(FName NotifyName);
    void OnInterrupted_654993624EF7011EBE481AB20B9D51EC(FName NotifyName);
    void OnBlendOut_654993624EF7011EBE481AB20B9D51EC(FName NotifyName);
    void OnCompleted_654993624EF7011EBE481AB20B9D51EC(FName NotifyName);
    void ReceiveBeginPlay();
    void ReceiveTick(float DeltaSeconds);
    void BndEvt__ContinuousUsable_K2Node_ComponentBoundEvent_1_UsedBySignature__DelegateSignature(class APlayerCharacter* User, EInputKeys Key);
    void OnObjectiveStateChanged(EEscortMissionState oldState);
    void BndEvt__StartMachineUsable_K2Node_ComponentBoundEvent_2_UsedBySignature__DelegateSignature(class APlayerCharacter* User, EInputKeys Key);
    void BndEvt__StartMachineUsable_K2Node_ComponentBoundEvent_3_UsableChangedSignature__DelegateSignature(bool CanUse);
    void StateChanged(EEscortMissionState oldState);
    void EngineStartFX();
    void EngineStopFX();
    void RefuelCompleteFx();
    void BndEvt__HealthComponent_K2Node_ComponentBoundEvent_5_DamageSig__DelegateSignature(float Amount);
    void DrillingAtDestinationFx();
    void ShellCrackedFx();
    void RefreshPathfindingCollision();
    void VehicleDestroyedFx();
    void BndEvt__HealthComponent_K2Node_ComponentBoundEvent_6_HealthChangedSig__DelegateSignature(float Health);
    void BndEvt__Cannister1Usable_K2Node_ComponentBoundEvent_7_UsedBySignature__DelegateSignature(class APlayerCharacter* User, EInputKeys Key);
    void BndEvt__Cannister2Usable_K2Node_ComponentBoundEvent_8_UsedBySignature__DelegateSignature(class APlayerCharacter* User, EInputKeys Key);
    void OnExtractorSlotChanged(const FEscortMuleExtractorSlot& Slot, int32 Index);
    void ChechHover();
    void BndEvt__HealthComponent_K2Node_ComponentBoundEvent_4_HealthSegmentChange__DelegateSignature(int32 currSegment, int32 prevSegment);
    void BndEvt__Sphere_K2Node_ComponentBoundEvent_11_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const FHitResult& SweepResult);
    void SetActiveRepair(class UPrimitiveComponent* collider, class USkeletalMeshComponent* ActiveRepairMest);
    void ExplodeRepair(class USkeletalMeshComponent* collider);
    void ShellCracked(int32 numberOfShellsCracked);
    void OnRep_IsCarvingTunnel();
    void UpdateCarvingState();
    void SetDrillAtTargetActive(bool IsActive);
    void SetDrillCooldown(float Seconds);
    void BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const FHitResult& SweepResult);
    void BndEvt__HealthComponent_K2Node_ComponentBoundEvent_10_BodypartHitSig__DelegateSignature(float Amount, float BaseAmount, const FDamageData& DamageData);
    void TryDamageSound(class AActor* Attacker);
    void ShowDamageEffects(class UParticleSystem* Particles, FVector Location, FRotator Orientation);
    void BndEvt__HealthComponent_K2Node_ComponentBoundEvent_12_HitSig__DelegateSignature(float Damage, const FDamageData& DamageData, bool anyHealthLost);
    void All_PlayDamageSound(FVector_NetQuantize Location);
    void SpawnDamageEffects(class UParticleSystem* EmitterTemplate, FVector_NetQuantize Location, FRotator Rotation);
    void BndEvt__HealthComponent_K2Node_ComponentBoundEvent_9_DamageSig__DelegateSignature(float Amount);
    void CheckRepair();
    void BndEvt__Achievement_Collider_K2Node_ComponentBoundEvent_13_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const FHitResult& SweepResult);
    void BndEvt__Achievement_Collider_K2Node_ComponentBoundEvent_14_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
    void On Damage Enemy While Riding(const TScriptInterface<class IHealth>& EnemyHealth, float Damage, float DamageModifier, float HealthRemaining, bool IsWeakPoint, bool IsRadial);
    void BndEvt__PetDorettaUsable_K2Node_ComponentBoundEvent_15_UsedBySignature__DelegateSignature(class APlayerCharacter* User, EInputKeys Key);
    void All_PlayPetAnimation();
    void TestDorettaHead();
    void PathIsReady();
    void SetButtonUsable(bool CanUse);
    void OnCheat_SetMuleSpeed(float FloatValue);
    void BndEvt__BP_EscortMule_HealthDamageTracker_K2Node_ComponentBoundEvent_16_DamageSig__DelegateSignature(float Amount);
    void ExecuteUbergraph_BP_EscortMule(int32 EntryPoint);
    void EscortStateChanged__DelegateSignature(EEscortMissionState State);
    void ResourceFull__DelegateSignature();
};

#endif
