#ifndef UE4SS_SDK__MENU_ServerList_HPP
#define UE4SS_SDK__MENU_ServerList_HPP

class U_MENU_ServerList_C : public UWindowWidget
{
    FPointerToUberGraphFrame UberGraphFrame;
    class UWidgetAnimation* LookingForServers;
    class UBasic_CheckBox_C* AutoRefresh;
    class UBasic_Menu_ColorBar_C* Basic_Menu_ColorBar;
    class UBasic_RadioButton_C* Basic_RadioButton_Open;
    class UBasic_RadioButton_C* Basic_RadioButton_Password;
    class UBasic_RadioButton_C* Basic_RadioButton_SD_Close;
    class UBasic_RadioButton_C* Basic_RadioButton_SD_Far;
    class UBasic_RadioButton_C* Basic_RadioButton_SD_Medium;
    class UBasic_RadioButton_C* Basic_RadioButton_SD_World;
    class UBorder* BG_Filters;
    class UBorder* BG_Servers;
    class UBorder* Border_Categories;
    class UBorder* Border_Filters;
    class UBasic_ButtonScalable2_C* BTN_Full_ServerList;
    class UBasic_ButtonScalable2_C* BTN_QuickJoin;
    class UBasic_ButtonScalable2_C* BTN_Refresh;
    class UButton* Button_Complexity;
    class UButton* Button_Distance;
    class UButton* Button_Hazard;
    class UButton* Button_Length;
    class UButton* Button_Mission;
    class UButton* Button_Team;
    class UButton* Button_Time;
    class UCircularThrobber* CircularThrobber_0;
    class UFilter_ServerGameType_C* Filter_ServerGameType;
    class UFilter_ServerWorkEnvironment_C* Filter_ServerWorkEnvironment;
    class UImage* IMG_MissionIcon;
    class UITM_OnlineRestricted_C* ITM_OnlineRestricted;
    class UITM_ServerList_Entry_C* ITM_ServerList_Entry;
    class UITM_ServerList_Entry_C* ITM_ServerList_Entry_0;
    class UITM_ServerList_Entry_C* ITM_ServerList_Entry_1;
    class UMENU_SpaceRigTemplate_C* MENU_SpaceRigTemplate;
    class UBasic_ExpandableMenu_C* MenuSearchDistance;
    class UBasic_ExpandableMenu_C* MenuServerType;
    class UScrollBox* ScrollBox_Servers;
    class UVerticalBox* ScrollBox_Vertical;
    class UVerticalBox* SearchingVBox;
    class USizeBox* Size_Complexity;
    class USizeBox* Size_Distance;
    class USizeBox* Size_Hazard;
    class USizeBox* Size_Length;
    class USizeBox* Size_Mission;
    class USizeBox* Size_Team;
    class USizeBox* Size_Time;
    class UTextBlock* TextDistanceClose;
    class UTextBlock* TextDistanceFar;
    class UTextBlock* TextDistanceMedium;
    class UTextBlock* TextDistanceWorld;
    class UTextBlock* TextOpenServerType;
    class UTextBlock* TextPasswordServerType;
    class UTextBlock* TXT_Category_Complexity;
    class UTextBlock* TXT_Category_filters;
    class UTextBlock* TXT_Category_Hazard;
    class UTextBlock* TXT_Category_Length;
    class UTextBlock* TXT_Category_MissionType;
    class UTextBlock* TXT_Category_Team;
    class UTextBlock* TXT_Category_Time;
    class UTextBlock* TXT_Distance;
    class UTextBlock* TXT_NoServersFound;
    class UBasic_TextInputField_C* TXT_Search;
    class UVerticalBox* VboxNoServerFound;
    class UWND_Joining_C* JoinServerWidget;
    class UWND_JoinFailed_C* JoinFailedWidget;
    class UWND_JoiningPassword_C* JoinServerPasswordWidget;
    class UWND_JoiningModded_C* JoinServerModdedWidget;
    class UGeneratedMission* RestrictedMission;
    TArray<FBlueprintSessionResult> ServerList;
    TArray<class UITM_ServerList_Entry_C*> ServerListEntryCache;
    TArray<class UITM_ServerList_Entry_C*> ExistingEntries;
    int32 ActiveEntryIndex;
    TArray<float> ColumnWidths;
    EServerSortOrder SortingMethod;
    bool SortingReversed;
    bool ServerSideFiltering;
    TArray<FFriendInfo> NewFriends;
    TArray<FFriendInfo> CurrentFriends;
    class UObject* CurrentFriendSession;
    EBlueprintablePrivilegeResults CurrentOnliineBlockingReason;
    TArray<FString> AllServernameWords;
    bool UGCDisallowed;
    bool isManuallySorted;
    FBlueprintSessionResult CurrentJoiningModdedSession;
    FString CurrentJoiningModdedPassword;

    FEventReply OnKeyDown(FGeometry MyGeometry, FKeyEvent InKeyEvent);
    void GetWidgetMousePosition(class UWidget* InWidget, FVector2D& OutLocalPos);
    void GetHoveredEntryInfo(class UITM_ServerList_Entry_C*& EntryWidget, float& WidgetMouseOffset, FString& ServerID);
    void Disable Progression Mods and Join(FBlueprintSessionResult Session);
    void UpdateFromGametype();
    void UpdateFromWorkEnvironment();
    void UpdateSearchOptionsFromSearchField();
    void UpdateSearchOptionsFromRestrictedMission();
    void GetActiveDifficulties(TArray<class UDifficultySetting*>& Array);
    void SetSortFunction(EServerSortOrder NewSortingMethod);
    void GetColumnWidths(TArray<float>& OutWidths);
    void SetSelectedServerType();
    void SetServerType(ESteamServerJoinStatus ServerType);
    void SetSearchDistance(ESteamSearchRegion Distance);
    void CacheUnusedEntries();
    class UITM_ServerList_Entry_C* GetCachedEntry();
    void AddOrUpdateEntry(const FBlueprintSessionResult& Result, FString& OutServerID, class UITM_ServerList_Entry_C*& OutWidget);
    void ShowNoServersFound(bool Visible);
    void SetSelectedSearchDistance();
    FEventReply OnKeyUp(FGeometry MyGeometry, FKeyEvent InKeyEvent);
    void PopulateServerList(TArray<FBlueprintSessionResult>& servers);
    void CreateSubMenus();
    void OnFailure_155E2CBD4AAE55F9B2CDDA9239840B3A();
    void OnSuccess_155E2CBD4AAE55F9B2CDDA9239840B3A();
    void OnFailure_155E2CBD4AAE55F9B2CDDA92CC1C4D5F();
    void OnSuccess_155E2CBD4AAE55F9B2CDDA92CC1C4D5F();
    void OnFailure_0624A35A4162400123C5FFB790E37726();
    void OnSuccess_0624A35A4162400123C5FFB790E37726();
    void OnFailure_2F44709544BBB762D8D1EDB23AB84A38();
    void OnSuccess_2F44709544BBB762D8D1EDB23AB84A38();
    void OnFailure_155E2CBD4AAE55F9B2CDDA92DDA08471();
    void OnSuccess_155E2CBD4AAE55F9B2CDDA92DDA08471();
    void OnFailure_0D2A19CF4B5F20488D8E6EB4D68323DE();
    void OnSuccess_0D2A19CF4B5F20488D8E6EB4D68323DE();
    void Construct();
    void JoinServer(FBlueprintSessionResult Session);
    void JoinServerWithoutPassword(FBlueprintSessionResult Session);
    void JoinServerWithPassword(FBlueprintSessionResult Session, FString Password);
    void Back Pressed();
    void ServelistChanged();
    void RestrictToMission(class UGeneratedMission* mission);
    void ClearRestricted();
    void BndEvt__Basic_TextInputField_K2Node_ComponentBoundEvent_1_OnTextChanged__DelegateSignature(FText Text);
    void PreConstruct(bool IsDesignTime);
    void BndEvt__BTN_ServerList_K2Node_ComponentBoundEvent_0_OnClicked__DelegateSignature();
    void OnJoiningSession();
    void OnShown();
    void BndEvt__Basic_RadioButton_SD_Close_K2Node_ComponentBoundEvent_0_OnCheckStateChanged__DelegateSignature(bool IsChecked);
    void BndEvt__Basic_RadioButton_SD_Medium_K2Node_ComponentBoundEvent_1_OnCheckStateChanged__DelegateSignature(bool IsChecked);
    void BndEvt__Basic_RadioButton_SD_Far_K2Node_ComponentBoundEvent_2_OnCheckStateChanged__DelegateSignature(bool IsChecked);
    void BndEvt__Basic_RadioButton_SD_World_K2Node_ComponentBoundEvent_3_OnCheckStateChanged__DelegateSignature(bool IsChecked);
    void BndEvt__Basic_RadioButton_Password_K2Node_ComponentBoundEvent_69_OnCheckStateChanged__DelegateSignature(bool IsChecked);
    void BndEvt__Basic_RadioButton_Open_K2Node_ComponentBoundEvent_81_OnCheckStateChanged__DelegateSignature(bool IsChecked);
    void BndEvt__AutoRefresh_K2Node_ComponentBoundEvent_0_OnCheckStateChanged__DelegateSignature(bool IsChecked);
    void BndEvt__BTN_Refresh_K2Node_ComponentBoundEvent_1_OnClicked__DelegateSignature();
    void RefreshServerList();
    void OnClosed();
    void BndEvt__Filter_ServerWorkEnvironment_K2Node_ComponentBoundEvent_6_OnSelectionChanged__DelegateSignature();
    void BndEvt__Button_Mission_K2Node_ComponentBoundEvent_4_OnButtonClickedEvent__DelegateSignature();
    void BndEvt__Button_Time_K2Node_ComponentBoundEvent_5_OnButtonClickedEvent__DelegateSignature();
    void BndEvt__Button_Hazard_K2Node_ComponentBoundEvent_7_OnButtonClickedEvent__DelegateSignature();
    void BndEvt__Button_Complexity_K2Node_ComponentBoundEvent_8_OnButtonClickedEvent__DelegateSignature();
    void BndEvt__Button_Length_K2Node_ComponentBoundEvent_9_OnButtonClickedEvent__DelegateSignature();
    void BndEvt__Button_Team_K2Node_ComponentBoundEvent_10_OnButtonClickedEvent__DelegateSignature();
    void BndEvt__Button_Distance_K2Node_ComponentBoundEvent_11_OnButtonClickedEvent__DelegateSignature();
    void RefreshFriendslist();
    void FriendsListUpdated(bool bWasSuccessful, FString ErrorStr);
    void FriendServerlistShouldBeUpdated();
    void CreateFriendslist();
    void OnIsUGCAllowed(const class APlayerState* CheckedPlayerState, EBlueprintableUserPrivileges CheckedPrivilege, EBlueprintablePrivilegeResults PrivilegeResult);
    void JoinModdedServer(FBlueprintSessionResult Session, FString Password);
    void OnJoiningFailed();
    void BndEvt__Filter_ServerGameType_K2Node_ComponentBoundEvent_14_OnSelectionChanged__DelegateSignature();
    void ModdedSaveLoaded();
    void JoiningBlocked(bool Yes);
    void SavegameSwitchCancelled();
    void ExecuteUbergraph__MENU_ServerList(int32 EntryPoint);
};

#endif
