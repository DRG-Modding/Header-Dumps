#ifndef UE4SS_SDK_ENE_WalkingPlagueheart_HPP
#define UE4SS_SDK_ENE_WalkingPlagueheart_HPP

class AENE_WalkingPlagueheart_C : public AENE_SpiderBase_Large_C
{
    FPointerToUberGraphFrame UberGraphFrame;
    class USpawnActorWithDebrisPosComponent* SpawnActorWithDebrisPos2;
    class USphereComponent* ProximityInfectionSphereTrigger;
    class USphereComponent* UsableSphere;
    class UCapsuleComponent* Capsule;
    class UTentacleManagerComponent* TentacleManager;
    class UArrowComponent* KnockBackRotation3;
    class UArrowComponent* KnockBackRotation2;
    class UArrowComponent* KnockBackRotation1;
    class UCapsuleComponent* Capsule1;
    class UStingerIdleAudioComponent* IdleAudioManager;
    class UPuddleTrackerComponent* PuddleTracker;
    class UBodyRotationManagerComponent* BodyRotationManager;
    class UStatusEffectTriggerComponent* StatusEffectTrigger;
    class UPointLightComponent* PointLight10;
    class UStaticMeshComponent* InnerPoint_C5;
    class UStaticMeshComponent* InnerPoint_C4;
    class UStaticMeshComponent* InnerPoint_C3;
    class UStaticMeshComponent* InnerPoint_C2;
    class UPointLightComponent* PointLight11;
    class UStaticMeshComponent* InnerPoint_C1;
    class UStaticMeshComponent* InnerPoint_B5;
    class UStaticMeshComponent* InnerPoint_B4;
    class UPointLightComponent* PointLight9;
    class UPointLightComponent* PointLight8;
    class UStaticMeshComponent* InnerPoint_B3;
    class UStaticMeshComponent* InnerPoint_B2;
    class UStaticMeshComponent* InnerPoint_B1;
    class UStaticMeshComponent* InnerPoint_A2;
    class UStaticMeshComponent* InnerPoint_A4;
    class UStaticMeshComponent* InnerPoint_A3;
    class UStaticMeshComponent* InnerPoint_A5;
    class UStaticMeshComponent* InnerPoint_A1;
    class UPointLightComponent* PointLight7;
    class UPointLightComponent* PointLight6;
    class UWeakpointGlowComponent* WeakpointGlow;
    class UTerrainScannerStaticMesh* TerrainScannerStaticMesh;
    class UNiagaraComponent* NS_MobilePlague_Tendrils;
    class USkeletalMeshComponent* plagueheart1;
    class USkeletalMeshComponent* plagueheart3;
    class USkeletalMeshComponent* plagueheart2;
    class USkeletalMeshComponent* Head_C;
    class USkeletalMeshComponent* Head_A;
    class USkeletalMeshComponent* Head_B;
    class UNiagaraComponent* NiagTrailParticle;
    class UChildActorComponent* Shield_A;
    class UChildActorComponent* Shield_C;
    class UChildActorComponent* Shield_B;
    class UNiagaraComponent* NS_MobilePlague_GroundEffect;
    class UArmorHealthDamageComponent* ArmorHealthDamage;
    class UFSDAudioComponent* TentacleMove;
    class UInstantUsable* SpawnCleaningPodUsable;
    class ULineSpikeAttack* LineSpikeAttack;
    class UPointLightComponent* PointLight;
    class UMeleeAttackComponent* MeleeAttack;
    class USpawnActorWithDebrisPosComponent* SpawnActorWithDebrisPos;
    class USphereComponent* Sphere;
    class AActor* TargetActor;
    bool IsHealthbarVisible;
    class UEnemyGroupDescriptor* EnemyDescriptor;
    FName Key_LeashLocation;
    float SlimeTrailBarfCooldown;
    FDamageData Damage Data;
    float StopFightingDistance;
    float ResumeFightingDistance;
    FName KeyIsAlerted;
    int32 SpecialAttackCounter;
    class APlayerCharacter* CleanPodItemUser;
    bool CleaningPodHasBeenCalled;
    FENE_WalkingPlagueheart_CUpdateShieldStatus UpdateShieldStatus;
    void UpdateShieldStatus(TArray<class ABP_PlagueHeartShield_Base_C*>& Shield);
    TArray<class ABP_PlagueHeartShield_Base_C*> Shields;
    FVector LastUpVector;
    FRotator BodyRotation;
    FRotator WiggleRotation;
    TArray<class AActor*> Blockers;
    class USkeletalMeshComponent* NewVar_0_0;
    TArray<class AActor*> AttachedActorsOnDeath;
    int32 WeakspotCount;

    class UInfectionPointCleaningComponent* GetCleaningPoints(FVector fromLocation);
    void AddBoots();
    void GetAttachedActorsIfValid(class AActor* Actor, TArray<class AActor*>& AttachedActors);
    void KnockbackFromShield(class ABP_PlagueHeartShield_Base_C* Shield);
    void UpdateIsBlocked();
    void RemoveAttackBlocker(class AActor* blocker);
    void AddAttackBlocker(class AActor* blocker);
    FVector GetTargetCenterMass();
    void Register Shield(class ABP_PlagueHeartShield_Base_C* InShield);
    void OnRep_CleaningPodHasBeenCalled();
    void UpdateHUDShieldStatus();
    void ConsiderSpecialAttacking(bool& didSpecialAttack);
    void ArePlayersInRange(float Distance, bool& InRange);
    void OnRep_isHealthbarVisile();
    void UserConstructionScript();
    void ReceiveBeginPlay();
    void BndEvt__HealthComponent_K2Node_ComponentBoundEvent_1_DeathSig__DelegateSignature(class UHealthComponentBase* HealthComponent);
    void TrySpawnEnemies();
    void BndEvt__ENE_WalkingPlagueheart_HealthComponent_K2Node_ComponentBoundEvent_0_DamageSig__DelegateSignature(float Amount);
    void EventOnScatterBarf();
    void OnShieldDeath(class ABP_PlagueHeartShield_Base_C* Shield);
    void OnFlee();
    void OnShieldCleaned(class ABP_PlagueHeartShield_Base_C* Shield);
    void OnSpawnStinkCloud();
    void SpawnHearts();
    void UpdateHealth(bool Main, bool Sub1, bool Sub2, bool Sub3);
    void OnPointFoamed();
    void CheckDistanceToPlayers();
    void BndEvt__ENE_WalkingPlagueheart_SpawnCleaningPodUsable_K2Node_ComponentBoundEvent_9_UsedBySignature__DelegateSignature(class APlayerCharacter* User, EInputKeys Key);
    void OnCleaningPodLaunched();
    void OnItemUnequipped_Event(class AItem* Item);
    void OnPointVacuumed_Event();
    void BndEvt__ENE_WalkingPlagueheart_ArmorHealthDamage_K2Node_ComponentBoundEvent_4_AmorPartDestroyedDelegate__DelegateSignature(FName Name);
    void UpdateDeadShield(class UMeshComponent* Head, FName BoneName);
    void spawned(class ABP_WalkingPlagueheart_SlimeTrailPuddle_C* puddle);
    void BndEvt__ENE_WalkingPlagueheart_Outline_K2Node_ComponentBoundEvent_1_OutlineChanged__DelegateSignature(EOutline InOutline);
    void OnShieldLaserpointer();
    void OnHeartDeposited();
    void KillA();
    void KillB();
    void KillC();
    void Force Flee();
    void TestDeath();
    void ExecuteUbergraph_ENE_WalkingPlagueheart(int32 EntryPoint);
    void UpdateShieldStatus__DelegateSignature(TArray<class ABP_PlagueHeartShield_Base_C*>& Shield);
};

#endif
