#ifndef UE4SS_SDK_BP_PlayerController_SpaceRig_HPP
#define UE4SS_SDK_BP_PlayerController_SpaceRig_HPP

class ABP_PlayerController_SpaceRig_C : public ABP_SR_PlayerControllerBase_C
{
    FPointerToUberGraphFrame UberGraphFrame;
    class UWindowWidget* ServerBrowser;
    class UMENU_Loadout_C* Loadout;
    class UEscapeMenuWindow* options;
    class UWindowWidget* MissionSelect;
    int32 OldCounter;
    TArray<class UUserWidget*> Widgets;
    class UPopup_GearUpgrade_Buy_C* PopUp_BuyUpgrade;
    FVector StartLocation;
    bool CharacterPossed;
    FBP_PlayerController_SpaceRig_COnToggleHUD OnToggleHUD;
    void OnToggleHUD();
    class UWindowWidget* CharCustomization;
    class UWindowWidget* Crafting;
    class UWindowWidget* Popup_Crafting;
    bool ShowingReconnectcontroller;
    bool IsHUDVisible;
    class USCREEN_CharacterSelection_Clean_C* CharacterSelection;
    bool HasShownCharacterSelector;
    class UWindowWidget* ReconnectController;
    class UWindowWidget* NetworkError;
    class UWindowWidget* Trading;
    class UWindowWidget* Cheat;
    class UWindowWidget* Jobs;
    class UWND_AssignmentMissionComplete_C* C;
    class UWindowWidget* RetirementPopup_0;
    class UMENU_UpgradeScreen_C* ItemUpgrade;
    bool EscapeMenuEnabled;
    class UWindowWidget* Bosco;
    int32 Medbay speech counter;
    float Time between shouts;
    int32 MixerConfettiTime;
    FScaledEffect MixerConfetti;
    class UFSDAchievement* SelfControlAchievement;
    bool HasKickedABarrel;
    class UFSDAchievement* MugInHoopAchievement;
    class UFSDAchievement* DiscJockeyAchievement;
    bool CanUseInstantUsableDiscord;
    class UWindowWidget* DeepDives;
    TArray<FSoftObjectPath> UIToAsyncLoad;
    FBP_PlayerController_SpaceRig_COnOpenedEscapeMenu OnOpenedEscapeMenu;
    void OnOpenedEscapeMenu();
    int32 CheatCounter;
    FBP_PlayerController_SpaceRig_COnCheatRequested OnCheatRequested;
    void OnCheatRequested();

    class UEscapeMenuWindow* GetEscapeMenu();
    void ModdedSavegameCheck();
    void Change Savegame();
    void GetMissionSelect(class UWindowWidget*& Widget);
    void GetPopupCrafting(class UWindowWidget*& Widget);
    void GetCrafting(class UWindowWidget*& Widget);
    void PreloadAssets();
    bool HUDVisible();
    void ChangeHUDVisible(bool IsHUDVisible, EHUDVisibilityReason reason);
    void SelectLastPlayedCharacter();
    void AddWidget(class UUserWidget*& Widget, int32 ZOrder, ESlateVisibility InVisibility);
    void ChangeCharacter(class UPlayerCharacterID* NewCharacter);
    void CreateUI();
    void InpActEvt_PushToTalk_K2Node_InputActionEvent_5(FKey Key);
    void InpActEvt_PushToTalk_K2Node_InputActionEvent_4(FKey Key);
    void InpActEvt_MenuButton_K2Node_InputActionEvent_3(FKey Key);
    void InpActEvt_Chat_K2Node_InputActionEvent_2(FKey Key);
    void InpActEvt_CallDonkey_K2Node_InputActionEvent_1(FKey Key);
    void InpActEvt_MapTool_K2Node_InputActionEvent_0(FKey Key);
    void InpActEvt_Subtract_K2Node_InputKeyEvent_6(FKey Key);
    void InpActEvt_Eight_K2Node_InputKeyEvent_5(FKey Key);
    void InpActEvt_Eight_K2Node_InputKeyEvent_4(FKey Key);
    void InpActEvt_Nine_K2Node_InputKeyEvent_3(FKey Key);
    void InpActEvt_Nine_K2Node_InputKeyEvent_2(FKey Key);
    void InpActEvt_Ctrl+Alt_H_K2Node_InputKeyEvent_1(FKey Key);
    void OnLoaded_0C1A95084D16C934A469CF8C3B445101(UClass* Loaded);
    void OnFailure_84F86EB44BDC03B3D4D52D92FC0B069A();
    void OnSuccess_84F86EB44BDC03B3D4D52D92FC0B069A();
    void InpActEvt_Home_K2Node_InputKeyEvent_0(FKey Key);
    void OnFailure_FD5D0BC24D561288D20ABE9353DBA180();
    void OnSuccess_FD5D0BC24D561288D20ABE9353DBA180();
    void ShowServerBrowser();
    void ShowMissionSelect();
    void Client_OpenMap();
    void PlayerChangeCharacter(class UPlayerCharacterID* NewCharacter);
    void RecievePreClientTravel();
    void ShowCharacterSelect();
    void ControllerReady();
    void RecieveOnControllerReady();
    void ShowBuyItemPopup(TSubclassOf<class AActor> Item, class UItemUpgrade* Upgrade);
    void ReceiveDestroyed();
    void OnCharacterPossesd(class APawn* Pawn);
    void ReceiveBeginPlay();
    void ShowCharCustomization();
    void ShowCrafting();
    void ShowCharacterScreenAndWorld();
    void ShowCraftingAndWorld();
    void ShowCustomizationAndWorld();
    void SpawnPlayer();
    void ShowFirstCharacterSelect();
    void OpenCharacterSelector(bool OpenVideo, bool AllowBack);
    void ShowReconnectController();
    void OnFirstWindowOpened();
    void OnLastWindowClosed();
    void ShowNetworkError();
    void ShowTrading();
    void ShowWindowByClass(TSubclassOf<class UWindowWidget> WindowClass, int32 ZOrder);
    void ShowCheatMenu();
    void ShowBarMenu(class ASpaceRigBar* Bar);
    void OnRoundSelected_Event(class ASpaceRigBar* Bar, class UDrinkableDataAsset* RequestedDrink);
    void OrderBarRound(class ASpaceRigBar* Bar, class UDrinkableDataAsset* Drink);
    void Deduct Credits On Client(int32 Amount);
    void ShowJobs();
    void ShowItemUpgradeScreen(TSubclassOf<class APlayerCharacter> CharacterClass, TSubclassOf<class AActor> itemClass, EItemCategory ItemCategory);
    void ShowBoscoUpgrades();
    void OnPlayerSpawnBegin(int32 PlayerId);
    void OnDroppodLeave();
    void PlayerThrewMugInHoop();
    void PlayerPlayedEntireSong();
    void HandleDiscordConsole(class ABP_DiscordConsole_C* DiscordConsole);
    void SetUsableDiscord(bool Usable);
    void ShowDeepDives();
    void OpenSpacerigConsole(class ABP_BaseSpaceRigConsole_C* Console);
    void SetHasShownCharacterSelector(bool HasShown);
    void SetIsEscapeMenuEnabled(bool IsEscapeMenuEnabled);
    void Reset Player Location();
    void Reset Player Scale On Clients();
    void Server_PopLooatAtAffliction();
    void ShowLookAtConsole();
    void LaunchTutorial();
    void PromptLaunchTutorial();
    void On Prompt(bool Yes);
    void ShowCharacterSelectionBackground(bool resetToDefaultWeapon, ECharselectionCameraLocation cameraLocation);
    void ShowForgeWorkshop();
    void ReloadSpacerig();
    void OnRestartGame(bool Yes, bool CreateModdedSave);
    void OnRestartSpacerig(bool Yes, bool CreateModdedSave);
    void OnPackageMounted(bool Sandbox);
    void OnPlayer(class AFSDPlayerState* PlayerState);
    void ShowEscapeMenu();
    void OpenStandaloneMinersManual(EMinersManualSection Section, const FGuid& ID);
    void OpenStandaloneMinersManualPage(EMinersManualSinglePage page);
    void Back_Event_0();
    void OnCharacterSelected();
    void OnHostTimerChanged(float newTime);
    void OnMissionTimerChanged(float newTime);
    void DoCountDown(float newTime);
    void ShowReconnect(bool Show);
    void OnGravityChanged(float CurrentGravity, float Change);
    void CustomEvent_0();
    void ExecuteUbergraph_BP_PlayerController_SpaceRig(int32 EntryPoint);
    void OnCheatRequested__DelegateSignature();
    void OnOpenedEscapeMenu__DelegateSignature();
    void OnToggleHUD__DelegateSignature();
};

#endif
