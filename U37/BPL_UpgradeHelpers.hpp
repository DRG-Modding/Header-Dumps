#ifndef UE4SS_SDK_BPL_UpgradeHelpers_HPP
#define UE4SS_SDK_BPL_UpgradeHelpers_HPP

class UBPL_UpgradeHelpers_C : public UBlueprintFunctionLibrary
{

    void UPGDESC_CapsuleHitScan(TSubclassOf<class AItem> Item, class AFSDPlayerState* Player, ECapsuleHitscanUpgradeType upgradeType, class UObject* __WorldContext, FGearStatEntry& GearStatEntry, bool& HasAnyUpgrades);
    void UPGDESC_MicrowaveGun(TSubclassOf<class AItem> Item, class AFSDPlayerState* Player, FText Prefix, EMicrowaveGunUpgrade upgradeType, bool UseTextOnly, class UObject* __WorldContext, FGearStatEntry& GearStatEntry, bool& HasAnyUpgrades);
    void FormatToPercentageZeroBasedNormalized(float Base Value, float Upgrade Value, float Old Upgrade Value, float Final Value, TEnumAsByte<FormatWeaponStatType::Type> FormatType, class UObject* __WorldContext, FText& Base Text, FText& Upgrade Text, FText& Value);
    void UPGDESC_CoilGun(TSubclassOf<class AItem> Item, class AFSDPlayerState* Player, FText Prefix, ECoilgunUpgrades upgradeType, class UObject* __WorldContext, FGearStatEntry& GearStatEntry, bool& HasAnyUpgrades);
    void UPGDESC_Crossbow(TSubclassOf<class AItem> Item, TSubclassOf<class ACrossbowProjectileBase> Projectile, class AFSDPlayerState* Player, ECrossbowUpgrades upgradeType, class UObject* __WorldContext, FGearStatEntry& GearStatEntry, bool& HasAnyUpgrades);
    void UPGDESC_ProjectileLauncher(TSubclassOf<class AItem> Item, class AFSDPlayerState* Player, EProjectileLauncherBaseUpgradeType upgradeType, class UObject* __WorldContext, FGearStatEntry& GearStatEntry, bool& HasUpgradedValue);
    void UPGDESC_LockOnRifle(TSubclassOf<class AItem> Item, class AFSDPlayerState* Player, ELockOnWeaponUpgrades upgradeType, class UObject* __WorldContext, FGearStatEntry& GearStatEntry, bool& HasAnyUpgrades);
    void UPGDESC_GooCannon_Projectile(TSubclassOf<class AItem> Item, TSubclassOf<class AActor> upgradedItem, class AFSDPlayerState* Player, EGooGunProjectileUpgrades upgradeType, class UObject* __WorldContext, FGearStatEntry& GearStatEntry);
    void UPGDESC_DynamicSTE(TSubclassOf<class AActor> Item, TSubclassOf<class AActor> upgradedItem, class AFSDPlayerState* Player, EModifyStatusEffectDamageUpgrade upgradeType, class UObject* __WorldContext, FGearStatEntry& GearStatEntry, bool& HasAnyUpgrades);
    void UPGDESC_GooCannon(TSubclassOf<class AItem> Item, class AFSDPlayerState* Player, EGooGunUpgrades upgradeType, class UObject* __WorldContext, FGearStatEntry& GearStatEntry, bool& HasAnyUpgrades);
    void FormatStatic(FText Text, float Value, TEnumAsByte<FormatWeaponStatType::Type> Format, class UObject* __WorldContext, FGearStatEntry& GearStatEntry);
    void UPGDESC_DPS(TSubclassOf<class AActor> Item, TSubclassOf<class AActor> upgradedItem, class AFSDPlayerState* Player, FText StatName, float Interval, class UObject* __WorldContext, FGearStatEntry& GearStatEntry, bool& HasUpgradedValue);
    void FormatUpgradeToEntry(FText& Text, FUpgradeValues& UpgradeValues, TEnumAsByte<FormatWeaponStatType::Type> StatFormat, TEnumAsByte<FormatPreviewStatusType::Type> PreviewFormat, class UObject* __WorldContext, FGearStatEntry& GearStatEntry, bool& HasAnyUpgrades);
    void FormatUpgrade(FUpgradeValues& UpgradeValues, TEnumAsByte<FormatWeaponStatType::Type> StatFormat, TEnumAsByte<FormatPreviewStatusType::Type> PreviewFormat, class UObject* __WorldContext, FText& BaseText, FText& UpgradeText, FText& Value, EItemPreviewStatus& Format, bool& HasAnyUpgrades);
    void UPGDESC_Generic(class AFSDPlayerState* Player, TSubclassOf<class AItem> Item, class UItemUpgrade* upgradeType, bool UseCustomText, FText Text, class UObject* __WorldContext, FGearStatEntry& GearStatEntry, bool& HasUpgradedValue);
    void UPGDESC_CryoSprayProjectile(TSubclassOf<class AItem> Item, class AFSDPlayerState* Player, TSubclassOf<class AProjectile> ProjectileClass, FText UpgradeText, class UObject* __WorldContext, FGearStatEntry& GearStatEntry, bool& HasUpgradedValue);
    void UPGDESC_DamageBonus_Random(TSubclassOf<class AItem> Item, class AFSDPlayerState* Player, class UObject* __WorldContext, FGearStatEntry& GearStatEntry, bool& HasUpgradedValue);
    void UPGDESC_HitCounter(TSubclassOf<class AItem> Item, class AFSDPlayerState* Player, TSubclassOf<class UWeaponHitCounterComponent> HitCounterClass, FText Upgrade Text, class UObject* __WorldContext, FGearStatEntry& GearStatEntry, bool& HasUpgradedValue);
    void FormatToPercentageNormalized(float Base Value, float Upgrade Value, float Old Upgrade Value, float Final Value, TEnumAsByte<FormatWeaponStatType::Type> FormatType, class UObject* __WorldContext, FText& Base Text, FText& Upgrade Text, FText& Value);
    void UPGDESC_AmmoDrivenEx(TSubclassOf<class AItem> Item, class AFSDPlayerState* Player, TArray<EAmmoDrivenWeapnUpgradeType>& UpgradeTypes, TArray<FGearStatEntry>& GearStats, class UObject* __WorldContext);
    EItemPreviewStatus FormatPreviewStatus(bool FormatValue, FUpgradeValues& UpgradeValues, TEnumAsByte<FormatPreviewStatusType::Type> FormatType, class UObject* __WorldContext);
    void UPGDESC_DualMPs(TSubclassOf<class AItem> Item, class AFSDPlayerState* Player, EDualMachinePistolsUpgrades upgradeType, class UObject* __WorldContext, FGearStatEntry& GearStatEntry, bool& HasUpgradedValue);
    void UPGDESC_SentryGun(TSubclassOf<class AItem> Item, class AFSDPlayerState* Player, ESentryGunUpgradeType Upgrade Type, class UObject* __WorldContext, FGearStatEntry& GearStatEntry, bool& Has Upgraded Value);
    void UPGDESC_Detpack(TSubclassOf<class AItem> Item, class AFSDPlayerState* PlayerState, EDetPackUpgrades upgradeType, class UObject* __WorldContext, FGearStatEntry& GearStatEntry, bool& HasUpgradedValue);
    void UPGDESC_Flaregun(TSubclassOf<class AItem> Item, class AFSDPlayerState* PlayerState, EFlaregunUpgrades upgradeType, class UObject* __WorldContext, FGearStatEntry& GearStatEntry, bool& HasUpgradedValue);
    void UPGDESC_ArmorStat(class AFSDPlayerState* Player, TSubclassOf<class AArmorPiece> armorClass, class UPawnStat* Stat, FText Text, TEnumAsByte<FormatWeaponStatType::Type> Format, class UObject* __WorldContext, FGearStatEntry& GearStatEntry, bool& Changed);
    void UPGDESC_TriggeredStat(class AFSDPlayerState* Player, TSubclassOf<class AActor> Item, TSubclassOf<class UStatusEffect> Status Effect, FText Text, ETriggeredStatusEffectType Type, TEnumAsByte<FormatWeaponStatType::Type> Format, class UObject* __WorldContext, FGearStatEntry& gear stat entry, bool& is upgraded);
    void UPGDESC_PlatformGun(TSubclassOf<class AItem> Item, class AFSDPlayerState* Player, EPlatformGunUpgrades upgradeType, class UObject* __WorldContext, FGearStatEntry& GearStatEntry, bool& Should show text);
    void UPGDESC_Bosco(TSubclassOf<class AActor> upgradedItem, class AFSDPlayerState* Player, EBoscoUpgrades upgradeType, class UObject* __WorldContext, FGearStatEntry& GearStatEntry, bool& HasChanged);
    void UPGDESC_CoooldownAggregator(TSubclassOf<class AItem> Item, class AFSDPlayerState* Player, class UObject* __WorldContext, FGearStatEntry& GearStatEntry, bool& HasUpgradedValue);
    void UPGDESC_GrapplingHook(TSubclassOf<class AItem> Item, class AFSDPlayerState* Player, EGrapplingHookUpgrade upgradeType, class UObject* __WorldContext, FGearStatEntry& GearStatEntry, bool& HasUpgradedValue);
    void UPGDESC_FlaregunProjectile(TSubclassOf<class AItem> Item, class AFSDPlayerState* Player, EFlaregunProjectileUpgrades upgradeType, TSubclassOf<class AActor> upgradedActor, class UObject* __WorldContext, FGearStatEntry& GearStatEntry, bool& HasUpgradedValue);
    void UPGDESC_ZiplineGun(TSubclassOf<class AItem> Item, class AFSDPlayerState* Player, EZiplineGunUpgrades upgradeType, class UObject* __WorldContext, FGearStatEntry& GearStatEntry, bool& HasUpgradedValue);
    void UPGDESC_Grenades(TSubclassOf<class AGrenade> Item, class AFSDPlayerState* Player, EGrenadeUpgradeType upgradeType, class UObject* __WorldContext, FGearStatEntry& GearStatEntry);
    void UPGDESC_Pickaxe(TSubclassOf<class AItem> Item, class AFSDPlayerState* Player, EPickaxeUpgradeType upgradeType, class UObject* __WorldContext, FGearStatEntry& GearStatEntry, bool& HasUpgradedValue);
    void UPGDESC_LineCutterProjectile(TSubclassOf<class AItem> Item, class AFSDPlayerState* Player, ELineCutterProjectileUpgradeType upgradeType, class UObject* __WorldContext, FGearStatEntry& GearStatEntry, bool& HasUpgradedValue);
    void UPGDESC_CombatShotgun(TSubclassOf<class AItem> Item, class AFSDPlayerState* Player, EAutoShotgunUpgrades upgradeType, class UObject* __WorldContext, FGearStatEntry& GearStatEntry, bool& HasUpgradedValue);
    void UPGDESC_ChargedProjectile(TSubclassOf<class AItem> Item, class AFSDPlayerState* Player, EChargedProjectileUpgrades upgradeType, TSubclassOf<class AActor> upgradedActor, class UObject* __WorldContext, FGearStatEntry& GearStatEntry, bool& HasUpgradedValue);
    void UPGDESC_StickyFlame(TSubclassOf<class AItem> Item, class AFSDPlayerState* Player, TSubclassOf<class UStatusEffect> StatusEffect, FText Text, class UObject* __WorldContext, FGearStatEntry& GearStatEntry, bool& HasUpgradedValue);
    void UPGDESC_SawedOff(TSubclassOf<class AItem> Item, class AFSDPlayerState* Player, ESawedOffShotgunUpgrades upgradeType, class UObject* __WorldContext, FGearStatEntry& GearStatEntry, bool& HasUpgradedValue);
    void UPGDESC_Armor(class AFSDPlayerState* Player, TSubclassOf<class AArmorPiece> armorClass, EArmorUpgradeType Armor Upgrade Type, FText Text, TEnumAsByte<FormatWeaponStatType::Type> Format, TEnumAsByte<FormatPreviewStatusType::Type> PreviewFormat, class UObject* __WorldContext, FGearStatEntry& GearStatEntry);
    void UPGDESC_BurstWeapon(TSubclassOf<class AItem> Item, class AFSDPlayerState* Player, EBurstWeaponUpgrades upgradeType, class UObject* __WorldContext, FGearStatEntry& GearStatEntry, bool& HasUpgradedValue);
    void UPGDESC_DamageBonus_AoEFear(TSubclassOf<class AItem> Item, class AFSDPlayerState* Player, FText StatName, class UObject* __WorldContext, FGearStatEntry& GearStatEntry, bool& HasUpgradedValue);
    void UPGDESC_DamageBonus_HotBullets(TSubclassOf<class AItem> Item, class AFSDPlayerState* Player, class UDamageClass* DamageClass, FText StatName, class UObject* __WorldContext, FGearStatEntry& GearStatEntry, bool& HasUpgradedValue);
    void UPGDESC_BeltDriven(TSubclassOf<class AItem> Item, class AFSDPlayerState* Player, EBeltDrivenWeaponUpgrade upgradeType, class UObject* __WorldContext, FGearStatEntry& GearStatEntry, bool& HasUpgradedValue);
    void UPGDESC_AutoCannon(TSubclassOf<class AItem> Item, class AFSDPlayerState* Player, EAutoCannonUpgrades upgradeType, class UObject* __WorldContext, FGearStatEntry& GearStatEntry, bool& HasUpgradedValue);
    void FormatValues(FUpgradeValues& UpgradeValues, TEnumAsByte<FormatWeaponStatType::Type> Format, class UObject* __WorldContext, FText& BaseText, FText& UpgradeText, FText& Value);
    void UPGDESC_AssaultRifle(TSubclassOf<class AItem> Item, class AFSDPlayerState* Player, EAssaultRifleUpgrade upgradeType, class UObject* __WorldContext, FGearStatEntry& GearStatEntry, bool& HasUpgradedValue);
    void UPGDESC_GatlingGun(TSubclassOf<class AItem> Item, class AFSDPlayerState* Player, EGatlingGunUpgrade upgradeType, class UObject* __WorldContext, FGearStatEntry& GearStatEntry, bool& HasUpgradedValue);
    void UPGDESC_ShieldRegenerator(TSubclassOf<class AItem> Item, class AFSDPlayerState* Player, EShieldGeneratorUpgrades upgradeType, class UObject* __WorldContext, FGearStatEntry& GearStatEntry, bool& HasUpgradedValue);
    void FormatCmtoM(float Base Value, float Upgrade Value, float Old Upgrade Value, float Final Value, class UObject* __WorldContext, FText& Base Text, FText& Upgrade Text, FText& Value);
    void FormatPercentage(float Base Value, float Upgraded Value, float Old Upgraded Value, float Final Value, TEnumAsByte<FormatWeaponStatType::Type> Format, class UObject* __WorldContext, FText& Base Text, FText& Upgrade Text, FText& Value);
    void UPGDESC_Cryospray(TSubclassOf<class AItem> Item, class AFSDPlayerState* Player, ECryoSprayUpgrades upgradeType, class UObject* __WorldContext, FGearStatEntry& GearStatEntry, bool& HasUpgradedValue);
    void UPGDESC_FlameThrower(TSubclassOf<class AItem> Item, class AFSDPlayerState* Player, EFlameThrowerUpgradeType upgradeType, class UObject* __WorldContext, FGearStatEntry& GearStatEntry, bool& HasUpgradedValue);
    void UPGDESC_ChargedWeapon(TSubclassOf<class AItem> Item, class AFSDPlayerState* Player, EChargedWeaponUpgrades upgradeType, class UObject* __WorldContext, FGearStatEntry& GearStatEntry, bool& HasUpgradedValue);
    void UPGDESC_Projectile(TSubclassOf<class AActor> Item, TSubclassOf<class AActor> upgradedItem, class AFSDPlayerState* Player, EProjectileUpgrade upgradeType, class UObject* __WorldContext, FGearStatEntry& GearStatEntry, bool& HasUpgradedValue);
    void UPGDESC_BoltAction(TSubclassOf<class AItem> Item, class AFSDPlayerState* Player, EBoltActionRifleUpgrades upgradeType, class UObject* __WorldContext, FGearStatEntry& GearStatEntry, bool& HasUpgradedValue);
    void UPGDESC_DamageBonus_TargetStateBonus(TSubclassOf<class AItem> Item, class AFSDPlayerState* Player, FText StatName, ETargetStateDamageBonusType TargetState, class UObject* __WorldContext, FGearStatEntry& GearStatEntry, bool& HasUpgradedValue);
    void UPGDESC_DamageBonus_TargetTypeBonus(TSubclassOf<class AItem> Item, class AFSDPlayerState* Player, FText StatName, FName Key, class UObject* __WorldContext, FGearStatEntry& GearStatEntry, bool& HasUpgradedValue);
    void UPGDESC_DamageBonus_StatusBonus(TSubclassOf<class AItem> Item, class AFSDPlayerState* Player, TSubclassOf<class UStatusEffect> SstatusEffectIn, FText StatName, class UObject* __WorldContext, FGearStatEntry& GearStatEntry, bool& HasUpgradedValue);
    void UPGDESC_ElectricalSMG(TSubclassOf<class AItem> Item, class AFSDPlayerState* Player, EElectricalSMGUpgrades upgradeType, class UObject* __WorldContext, FGearStatEntry& GearStatEntry, bool& HasUpgradedValue);
    void UPGDESC_DamageBonus_Flat(TSubclassOf<class AItem> Item, class AFSDPlayerState* Player, class UDamageClass* DamageClass, FText StatName, TEnumAsByte<FormatPreviewStatusType::Type> FormatType, class UObject* __WorldContext, FGearStatEntry& GearStatEntry, bool& HasUpgradedValue);
    void UPGDESC_DamageBonus_DamageConversion(TSubclassOf<class AItem> Item, TSubclassOf<class AActor> upgradedItem, class AFSDPlayerState* Player, class UDamageClass* DamageClass, FText StatName, bool OverrideStatType, TEnumAsByte<FormatWeaponStatType::Type> StatTypeOverride, class UObject* __WorldContext, FGearStatEntry& GearStatEntry, bool& HasUpgradedValue);
    void UPGDESC_DamageBonus_PushStatus(TSubclassOf<class AActor> Item, class AFSDPlayerState* Player, TSubclassOf<class UStatusEffect> StatusEffect, FText StatName, class UObject* __WorldContext, FGearStatEntry& GearStatEntry, bool& HasUpgradedValue);
    void UPGDESC_AmmoDriven(TSubclassOf<class AItem> Item, class AFSDPlayerState* Player, EAmmoDrivenWeapnUpgradeType upgradeType, bool OverrideStatType, TEnumAsByte<FormatWeaponStatType::Type> StatTypeOverride, class UObject* __WorldContext, FGearStatEntry& GearStatEntry, bool& HasAnyUpgrades);
    void UPGDESC_Damage(TSubclassOf<class AActor>& Item, TSubclassOf<class AActor> upgradedItem, class AFSDPlayerState*& Player, EDamageUpgrade upgradeType, FText Prefix, EDamageComponentType DamageComponentType, class UObject* __WorldContext, FGearStatEntry& GearStatEntry, bool& HasUpgradedValue);
    void UPGDESC_HitScan(TSubclassOf<class AItem> Item, class AFSDPlayerState* Player, EHitScanBaseUpgradeType upgradeType, class UObject* __WorldContext, FGearStatEntry& GearStatEntry, bool& HasAnyUpgrades);
    void UPGDESC_SingleUsable_UseDuration(TSubclassOf<class AItem> Item, TSubclassOf<class AActor> subItem, class AFSDPlayerState* Player, class UObject* __WorldContext, FGearStatEntry& GearStatEntry);
    void UPGDESC_Item(class AFSDPlayerState* Player, TSubclassOf<class AItem> Item, EInventoryItemUpgradeType upgradeType, class UObject* __WorldContext, FGearStatEntry& GearStatEntry, bool& HasUpgradedValue);
    void UPGDESC_Flare_Base(TSubclassOf<class AFlare> flareClass, class AFSDPlayerState* Player, EFlareUpgradeType upgradeType, class UObject* __WorldContext, FGearStatEntry& GearStatEntry);
    void UPGDESC_Drills(TSubclassOf<class AItem> Item, class AFSDPlayerState* Player, EDoubleDrillUpgradeType upgradeType, class UObject* __WorldContext, FGearStatEntry& GearStatEntry, bool& Has Upgraded Value);
    void UPGDESC_Capacity(TSubclassOf<class AActor> upgradedItem, class AFSDPlayerState* Player, int32 componentIndex, class UObject* __WorldContext, FGearStatEntry& GearStatEntry);
    void UPGDESC_HitScan_Bullets(TSubclassOf<class AItem> Item, class AFSDPlayerState* Player, class UObject* __WorldContext, FGearStatEntry& GearStatEntry, bool& HasUpgradedValue);
};

#endif
