#ifndef UE4SS_SDK__SCREEN_MissionSelectionMK3_HPP
#define UE4SS_SDK__SCREEN_MissionSelectionMK3_HPP

class U_SCREEN_MissionSelectionMK3_C : public UWindowWidget
{
    FPointerToUberGraphFrame UberGraphFrame;
    class UAnimatedStaticOverlay_WithScanlines_C* AnimatedStaticOverlay_WithScanlines;
    class UBasic_ButtonScalable2_C* BTN_Close;
    class UBasic_ButtonScalable2_C* BTN_Join;
    class UBasic_ButtonScalable2_C* BTN_ServerList;
    class UCanvasPanel* CanvasPanel_PannerOuter;
    class UImage* ImageClouds01;
    class UImage* ImageClouds02;
    class UITM_MisSel_Biome_C* ITEM_Biome_AzureWeald;
    class UITM_MisSel_Biome_C* ITEM_Biome_Crystal;
    class UITM_MisSel_Biome_C* ITEM_Biome_Dense;
    class UITM_MisSel_Biome_C* ITEM_Biome_Fungus;
    class UITM_MisSel_Biome_C* ITEM_Biome_Glacial;
    class UITM_MisSel_Biome_C* ITEM_Biome_HollowBough;
    class UITM_MisSel_Biome_C* ITEM_Biome_Magma;
    class UITM_MisSel_Biome_C* ITEM_Biome_Radioactive;
    class UITM_MisSel_Biome_C* ITEM_Biome_Salt;
    class UITM_MisSel_Biome_C* ITEM_Biome_Sandblasted;
    class UITM_MisSel_BG_Planet_C* ITEM_MissionSelection_BG;
    class UITM_MisSel_FullBiome_C* ITEM_MissionSelection_FullBiome;
    class UITM_MisSel_Timer_C* ITEM_MissionSelection_Timer;
    class UITM_CampaignProgress_C* ITM_CampaignProgressMain;
    class UITM_Challenge_InfoBox_C* ITM_Challenge_InfoBox;
    class UITM_MisSel_PlanetZone_C* ITM_LockZone_1;
    class UITM_MisSel_PlanetZone_C* ITM_LockZone_2;
    class UITM_MisSel_PlanetZone_C* ITM_LockZone_3;
    class UITM_MisSel_PlanetZone_C* ITM_LockZone_4;
    class ULobby_BarTop_Countdown_C* Lobby_BarTop_Countdown;
    class USafeZone* PlatformSafeZone;
    class UITM_MisSel_RegionImage_C* Region_AzureWeald;
    class UITM_MisSel_RegionImage_C* Region_CrystallineCaverns;
    class UITM_MisSel_RegionImage_C* Region_DenseBiozone;
    class UITM_MisSel_RegionImage_C* Region_FungusBogs;
    class UITM_MisSel_RegionImage_C* Region_GlacialStrata;
    class UITM_MisSel_RegionImage_C* Region_HollowBough;
    class UITM_MisSel_RegionImage_C* Region_MagmaCore;
    class UITM_MisSel_RegionImage_C* Region_Radioactive;
    class UITM_MisSel_RegionImage_C* Region_SaltPits;
    class UITM_MisSel_RegionImage_C* Region_Sandblasted;
    class UHorizontalBox* SelectionBox_Active;
    class UUI_AdvancedLabel_C* UI_AdvancedLabel;
    class UUI_PlayerSpeaking_List_C* UI_PlayerSpeaking_List;
    class UWND_MisSel_BiomeDescription_C* WINDOW_MissionSelection_BiomeDescription;
    class UWND_MisSel_MissionDescription_C* WINDOW_MissionSelection_MissionDescription;
    class UWND_MisSel_MissionOptions_C* WINDOW_MissionSelection_MissionOptions;
    class UImage* Zone1_AnimatedPlague;
    class UImage* Zone1_Outline;
    class UImage* Zone2_AnimatedPlague;
    class UImage* Zone2_Outline;
    class UImage* Zone3_AnimatedPlague;
    class UImage* Zone3_Outline;
    class UImage* Zone4_AnimatedPlague;
    class UImage* Zone4_Outline;
    class UImage* Zone_Outlines;
    class UImage* ZoneBorders;
    TArray<class UITM_MisSel_Biome_C*> Biomes;
    class UITM_MisSel_MissionMapIcon_C* SelectedMissionIcon;
    class UITM_MisSel_Biome_C* SelectedBiome;
    TArray<class UITM_MisSel_PlanetZone_C*> ZoneLocks;
    TArray<class UBiome*> NewBiomes;
    FVector2D CurrPos;
    FVector2D TargetPos;
    bool IsBiomeHovered;
    bool CanParalaxCamera;
    float BiomeHoverStartTime;
    TArray<class UImage*> ZoneOutlines;

    void HighlightChallenges(const TArray<class UObject*>& assetReferences, bool ShouldHighlight, class USeasonChallenge* Challenge);
    FEventReply OnKeyDown(FGeometry MyGeometry, FKeyEvent InKeyEvent);
    void ClearServerListMissionRestrictions();
    FEventReply OnMouseButtonUp(FGeometry MyGeometry, const FPointerEvent& MouseEvent);
    void UpdateMapPan(bool SnapToMouse);
    void CheckForNewZones();
    void GetAvailableBiomes(TArray<class UITM_MisSel_Biome_C*>& AvailableBiomes1);
    void GetMode(TEnumAsByte<EMissionSelection_Mode::Type>& Mode);
    void ShouldEnableQuickJoin(bool& Show);
    void HandleButtonVisibility();
    void GetMission_CheckBiome(class UGeneratedMission*& mission);
    FEventReply OnKeyUp(FGeometry MyGeometry, FKeyEvent InKeyEvent);
    void GetMission(class UGeneratedMission*& mission);
    bool IsMissionLocked(class UGeneratedMission* mission);
    void GetActiveSelectionMode(TEnumAsByte<EMissionSelection_Mode::Type>& NewParam);
    void GetController(class ABP_PlayerController_SpaceRig_C*& AsBP Player Controller Space Rig);
    void GetMissionBiome(class UBiome* Biome, class UITM_MisSel_Biome_C*& Array Element);
    void OnFailure_ED6FBDF64F71976389535788275C482E();
    void OnSuccess_ED6FBDF64F71976389535788275C482E();
    void PreConstruct(bool IsDesignTime);
    void Construct();
    void BiomeHovered(class UITM_MisSel_Biome_C* Biome);
    void BiomeSelected(class UITM_MisSel_Biome_C* Biome);
    void ShowMission();
    void ShowPlanet();
    void MissionHover(class UGeneratedMission* mission, bool IsHovering);
    void StartMission();
    void OnStartMission_Event_0();
    void ShowMode(TEnumAsByte<EMissionSelection_Mode::Type> Mode);
    void Back();
    void ShowServerBrowser();
    void BndEvt__BTN_ServerList_K2Node_ComponentBoundEvent_0_OnClicked__DelegateSignature();
    void BndEvt__BTN_Close_K2Node_ComponentBoundEvent_1_OnClicked__DelegateSignature();
    void InputSourceChanged(EFSDInputSource InputSource);
    void OnShown();
    void Tick(FGeometry MyGeometry, float InDeltaTime);
    void MissionSelected(class UITM_MisSel_MissionMapIcon_C* mission);
    void StartSoloMission();
    void OnClosed();
    void DifficultyChanged(class UDifficultySetting* NewDifficulty, class UGeneratedMission* mission);
    void StartupCameraPan();
    void OnStartSoloMission();
    void BndEvt__ITM_Challenge_InfoBox_K2Node_ComponentBoundEvent_1_OnChallengeHovered__DelegateSignature(TArray<class UObject*>& assetReferences, bool InHovered, class USeasonChallenge* Challenge);
    void ExecuteUbergraph__SCREEN_MissionSelectionMK3(int32 EntryPoint);
};

#endif
