#ifndef UE4SS_SDK_BP_HackingPod_HPP
#define UE4SS_SDK_BP_HackingPod_HPP

class ABP_HackingPod_C : public AFacilityHackingPod
{
    FPointerToUberGraphFrame UberGraphFrame;
    class UTerrainDetectComponent* TerrainDetect3;
    class UTerrainDetectComponent* TerrainDetect2;
    class UTerrainDetectComponent* TerrainDetect1;
    class UInstantUsable* PettingUse;
    class UStaticMeshComponent* RangeSphere;
    class UChildActorComponent* BP_OxygenTankSound;
    class UChildActorComponent* BP_OxygenTank1;
    class UOxygenSourceComponent* OxygenSource;
    class UChildActorComponent* BP_OxygenTank;
    class USphereComponent* TriggerOnOffOutline;
    class UTerrainScannerStaticMesh* TerrainScannerStaticMesh;
    class UBillboardComponent* JunkSpawnPoint;
    class UPointLightComponent* PointLight1;
    class UPointLightComponent* PointLight3;
    class UPointLightComponent* PointLight2;
    class UPointLightComponent* PointLight;
    class USphereComponent* SaluteTrigger;
    class USphereComponent* PettingUseSphere;
    class USkeletalMeshComponent* Drill;
    class UAudioComponent* HackingPodHackingIdle;
    class USimpleObjectInfoComponent* SimpleObjectInfo;
    class UPointLightComponent* Light_FanRGB03;
    class UPointLightComponent* Light_FanRGB02;
    class UPointLightComponent* Light_FanRGB01;
    class UCapsuleComponent* BodyCollision;
    class UPointLightComponent* Light_Monitor;
    class UWidgetComponent* Widget_MonitorTop;
    class UWidgetComponent* Widget_MonitorRight;
    class UWidgetComponent* Widget_MonitorMiddle;
    class UWidgetComponent* Widget_MonitorLeft;
    class UWidgetComponent* UseButtonWidget;
    class UAutoCarverComponent* AutoCarver;
    class UDropToTerrainComponent* DropToTerrain;
    class UTerrainDetectComponent* TerrainDetect;
    class UTerrainPlacementComponent* terrainPlacement;
    class UOutlineComponent* outline;
    class UChildActorComponent* DispenserActor;
    class USkeletalMeshComponent* Base;
    class USingleUsableComponent* ActivateUsable;
    class USingleUsableComponent* ReviveUsable;
    class UCapsuleComponent* UseCapsule;
    class UObjectAttackerPositioning* ObjectAttackerPositioning;
    class UFriendlyHealthComponent* FriendlyHealth;
    class UTetherComponent* Tether;
    TArray<class AActor*> ChildTethers;
    TArray<FLinearColor> Fans_StartColor;
    TArray<FLinearColor> Fans_EndColor;
    TArray<FLinearColor> Fans_ColorArray;
    TArray<FLinearColor> LightColors;
    FTimerHandle ResizeCarverTimer;
    bool IsFacilityMission;
    float OutlineTime;
    float LightMonitorIntensity;
    FBP_HackingPod_COpenChanged OpenChanged;
    void OpenChanged(bool Open);
    bool Open;
    bool HackingStarted;
    bool HackingOver;
    TEnumAsByte<ETetherDispenserState::Type> DispenserState;
    FBP_HackingPod_CStateChanged StateChanged;
    void StateChanged(TEnumAsByte<ETetherDispenserState::Type> State);
    class USingleUsableComponent* NewVar_0;
    class UParticleSystemComponent* ThrusterParticles;
    class UAudioComponent* ThrusterSound;
    TArray<class APlayerCharacter*> playersInside;
    bool HasActivated;
    class UMaterialInstanceDynamic* CornerColors;
    TArray<class TSubclassOf<AActor>> JunkActors;
    int32 MaxJunkSpawns;
    bool ShowRange;
    bool ConnectedToGoal;

    bool GetIsTargetable();
    FVector GetTargetCenterMass();
    class UHealthComponentBase* GetTargetHealthComponent();
    void SetShowRange(bool ShowRange);
    void UpdatePlayerCount();
    void EnableScreens(bool ScreensActive);
    void FanColorsIntact(bool& FansIntact);
    void HackingInProgress(bool& NewParam);
    void ReconnectTethers();
    void GetDispenser(class ABP_TetherDispenser_C*& AsBP Tether Dispenser);
    void GetIgnoreTethers(TArray<class AActor*>& ChildTethers);
    void UserConstructionScript();
    void OnTick_4437D92344C73CCB9F96AB832CABCA51(float DeltaTime, float NormalizedTime);
    void Completed_4437D92344C73CCB9F96AB832CABCA51(float DeltaTime, float NormalizedTime);
    void ShowDamageEffects(class UParticleSystem* Particles, FVector Location, FRotator Orientation);
    void ReceiveBeginPlay();
    void OnDroppodImpact();
    void BndEvt__Tether_K2Node_ComponentBoundEvent_0_TeherMessage_Delegate__DelegateSignature(const FName& Message);
    void BndEvt__FriendlyHealth_K2Node_ComponentBoundEvent_1_DeathSig__DelegateSignature(class UHealthComponentBase* HealthComponent);
    void BndEvt__SingleUsable_K2Node_ComponentBoundEvent_2_UsedBySignature__DelegateSignature(class APlayerCharacter* User, EInputKeys Key);
    void BndEvt__FriendlyHealth_K2Node_ComponentBoundEvent_3_DamageSig__DelegateSignature(float Amount);
    void BndEvt__ActivateUsable_K2Node_ComponentBoundEvent_6_UsedBySignature__DelegateSignature(class APlayerCharacter* User, EInputKeys Key);
    void SetLightColor(int32 Index);
    void BndEvt__DropToTerrain_K2Node_ComponentBoundEvent_7_OnIsFallingToTerrainChanged__DelegateSignature(bool IsFalling);
    void ManageOutlines();
    void OnDropStarted();
    void DeployAnimations();
    void OnDroppodCloseToImpact();
    void ResizeCarver();
    void UpdateUseIcon();
    void BndEvt__ReviveUsable_K2Node_ComponentBoundEvent_0_UsableChangedSignature__DelegateSignature(bool CanUse);
    void StartFanColoring();
    void BndEvt__ActivateUsable_K2Node_ComponentBoundEvent_9_UsableChangedSignature__DelegateSignature(bool CanUse);
    void TakeOff();
    void BndEvt__Sphere_K2Node_ComponentBoundEvent_5_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const FHitResult& SweepResult);
    void OnBoscoSalute_Event_0(class APlayerCharacter* ShoutingPlayer);
    void All_Pet();
    void OnEnterState(EHackingPodState NextState);
    void OnExitState(EHackingPodState oldState);
    void BndEvt__TriggerOutline_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const FHitResult& SweepResult);
    void BndEvt__TriggerOutline_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
    void All_PlaySalute(class AActor* Saluter);
    void BndEvt__Tether_K2Node_ComponentBoundEvent_12_TetherConnectionChanged_Deletage__DelegateSignature(class UTetherComponent* frontConnection, class UTetherComponent* backConnection);
    void ItemTaken(class AActor* spawnedItem);
    void OnPlayerJoined_Event_0(class AFSDPlayerState* PlayerState);
    void OnPlayerLeave_Event_0(class AFSDPlayerState* PlayerState);
    void BndEvt__PettingUse_K2Node_ComponentBoundEvent_13_UsedBySignature__DelegateSignature(class APlayerCharacter* User, EInputKeys Key);
    void ExecuteUbergraph_BP_HackingPod(int32 EntryPoint);
    void StateChanged__DelegateSignature(TEnumAsByte<ETetherDispenserState::Type> State);
    void OpenChanged__DelegateSignature(bool Open);
};

#endif
