#ifndef UE4SS_SDK_ENE_FacilityCaretaker_HPP
#define UE4SS_SDK_ENE_FacilityCaretaker_HPP

class AENE_FacilityCaretaker_C : public ACaretaker
{
    FPointerToUberGraphFrame UberGraphFrame;
    class UDamageComponent* EndKillAllEnemiesDamageNoKnockBack;
    class UPointLightComponent* PointLight8;
    class USceneComponent* TopHatches;
    class UPointLightComponent* PointLight7;
    class USceneComponent* TurretHatchL;
    class UPointLightComponent* PointLight6;
    class USceneComponent* TurretHatchR;
    class UPointLightComponent* PointLight5;
    class USceneComponent* TurretHatchF;
    class UPointLightComponent* PointLight4;
    class USceneComponent* TurretHatchB;
    class UStaticMeshComponent* SM_Ear_collider3;
    class UStaticMeshComponent* SM_Ear_collider2;
    class UStaticMeshComponent* SM_Ear_collider1;
    class UStaticMeshComponent* SM_Ear_collider4;
    class UStaticMeshComponent* SM_Caretaker_Collider;
    class UTerrainScannerStaticMesh* TerrainScannerStaticMesh;
    class UBP_Caretaker_AoE_Attack_C* AoE_Attack;
    class UBP_CaretakerShredderAction_C* ShredderAction;
    class UNiagaraComponent* NS_Gravity_Effect;
    class UStaticMeshComponent* PlayerCollisionTop;
    class UStaticMeshComponent* PlayerCollisionBottom;
    class UWeakpointGlowComponent* WeakpointGlow;
    class UPointLightComponent* BossLight;
    class UEnemyBufferComponent* EnemyBuffer;
    class UHealthDamageTracker* StageDamageTracker;
    class UDestructibleSubHealthComponent* WeakpointHealth_04;
    class UDestructibleSubHealthComponent* WeakpointHealth_03;
    class UDestructibleSubHealthComponent* WeakpointHealth_02;
    class UDestructibleSubHealthComponent* WeakpointHealth_01;
    class UCapsuleComponent* Weakpoint_04;
    class UCapsuleComponent* Weakpoint_03;
    class UCapsuleComponent* Weakpoint_02;
    class UCapsuleComponent* Weakpoint_01;
    class UPointLightComponent* PointLight;
    class UPointLightComponent* PointLight3;
    class UPointLightComponent* PointLight2;
    class UPointLightComponent* PointLight1;
    class UAudioComponent* FacilityBossEyeOpen_Cue;
    class UBP_CaretakerDroneAction_UNUSED_C* droneAction;
    class UBP_CaretakerMortarAction_C* MortarAction;
    class UBP_CaretakerTurretAction_C* TurretAction;
    class USpotLightComponent* SpotLight3;
    class USpotLightComponent* SpotLight2;
    class USpotLightComponent* SpotLight1;
    class USpotLightComponent* SpotLight;
    class UDamageComponent* EndExpolsionDamage;
    class UStaticMeshComponent* SM_LightCone003;
    class UStaticMeshComponent* SM_LightCone004;
    class UStaticMeshComponent* SM_LightCone002;
    class UStaticMeshComponent* SM_LightCone001;
    class UOutlineComponent* outline;
    class UEnemyComponent* enemy;
    float TopLight_Intensity_39A7A1AF482156613F7234B9DF15400A;
    TEnumAsByte<ETimelineDirection::Type> TopLight__Direction_39A7A1AF482156613F7234B9DF15400A;
    class UTimelineComponent* TopLight;
    float HatchLights_Intensity_FCD392DB40C72D74165F7DA7BA20EA50;
    TEnumAsByte<ETimelineDirection::Type> HatchLights__Direction_FCD392DB40C72D74165F7DA7BA20EA50;
    class UTimelineComponent* HatchLights;
    float Timeline_0_PointLight_1EE58BD34489027A6F9C488828BDFD2D;
    TEnumAsByte<ETimelineDirection::Type> Timeline_0__Direction_1EE58BD34489027A6F9C488828BDFD2D;
    class UTimelineComponent* Timeline_0;
    float FadeEyeLights_PointLight_AE68C0994C370ED22D4F1E9A5F7F676B;
    TEnumAsByte<ETimelineDirection::Type> FadeEyeLights__Direction_AE68C0994C370ED22D4F1E9A5F7F676B;
    class UTimelineComponent* FadeEyeLights;
    FENE_FacilityCaretaker_COnStageChangedEvent OnStageChangedEvent;
    void OnStageChangedEvent(int32 NewParam);
    bool Initialized;
    float OpenEyeLightIntensity;
    float ClosedEyeLightIntensity;
    float OpenEyePointLightIntensity;
    TMap<class UDestructibleSubHealthComponent*, class UNiagaraComponent*> WeakpontParticles;
    TArray<int32> RandomIndicies;
    bool CanOpenEyes;
    bool Cheat_SkipWakup;
    TMap<UDestructibleSubHealthComponent*, int32> HealthToGlow;
    bool IsLastStage;
    class ABP_MainFacility_DataVault_C* FacilityPlatform;

    class AActor* GetBossActor();
    TSubclassOf<class UBossFightWidget> GetWidgetClass();
    bool IsStillValid();
    void CheckIfOnlyOnePlayerIsAllive();
    void Begin Opening Eyes();
    void DeactivateWeakpointParticle(const class UDestructibleSubHealthComponent*& Key);
    void ActivateRandomAction(class UCaretakerActionComponent*& Output_Get);
    void GetRandomStageActions(TArray<class UCaretakerActionComponent*>& Array);
    void TurnOffWeakpointParticles();
    void GetFacility(class ABP_MainFacility_DataVault_C*& mainFacility);
    int32 GetNumDeadWeakpoints();
    void ToggleWeakpoints(bool Active);
    void ToggleWeakpoint(class UDestructibleSubHealthComponent* Health, bool Active);
    bool AreWeapointsDead();
    void GetEyeLights(class USkeletalMeshComponent* eye, class UStaticMeshComponent*& LightCone, class UMaterialInstanceDynamic*& LightConeMaterial, class USpotLightComponent*& SpotLight, class UPointLightComponent*& PoiintLight);
    void UserConstructionScript();
    void FadeEyeLights__FinishedFunc();
    void FadeEyeLights__UpdateFunc();
    void Timeline_0__FinishedFunc();
    void Timeline_0__UpdateFunc();
    void HatchLights__FinishedFunc();
    void HatchLights__UpdateFunc();
    void TopLight__FinishedFunc();
    void TopLight__UpdateFunc();
    void OnNotifyEnd_71A60B5C44F91C6FC6CCF3AE4CA1C54C(FName NotifyName);
    void OnNotifyBegin_71A60B5C44F91C6FC6CCF3AE4CA1C54C(FName NotifyName);
    void OnInterrupted_71A60B5C44F91C6FC6CCF3AE4CA1C54C(FName NotifyName);
    void OnBlendOut_71A60B5C44F91C6FC6CCF3AE4CA1C54C(FName NotifyName);
    void OnCompleted_71A60B5C44F91C6FC6CCF3AE4CA1C54C(FName NotifyName);
    void OnNotifyEnd_F46CBEE74DCE50E0AA03D7BBC8E1F1CF(FName NotifyName);
    void OnNotifyBegin_F46CBEE74DCE50E0AA03D7BBC8E1F1CF(FName NotifyName);
    void OnInterrupted_F46CBEE74DCE50E0AA03D7BBC8E1F1CF(FName NotifyName);
    void OnBlendOut_F46CBEE74DCE50E0AA03D7BBC8E1F1CF(FName NotifyName);
    void OnCompleted_F46CBEE74DCE50E0AA03D7BBC8E1F1CF(FName NotifyName);
    void OnEyeOpened(class USkeletalMeshComponent* eye);
    void OnEyeClosed(class USkeletalMeshComponent* eye);
    void StageTransition();
    void CreateBossFIght();
    void BndEvt__Health_K2Node_ComponentBoundEvent_3_DeathSig__DelegateSignature(class UHealthComponentBase* HealthComponent);
    void ReceiveBeginPlay();
    void OnSecondStage();
    void OnThirdStage();
    void OnNewStage(int32 stageIndex);
    void BndEvt__WeakpointHealth_01_K2Node_ComponentBoundEvent_0_SubHealthDestroyed__DelegateSignature(class UDestructibleSubHealthComponent* subHealth);
    void BndEvt__WeakpointHealth_02_K2Node_ComponentBoundEvent_1_SubHealthDestroyed__DelegateSignature(class UDestructibleSubHealthComponent* subHealth);
    void BndEvt__WeakpointHealth_03_K2Node_ComponentBoundEvent_2_SubHealthDestroyed__DelegateSignature(class UDestructibleSubHealthComponent* subHealth);
    void BndEvt__WeakpointHealth_04_K2Node_ComponentBoundEvent_4_SubHealthDestroyed__DelegateSignature(class UDestructibleSubHealthComponent* subHealth);
    void OnFirstStage();
    void BndEvt__DamageTracker_K2Node_ComponentBoundEvent_6_DamageSig__DelegateSignature(float Amount);
    void FourthStage();
    void EndFirstStage();
    void EndSecondStage();
    void EndThirdStage();
    void EndFourthStage();
    void OnFithStage();
    void EndFithStage();
    void Stage_6();
    void End_Stage_6();
    void Stage_7();
    void Stage_8();
    void All_Scream();
    void Scream_Local();
    void End_Stage_7();
    void Cheat_SpawnTurrets();
    void Cheat_Trigger();
    void Cheat_Kill();
    void BndEvt__AoE_Attack_K2Node_ComponentBoundEvent_8_OnChargeCountChanged__DelegateSignature(int32 ChargeCount);
    void Start Spawn Stage();
    void StartWeakspot Stage();
    void BndEvt__Health_K2Node_ComponentBoundEvent_7_HealthSegmentChange__DelegateSignature(int32 currSegment, int32 prevSegment);
    void TurnOnHatchLights();
    void TurnOffHatchLights();
    void TurnOnTopLight();
    void TurnOffTopLight();
    void Play_EyesWakeup();
    void SpawnPatrolBots();
    void KillAllEnemiesInArea();
    void CheckForLastPlayerStanding();
    void ExecuteUbergraph_ENE_FacilityCaretaker(int32 EntryPoint);
    void OnStageChangedEvent__DelegateSignature(int32 NewParam);
};

#endif
